#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Affected Flow version,Description
32928,TYPO3.Flow,Task,"",Rejected,Should have,Cleanup ControllerContext,Bastian Waidelich,"",2012-03-14 13:22,MVC,"",2012-01-02,"","",0,2012-01-02 06:47,"","",413650,"","","@\TYPO3\FLOW3\MVC\Controller\ControllerContext@ could use some cleanup:
- arguments (\TYPO3\FLOW3\MVC\Controller\Arguments) are never used -> deprecate
- flashMessageContainer (\TYPO3\FLOW3\MVC\FlashMessageContainer) is global, thus no need to have it in the controller context -> deprecate"
32930,TYPO3.Fluid,Feature,"",Resolved,Must have,Create a Standalone View,Fernando Arconada,Sebastian Kurfuerst,2012-01-29 13:34,View,1.1,2012-01-02,"","",100,2012-01-02 08:48,"","",413750,"","","Fluid need a Standalone Template to be able to render emails for example. Consider that template rendering could be done inside aspects and services where there is no ControllerContext, Request, Response..."
32959,TYPO3.Flow,Bug,"",Resolved,Should have,Exception thrown on missing role definition,MKI-Miro ,Andreas Förthner,2012-05-18 12:59,Security,1.0.5,2012-01-04,"","",0,2012-01-04 04:31,"","",415200,"",FLOW3 1.0.2,"Notice: Undefined index: Visitor in C:\f3cache\Development\Cache\Code\FLOW3_Object_Classes\TYPO3_FLOW3_Security_Policy_PolicyService_Original.php line 296
39 TYPO3\FLOW3\Error\ErrorHandler::handleError(8, ""Undefined index: Visitor"", ""C:\f3cache\Development\Cache\Code\FLOW3_Object_Cla?3_FLOW3_Security_Policy_PolicyService_Original.php"", 296, array)

38 TYPO3\FLOW3\Security\Policy\PolicyService_Original::getAllParentRoles(TYPO3\FLOW3\Security\Policy\Role)

37 TYPO3\FLOW3\Security\Context_Original::getRoles()

36 TYPO3\FLOW3\Security\Context::getRoles()

35 call_user_func_array(array, array)

34 TYPO3\FLOW3\Security\Context::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

33 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

32 TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect_Original::callMethodOnOriginalSessionObject(TYPO3\FLOW3\AOP\JoinPoint)

31 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

30 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

29 TYPO3\FLOW3\Security\Context::getRoles()

28 call_user_func_array(array, array)

27 TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect_Original::callMethodOnOriginalSessionObject(TYPO3\FLOW3\AOP\JoinPoint)

26 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

25 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

24 TYPO3\FLOW3\Security\Context::getRoles()

23 TYPO3\FLOW3\Security\Aspect\PersistenceQueryRewritingAspect_Original::rewriteQomQuery(TYPO3\FLOW3\AOP\JoinPoint)

22 TYPO3\FLOW3\AOP\Advice\AbstractAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

21 TYPO3\FLOW3\Persistence\Doctrine\Query::execute()

20 TYPO3\FLOW3\Persistence\Repository_Original::findAll()

19 Intranet\RealityTerasa\Controller\FlatController_Original::indexAction()

18 call_user_func_array(array, array)

17 TYPO3\FLOW3\MVC\Controller\ActionController_Original::callActionMethod()

16 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

15 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

14 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

13 call_user_func_array(array, array)

12 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

11 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

10 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)

9 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

8 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

7 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

3 TYPO3\FLOW3\MVC\Web\RequestHandler_Original::handleRequest()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
32984,TYPO3.Flow,Bug,"",Resolved,Must have,ArrayMergeRecursiveOverrule does not override arrays with simple types,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-01-17 21:26,Utility,1.1,2012-01-05,"","",100,2012-01-05 01:56,"","",416200,"",FLOW3 1.0.0,"While working on some improvements for the Configuration subsystem, I stumbled over the following issue in arrayMergeRecursiveOverrule:

If the first element contains an array, and the second element contains a simple type at a certain position, the ORIGINAL array is used. I think that's a bug, preventing to reset arrays in configuration.

The following test demonstrates this:

<pre><code class=""php"">
'inputArray1' => array(
	'k1' => 'v1',
	'k2' => array(
		'k2.1' => 'v2.1'
	),
),
'inputArray2' => array(
	'k2' => 'v2a',
	'k3' => 'v3'
),
// That's what SHOULD happen IMHO
'expected' => array(
	'k1' => 'v1',
	'k2' => 'v2a',
	'k3' => 'v3'
)
// That's what happens currently
'actual' => array(
	'k1' => 'v1',
	'k2' => array(
		'k2.1' => 'v2.1'
	),
	'k3' => 'v3'
)
</code></pre>

This has drastical implications on configuration handling, as it makes it impossible to override an array with NULL:

<pre>
// per-package settings.yaml
Foo:
  Bar:
    Baz: value

// global settings.yaml
Foo:
  Bar: NULL

// Expected:
array('Foo' => array('Bar' => NULL))

// Actual (right now)
array('Foo' => array('Bar' => array('Baz' => 'value')))
</pre>
"
32985,TYPO3.Flow,Feature,"",New,Should have,Implement Processing Rules when merging numerically-indexed arrays,Sebastian Kurfuerst,"",2012-05-30 03:35,Utility,"",2012-01-05,"","",0,2012-01-05 02:25,"","",416250,"","","*This is an improvement to the @Utility\Arrays::arrayMergeRecursiveOverrule@ function, leading to enormous flexibility gains for YAML Configuration Handling.*

Description of the problem and possible solution:

<pre>
	 * Sometimes, you need to merge numerically indexed PHP arrays; and as this function does
	 * the merging by key, this can lead to undesired results, as the following example demonstrates:
	 *
	 * $array1 = array('a1', 'b1', 'c1', 'd1');
	 * $array2 = array('a2', 'b2', 'c2');
	 * -> the resulting array is now array('a2', 'b2', 'c2', 'd1'), which is usually
	 *    not the desired result. Often, you want to append, prepend or replace the collection.
	 *
	 * To define the behavior with indexed collections, a *Processing Rule* can be specified
	 * in the second array using the special *__processingRule* Array Key. The following
	 * Processing Rules are supported:
	 *
	 * APPEND
	 * ------
	 * The most common processing rule. Appends $array2 to $array1, renumbering the
	 * numerical indices in $array2 and (if necessary) overriding the associative indices in $array1.
	 *
	 * Example:
	 * $array1 = array('a1', 'b1', 'c1', 'd1');
	 * $array2 = array('__processingRule' => 'APPEND', 'a2', 'b2', 'c2');
	 * --> Result: array('a1', 'b1', 'c1', 'd1', 'a2', 'b2', 'c2');
	 *
	 * PREPEND
	 * -------
	 * Prepends $array2 before $array1, renumbering the numerical indices in
	 * $array1 and (if necessary) overriding the associative indices in $array2.
	 *
	 * Example:
	 * $array1 = array('a1', 'b1', 'c1', 'd1');
	 * $array2 = array('__processingRule' => 'PREPEND', 'a2', 'b2', 'c2');
	 * --> Result: array('a2', 'b2', 'c2', 'a1', 'b1', 'c1', 'd1');
	 *
	 * REPLACE
	 * -------
	 * Completely replaces $array1 with $array2.
	 *
	 * Example:
	 * $array1 = array('a1', 'b1', 'c1', 'd1');
	 * $array2 = array('__processingRule' => 'REPLACE', 'a2', 'b2', 'c2');
	 * --> Result: array('a2', 'b2', 'c2');
</pre>

With this addition, the following becomes possible in YAML configuration files:

<pre>
// per-package Settings.yaml

  Foo:
    Bar: [t1, t2]

// global Settings.yaml


  Foo:
    Bar:
      __processingRule: PREPEND
      0: o2
      1: o3

// Output:
array('Foo' => array('Bar' => array('o2', 'o3', 't1', 't2')));
</pre>

As soon as the Symfony YAML parser supports custom callbacks for *YAML Tags*, the processing rules could be written as:

<pre>
  Foo:
    Bar: !PREPEND
      0: o2
      1: o3
</pre>

... which is again even nicer :)"
32990,TYPO3.Flow,Feature,"",Rejected,Should have,Account party property should be persistable through the account,Aske Ertmann,Aske Ertmann,2012-01-05 07:59,Persistence,"",2012-01-05,"","",0,2012-01-05 05:00,"","",416500,"","","Before:
* @ORM\ManyToOne(inversedBy=""accounts"")
After:
* @ORM\ManyToOne(inversedBy=""accounts"",cascade={""all""})

In order to make account party properties changes through a fluid form with the account as the property."
32991,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong default password hashing strategy,Karsten Dambekalns,Karsten Dambekalns,2012-05-03 20:38,Security,1.1,2012-01-05,"","",100,2012-01-05 05:33,"","",416550,"",Git master,"In https://review.typo3.org/5756 the default hashing strategy was changed to BCrypt.

Later, in https://review.typo3.org/6598, support for multiple strategies was added. But that change make PBKDF2 the default again."
33018,TYPO3.Flow,Feature,"",New,Should have,Translator should support override of labels from other packages,Christopher Hlubek,"",2012-01-06 07:05,I18n,"",2012-01-06,"","",0,2012-01-06 07:05,"","",417800,"","","We are somewhat limited in the extensibility of translations with the current approach. The use case would be a package that defines labels for a reusable component (e.g. a controller with flash messages) or the default labels of FLOW3. How can a user package override these values?

Even if we will not implement this right away we should make sure that our current implementation and API supports this use case, because re-use will be limited if translations of packages cannot be overriden.

Of course there could be problems with loading order of resources but I think the abstraction with XliffModel could support this use case by chaining multiple XliffModels to allow for a inheritance of translations. The question would remain how this could be configured."
33024,TYPO3.Flow,Bug,"",Accepted,Must have,Exception when validating a float in a Model with the Number validator,Jonny ,Karsten Dambekalns,2012-03-07 16:08,I18n,"",2012-01-06,"","",0,2012-01-06 10:38,"","",418100,"",FLOW3 1.0.2,"Warning: array_merge(): Argument #1 is not an array in /Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_I18n_Cldr_CldrModel_Original.php line 356
29 TYPO3\FLOW3\Error\ErrorHandler::handleError(2, ""array_merge(): Argument #1 is not an array"", ""asses/TYPO3_FLOW3_I18n_Cldr_CldrModel_Original.php"", 356, array)

28 array_merge(boolean, array)

27 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, ""dates/calendars/calendar[@type=&quot;roc&quot;]/dateTimeFormats/dateTimeFormatLength"")

26 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, ""dates/calendars/calendar[@type=&quot;roc&quot;]/dateTimeFormats"")

25 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, ""dates/calendars/calendar[@type=&quot;roc&quot;]"")

24 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, ""dates/calendars"")

23 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, ""dates"")

22 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::resolveAliases(array, """")

21 TYPO3\FLOW3\I18n\Cldr\CldrModel_Original::initializeObject(1)

20 TYPO3\FLOW3\I18n\Cldr\CldrModel::__construct(array)

19 TYPO3\FLOW3\I18n\Cldr\CldrRepository_Original::getModelForLocale(TYPO3\FLOW3\I18n\Locale)

18 TYPO3\FLOW3\I18n\Cldr\Reader\NumbersReader_Original::parseFormatFromCldr(TYPO3\FLOW3\I18n\Locale, ""decimal"", ""default"")

17 TYPO3\FLOW3\I18n\Parser\NumberParser_Original::parseDecimalNumber(0, TYPO3\FLOW3\I18n\Locale, ""default"", boolean)

16 TYPO3\FLOW3\Validation\Validator\NumberValidator_Original::isValid(0)

15 TYPO3\FLOW3\Validation\Validator\AbstractValidator::validate(0)

14 TYPO3\FLOW3\Validation\Validator\GenericObjectValidator_Original::checkProperty(0, SplObjectStorage, TYPO3\FLOW3\Error\Result)

13 TYPO3\FLOW3\Validation\Validator\GenericObjectValidator_Original::validate(Spielmeister\Common\Domain\Model\Transaction)

12 TYPO3\FLOW3\Validation\Validator\ConjunctionValidator_Original::validate(Spielmeister\Common\Domain\Model\Transaction)

11 TYPO3\FLOW3\Persistence\Doctrine\PersistenceManager_Original::validateObject(Spielmeister\Common\Domain\Model\Transaction)

10 TYPO3\FLOW3\Persistence\Doctrine\PersistenceManager_Original::onFlush(Doctrine\ORM\Event\OnFlushEventArgs)

9 Doctrine\Common\EventManager::dispatchEvent(""onFlush"", Doctrine\ORM\Event\OnFlushEventArgs)

8 Doctrine\ORM\UnitOfWork::commit()

7 Doctrine\ORM\EntityManager::flush()

6 TYPO3\FLOW3\Persistence\Doctrine\PersistenceManager_Original::persistAll(""TYPO3\FLOW3\Core\Bootstrap::finishedRuntimeRun"")

5 call_user_func_array(array, array)

4 TYPO3\FLOW3\SignalSlot\Dispatcher::dispatch(""TYPO3\FLOW3\Core\Bootstrap"", ""finishedRuntimeRun"", array)

3 TYPO3\FLOW3\Core\Bootstrap::emitFinishedRuntimeRun()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


In Model:
<pre>
	/**
	 * The value
	 * @var float
     * @FLOW3\validate(type=""Number"")
	 */
	protected $value;


	/**
	 *
	 * @param float $value 
	 * @return void
	 */
	public function setValue($value) {
		$this->value = floatval($value);
	}
</pre>

When trying to persistent a Model with this Validation, i throws this Exception as shown.

I Think it may have something to do with the localization.

When changing it to float validation, it works fine."
33031,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,Readme.txt contains wrong tutorials URL,Felix Kopp,Karsten Dambekalns,2012-03-07 11:01,- Documentation -,1.0.4,2012-01-07,"","",100,2012-01-07 15:22,"","",418450,"",FLOW3 1.0.2,"First paragraph, http://flow3.typo3.org/documentation/tutorials can not be found.
Rather put http://flow3.typo3.org/documentation/quickstart.html ?"
33040,TYPO3.Flow,Task,"",Rejected,Could have,rename the default controller as DefaultController,Fernando Arconada,Karsten Dambekalns,2012-03-07 10:20,MVC,"",2012-01-08,"","",0,2012-01-08 06:12,"","",418900,"","",The code could be more readable if the default controller is renamed from StandardController to DefaultController
33043,TYPO3.Fluid,Bug,"",Resolved,Should have,f:identity.json wrong namespace,Pascal Walter,Karsten Dambekalns,2012-03-07 15:23,ViewHelpers,1.1,2012-01-08,"","",100,2012-01-08 08:00,"","",419050,"",FLOW3 1.0.2,"<pre>
/**
* @var \F3\FLOW3\Persistence\PersistenceManagerInterface
*/
protected $persistenceManager;

</pre>

It works because the property is injected via method-injection but its still wrong :)
Maybe there are some more miss spellings like this. Did someone search for them after namespace changed from \F3\?
"
33048,TYPO3.Flow,Bug,"",Resolved,Should have,flow3.bat gives wrong feedback,Daniel Felix,Karsten Dambekalns,2012-03-12 21:38,Core,1.0.4,2012-01-08,"","",100,2012-01-08 14:16,"","",419300,"",FLOW3 1.0.2,"Hi,

this is just a very little issue, but your flow3.bat gives  some wrong feedback.

If i callflow3.bat I currently get this feedback:

FLOW3 1.0.2 (""Development"" context)
usage: *./flow3* <command identifier>

See '*./flow3* help' for a list of all available commands.

This is quite wrong.

The correct response should be:
FLOW3 1.0.2 (""Development"" context)
usage: *flow3.bat* <command identifier>

See '*flow3.bat* help' for a list of all available commands."
33049,TYPO3.Flow,Feature,"",New,Could have,Allow configuration of context without environment variable (needed for IIS),Daniel Felix,"",2012-03-07 14:51,Core,"",2012-01-08,"","",0,2012-01-08 14:21,"","",419350,"","","Hi there,

I found some configuration in some of the Framework Packages corresponding the persistence:core:context. The comment just says that this should be set by the enviroment.

This is quite a good idea, but just for Apache Users. I tried FLOW3 on IIS, and as you self wrote on your Kickstart Tutorial - you haven't tested it on IIS.

Well the point is... IIS doesn't support VirtualHosts, so there is no way for me to define the needed context.

I've done a workaround and added a line of code to the @Web/index.php@
<pre>putenv(""FLOW3_CONTEXT=Development"")</pre>
But this won't be a great deal if i have a config like the @core:context@.

Maybe you could give this setting in the global @Settings.yaml@ a try."
33055,TYPO3.Flow,Bug,"",New,Must have,AccessDeniedException instead of WebRedirect,Patrick Pussar,"",2014-04-17 09:54,Security,"",2012-01-09,"","",0,2012-01-09 01:37,"","",419650,"",FLOW3 1.0.0,"After defining some restrictions via ACLs on a controller method and defining a WebRedirect I get an AccessDeniedException instead of a redirect.

After do some dirty hack in RequestDispatchingAspect.php:
//} catch (\TYPO3\FLOW3\Security\Exception\AuthenticationRequiredException $exception) { // PPUSSAR: Hot-Patch to get Web-Redirect working
} catch (\TYPO3\FLOW3\Security\Exception $exception) {

it works as expected.

Whether the catch method is to restrictive or the wrong exception is thrown."
33058,TYPO3.Flow,Feature,"",Rejected,Should have,Choice for XML Configuration,Aftab Naveed,Karsten Dambekalns,2012-03-07 10:06,Configuration,"",2012-01-09,"","",0,2012-01-09 04:05,"","",419800,"","","Though YAML seems to be much simpler then XML, but companies whose staff is trained to use XML instead of YAML. It would be a nice idea to have Configuration parser which could either use XML or YAML based on developer choice.
"
33069,TYPO3.Flow,Task,Task #51183: CLI improvements,New,Should have,"Make command output sparse, implement generic verbose switch",Christopher Hlubek,"",2013-08-19 08:33,Command,"",2012-01-09,"","",0,2012-01-09 10:09,"","",420300,"","",Following the Unix rules we should make the built-in command output less verbose. We should introduce a generic verbose switch that could be used to generate additional output.
33078,TYPO3.Flow,Bug,"",New,Should have,No Redirect to Login,Jörg Ohnheiser,"",2012-03-07 11:45,Security,"",2012-01-10,"","",0,2012-01-10 02:36,"","",420750,"",FLOW3 1.0.2,"I think this is a Bug with the Security Subsystem.

I'm only getting a Exception when i'm not login or i've no rights to access the controller.

But i'm awaiting a redirect to login when i've no Login Data or?

i've attached my policy and setting yaml file.




<pre>
You are not allowed to perform this action.
10 TYPO3\FLOW3\Security\Authorization\Interceptor\AccessDeny_Original::invoke()

9 TYPO3\FLOW3\Security\Authorization\RequestFilter_Original::filterRequest(TYPO3\FLOW3\MVC\Web\Request)

8 TYPO3\FLOW3\Security\Authorization\FilterFirewall_Original::blockIllegalRequests(TYPO3\FLOW3\MVC\Web\Request)

7 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

3 TYPO3\FLOW3\MVC\Web\RequestHandler_Original::handleRequest()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!
</pre>"
33097,TYPO3.Flow,Task,"",Resolved,Should have,Usage of preg_match allows side-effects,Adrian Föder,Adrian Föder,2012-01-19 20:42,I18n,1.1,2012-01-10,"","",100,2012-01-10 11:13,"","",421700,"","","as of http://php.net/function.preg-match the function could also return FALSE if an error occurs (see Return Values and Changelog sections). At some places there is, e.g.,

<pre>
if (preg_match(self::PATTERN_MATCH_LOCALEIDENTIFIER, $localeIdentifier, $matches) === 0) throw new....
</pre>

used. This would let a return of FALSE pass by untouched."
33106,TYPO3.Flow,Bug,"",Resolved,Must have,Behavior of QueryResult for Doctrine and Generic differs,Karsten Dambekalns,Karsten Dambekalns,2012-01-17 21:26,Persistence,1.1,2012-01-11,"","",100,2012-01-11 03:46,"","",422150,"",FLOW3 1.0.2,"One example is @offsetGet()@ - Generic returns NULL if the key doesn't exist, Doctrine crashes. This needs to be checked and fixed in the QueryResult for Doctrine."
33112,TYPO3.Flow,Feature,"",Resolved,Should have,Create .Shortcuts directory if it is missing,Robert Lemke,Robert Lemke,2012-01-17 21:26,Package,1.1,2012-01-11,"","",100,2012-01-11 04:56,"","",422450,"","","FLOW3 currently creates or updates the Packages/.Shortcuts/ directory only if the package states have changed. That is correct in theory, but if one messes with the package directories by manually moving around packages, you might get lost.

Therefore it would be nice if the .Shortcuts directory would be created if it does not exist. This would add stability but also allow a developer to just remove a broken .Shortcuts directory and it would be regenerated on the next hit."
33117,TYPO3.Fluid,Feature,"",Rejected,Could have,returning plain \DateTime object in Format\DateViewHelper,Adrian Föder,Adrian Föder,2012-05-08 10:13,ViewHelpers,1.1,2012-01-11,"","",0,2012-01-11 07:01,"","",422700,"","","The DateTime ViewHelper allows passing by a string that is converted to a DateTime object, which again is formatted against the requested pattern.

The current signature is

<pre>
/**
	 * Render the supplied DateTime object as a formatted date.
	 *
	 * @param mixed $date either a \DateTime object or a string that is accepted by \DateTime constructor
	 * @param string $format Format String which is taken to format the Date/Time
	 * @return string Formatted date
	 * @api
	 */
	public function render($date = NULL, $format = 'Y-m-d')
</pre>

Providing an additional option ""asObject"" or such, that returns the \DateTime object without formatting, would allow the user to compare Dates with the IfViewHelper, because Date object could be compared with < or > each other (http://de2.php.net/manual/en/datetime.diff.php, Example #2).

So this should allow something like
<pre>
<f:if condition=""{model.date} < {f:format.date(date: 'now', asObject: 'true')}"">
The date is due.
</f:if>

I know that this might not fit 100% into ""formatting"" and it additionally changes the return type via parameter (kind of ""FlagArgument"" http://martinfowler.com/bliki/FlagArgument.html), but maybe you're fine with it, because it's useful and the functionality is only almost one LOC away."
33139,TYPO3.Flow,Bug,"",Resolved,Could have,Confusing error message if a CommandController is outside /Controller/ directory,Christof Rodejohann,Karsten Dambekalns,2012-05-30 14:38,Command,1.0.5,2012-01-12,"","",100,2012-01-12 06:24,"","",423800,"",FLOW3 1.0.2,"If you create a CommandController which is not in the /Controller/ directory of a package you will get an error saying ""Invalid controller class name [...] 1305100019""

I understand how this is correct, but still this message is confusing. A check for the right directory and a suitable error message might be the best solution. But a simple hint to check for the directory might solve this easily.

The error is thrown in
FLOW3/Packages/TYPO3.FLOW3 / Classes / MVC / CLI / Command.php  Line 60
"
33142,TYPO3.Flow,Task,"",Resolved,Should have,"Ignore Tags / Annotations in external libraries, find some good solution",Christian Müller,Karsten Dambekalns,2012-02-13 20:43,Reflection,1.1,2012-01-12,"","",100,2012-01-12 07:09,"","",423950,"","","for now we have the ignore list of tags in Packages/Framework/TYPO3.FLOW3/Classes/Reflection/ReflectionService.php

For external libraries with lots of custom tags this is a problem, of course we can patch master specifically all the time, but maybe we should think about another solution. So a possible way would be to have a core ignore set and allow additions by configuration or just a globally configurable ignore list. Maybe there are other ideas?"
33143,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow Format.Currency ViewHelper regard Locale,Adrian Föder,Adrian Föder,2012-09-17 06:06,ViewHelpers,2.0 beta 1,2012-01-12,"","",0,2012-01-12 08:42,"","",424000,"","","The Format.Currency ViewHelper currently only renders its formatting ""hard-coded"". Allow usage of the Locale and Cldr functionality."
33145,TYPO3.Flow,Bug,"",Closed,Must have,Annotation parser for interfaces gets confused,Christof Rodejohann,Karsten Dambekalns,2012-06-25 15:55,Object,1.1 RC1,2012-01-12,"","",0,2012-01-12 09:03,"","",424100,"",FLOW3 1.0.2,"With the following constellation

Example.php
containing the class Example with a scope singleton

and

ExampleInterface.php
containing the interface ExampleInterface which is not implemented in the class Example.

in the same directory, the interface annotation parser will throw the following exception:

""Scope annotations in interfaces don't have any effect, therefore you better remove it from My\Package\ExampleInterface in order to avoid confusion."" (Exception code #1299095595)

Removing the scope from Example solves the exception in ExampleInterface."
33148,TYPO3.Flow,Bug,"",Resolved,Must have,CLDR locale chaining doesn't work correctly,Adrian Föder,Karsten Dambekalns,2012-02-01 20:43,I18n,1.1,2012-01-12,"","",100,2012-01-12 11:32,"","",424250,"",Git master,"Simply said, the chaining in order to get also de.xml when de_DE.xml is asked for, doesn't work correctly.

The problem is mostly that the CldrRepository's findLocaleChain() that is responsible for that functionality, relies on a function localizationService->getParentLocaleOf(); while this function asks a localeCollection that never seems being populated correctly.

I'll add a test that should describe it better; anyhow I don't know if the mocking is correct (show inline PHP comment)"
33158,TYPO3.Flow,Bug,"",Closed,Could have,Problems setting PHP binary path on Windows,Giovanni Romero Pérez,Rens Admiraal,2012-06-28 04:59,Core,"",2012-01-13,"","",0,2012-01-12 19:11,"","",424700,"",FLOW3 1.0.2,"Windows Server 2008 R2 SP1
Apache 2.2 PHP 5
I still set FLOW3.core.phpBinaryPathAndFilename in  Configuration/Settings.yaml

I tries with:

core:
  phpBinaryPathAndFilename: 'C:\\www\\bin\\php\\php.exe'

and

core:
  phpBinaryPathAndFilename: 'C:/www/bin/php/php.exe'



It seems like the PHP binary ""C:\php/php"" cannot be executed by FLOW3. Set the correct path to the PHP executable in Configuration/Settings.yaml, setting FLOW3.core.phpBinaryPathAndFilename.
3 TYPO3\FLOW3\Core\Bootstrap::initializeForRuntime()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
33177,TYPO3.Flow,Task,"",Resolved,Should have,Polish authentication a little bit.,Karsten Dambekalns,Karsten Dambekalns,2012-04-18 16:43,Security,1.1,2012-01-13,"","",100,2012-01-13 11:06,"","",425650,"","",The AuthenticationController and some related code show some tiny dents if looking closely :)
33191,TYPO3.Flow,Bug,"",Rejected,Should have,TypeConverter from string to array,Pascal Walter,"",2012-03-14 13:40,Property,"",2012-01-14,"","",0,2012-01-14 05:47,"","",426350,"",FLOW3 1.0.2,"I discovered this bug by using a <f:form.select name=""items"" /> in a form. In case the user doesn't select anything, the array items is empty. But the normal Property TypeConverter from FLOW3 just convertes arrays to arrays. So I forked it and supported string to array conversion, which is pretty easy. I attached my customized TypeConverter how fits me needs. But I dont think its best practice or best coding style.

Maybe you guys come up with a better solution for that."
33215,TYPO3.Fluid,Feature,"",New,Should have,RFC: Dynamic values in ObjectAccess paths,Christopher Hlubek,"",2014-02-19 11:33,"","",2012-01-16,"","",0,2012-01-16 05:48,"","",427550,"","","Sometimes it's necessary to include a dynamic value from a Fluid variable inside an object access path. Some use cases would be:

* Get the value of an array or object depending on a key in a foreach loop
* ...

A possible syntax amendment could look like this:

<pre><code>
<p>{myobject[propertyName]}</p>
</code></pre>

Where @propertyName@ is a template variable itself:

<pre><code>
$this->view->assign('propertyName', 'foo');
$this->view->assign('myobject', $myObject);
</code></pre>

In this context it would evaluate to the value of @{myobject.foo}@. This is consistent to the way JavaScript defines its object access syntax with variables."
33226,TYPO3.Flow,Feature,"",Resolved,Should have,Add Getter for validator options and child validators,Bastian Waidelich,Bastian Waidelich,2012-01-25 20:43,Validation,"",2012-01-16,"","",100,2012-01-16 13:02,"","",428100,"","","Validation options are set through the constructor but there is currently no way of accessing the options afterwards.
This would make sense in order to transform validation rules into another format (e.g. to apply them on the client side).
Similar issue for the CompositeValidators: There is currently no way to retrieve the child validators."
33258,TYPO3.Flow,Major Feature,"",Accepted,Should have,Implement support for Assetic,Sebastian Kurfuerst,"",2014-02-24 02:05,"","",2012-01-17,"","",0,2012-01-17 08:21,"","",429700,"","","We still need a clean solution to handle assets; and https://github.com/kriswallsmith/assetic would be a great fit to integrate.

First off, we need to create a concept for it."
33268,TYPO3.Flow,Task,"",Resolved,Must have,Document new YAML behaviour for Upgrade to 1.1,Christopher Hlubek,Karsten Dambekalns,2012-03-07 10:33,Configuration,1.1,2012-01-17,"","",100,2012-01-17 10:41,"","",430150,"","","The YAML parser changed its behaviour in some intricate ways. One of it is the (now correct) processing of escape sequences within double quoted strings (http://yaml.org/spec/1.2/spec.html#id2787109).

Unfortunately some FLOW3 users could have used the double quote syntax to express object names or pointcut expressions (e.g. in a Policy file) where the escape sequence could produce an unwanted result and AOP or security fails silently.

<pre>
resources:
  methods:
    Foo_Bar: ""method(MyPackage\Domain\Model\Poo->test()""
</pre>

The class would not match @MyPackage\Domain\Model\Poo@ but rather @MyPackage\Domain\Model?oo@. To use double quoted strings the @\@ character would need to be escaped with another backslash.

We should document the new behaviour and discourage usage of double quotes in YAML files as a CGL. Additionaly we could think about a migration script for configuration files."
33274,TYPO3.Fluid,Bug,"",Closed,Should have,Viewhelpers extending AbstractFormFieldViewHelper should add additionalIdentityProperties even if there is an error on the field,Zach Davis,Zach Davis,2012-01-31 15:15,ViewHelpers,"",2012-01-18,"","",0,2012-01-18 00:46,"","",430450,"",FLOW3 1.0.2,"In a FLOW3 app, I have a form that has fields that reference an Account object and the Party property on the account object. This works fine because when Fluid renders form fields it calls the addAdditionalIdentityPropertiesIfNeeded in the AbstractFormFieldViewHelper class, which adds hidden identity fields for the properties.

However, when any part of the form is invalid a mapping error is triggered. The form field viewhelper sees the mapping error and no longer adds the property identities, which leads to a situation where the user corrects the error in the form, only to have FLOW3 try to create new property objects.

The fix is simple, and I think it's a no-brainer. We need to change the conditional logic in the getValue method on the AbstractFormFieldViewHelper from this:

@
if ($this->hasArgument('value')) {
    $value = $this->arguments['value'];
} elseif ($this->hasMappingErrorOccured()) {
    $value = $this->getLastSubmittedFormData();
} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getPropertyValue();
}
@

To this:

@
if ($this->hasArgument('value')) {
    $value = $this->arguments['value'];
} elseif ($this->hasMappingErrorOccured()) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getLastSubmittedFormData();
} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getPropertyValue();
}
@

Notice that we've added the call to addAditionalIdentityPropertiesIfNeeded to the second section of the statement. Even if there's an error, we should still add identity properties, right?

If the change sound right, let me know and I'll submit a patch to gerrit.

Zach"
33284,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,AbstractViewHelper::renderChildren removes the {some_digit} placeholders needed for translation,Sebastian ,Karsten Dambekalns,2012-02-24 10:28,Core,1.1,2012-01-18,"","",0,2012-01-18 05:51,"","",430950,"",Git master,"Somewhere in renderChildren the {some_digit} placeholders are being removed.

I traced it so far and can't go further as I don't know how to debug the closure function.

To be clear... the example from the flow3 documentation guide:
<pre><f:translate source=""someLabelsCatalog"" arguments=""{0: 'foo', 1: '99.9'}>Untranslated {0} and {1,number}</f:translate></pre>

becomes:
<pre>Übersetzt  and 99,9</pre>


I don't know if maybe this was necessary at some step and is related to some important design decision or if it is a glitch.
If it's a glitch I hope someone can find it.

Otherwise I would suggest creating a StringFormatter like I did for myself, so one can then use:
<pre><f:translate source=""someLabelsCatalog"" arguments=""{0: 'foo', 1: '99.9'}>Untranslated {0,string} and {1,number}</f:translate></pre>

Here is the StringFormatter
<pre>
<?php
namespace TYPO3\FLOW3\I18n\Formatter;

/*                                                                        *
 * This script belongs to the FLOW3 framework.                            *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License, either version 3   *
 * of the License, or (at your option) any later version.                 *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

use TYPO3\FLOW3\Annotations as FLOW3;

/**
 * Formatter for numbers.
 *
 * @FLOW3\Scope(""singleton"")
 * @api
 */
class StringFormatter implements \TYPO3\FLOW3\I18n\Formatter\FormatterInterface {


	/**
	 * Formats provided value using optional style properties
	 *
	 * @param mixed $value Formatter-specific variable to format (can be integer, \DateTime, etc)
	 * @param \TYPO3\FLOW3\I18n\Locale $locale Locale to use
	 * @param string $styleProperties Integer-indexed array of formatter-specific style properties (can be empty)
	 * @return string String representation of $value provided, or (string)$value
	 * @api
	 */
	public function format($value, \TYPO3\FLOW3\I18n\Locale $locale, array $styleProperties = array()) {
		return (string)$value;
	}

}

?></pre>"
33293,TYPO3.Flow,Bug,"",New,Should have,Injection to private variable results in injection of the the wrong class,Christof Rodejohann,"",2012-01-18 10:41,"","",2012-01-18,"","",0,2012-01-18 10:41,"","",431400,"",FLOW3 1.0.2,"If you annotate a private declared class variable to inject some class this annotated class won't be injected. Rather the class itself will be injected.

Here is an example:
http://pastebin.com/LJW14jqs

This is a command controller created via kickstarter in a freshly kickstarted package. PhpSession is injected as an example.

With $currentSession declared as protected (which can be seen in the above example) the output is as expected:

<pre>
You called the example command and class name is ""TYPO3\FLOW3\Session\PhpSession"".
</pre>

With $currentSession declared as private the output is the following:

<pre>
You called the example command and class name is ""RD\TEST\Command\TestCommandController_Original"".
</pre>

I am a little confused whether this follows some OOP pattern or is simply a bug. Either way, this can't be the intended behavior."
33297,TYPO3.Flow,Bug,"",Closed,Won't have this time,flow3 package:list throws an error,Christopher Seidel,Karsten Dambekalns,2012-03-10 05:32,"","",2012-01-18,"","",0,2012-01-18 11:38,"","",431600,"",FLOW3 1.0.2,"Hi together,

thanks for FLOW3. I'm developing for about one year with it and now i discovered a bug which is not an open task, or maybe i just didn't find it. If you use the ./flow3 package:list to list the packages on the system it throws an error if there is somewhere a file with ""#"". Of course this is not normal but it throws the following:

Uncaught Exception
  opendir(/var/www/Packages/Application/Seidel.Buecherliste/Resources/Public/Images):
  failed to open dir: Too many open files

More Information
  Exception code      #0
  File                /var/www/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Resource_Streams_ResourceStreamWrapper_Original.php line 87

Thanks so far for your work!
"
33300,TYPO3.Flow,Bug,"",Resolved,Should have,Validators should allow empty values,Bastian Waidelich,Bastian Waidelich,2013-08-01 04:06,Validation,1.1,2012-01-18,"","",100,2012-01-18 13:38,"","",431750,"",Git master,"Currently most of the provided validators do not accept empty values. This makes it impossible to have an optional email address for example (without using the disjunction validator).
If an email is required one should add two validation rules, NotEmpty and EmailAddress to the respective property."
33302,TYPO3.Fluid,Feature,"",Resolved,Should have,form.button ViewHelper,Bastian Waidelich,Bastian Waidelich,2012-01-20 06:21,ViewHelpers,1.1,2012-01-18,"","",100,2012-01-18 15:10,"","",431850,"","","<button /> elements are more flexible than <input type=""submit"" /> as they allow to render arbitrary child elements and can transmit own values which makes them really usable in multi-page forms for example.
In the meantime all major browser support buttons for submitting & resetting so we should add a respective ViewHelper."
33308,TYPO3 Flow Base Distribution,Task,"",New,Should have,General date and time handling rules,Adrian Föder,"",2012-03-06 10:05,"","",2012-01-19,"","",0,2012-01-19 02:35,"","",432150,"","","h1. Date and time handling discussion

_This issue is considered as invitation for discussion, comment as you like._

h2. Introduction

When handling trivially said ""date and time"", running in technical difficulties is waiting to happen. The purpose of this document is to carry-together this difficulties and lastly, possibly, provide a best practice both in the Framwork API and in documentation, how to handle date and times in user's applications.

h2. Professional considerations

h3. Different meanings of ""point in time""

Regarding a ""time"", ""event"" or generally saying ""point in time"" could result in two meanings. _(The author likes to have this terms ubiquitous, so feel free to improve them)_

h4. Physical Point In Time

The @Physical Point In Time@ means a time stamp that describes a ""physical"" time of an occurrence without doubt. That might be the creation or modification time of a record, the moment of a happening like the exact time of the birth of a person or the time where a football goal was achieved.
It describes an event that occurs on a specific point of the global, physical timeline no matter where or under what conditions this was (like DST or such).

h4. Logical Point In Time

The @Logical Point In Time@ is a time the user is familiar or comfortable with without caring about localization and such. If a user invites to a party saying it begins at 19 o'clock he means the time all people know and are used to around the event. 19 o'clock than means 19 o'clock at the location where the party happens under the circumstances around that date, e.g. active DST etc. It's the time being seen when you look at your watch.

h3. Date Only

In some use cases, the date only may matter; mostly usual when describing a birth date. In such cases timezone and DST doesn't matter, only the day-date is important. It even would be contra-productive to even attempt to store a time besides that date, because it's intrinsically unimportant.


h2. Technical considerations

Basically the author came up to the following idea: MySQL's @DATETIME@ format stores a date and time as-is, so without any automatic timezone conversion (*unlike* @TIMESTAMP@ does). _TODO: find source of this statement_ 

So it could be a general best practice to decide that every @Point In Time@ is to be stored and therefore assumed to be in UTC. That's what UTC is made for: to describe an event happening at a @Physical Point In Time@.

If a @Date Only@ is required, it could be an idea to force UTC 0:00 as corresponging time (unfortunately DateTimes are always bound together in most implementations we know, therefore no *real* @Date Only@ is provided)

Before storing and after retrieving is has to be decided what the intention of the date is: @Physical or Logical Point In Time@ or @Date Only@. Dependant of this, the adjustments could be made, i.e. deciding what Timezone the user intended to provide resp. what timezone he expects.

If the user, for example, provides an invitation to a party in Stuttgart, taking place May 30, 19 o'clock, this is a @Logical Point In Time@. Disregarding locational aspects, we assume DST and therefore store May 30, 18 o'clock in the Database (which is implicitly UTC because per design)."
33311,TYPO3.Flow,Bug,"",Resolved,Must have,AuthenticationProviderManager::isAuthenticated does not work in authentication request,Kira Backes,Christian Müller,2012-02-29 20:38,Security,"",2012-01-19,"","",100,2012-01-19 04:27,"","",432300,"",Git master,"If the client does not have a session and the client authenticates, then a new session is created. The method isAuthenticated checks if the current session canBeResumed(), but that method again checks for the session in $_COOKIE. Since the session was just created, the isAuthenticated method never works in the authentication request. It only starts working in all subsequent requests, since the new session is then available in $_COOKIE."
33371,TYPO3.Flow,Feature,"",Resolved,Must have,HTTP 1.1 Support,Robert Lemke,Robert Lemke,2012-06-20 15:16,Http,1.1 RC1,2012-05-17,"","",100,2012-01-22 11:15,"","",435200,0.00,"","Implement proper HTTP 1.1 support.

This issue is a stub for the corresponding FLOW3 1.1 key feature (until I come up with some better description)"
33394,TYPO3.Fluid,Feature,"",Needs Feedback,Should have,Logical expression parser for BooleanNode,Tobias Liebig,Tobias Liebig,2014-08-14 08:10,Core,"",2012-01-23,"","",90,2012-01-23 13:01,"","",436300,"","","In boolean ViewHelper attributes, like the f:if condition, one might want to use boolean expressions and boolean operators like && (and), || (or) or ! (not).

The @BooleanNode@ needs to parse this logical expressions."
33397,TYPO3.Flow,Bug,"",Resolved,Should have,Difference for ManyToMany with JoinTable annotation and without,Christian Müller,Karsten Dambekalns,2012-08-31 05:35,Persistence,2.0 beta 1,2012-01-23,"","",100,2012-01-23 14:44,"","",436450,"",FLOW3 1.1.0 beta 2,"There is a difference between joinColumn creation with JoinTable annotation and without for ManyToMany relations. In case there is a JoinTable annotation (and no options for columns are set) the automatic creation inverses the columns so the join works but the columns are named wrong / used wrong.

So if you join class A and Class B the resulting join table will have columns for A identifier and B identifier but the inserted identifiers are exactly the opposite. This does not happen if the JoinTable Annotation is dropped completely.

Thanks to Kira Backes for noticing.

The fix is simple but probably a breaking change."
33398,TYPO3.Flow,Task,"",Resolved,Could have,Use boolean instead of bool in docblocks (CGL),Karsten Dambekalns,Karsten Dambekalns,2012-01-26 08:45,"",1.1,2012-01-23,"","",100,2012-01-23 15:23,"","",436500,"","",In some places _bool_ is used in docblocks (e.g. for return and param types) instead if the preferred _boolean_.
33410,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Production Settings.yaml.example is not useable as is,Christian Müller,Christian Müller,2012-05-21 11:03,"",1.0.5,2012-01-24,"","",100,2012-01-24 05:54,"","",437100,"",Git master,"The Production context Settings.yaml.example contains the following lines:

TYPO3:
  FLOW3:
    persistence:
      backendOptions:
        dbname: 'quickstart' # adjust to your database name
        user: ''             # adjust to your database user
        password: ''         # adjust to your database password
      doctrine:
        # If you have APC, you should consider using it for Production,
        # also MemcacheCache and XcacheCache exist.
        # cacheImplementation: 'Doctrine\Common\Cache\ApcCache'

If used as is this will clean the doctrine settings as everything below doctrine is commented out, so an empty value is assigned. This leads to unsuspected errors that are difficult to track down to this.

A safe example should have the doctrine key commented out too."
33417,TYPO3.Flow,Bug,"",Resolved,Should have,kickstart:package does not update .Shortcuts,Robert Lemke,Christian Müller,2012-03-12 21:38,Package,1.1,2012-01-24,"","",100,2012-01-24 11:54,"","",437450,"",Git master,"For some reason the .Shortcuts sub directory for the new package is not created after a new package has been kickstarted. Tested this with kickstart:actioncontroller --generate-related, but I assume that it's the same with kickstart:package"
33421,TYPO3.Fluid,Bug,"",Resolved,Should have,AbstractFormFieldViewHelper does not resolve property path,Bastian Waidelich,Bastian Waidelich,2012-01-26 08:46,ViewHelpers,"",2012-01-24,"","",100,2012-01-24 13:33,"","",437650,"",Git master,"When binding a form field to a property like
<pre>
<f:form.textfield property=""some.property"" />
</pre>

The resulting element name attribute should be:
<pre>
[...] name=""formPrefix[formObjectName][some]property""
</pre>

This works as long as a form object name is specified (<f:form objectName=""xyz"" />) but it fails to resolve the property path if not:

<pre>
[...] name=""formPrefix[some.property]""
</pre>"
33460,TYPO3.Flow,Bug,"",Resolved,Should have,Missing function visiblity declarations,Aske Ertmann,Karsten Dambekalns,2012-02-29 20:38,"",1.1,2012-01-26,"","",100,2012-01-26 07:33,"","",439600,"",Git master,"I found a missing visiblity declaration in \TYPO3\FLOW3\MVC\Web\Routing\Route, and thought I'd search to see if there were more.. With this ""grep -rin $'\t'function *"" in the FLOW3 package folder I found 6 occurrences..

<pre>
TYPO3.FLOW3/Classes/Cache/Frontend/FrontendInterface.php:109:	function flush();
TYPO3.FLOW3/Classes/MVC/Web/Routing/Route.php:472:	function extractInternalArguments(array &$arguments) {
TYPO3.FLOW3/Classes/Persistence/Doctrine/Mapping/Driver/Flow3AnnotationDriver.php:673:			function ($className) {
TYPO3.FLOW3/Classes/Persistence/Doctrine/Service.php:164:			function ($message) use ($that) {
TYPO3.FLOW3/Classes/Utility/Environment.php:505:					function(&$value, $key) {
TYPO3.FLOW3/Tests/Functional/AOP/Fixtures/Name.php:27:	function __construct($name) {
</pre>

The Route function ""extractInternalArguments"" should be protected, as discussed with Bastian, since it's would require to construct a new route and it's not part of the api (@api) so I could likely change. It's stems from this commit: https://review.typo3.org/#change,5779

I haven't looked for further details about the other occurrences.."
33465,TYPO3.Flow,Bug,"",New,Should have,Some vital commands to recover the system fail when recovery is needed,Karsten Dambekalns,"",2012-01-26 09:51,Command,"",2012-01-26,"","",0,2012-01-26 09:51,"","",439850,"",Git master,"There are several ways to bring the system into an unstable state, like activating a package that depends on another, unavailable package.

In those cases deactivating that package using the commands for that purpose is not possible, as all needed commands die too early."
33469,TYPO3.Flow,Feature,Task #36800: Streamline Resource object API,Rejected,Should have,Support for temporary Resources,Bastian Waidelich,"",2013-08-02 11:03,Resource,"",2012-01-26,"","",0,2012-01-26 11:05,"","",440050,"","","Currently all resources need a Database, because the resource manager uses it in order to store resource pointers.
It should be possible to work with resources without having to use the (doctrine) persistence layer."
33487,TYPO3.Fluid,Feature,"",Closed,Could have,Configure from what package to use Templates/Partial/Layouts,Soren Malling,Bastian Waidelich,2013-07-29 07:58,Core,"",2012-01-27,"","",0,2012-01-27 05:48,"","",440900,"","","This could be considered as a discussion, and not a final feature request.

My feature wish, is to make is possible to configurate from which package to use templates/partials/layout file.

Purpose:

Create a application, and create a secondary application only containing the template files/different layout.


This is most likely possible through AOP, but wouldn't it make sense to have it as a actual configuration property? "
33493,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow DebugViewHelper output only the type of the input variable,Adrian Föder,Adrian Föder,2012-05-08 20:39,ViewHelpers,1.1,2012-01-27,"","",100,2012-01-27 08:43,"","",441200,"","","Due to the var_dump drawback that sometimes the memory consumption is too large or the list just becomes too long, I suggest a flag that only outputs the type of the intended variable instead of its dump."
33494,TYPO3.Fluid,Feature,"",Resolved,Should have,Verify state and future intentions of a persistence identity VH,Adrian Föder,Adrian Föder,2012-06-18 04:37,ViewHelpers,1.1 RC1,2012-01-27,"","",100,2012-01-27 09:50,"","",441250,"","","Currently, there is an Identity.JsonViewHelper that has two major drawbacks:

* the Code Example talks about a Persistence.Identity ViewHelper that only outputs raw @97e7e90a-413c-44ef-b2d0-ddfa4387b5ca@, for example
* the actual output of the Identity.JsonViewHelper is @json_encode(array('__identity' => $identifier))@

additionally, in the Conference package there's a @Identity.Uuid@ that basically also outputs raw @97e7e90a-413c-44ef-b2d0-ddfa4387b5ca@.


I do not agree with the following things in the current situation:

* I think there should be a better name than Persistence.Identity; the ""namespace"" Persistence doesn't feel good to me. Let's discuss this, maybe you agree.

* Outputting JSON would not make much sense; at least I'd expect the RAW value put out that could than be edited further (in this case I agree with the code sample's behaviour or the Conference's Identity.Uuid's(same).

Maybe the Format.Json VieHelper I just pushed could be involved, at least as post-processor using ViewHelper chaining or similar.

I really think we should clean up here some things.

--

While writing this, I think at least correcting the Code Example should be duty, and there should be a new flag called e.g. ""rawIdentifier"" that only returns the plain ID string with no JSON around.

But, well, the VH's name is already JSON, so...
what? :)

Just tell me some guidelines, I will gladly do it."
33495,TYPO3.Flow,Bug,"",Resolved,Should have,No alternative entry point type can be configured,Robert Lemke,Robert Lemke,2012-04-11 08:38,Security,1.1,2012-01-27,"","",100,2012-01-27 10:58,"","",441300,"",Git master,"Theoretically it is possible to use another type of entry point than the pre-configured WebRedirect. In practice, however, it is not possible to override the pre-defined type due to a bug in the corresponding parsing function in AuthenticationProviderManager.

While being on it, the setting names and structure could need some improvement to assert that only one entry point can be defined at all. The result should look like this:

        providers:
          DefaultProvider:
            provider:   'PersistedUsernamePasswordProvider'
            token:      'TYPO3\FLOW3\Security\Authentication\Token\UsernamePasswordHttpBasic'
            entryPoint: 'HttpBasic'
            entryPointOptions:
              realm: 'Blog'
"
33519,TYPO3.Flow,Bug,"",Resolved,Must have,Route always appends a question mark even if the route already has arguments,Aske Ertmann,Aske Ertmann,2012-05-15 09:21,MVC - Routing,1.1,2012-01-29,"","",100,2012-01-29 16:48,"","",442500,"",Git master,"The Route class (MVC\Web\Routing\Route) always append additionalParameters etc., with a question mark in front even though the url could have arguments already. This happens if a routehandler resolves everything & creates the argument string by it self."
33530,TYPO3.Flow,Bug,"",Closed,Must have,SubRequest should return format of root request,Bastian Waidelich,Bastian Waidelich,2012-05-08 09:43,MVC,1.1,2012-01-30,"","",0,2012-01-30 07:19,"","",443050,"",Git master,"The SubRequest is currently missing getter and setter for the request format.
This is required for Fluid for example where the rendering is bound to the current request. If that request is a SubRequest (e.g. in Plugins or Widgets) the format should inherit the format of the root request."
33531,TYPO3.Flow,Feature,"",Resolved,Should have,DateTimeConverter should support DateTime subclasses,Bastian Waidelich,Bastian Waidelich,2012-05-03 08:40,Property,1.1,2012-01-30,"","",100,2012-01-30 08:05,"","",443100,"","","Currently DateTimeConverter only accepts target types of 'DateTime'.
It should be possible to convert sub-types too."
33537,TYPO3.Flow,Task,"",Closed,Won't have this time,Rename NotEmpty Validator to Required,Bastian Waidelich,Bastian Waidelich,2012-05-08 12:02,Validation,"",2012-01-30,"","",0,2012-01-30 10:19,"","",443400,"","","The NotEmpty validator has a special meaning as it is executed for empty values (NULL or '') too. ""NotEmpty"" is a bit misleading and I would suggest to rename that to ""Required"".
For compatibility reasons the NotEmpty validator should be kept as subclass with @obsolete annotation."
33539,TYPO3.Flow,Feature,"",Rejected,Should have,Append query arguments from RoutePart handlers,Aske Ertmann,Bastian Waidelich,2013-08-26 05:04,MVC - Routing,"",2012-01-30,"","",0,2012-01-30 12:17,"","",443500,"","","It would be nice if we could append query arguments from routepart handlers, e.g. a appendArguments method, where it would be possible to add other query parameters which aren't a part of the returned path. In Phoenix we need this for modules since the route part handler for modules creates a query string, which causes this problem: #33519. It would be better if it could just add some arguments, and all the logic about creating the querystring, removing empty values, converting objects to identifiers etc."
33551,TYPO3.Fluid,Bug,"",New,Must have,View helper values break out of a partial scope,Stephan Schuler,Sebastian Kurfuerst,2013-06-05 08:41,Core,"",2012-01-31,"","",0,2012-01-31 06:05,"","",444100,"",(any),"If a partial is called at least twice which has a certain view helper inside, the last occurence of the inside value breaks out of the partials scope and will be the result of all usages of this view helper from now on.

This only appears when the first call triggers the caching mechanism but executes the uncached template (AbstractTemplateView::render() $parsedTemplate is instance of ""TYPO3\Fluid\Core\Parser\ParsingState"").
As soon as the template is a compiled one (AbstractTemplateView::render() $parsedTemplate is instance of ""TYPO3\Fluid\Core\Compiler\AbstractCompiledTemplate""), the result is as expected.

Main template:
<pre>
<html>
	<head>
		<title>Little bug</title>
	</head>
	<body>
		<ol>
			<li><f:escape type=""xml"">I am pre partial</f:escape></li>
			<f:render partial=""Demo"" arguments=""{value: 'I am the first node within a partial'}"" />
			<f:render partial=""Demo"" arguments=""{value: 'I am not the first but the second node within a partial'}"" />
			<li><f:escape type=""xml"">I am post partial</f:escape></li>
		</ol>
	</body>
</html>
</pre>

Demo-Partial:
<pre>
<li><f:escape type=""xml"">{value}</f:escape></li>
</pre>

The expected result would be:
<pre>
1. I am pre partial
2. I am the first node within a partial
3. I am not the first but the second node within a partial
4. I am post partial
</pre>

But the given result is:
<pre>
1. I am pre partial
2. I am the first node within a partial
3. I am not the first but the second node within a partial
4. I am not the first but the second node within a partial
</pre>"
33562,TYPO3.Flow,Bug,"",Resolved,Should have,FileBackend didnt use defaultLifetime if lifetime is null,Mike Franke,Karsten Dambekalns,2012-02-15 20:46,Cache,1.0.3,2012-01-31,"","",100,2012-01-31 10:27,"","",444600,"",Git master,"FileBackend.php#L191
<pre>
$expiryTime = ($lifetime === NULL) ? 0 : (time() + $lifetime);
</pre>

should be

<pre>
$lifetime = ($lifetime === NULL) ? $this->defaultLifetime : $lifetime;
$expiryTime = ($lifetime === 0) ? 0 : (time() + $lifetime);
</pre>"
33569,TYPO3.Fluid,Bug,"",Resolved,Should have,AbstractFormFieldViewHelper always converts entities to identities,Bastian Waidelich,Bastian Waidelich,2012-02-01 08:52,ViewHelpers,"",2012-01-31,"","",100,2012-01-31 15:19,"","",444950,"",Git master,AbstractFormFieldViewHelper::getValue() currently always tries to convert objects by calling PersistenceManager::getIdentifierByObject(). This makes it impossible for custom ViewHelpers to access the unmodified value.
33570,TYPO3.Fluid,Bug,"",Resolved,Should have,UploadViewHelper must not convert resources if errors occurred,Bastian Waidelich,Bastian Waidelich,2012-02-01 08:52,ViewHelpers,"",2012-01-31,"","",100,2012-01-31 15:25,"","",445000,"",Git master,"If getMappingResultsForProperty() contains errors, uploaded resources should not been converted."
33581,TYPO3.Flow,Feature,"",Resolved,Should have,Extend configuration/context,Peter Russ,Sebastian Kurfuerst,2012-05-09 09:28,Core,1.1 beta 1,2012-02-01,"","",100,2012-02-01 04:32,"","",445550,"","","So far FLOW3 context is limited to Development, Testing and Production. 
Further there is no way that operation/admin can add or overule configuration e.g. to set credentials which should not be store in a dev repro.

h2. FLOW3_SUBSYSTEM

To give more flexibility to the configuration a new environment constant is added *FLOW3_SUBSYSTEM*:
this could hold e.g. machine or vhost name

If this is set Configuration will be created that way:
Configuration/Settings.yaml
Configuration/<FLOW3_CONTEXT>/Setting.yaml
Configuration/<FLOW3_CONTEXT>/<FLOW3_SUBSYSTEM>.Setting.yaml

The benefit of that is that you can run e.g. Production Context on a machine for staging with slightly different settings e.g. for the database or a LDAP.

h2. FLOW3_STATIC_CONFIGURATION

Credentials or settings that should be set by operations/admin can be define by providing the absolute path and filename without '.yaml' in *FLOW3_STATIC_CONFIGURATION*.

If this is set Configuration will be created that way:
Configuration/Settings.yaml
Configuration/<FLOW3_CONTEXT>/Setting.yaml
Configuration/<FLOW3_CONTEXT>/<FLOW3_SUBSYSTEM>.Setting.yaml
<FLOW3_STATIC_CONFIGURATION>.yaml

Only small changes in Web/index.php, Bootstrap and ConfigurationManager are required.

Patch attached
"
33587,TYPO3.Flow,Feature,Task #36800: Streamline Resource object API,New,Should have,Automatically remove unused Resources,Bastian Waidelich,"",2013-11-11 12:21,Resource,"",2012-02-01,"","",0,2012-02-01 06:35,"","",445850,"","","Currently you have to delete unused Resources manually (resource & resource pointer records from the database and the actual file & possibly symlink) when a resource is no longer needed.
This should be a feature of FLOW3.
Because it is not always possible to determine whether a resource is still in use a CLI command could remove the ones that are not referenced and older than x minutes."
33589,TYPO3.Flow,Task,"",Resolved,Should have,Issue warning / error when trying to @inject into private property,Robert Lemke,Adrian Föder,2012-02-06 20:46,Object,1.1,2012-02-01,"","",100,2012-02-01 09:02,"","",445950,"","","Class properties declared as private cannot be used for property injection by using the @FLOW3\Inject annotation because the proxy class can only set it in its own scope. If private properties are really necessary, constructor or setter injection can be used as a workaround.

FLOW3 should throw an exception on detecting an inject annotation on a private property."
33601,TYPO3.Flow,Bug,"",Resolved,Should have,Logging of incorrect doc comments in reflection is broken,Karsten Dambekalns,Karsten Dambekalns,2012-02-02 08:44,Reflection,1.1,2012-02-01,"","",100,2012-02-01 12:07,"","",446550,"",Git master,"If one enables
<pre>TYPO3:
  FLOW3:
    reflection:
      logIncorrectDocCommentHints: TRUE</pre>
nothing happens, as the settings are not available in the ReflectionService."
33621,TYPO3.Flow,Bug,"",Resolved,Should have,Filebackend reports error when trying to rename file due to concurrent proccesses,Peter Russ,Bastian Waidelich,2014-02-25 09:34,Cache,2.0.1,2012-02-02,"","",100,2012-02-02 08:19,"","",447500,"",FLOW3 1.0.2,"Due to concurrent processes it happens that a temp-cache-file gets renamed while an other process is just writing it.
Further there is an error in the error handling.

We fixed both.
# added an exclusive lock for the writing operation
# added counters for a break to avoid an endless loop due to file system errors
# added timers for getting the process to sleep
# fixed error handling"
33628,TYPO3.Fluid,Bug,"",Needs Feedback,Must have,Multicheckboxes (multiselect) for Collections don?t work,Kira Backes,Christian Müller,2012-06-28 04:27,ViewHelpers,"",2012-02-02,"","",0,2012-02-02 09:48,"","",447850,"",FLOW3 1.0.0,"Let?s say I have a search and there are 20 categories which are selectable (I can select one, three or even all of them) then I would like all selected categories to be loaded into a collection, so I can search in those categories. For this use-case there is the following code:

Action
<pre>
	/**
	 * Submit search action
	 *
	 * @param \Doctrine\Common\Collections\ArrayCollection<\Package\Name\Domain\Model\Category> $categories
	 * @return void
	 */
	public function submitSearchAction(\Doctrine\Common\Collections\ArrayCollection $categories) {
</pre>

Template
<pre>
		<f:for each=""{categories}"" as=""category"" iteration=""it"">
			<div style=""width: 300px; float: left;"">
				<f:form.checkbox  id=""category{it.cycle}"" name=""categories[]"" value=""{category}"" />
				<label for=""category{it.cycle}""><f:translate>{category.name}</f:translate></label>
			</div>
		</f:for>
</pre>

Now the problem is that the CheckBoxViewHelper always renders an empty hidden field with an empty value for check boxes. Due to this hidden field with an empty value FLOW3 tries to load the Category with the persistence identifier of """", which throws an exception. When I remove the hidden field (in a hacky way) then everything works as expected.

<pre>
#1297759968: Exception while property mapping at property path ""0"": Object with identity """" not found.

Nested Exception
#1297933823: Object with identity """" not found.
TYPO3\FLOW3\Property\Exception\TargetNotFoundException
</pre>"
33639,TYPO3.Flow,Bug,"",Rejected,Won't have this time,"Error in mySQL Statements with columnnames like ""from"" or ""char""",Jan Roth,Karsten Dambekalns,2012-02-09 03:40,Persistence,"",2012-02-02,"","",0,2012-02-02 14:22,"","",448400,"",FLOW3 1.0.2,"The mySQL Statements must be escaped with `columnname`

SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from VARCHAR(255) DEFAULT NULL, PRIMARY KEY(flow3_persistence_identifier)) ENGIN' at line 1"
33645,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong return value getPasswordHashingStrategyAndIdentifier(),Karsten Dambekalns,Karsten Dambekalns,2012-03-05 20:38,Security,1.1,2012-02-03,"","",100,2012-02-03 06:29,"","",448700,"",Git master,"getPasswordHashingStrategyAndIdentifier is supposed to return an array, but in case a strategy identifier has been requested already, an object will be returned and break the calling code."
33698,TYPO3.Flow,Bug,"",Resolved,Must have,ObjectAccess::setProperty must work with numeric indexes,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-02-29 20:38,Reflection,1.1 beta 1,2012-02-06,"","",100,2012-02-06 01:04,"","",451350,"",FLOW3 1.0.0,"When trying to set a value to an @ArrayAccess@ object with a numeric index, the ObjectAccess::setProperty() method throws an exception because $propertyName must be a string.

However, we should allow integers there as well.

This changeset is needed for the refactored TYPO3 Phoenix Rendering."
33705,TYPO3.Flow,Task,"",Resolved,Should have,Inconsistent spelling of sub package and class names,Robert Lemke,Robert Lemke,2012-04-11 08:38,"",1.1,2012-02-06,"","",100,2012-02-06 08:58,"","",451700,"","","The FLOW3 package contains, for historical reasons, sub packages and in consequence namespaces and class names which don't follow the naming conventions which specify UpperCamelCase.

To be in line with the conventions, these namespaces should be renamed, for example ""AOP"" should become ""Aop"". However, package keys are not affected and thus ""FLOW3"" stays ""FLOW3""."
33707,TYPO3.Flow,Bug,"",Resolved,Must have,It is possible to authenticate with an expired account,Patrick Pussar,Karsten Dambekalns,2012-02-22 08:47,Security,1.0.3,2012-02-06,"","",100,2012-02-06 09:24,"","",451800,"",FLOW3 1.0.0,authenticationManager->authenticate() works even with expired account: account->getExpirationDate() is in the past.
33710,TYPO3.Flow,Feature,"",New,Should have,Configuration based on Domain,Marc Neuhaus,"",2012-02-06 10:08,"","",2012-02-06,"","",0,2012-02-06 10:08,"","",451950,"","","i know you can change the Configuration based on the Context through apache config and htaccess.

I'm currently forced to work with Drupal, and the only ""good"" thing about it so far is the concept of handling multisites. 

Basically it selects the settings.php based on the domain names.

Example:
default/settings.php
dev.my-domain.com/settings.php
www.my-domain.com/settings.php

For a detailed explanation take a look here: http://drupal.org/documentation/install/multi-site


I think it would be really neat to have this behavior in FLOW3. 

Example:

Configuration/Settings.yaml
Configuration/www.my-domain.com/Settings.yaml
Configuration/dev.my-domain.com/Settings.yaml
Configuration/localhost.my-domain/Settings.yaml

By the way, Subfolders are handled like this:

localhost.my-domain -> localhost/my-domain
192.168.1.23.my-domain -> 192.168.1.23/my-domain

Greetings Marc"
33719,TYPO3.Flow,Bug,"",Closed,Should have,.Shortcuts symlinks use absolute path,Rens Admiraal,Rens Admiraal,2012-05-07 16:53,Package,1.1,2012-02-06,"","",100,2012-02-06 15:34,"","",452400,"",Git master,"The symlinks in the .Shortcuts folder use absolute paths. This is an issue in chrooted environments where the path to the document root can be a different one then the path in the webserver process.

This causes the symlinks to be working in only one situation: during CLI execution or during a HTTP request, depending on which generated the symlink."
33720,TYPO3.Flow,Bug,"",Resolved,Should have,\TYPO3\FLOW3\I18n\Xml\* Namespace doesn't exists,Tolleiv Nietsch,Tolleiv Nietsch,2012-02-08 08:47,I18n,1.1,2012-02-06,"","",100,2012-02-06 16:09,"","",452450,"",Git master,The namespace is used but never defined - the suggested patch changes the 1.5 occurrences to use the right Classes...
33789,TYPO3.Flow,Bug,"",Resolved,Could have,PersistentObjectConverter may break with < PHP 5.3.4,Karsten Dambekalns,Karsten Dambekalns,2012-03-12 21:38,Property,1.1,2012-02-08,"","",100,2012-02-08 10:22,"","",455850,"",Git master,The use of @newInstanceArgs()@ inside the @PersistentObjectConverter@ breaks for PHP older than 5.3.4 if a class has no constructor (see https://bugs.php.net/52854).
33801,TYPO3.Flow,Task,"",Rejected,Could have,"Add a ""mixed"" type converter",Ondrej Hatala,Bastian Waidelich,2014-05-11 06:57,Property,"",2012-02-09,"","",0,2012-02-09 03:32,"","",456450,"","","Problem:
""mixed"" is used as a default type in case you don't explicitly provide proper type but there is no such converter, resulting in ambiguous behaviour.

Example:
When you create a command with a parameter in CommandController, and don't provide it's type properly by the @param annotation, ""mixed"" is determined as a default. When trying to use this command, you will get an Exception with message ""Exception while property mapping at property path """":Could not find a suitable type converter for ""mixed"" because no such class or interface exists.""

Suggested solution: 
Create a ""mixed"" type converter that would be essentially NOP, thus making your code work the way you expect it to."
33811,TYPO3.Flow,Bug,"",Resolved,Must have,Not all caches are flushed (automatically) if needed,Karsten Dambekalns,Robert Lemke,2012-04-26 08:38,Cache,1.1,2012-02-09,"","",100,2012-02-09 07:36,"","",456950,"",Git master,"At least these are affected:

* Fluid template cache (e.g. when changing a ViewHelper class)
* XLIFF / locale cache (after XLIFF files have been changed)"
33812,TYPO3.Fluid,Task,"",Resolved,Must have,Rename key to id in TranslateViewHelper,Karsten Dambekalns,Karsten Dambekalns,2012-02-16 20:47,ViewHelpers,1.1,2012-02-09,"","",100,2012-02-09 07:53,"","",457000,"","","Since the key attribute refers to the trans-unit id in XLIFF, it is more intuitive to rename the attribute to id."
33814,TYPO3.Fluid,Feature,"",Resolved,Should have,Hint how to allow string comparison in IfViewHelper,Adrian Föder,Adrian Föder,2012-02-22 08:48,ViewHelpers,1.1,2012-02-09,"","",100,2012-02-09 08:43,"","",457100,"","","currently, string comparisons are not directly supported. With a trick, it can be achieved nevertheless (@{0: foo.bar} == {0: 'stringToCompare'}@).
The Code example should mention that trick at least until ""real"" comparisons are allowed."
33817,TYPO3.Fluid,Feature,"",Resolved,Could have,SwitchViewHelper,Adrian Föder,Bastian Waidelich,2013-05-29 08:36,ViewHelpers,"",2012-02-09,"","",100,2012-02-09 09:28,"","",457250,"","","Fluid should provide a Switch VH that behaves like the well-known switch-case structure.

Syntax suggestion:
<pre>
<f:switch comparand=""{foo.bar}"">
  <f:switch.case comparand=""valuecase1"">
    <span>Output in this case.</span>
  </f:switch.case>

  <f:switch.case comparand=""nothervaluecase"">
    <a>Output in another case.</a>
  </f:switch.case>

  <f:switch.case comparand=""third"">
    <a>Output in another case.</a>
  </f:switch.case>

  <f:switch.default>
    Default value if nothing else matches.
  </f:switch.default>
</f:switch>
</pre>


There's an already present implementation here: http://fedext.net/fed-viewhelpers/loops-conditions/switch/ but tbh I at least don't agree with the ""default"" implementation because it could collide with the value being ""default"" as string:
<pre>
<fed:switch value=""{switchValue}"">
  <fed:case case=""1"">
      <p>Case was 1</p>
  </fed:case>
  <fed:case case=""default"">
    <p>Case was default</p>
  </fed:case>
</fed:switch>
</pre>"
33836,TYPO3.Flow,Task,"",Resolved,Should have,Add better error handling to XML file parsing,Karsten Dambekalns,Karsten Dambekalns,2012-02-15 20:46,I18n,1.1,2012-02-10,"","",100,2012-02-10 08:21,"","",458200,"","",When parsing XML files the exception thrown in case of errors does not differentiate between filesystem and parsing errors. Plus no hints on the XML errors are given to the user.
33838,TYPO3.Flow,Feature,"",Resolved,Should have,Add a way to configure Doctrine Mapping Type,Dominique Feyer,Karsten Dambekalns,2015-03-06 04:30,Persistence,"",2012-02-10,"","",100,2012-02-10 08:43,"","",458300,"","","As I need some JSON object storage in FLOW3, i need to use a custome Doctrine Mapping Type to handle to conversion between object and database. 

As the documentation of Doctrine2 say here:
http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/basic-mapping.html#doctrine-mapping-types

Doctrine looks really flexible on this point, and if you found a solution to enable this in FLOW3 this could amazing.

The main problem is that $bootstrap->getEarlyInstance('Doctrine\ORM\EntityManager') or getObjectManager()->get('Doctrine\ORM\EntityManager') always return NULL in the boot method of the file package.php"
33862,TYPO3.Flow,Feature,"",Resolved,Should have,a shorthand for custom validators,Stefan Neufeind,Stefan Neufeind,2012-05-15 09:26,Validation,1.1,2012-02-12,"","",100,2012-02-11 18:44,"","",459500,"","","Instead of using the fully qualified classname (which is long) Extbase has a shorthand of the form <ExtName>:<ValName>. This will resolve to Tx_<ExtName>_Validation_Validator_<ValName>Validator there.

For FLOW3 instead of <ExtName> the <PackageName> could be used to create a class name.

(Thanks go to Martin Kutschker for that suggestion.)
"
33882,TYPO3.Flow,Bug,"",Rejected,Should have,XliffParser does not allow id-less translation,Kira Backes,Karsten Dambekalns,2012-02-16 05:10,I18n,"",2012-02-13,"","",0,2012-02-13 08:10,"","",460500,"",Git master,"If I want to translate completely without IDs I?m still forced to add IDs in the translation .xlf, because the id-less translation entries are overwritten at the following code (line 47 TYPO3.FLOW3/Classes/I18n/Xliff/XliffParser.php):

<pre>
				$parsedData['translationUnits'][(string)$translationElement['id']][0] = array(
					'source' => (string)$translationElement->source,
					'target' => (string)$translationElement->target,
				);
</pre>

This is fixed by replacing the previous code with the following:

<pre>
				$translationElementId = (string)$translationElement['id'];
				if ($translationElementId === '') {
					$translationElementId = uniqid();
				}
				$parsedData['translationUnits'][$translationElementId][0] = array(
					'source' => (string)$translationElement->source,
					'target' => (string)$translationElement->target,
				);
</pre>"
33883,TYPO3.Flow,Bug,"",Resolved,Should have,"Repositories must be singleton, but no checks are done on this",Kira Backes,Karsten Dambekalns,2012-05-03 08:40,Persistence,1.1,2012-02-13,"","",100,2012-02-13 08:17,"","",460550,"",Git master,"I have models with injected repositories and due to some change in the last 2 weeks in master I can no longer use FLOW3, since the following error comes up:
<pre>
Undefined method 'getDefaultOrderings'. The method name must start with either findBy or findOneBy! 
</pre>

This was tracable to the fact that \TYPO3\FLOW3\Reflection\ObjectAccess::isPropertyGettable checks for is_callable, which returns true for every method in Repositories (due to the magic __call method) which in turn causes \TYPO3\FLOW3\Validation\Validator\GenericObjectValidator::getPropertyValue to not use the direct property access, even though it would be needed."
33900,TYPO3.Fluid,Feature,"",Resolved,Should have,Change debug view helper for new extbase debugger,Alexander Schnitzler,Alexander Schnitzler,2012-07-10 02:27,ViewHelpers,"",2012-02-13,"","",100,2012-02-13 18:02,"","",461350,"","","Since Jochen Rau merged the backport of the FLOW3 Debugger into the extbase master the Fluid view helper should be changed, too."
33932,TYPO3.Flow,Bug,"",Resolved,Must have,AOP Proxy Compiler does not handle numeric annotation parameters,Alexander Berl,Karsten Dambekalns,2012-05-30 15:58,AOP,1.0.5,2012-02-15,"","",100,2012-02-14 18:37,"","",462950,"",Git 1.0,"In the TYPO3\FLOW3\Object\Proxy\Compiler::renderAnnotation function, there is currently no case for numeric annotation members, which leads to such values being parsed out of the original code.

When this happens, an Exception is thrown in Doctrine Annotation Parser that an identifier is expected instead of "")"".

*Test Case:*
- Create new annotation with an integer class member (e.g. ""amount"").
- Annotate a method or class with the annotation, setting the amount via _@annotation(amount=X)_

*Expected:*
The proxy class contains the same annotation _@annotation(amount=X)_

*Actual:*
The proxy class contains the annotation _@annotation(amount=)_ and a parsing exception is thrown within Doctrine.


If the parameter is set directly, no exception is thrown, but the parameter is also parsed out of the proxy class docblock (i.e. _@annotation_ instead of _@annotation(X)_)

*Solution:*
Add a elseif case inside renderAnnotation that checks for is_numeric:
<pre>
	} elseif (is_numeric($optionValue)) {
		$optionValueAsString = $optionValue;
</pre>"
33937,TYPO3.Flow,Feature,"",Accepted,Should have,"Convenience method to resolve public ""resource://"" paths",Bastian Waidelich,Karsten Dambekalns,2014-04-15 05:40,Resource,"",2012-02-15,"","",0,2012-02-15 05:25,"","",463200,"","","It would be helpful to have an easy way to resolve the 'resource://...' path 
to static resources.
Currently we end up using code like the following a lot:
<pre>
protected function resolveResourcePath($resourcePath) {
	$matches = array();
	preg_match('#resource://([^/]*)/Public/(.*)#', $resourcePath, $matches);
	if ($matches === array()) {
		throw new \TYPO3\Fluid\Core\ViewHelper\Exception('Resource path ""' . $resourcePath . '"" can\'t be resolved.', 1328543327);
	}
	$packageKey = $matches[1];
	$path = $matches[2];
	return $this->resourcePublisher->getStaticResourcesWebBaseUri() . 'Packages/' . $packageKey . '/' . $path;
}
</pre>"
33959,TYPO3.Flow,Feature,"",Resolved,Should have,Make quantity optional when using single numeric arguments in translations,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-15,"","",100,2012-02-15 17:15,"","",464250,"","","When using plural forms, the quantity to be used for finding the correct plural form has to be given explicitly. This is cumbersome when using a single numeric argument, as it means to pass the same value twice. Here is an example:

@<f:translate arguments=""{0: post.numberOfComments}"" quantity=""{post.numberOfComments}"">@

It would be nice if for single numeric arguments the quantity could be determined automatically:

@<f:translate arguments=""{0: post.numberOfComments}"">@
"
33968,TYPO3.Flow,Bug,"",Closed,Should have,Missing privileges to create symlinks in Windows cause exception,Richard Lederer,Rens Admiraal,2012-05-30 16:01,Resource,1.0.5,2012-02-16,"","",0,2012-02-16 03:52,"","",464700,"",FLOW3 1.0.2,"Warning: symlink() [<a href='function.symlink'>function.symlink</a>]: Cannot create symlink, error code(1314) in C:\xampp\htdocs\FLOW3\Data\Temporary\Development\Cache\Code\FLOW3_Object_Classes\TYPO3_FLOW3_Resource_Publishing_FileSystemPublishingTarget_Original.php line 117
9 TYPO3\FLOW3\Error\ErrorHandler::handleError(2, ""symlink() [&lt;a href='function.symlink'&gt;function.sym?link&lt;/a&gt;]: Cannot create symlink, error code(1314)"", ""C:\xampp\htdocs\FLOW3\Data\Temporary\Development\C?Publishing_FileSystemPublishingTarget_Original.php"", 117, array)

8 symlink(""C:/xampp/htdocs/FLOW3/Packages/Framework/TYPO3.FLOW3/Resources/Public"", ""C:/xampp/htdocs/FLOW3/Web/_Resources/Static/Packages/TYPO3.FLOW3"")

7 TYPO3\FLOW3\Resource\Publishing\FileSystemPublishingTarget_Original::publishStaticResources(""C:/xampp/htdocs/FLOW3/Packages/Framework/TYPO3.FLOW3/Resources/Public/"", ""Packages/TYPO3.FLOW3/"")

6 TYPO3\FLOW3\Resource\Publishing\ResourcePublisher_Original::publishStaticResources(""C:/xampp/htdocs/FLOW3/Packages/Framework/TYPO3.FLOW3/Resources/Public/"", ""Packages/TYPO3.FLOW3/"")

5 TYPO3\FLOW3\Resource\ResourceManager_Original::publishPublicPackageResources(array)

4 TYPO3\FLOW3\Core\Bootstrap::initializeResources()

3 TYPO3\FLOW3\Core\Bootstrap::initializeForRuntime()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
33970,TYPO3.Flow,Feature,"",Resolved,Should have,Add translation files for bundled validator error messages,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-16,"","",100,2012-02-16 04:50,"","",464800,"","",""
33971,TYPO3.Flow,Bug,"",Resolved,Should have,Missing id attributes in XLIFF files are not reported to the user,Karsten Dambekalns,Karsten Dambekalns,2012-04-26 20:38,I18n,1.1,2012-02-16,"","",100,2012-02-16 05:10,"","",464850,"",Git master,"XLIFF requires id attributes, but if they are missing, FLOW3 does not complain. Instead, _something_ happens in the XLIFF parser. An exception would be the better alternative to that."
33973,TYPO3.Flow,Bug,"",Resolved,Must have,Duplicate error id used in StringValidator,Karsten Dambekalns,Karsten Dambekalns,2012-03-05 20:38,Validation,1.0.3,2012-02-16,"","",100,2012-02-16 05:56,"","",464950,"",FLOW3 1.0.2,"StringValidator uses the error id 1238108068, but that is used in StringLengthValidator as well."
33975,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Tweak existing XLIFF files according to translation team feedback,Karsten Dambekalns,Karsten Dambekalns,2012-02-16 20:47,"",1.1,2012-02-16,"","",100,2012-02-16 06:17,"","",465050,"","","The XLIFF file miss @xml:space=""preserve""@, a trans-unit must look like:
<pre><trans-unit id=""mlang_labels_tablabel"" xml:space=""preserve"">
  <source>Webpages and databasecontent</source>
</trans-unit></pre>
Each trans unit must have the @xml:space=""preserve""@ attribute, this is needed by Pootle to avoid some weird problem.

An other point, please add @product-name=""package.name""@ to the file element, we use it for v4 core, and it's sometime useful to have this information in the XLIFF."
34018,TYPO3.Flow,Bug,"",Closed,Must have,Annotation with a numeric value is not correctly generated,Georg Großberger,Karsten Dambekalns,2012-02-29 05:08,Object,1.0.4,2012-02-16,"","",0,2012-02-16 14:40,"","",467200,"",Git 1.0,"I have a domain model declared abstract with the following annotation:
<pre>
 * @ORM\InheritanceType(""SINGLE_TABLE"")
 * @ORM\DiscriminatorColumn(name=""location_type"", type=""string"", length=10)
</pre>

When running a new request I got an exception from Doctrine with the message 
_[Syntax Error] Expected PlainValue but found ')' ..._ 

After some digging I found the problem: TYPO3\FLOW3\Object\Proxy\Compiler::renderAnnotation recreated the annotation, messing up the ""length"" property. In the proxy, Doctrine tries to parse, the annotation was turned into:
<pre>
 * @\Doctrine\ORM\Mapping\InheritanceType(""SINGLE_TABLE"")
 * @\Doctrine\ORM\Mapping\DiscriminatorColumn(name=""location_type"", type=""string"", length=)
</pre>

The problem is, that scalar values are only added if they are strings or boolean. 
Adding a 
<pre>
} elseif (is_scalar($optionValue)) {
	$optionValueAsString = (string) $optionValue;
}
</pre>
after the ""elseif (is_array($optionValue))"", solved the problem.
"
34048,TYPO3.Flow,Bug,"",Closed,Must have,ResolveValidator breaks on DateTime method arguments,Kira Backes,Bastian Waidelich,2012-04-25 17:40,Validation,1.0.5,2012-02-17,"","",0,2012-02-17 12:42,"","",468700,"",Git 1.0,"When a dateTime argument is set in a method the ResolveValidator breaks, he tries to create a DateTime (instead of a validator)

Fixable by the following:

Change \TYPO3\FLOW3\Validation\ValidatorResolver::resolveValidatorObjectName  (line 278)

<pre>
		if ($this->objectManager->isRegistered($validatorType)) {
</pre>

to

<pre>

		if ($this->objectManager->isRegistered($validatorType) &&
				$this->reflectionService->isClassImplementationOf($this->objectManager->getClassNameByObjectName($validatorType), 
						'TYPO3\FLOW3\Validation\Validator\ValidatorInterface')) {
</pre>"
34050,TYPO3.Flow,Bug,"",Resolved,Must have,DatetimeParser code documentation is wrong,Kira Backes,Karsten Dambekalns,2012-06-26 06:35,I18n,1.1 RC1,2012-02-17,"","",100,2012-02-17 12:56,"","",468800,"",FLOW3 1.0.0,"The public methods expect a DateTime object, which they then forward as a string to the internal methods, which then break when using substr on a DateTime object."
34110,TYPO3.Flow,Bug,"",Resolved,Should have,Proxy Class strips off Class Doc Comments,Bastian Waidelich,Bastian Waidelich,2012-02-27 20:43,Object,1.0.3,2012-02-20,"","",100,2012-02-20 06:17,"","",471700,"",Git 1.0,"The Proxy Class replaces the class doc comment of the original class with <pre>Autogenerated Proxy Class</pre>.
Instead it should keep the comments of the source class."
34133,TYPO3.Flow,Feature,"",New,Could have,RFC: Handle Semicolons in Path part of URIs as Scoped Path Parameters,Jacob Floyd,"",2012-02-21 09:17,Property,"",2012-02-21,"","",0,2012-02-21 05:27,"","",472850,"","","h1. Scoped Path Parameters

The URI RFCs hint at what I think will make an awesome, unique, feature for Flow3, and Typo3 Phoenix: Scoped Path Parameters. It's a powerful feature that could allow all sorts of search faceting, ""matrices (Tim Berners-Lee's 1996 thoughts on the possibility of Matrix URIs - We'd have to use JavaScript to achieve the same relative Matrix effect today)"":http://www.w3.org/DesignIssues/MatrixURIs.html, or scoped parameters available for use in packages.

One of the possible uses for a path parameter in Typo3 might be to view historical versions of pages or branches of the page tree. You could set the version parameter on a particular part of the hierarchical path (not necessarily the final segment that identifies the page) and get past published versions of a page in that branch. Workspaces are great for queuing future work and pushing it through the required workflow stages, but workspaces are awkward for managing past versions. But I digress - what exactly is a path parameter?

h2. What is a _Path Parameter_?

> A URI path pa­ram­e­ter is part of a path seg­ment that oc­curs after its name. Path pa­ram­e­ters offer a unique op­por­tu­ni­ty to con­trol the rep­re­sen­ta­tions of re­sources. Since they can't be ma­nip­u­lat­ed by stan­dard Web forms, they have to be con­struct­ed out of band. Since they're part of the path, they're se­quen­tial, un­like query strings. Most im­por­tant­ly, how­ev­er, their be­haviour is not ex­plic­it­ly de­fined. - ""HTTP Path Parameter Syntax (HTTP Path Parameter Syntax by Dorian Taylor)"":http://doriantaylor.com/policy/http-url-path-parameter-syntax

Consider the latest version of the URI spec (""3986 (Uniform Resource Identifier [URI]: Generic Syntax)"":http://datatracker.ietf.org/doc/rfc3986/) which says:

> URI producing applications
> often use the reserved characters allowed in a segment to delimit
> scheme-specific or dereference-handler-specific subcomponents.  For
> example, the semicolon ("";"") and equals (""="") reserved characters are
> often used to delimit parameters and parameter values applicable to
> that segment.  The comma ("","") reserved character is often used for
> similar purposes.  For example, one URI producer might use a segment
> such as ""name;v=1.1"" to indicate a reference to version 1.1 of
> ""name"", whereas another might use a segment such as ""name,1.1"" to
> indicate the same.  Parameter types may be defined by scheme-specific
> semantics, but in most cases the syntax of a parameter is specific to
> the implementation of the URI's dereferencing algorithm.
> - ""3986 (Uniform Resource Identifier [URI]: Generic Syntax - Section 3.3 Last Paragraph)"":http://tools.ietf.org/html/rfc3986#section-3.3

Though ""3986 (Uniform Resource Identifier [URI]: Generic Syntax)"":http://datatracker.ietf.org/doc/rfc3986/ has an EBNF definition that allows for parameters in the path (like &quot;name;v=1.1&quot;), I think it's clearer to see in the previous version (""2396 (Uniform Resource Identifiers [URI]: Generic Syntax)"":http://datatracker.ietf.org/doc/rfc2396/ ) where it shows that each path_segment (separated by a ""/"" can be followed by parameters.
[...]

h2. Examples

So, In a path like @/foo/bar/baz@, you could add parameters that apply to a particular branch of the page tree: @/foo;v=1.1/bar;authgroup=employee/baz;views=map,calendar@

This means that @http://www.blah.com/some;param1=foo/crazy;param2=bar/path.html@ is a perfectly valid url (see ""this article (What Every Developer Should Know About URLs by Alan Snorkin)"":http://www.skorks.com/2010/05/what-every-developer-should-know-about-urls/ and ""this page (HTTP Path Parameter Syntax)"":http://doriantaylor.com/policy/http-url-path-parameter-syntax on the subject).

h3. Other examples

* @/products;filter=family-friendly/videos;rating=pg?q=dragon@

* @/foo/abc/bar/def@
@/foo;v=2.8/abc/bar/def;diff=with-current@
@/foo;L=en/abc/bar;L=de/def@
@/foo/abc;w=draft/bar/def;diff=with-other-authors@

* @/map;type=topo/south-america/Brasil/São-Pualo;type=subway,cycle@

* @/users;auth-group=super/John-Smith@
is obviously a different view of the same resource:
@/users/John-Smith@
only this one is the public view, and the other is the super-user view

If I were to implement amazon.com's faceted search with path parameters, it might do this:
With Path Params: @http://www.amazon.com/Movies-TV;format=DVD,Blu-Ray;genre=drama;stars=3+;price=$0.01-$20/Movies;actor=Christopher-Lee;director=Alan-Gibson@
> Original: @http://www.amazon.com/gp/search/ref=sr_nr_p_36_0?bbn=2649512011&qid=1329629982&rh=n%3A2625373011%2Cp_n_format_browse-bin%3A2650304011%7C2650305011%2Cn%3A%212625374011%2Cn%3A2649512011%2Cp_72%3A3014476011%2Cp_n_theme_browse-bin%3A2650368011%2Cp_36%3A3052254011&rnid=3052254011&low-price=0.01&high-price=20&x=0&y=0#/ref=sr_nr_p_n_feature_three_br_2?rh=n%3A2625373011%2Cp_n_format_browse-bin%3A2650304011%7C2650305011%2Cn%3A%212625374011%2Cn%3A2649512011%2Cp_72%3A3014476011%2Cp_n_theme_browse-bin%3A2650368011%2Cp_36%3A1-2000%2Cp_n_feature_three_browse-bin%3A2651257011&bbn=2649512011&ie=UTF8&qid=1329630193&rnid=2651254011@

h2. Implementation

* TYPO3\FLOW3\Property\DataType\Uri breaks things down into the different URI components
* TYPO3\FLOW3\MVC\Web\Routing\UriBuilder deals with URIs throughout Flow3

UriBuilder\setArguments allows prefixed query args: @array('prefix1' => array('foo' => 'bar')) gets ""&prefix1[foo]=bar""@. This could also be done with a path parameter (which intrinsically has a 'scope', ie, earlier pages or templates in the rootline won't be able to use a parameter set on their children. The parameter applies only from that level on.) @&prefix1[foo]=bar@ might become @my-controller/prefix1;foo=bar/fun-stuff@.


h3. Routing

I think that Flow3 needs to handle the path parameters by default. Packages should not be required to create special routes just to handle these parameters - they should be loaded in some kind of array that is accessible from within the package. The default handling could be changed if required for a particular installation (see defaults below).

So, I'd imagine that routing would happen like this (or something like it):
# Separate a given URI (possibly an requested resource) into the various parts, like now: host, user, path, query ...
# Additionally parse the path segment to place all of the path params in a path_param array - something that helps respect the 'scoped' nature of these parameters - They are much more specific than the general query string parameters.
# Strip all of the path parameters from the path and process routing as usual.
#* This is important - routing matches only on the path-segments, not on the path parameters. A new kind of routing rule could be used to redirect a request based on one or more of the path parameters, but the requested resource *does not change* based on the params. The view might look different, or have additional features, but the path sans parameters and path with parameters identifies _the *same* node_.

h3. Defaults and Security

Accessing the same node, no matter the path parameters is important. Be default, or at least to begin with, path parameters should be detected, stripped, and the request should be redirected with a '302 Found' to the same URL sans the parameters. Then when someone begins to use path parameters in their package, the package can enable them - probably with a special routing rule that turns them on, but only for a particular branch or segment of the path and/or tree.

Back to the point of path parameters not changing the node in the content tree: Allowing redirection to other nodes could introduce some security issues with url spoofing that would not be fun to deal with. Right now, the most common use of the semicolon is to hack insecure software. Tomcat uses the path parameter to pass JSESSIONID when cookies can't easily be included in some request. This Tomcat feature has been the basis for hacking and phishing as some browsers didn't understand the semicolon. To make sure Flow3 doesn't have the same problem - I think support for path parameters is a must, even if all that's done is drop them.

h2. Final thoughts

Even though some browsers might have issues (the articles I saw online were somewhat dated, so the issues may have been resolved) I think Flow3 should support this, because browsers are not the only content consumers around. Flow3 can be the basis for some robust APIs that are merely for inter-server communication. Browsers also don't support HTTPs PUT or DELETE on form elements, but Flow3 is getting amazing support for those... Please Support Path Parameters.

Another important path parameters side effect (hopefully) would be improved and more robust caching of pages that require authentication (say of a particular usergroup).

As a side note, the specs also indicate that semicolons can be used in place of ampersands in the query string. I don't know if Flow3 supports that right now, but I think it should. (If needed, I can file another feature request about that.)"
34134,TYPO3.Flow,Bug,"",Needs Feedback,Should have,PropertyMapper throws unnecessary exception,Kira Backes,Christian Müller,2014-02-19 04:14,Property,"",2012-02-21,"","",0,2012-02-21 06:07,"","",472900,"",Git master,"In the case of models with non-optional constructor arguments, you get an exception when one of those subproperties has an error in the TypeConverter. This can be fixed by changing the following (\TYPO3\FLOW3\Property\PropertyMapper:162)

<pre>
			$currentPropertyPath[] = $targetPropertyName;
			$targetPropertyValue = $this->doMapping($sourcePropertyValue, $targetPropertyType, $subConfiguration, $currentPropertyPath);
			array_pop($currentPropertyPath);
			if ($targetPropertyValue !== NULL) {
				$convertedChildProperties[$targetPropertyName] = $targetPropertyValue;
			}
</pre>

To the following:

<pre>
			$currentPropertyPath[] = $targetPropertyName;
			$targetPropertyValue = $this->doMapping($sourcePropertyValue, $targetPropertyType, $subConfiguration, $currentPropertyPath);
			if ($this->messages->forProperty(implode('.', $currentPropertyPath))->hasErrors()) {
				return NULL;
			}
			array_pop($currentPropertyPath);
			if ($targetPropertyValue !== NULL) {
				$convertedChildProperties[$targetPropertyName] = $targetPropertyValue;
			}
</pre>"
34154,TYPO3.Flow,Bug,"",Resolved,Must have,ObjectValidator has exponential growth factor,Kira Backes,Rens Admiraal,2012-05-08 10:16,Validation,1.1,2012-02-21,"","",100,2012-02-21 11:42,"","",473900,"",Git master,"In the onFlush method of the PersistenceManager all objects are validates, this is a problem especially for many connected entities. Look at the times needed:

<pre>
Validate Insertion Count: 174
onFlush Validation Duration: 9s

Validate Insertion Count: 234
onFlush Validation Duration: 43s

Validate Insertion Count: 246
onFlush Validation Duration: 129s
</pre>

At about 300 entities this is already taking hours to validate, so the system is completely unusable."
34169,TYPO3.Flow,Feature,"",Resolved,Must have,Encapsulate i18n configuration so it can be passed around and modified easily,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-22,"","",100,2012-02-22 05:05,"","",474650,"","","The behavior of the i18n component needs to be configurable, down to per request in some cases. Thus a configuration object to hold configuration should be available."
34170,TYPO3.Flow,Bug,"",Resolved,Must have,XLIFF models are created with wrong locale,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-22,"","",100,2012-02-22 05:11,"","",474700,"",Git master,"If a translation is requested but no (exact) match is found, a different locale may take effect (e.g. en instead of en_UK). The XLIFF model created will refer to the en XLIFF file, but claim it's locale is en_UK. This leads to further problems with translations (like missing labels if no target elements are present in XLIFF files)."
34171,TYPO3.Flow,Bug,"",Resolved,Must have,translateById() returns NULL if no arguments need to be replaced,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-22,"","",100,2012-02-22 05:13,"","",474750,"",Git master,"If @translateById()@ is able to find a translation but is not given any arguments to embed in the output, NULL is returned."
34172,TYPO3.Flow,Feature,"",Resolved,Must have,Implement fallback rules for i18n,Karsten Dambekalns,Karsten Dambekalns,2012-02-23 20:43,I18n,1.1,2012-02-22,"","",100,2012-02-22 05:15,"","",474800,"","","Currently the only fallback applied when resolving translations is the implicit chain in locale, e.g. en_UK > en

It should be possible to define an order for fallback instead, so that one can say _requested_ > de > za > _default_ should be used."
34177,TYPO3.Flow,Feature,"",Resolved,Should have,Make Resource use with file operations easier,Karsten Dambekalns,Karsten Dambekalns,2012-05-11 08:38,Resource,1.1,2012-02-22,"","",100,2012-02-22 06:54,"","",475050,"","","To use a @Resource@ with file operations, one can use the @resource://?@ scheme and the @__toString()@ method of any @ResourcePointer@.

To make this a little easier, casting of @Resource@ to string should return the SHA1 (as is the case with the ResourcePointer already). A @getUri()@ method to return a ready to use @resource://?@ string would also be useful."
34185,TYPO3.Flow,Feature,"",Resolved,Could have,SignalSlot Dispatcher should check if Slot method is declared static and act accordingly,Christian Müller,Karsten Dambekalns,2012-05-08 20:39,SignalSlot,"",2012-02-22,"","",100,2012-02-22 09:05,"","",475450,"","","Currently if you connect a $classname + $methodname as slot it will instantiate the class to call $methodname on the instance, even if the method is declared static. I think it wouldn't be a problem to call it static in this case to avoid problems with class instances that shouldn't be there normally."
34186,TYPO3.Fluid,Bug,"",Closed,Should have,Setting a value always resets the field on mapping errors,Kira Backes,Bastian Waidelich,2015-02-25 04:29,ViewHelpers,"",2012-02-22,"","",0,2012-02-22 09:41,"","",475500,"",Git 1.0,"If I set a value on any field of the form it gets reset every time there
is a mapping error, so the user has to reenter the field every time.

Could easily be fixed by changing the order of the if-clause in
\TYPO3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper::getValue"
34231,TYPO3.Fluid,Task,"",Resolved,Should have,Move link.widget & uri.widget ViewHelpers to Widget subfolder,Bastian Waidelich,Bastian Waidelich,2012-05-14 20:38,Widgets,1.1,2012-02-24,"","",100,2012-02-24 09:40,"","",477750,"","","Widget related ViewHelpers should be in the Widget subfolder of Fluid (as in v4).
@link.widget@ should be @widget.link@, @uri.widget@ should be @widget.uri@.
Existing ViewHelper classes should extend the moved classes and marked deprecated."
34232,TYPO3.Fluid,Feature,"",Resolved,Should have,Translation support in SelectViewHelper,Karsten Dambekalns,Karsten Dambekalns,2012-03-19 21:38,ViewHelpers,1.1,2012-02-24,"","",100,2012-02-24 10:29,"","",477800,"","",The SelectViewHelper should offer translation of option labels.
34293,TYPO3.Flow,Bug,"",Resolved,Should have,Typo in TYPO3\FLOW3\Session\Aspect\SessionObjectMethodsPointcutFilter::matches(),Johannes K,Johannes K,2012-02-26 20:55,Session,1.0.4,2012-02-26,"","",100,2012-02-26 11:54,"","",480800,"",Git 1.0,"l.74: __desctruct should read __destruct

<code class=""php"">
if (preg_match('/^__wakeup|__construct|__desctruct|__sleep|__serialize|__unserialize|__clone|shutdownObject|initializeObject|inject.*$/', $methodName) !== 0) {
    return FALSE;
}
</code>"
34304,TYPO3.Flow,Task,"",Resolved,Should have,"Add abstract classes for entrypoint, provider & token in security authentication",Aske Ertmann,Aske Ertmann,2012-02-29 20:38,Security,1.1,2012-02-26,"","",100,2012-02-26 16:05,"","",481250,"","","There's a lot of duplicated code in the security authentication, we should create some abstract classes to prevent this."
34309,TYPO3.Fluid,Task,"",New,Could have,Unknown ViewHelpers cause exception - should be handled more graceful,Lars Düsing,"",2012-03-07 12:40,ViewHelpers,"",2012-02-26,"","",0,2012-02-26 17:24,"","",481500,"","","Current git. Backend -> Login -> Management -> User Settings

Object ""TYPO3\Fluid\ViewHelpers\Form\TextboxViewHelper"" is not registered.
46 TYPO3\FLOW3\Object\ObjectManager::get(""TYPO3\Fluid\ViewHelpers\Form\TextboxViewHelper"")

45 TYPO3\Fluid\Core\Parser\TemplateParser_Original::initializeViewHelperAndAddItToStack(TYPO3\Fluid\Core\Parser\ParsingState, ""f"", ""form.textbox"", array)

44 TYPO3\Fluid\Core\Parser\TemplateParser_Original::openingViewHelperTagHandler(TYPO3\Fluid\Core\Parser\ParsingState, ""f"", ""form.textbox"", "" property=&quot;accountIdentifier&quot; "", boolean)

43 TYPO3\Fluid\Core\Parser\TemplateParser_Original::buildObjectTree(array)

42 TYPO3\Fluid\Core\Parser\TemplateParser_Original::parse(""&lt;fieldset&gt;?	&lt;legend&gt;Account&lt;/legend&gt;??	&lt;div class=?			&lt;/f:for&gt;?			&lt;/ul&gt;?		&lt;/div&gt;?	&lt;/f:if&gt;?&lt;/fieldset&gt;"")

41 TYPO3\Fluid\View\AbstractTemplateView::renderPartial(""Module/Shared/EditUserSettingsForm"", NULL, array)

40 TYPO3\Fluid\ViewHelpers\RenderViewHelper_Original::render(NULL, ""Module/Shared/EditUserSettingsForm"", array, boolean)

39 call_user_func_array(array, array)

38 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

37 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

36 {closure}()

35 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::renderChildren()

34 TYPO3\Fluid\ViewHelpers\FormViewHelper_Original::render(""update"", array, NULL, NULL, NULL, TYPO3\FLOW3\Persistence\Doctrine\Proxies\__CG__\TYPO3\FLOW3\Security\Account, """", """", array, boolean, boolean, array, NULL, NULL, NULL)

33 call_user_func_array(array, array)

32 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

31 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

30 FluidCache_TYPO3_TYPO3__Module_Management_UserSettings_action_index_d27cd389edf3cbd52046311e12184a2cb263dec6::section_040f06fd774092478d450774f5ba30c5da78acc8(TYPO3\Fluid\Core\Rendering\RenderingContext)

29 TYPO3\Fluid\View\AbstractTemplateView::renderSection(""content"", array, boolean)

28 TYPO3\Fluid\ViewHelpers\RenderViewHelper_Original::render(""content"", NULL, array, boolean)

27 call_user_func_array(array, array)

26 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

25 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

24 FluidCache_TYPO3_TYPO3__Module_Management_UserSettings_layout_BackendModule_f2946d21abf7b9b9c1a8b6de9e4127661f5436c8::render(TYPO3\Fluid\Core\Rendering\RenderingContext)

23 TYPO3\Fluid\View\AbstractTemplateView::render()

22 TYPO3\FLOW3\MVC\Controller\ActionController_Original::callActionMethod()

21 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

20 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

19 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

18 TYPO3\TYPO3\Controller\Backend\ModuleController_Original::indexAction(array)

17 call_user_func_array(array, array)

16 TYPO3\FLOW3\MVC\Controller\ActionController_Original::callActionMethod()

15 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

14 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

13 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

12 call_user_func_array(array, array)

11 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

10 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

9 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)

8 TYPO3\FLOW3\AOP\Advice\AroundAdvice::invoke(TYPO3\FLOW3\AOP\JoinPoint)

7 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AroundAdvice::invoke(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

3 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

2 TYPO3\FLOW3\MVC\Web\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
34322,TYPO3.Kickstart,Bug,"",Resolved,Should have,./flow3 kickstart:package produces Uncaught Exception,ToBe ,Christian Müller,2012-07-09 12:05,"","",2012-02-27,"","",100,2012-02-27 08:35,"","",482150,"",FLOW3 1.0.0,"./flow3 kickstart:package MyCompany.Dummy1 
ends in an Uncaught Exception Class MyCompany\Dummy1\Controller\StandardController does not exist

>>
tobe@DebianSamsungP400:/mnt/iscsi_shared/www/flow3$ ./flow3 kickstart:package MyCompany.Dummy1
Created .../MyCompany.Dummy1/Classes/Controller/StandardController.php
Created .../MyCompany.Dummy1/Resources/Private/Templates/Standard/Index.html

tobe@DebianSamsungP400:/mnt/iscsi_shared/www/flow3$ ./flow3 package:list
Uncaught Exception
  Class MyCompany\Dummy1\Controller\StandardController does not exist

More Information
  Exception code      #-1
  File                /mnt/iscsi_shared_local/www/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Reflection/ReflectionService.php line 962

ACTIVE PACKAGES:
 Doctrine.Common          2.2.0          Doctrine Common
 Doctrine.DBAL            2.2.1          Doctrine DBAL
 Doctrine.ORM             2.2.0          Doctrine ORM
 MyCompany.Dummy1
 Symfony.Component.Yaml   2.1.0          Symfony Components YAML Library
 TYPO3.FLOW3              1.0.0          FLOW3
 TYPO3.Fluid              1.0.0          Fluid Templating Framework
 TYPO3.Kickstart          1.0.0          FLOW3 Kickstarter
 TYPO3.Party              1.0.0          Party Information Framework
 TYPO3.Welcome            1.0.0          Welcome package with default view for FLOW3
<<

I tried it many times at different symstems and hardware, and yes the file is created and filled with content...

The bug happens often, my workaround is to
>>
kickstart:package MyCompany:Dymmy1
kickstart:package MyCompany:Dymmy2
package:delete MyCompany:Dymmy2
<<
and now ./flow3 package:list runs without failures.

"
34324,TYPO3.Fluid,Bug,Task #11969: Make widgets' template configurable,Closed,Must have,Template of widgets can't be changed,Christian Müller,Karsten Dambekalns,2012-03-07 10:50,Widgets,"",2011-04-01,"","",20,2012-02-27 09:16,"","",482250,"",FLOW3 1.0.0,"Currently the widgets use the default template path only and it is impossible to override those which is kind of a nogo.

Attached patch fixes this. The path can be set via TS. e.g. 

<pre>
plugin.tx_fo.view.widgetRootPath = fileadmin/fo/
</pre>
If using the pagination widget, the index.html needs to be at fileadmin/fo/ViewHelpers/Widget/Paginate/Index.html

One open question: Is this the correct way to go with the part ""ViewHelpers"" inside this path? or should it be fileadmin/fo/Paginate/Index.html?"
34399,TYPO3.Flow,Bug,"",Resolved,Must have,Remove Default Authentication Provider configuration,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-02-29 20:38,Security,1.1 beta 1,2012-02-28,"","",100,2012-02-28 16:49,"","",485850,"",Git master,"The default authentication provider was always configured at the first position and could not be removed; which lead to really strange issues with Entry Points.

For example, we broke Phoenix by that ;)"
34404,TYPO3.Flow,Bug,"",New,Should have,JsonView transformObject does not respect _descendAll configuration,Alexander Berl,"",2012-02-28 19:12,"","",2012-02-29,"","",0,2012-02-28 19:12,"","",486100,"",Git master,"When configuring a jsonView for a domain object, the '_descendAll' configuration is currently not taken into account, leading to the need to configure all properties for traversal.


The part of TYPO3\FLOW3\MVC\View\JsonView::transformObject line 199+

<pre>
				if (!is_array($propertyValue) && !is_object($propertyValue)) {
					$propertiesToRender[$propertyName] = $propertyValue;
				} elseif (isset($configuration['_descend']) && array_key_exists($propertyName, $configuration['_descend'])) {
					$propertiesToRender[$propertyName] = $this->transformValue($propertyValue, $configuration['_descend'][$propertyName]);
				}
</pre>

should be

<pre>
				if (!is_array($propertyValue) && !is_object($propertyValue)) {
					$propertiesToRender[$propertyName] = $propertyValue;
				} elseif (isset($configuration['_descendAll'])) {
					$propertiesToRender[$propertyName] = $this->transformValue($propertyValue, $configuration['_descendAll']);
				} elseif (isset($configuration['_descend']) && array_key_exists($propertyName, $configuration['_descend'])) {
					$propertiesToRender[$propertyName] = $this->transformValue($propertyValue, $configuration['_descend'][$propertyName]);
				}
</pre>

A further *nice-to-have feature* would be a *real* __descendAll_ configuration that just carelessly descends all objects, though it probably should still deal with recursion of domain objects or stop at a specific recursion depth.
Something like an int configuration __recursionDepth_ would work:
<pre>
				} elseif (isset($configuration['_recursionDepth']) && $configuration['_recursionDepth'] > 0) {
					$configuration['_recursionDepth']--;
					$propertiesToRender[$propertyName] = $this->transformValue($propertyValue, $configuration);
				
</pre>

_On a side note:_ The current implementation for configuration settings behaves differently for arrays / ArrayAccess objects and other objects.
While for arrays, __descendAll_ overrules __only_ and __exclude_ settings, for an object __only_ and __exclude_ overrule __descend_ (and with the patch above also __descendAll_).
"
34407,TYPO3.Flow,Bug,"",Resolved,Should have,"NotFoundView should ""throw"" 404",Adrian Föder,Adrian Föder,2012-03-07 08:39,MVC,1.1,2012-02-29,"","",100,2012-02-29 04:05,"","",486250,"",Git master,"The NotFoundView currently sends itself out with HTTP status 200, saying it was a 404 error. It should instead say 404 Not Found."
34408,TYPO3.Flow,Bug,"",Closed,Should have,CollectionValidator goes in endless recursion,Pankaj Lele,Karsten Dambekalns,2012-02-29 05:23,Validation,1.1,2012-02-29,"","",0,2012-02-29 04:24,"","",486300,"",Git master,"This is a case when 2 domain objects are associated with ManyToMany relation. If the owning side object is created/updated/deleted via ActionController the page load hangs and after few minutes it goes out of memory. 

I imagine Post m:n Tags, when Post is created the Post::tags property is validated with CollectionValidator then it again tries to validate Tag::posts property and goes in recursion."
34414,TYPO3.Flow,Feature,"",Resolved,Could have,JsonView's _exposeObjectIdentifier configurable,Adrian Föder,Adrian Föder,2012-05-29 03:07,MVC,2.0 beta 1,2012-02-29,"","",100,2012-02-29 07:11,"","",486600,"","","The configuration setting for the MVC JsonView allows exposing an object's persistence identifier.
Currently, that configuration value is only regarded when TRUE and resulting in a fixed '__identity' key.
It could be improved with allowing either TRUE or a specific value which will become the respective key.

so,

<pre>
  blog:
    _exposeObjectIdentifier: TRUE
</pre>
will result in @{""__identity"":""e4f40dfc-8c6e-4414-a5b1-6fd3c5cf7a53""}@ (matching the current behaviour), while

<pre>
  blog:
    _exposeObjectIdentifier: 'guid'
</pre>
will result in @{""guid"":""e4f40dfc-8c6e-4414-a5b1-6fd3c5cf7a53""}@
"
34423,TYPO3.Flow,Bug,"",Resolved,Should have,Missing $context member declaration in ObjectManager,Karsten Dambekalns,Bastian Waidelich,2012-02-29 20:38,Object,1.1,2012-02-29,"","",100,2012-02-29 12:22,"","",487050,"",Git master,The ObjectManager refers to $this->context which doesn't exist.
34426,TYPO3.Flow,Task,"",Resolved,Should have,How to receive the correct class name for an object?,Andreas Förthner,Andreas Förthner,2012-05-10 09:11,Reflection,1.1 beta 1,2012-02-29,"","",100,2012-02-29 17:09,"","",487200,"","","Currently there is no helper method to find the correct class name of a given object. The reflection service should provide such a method.

For now I would say we only have to handle doctrine lazy loading proxies and return the parente class for them.

Can someone imagine different situations where get_class($object) does not return the correct (expected) class name from a users perspective?"
34428,TYPO3.Fluid,Feature,"",Rejected,Should have,FLUID comments <!--- ... --->,Michael Knoll,Bastian Waidelich,2012-03-09 07:36,Core,"",2012-02-29,"","",0,2012-02-29 17:54,"","",487300,"","","I opened up this issue as a reference for a branch committed to gerrit. Here are some thoughts about this feature:

http://mimi.kaktusteam.de/blog-posts/2012/02/fluid-comments/

There is also a discussion in the mailing list:

http://lists.typo3.org/pipermail/typo3-project-typo3v4mvc/2012-February/011837.html

A patch / diff for FLUID 1.3.0 is available here:

http://mimi.kaktusteam.de/uploads/media/fluid_comments.diff"
34448,TYPO3.Flow,Bug,"",Resolved,Should have,Integrity constraint violation on FLOW3 resource tables,Jonas ,Karsten Dambekalns,2012-06-01 13:37,Persistence,"",2012-03-01,"","",100,2012-03-01 11:01,"","",488300,"",FLOW3 1.0.3,"I have an own model/class/controller, called ""award"" with a property mapped to the standard FLOW3 resource table.

	/**
	 * The image
	 * @var \TYPO3\FLOW3\Resource\Resource
	 * @ORM\ManyToOne(targetEntity=""\TYPO3\FLOW3\Resource\Resource"")
	 */
	protected $image;
	
	
This works fine, the images get uploaded and the resource and resourcepointer tables are correctly filled. Then I created two of my award models and uploaded the same image for every one. Still all works fine, the resourcepointer table stays with only one entry and the resource table filled up with the same 'resourcepointer'-field for every record.

The error occurs when I try to delete my award-object. It seems FLOW3 tries to delete the only record of the resourcepointer table even though there still exist references from my other award-object.
This naturally fails and the following error pops up:

<pre>SQLSTATE[23000]: Integrity constraint violation: 1451 Cannot delete or update a parent row: a foreign key constraint fails (`praemien`.`typo3_flow3_resource_resource`, CONSTRAINT `typo3_flow3_resource_resource_ibfk_1` FOREIGN KEY (`resourcepointer`) REFERENCES `typo3_flow3_resource_resourcepointer` (`hash`)
13 PDOStatement::execute(array)
12 Doctrine\DBAL\Connection::executeUpdate(""DELETE FROM typo3_flow3_resource_resourcepointer WHERE hash = ?"", array)
11 Doctrine\DBAL\Connection::delete(""typo3_flow3_resource_resourcepointer"", array)
10 Doctrine\ORM\Persisters\BasicEntityPersister::delete(TYPO3\FLOW3\Persistence\Doctrine\Proxies\TYPO3FLOW3ResourceResourcePointerProxy)
9 Doctrine\ORM\UnitOfWork::executeDeletions(TYPO3\FLOW3\Persistence\Doctrine\Mapping\ClassMetadata)
8 Doctrine\ORM\UnitOfWork::commit()
7 Doctrine\ORM\EntityManager::flush()
6 TYPO3\FLOW3\Persistence\Doctrine\PersistenceManager_Original::persistAll(""TYPO3\FLOW3\Core\Bootstrap::finishedRuntimeRun"")
5 call_user_func_array(array, array)
4 TYPO3\FLOW3\SignalSlot\Dispatcher::dispatch(""TYPO3\FLOW3\Core\Bootstrap"", ""finishedRuntimeRun"", array)
3 TYPO3\FLOW3\Core\Bootstrap::emitFinishedRuntimeRun()
2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()
1 TYPO3\FLOW3\Core\Bootstrap::run()</pre>"
34464,TYPO3.Flow,Feature,"",Resolved,Should have,Content security acls should follow the same concept as method security acls,Andreas Förthner,Andreas Förthner,2012-04-27 08:38,Security,1.1,2012-03-02,"","",100,2012-03-02 09:57,"","",489100,"","",Currently method security acls follow a whitelist approach and content security acls follow a blacklist approach. This should be streamline to a whiteliste approach for both.
34466,TYPO3.Flow,Bug,"",Resolved,Should have,Roles are not cleared after every test in functional tests,Andreas Förthner,Andreas Förthner,2012-04-28 08:37,Security,1.1,2012-03-02,"","",100,2012-03-02 10:00,"","",489200,"",Git master,If you do not call authenticateRoles() in one test this will not end in no roles being authenticated as expected. Instead the roles from the last test are still there.
34467,TYPO3.Kickstart,Bug,"",Closed,Should have,Less Backslashes in the Annotation,Matthias Witte,Karsten Dambekalns,2012-03-07 11:49,"","",2012-03-02,"","",0,2012-03-02 11:18,"","",489250,"",FLOW3 1.0.3,"I've done the guide on http://flow3.typo3.org/documentation/guide/partii.html

So i wanted to add a Comment model to enhance the blog.

Ive used kickstarter to add a new model with this command:

@./flow3 kickstart:model TYPO3.Blog Comment author:string text:string post:\TYPO3\Blog\Domain\Model\Post@

The annotation for the get and set method gone wrong:

	/**
	 * Get the Comment's post
	 *
	 * @return \TYPO3\Blog\Domain\Model\TYPO3BlogDomainModelPost The Comment's post
	 */
	public function getPost() {
		return $this->post;
	}

	/**
	 * Sets this Comment's post
	 *
	 * @param \TYPO3\Blog\Domain\Model\TYPO3BlogDomainModelPost $post The Comment's post
	 * @return void
	 */
	public function setPost($post) {
		$this->post = $post;
	}

In my opinion there have to be more backslashes in dhe @param annotations.

Hope someone will understand this :D"
34527,TYPO3.Flow,Bug,"",Resolved,Must have,Add method in repositories does also update,Kira Backes,Karsten Dambekalns,2012-05-30 14:38,Persistence,1.1 beta 2,2012-03-05,"","",100,2012-03-05 05:26,"","",491900,"",Git 1.0,"The add method in repositores does also update existing entities, this is a dangerous security flaw, as it allows an attacker to misuse creation forms (i.e. a register form) and change existing entities."
34545,TYPO3.Flow,Bug,"",Resolved,Could have,Hint at wrong usage of @ORM\MappedSuperclass not displayed,Ondrej Hatala,Karsten Dambekalns,2012-06-25 14:42,Persistence,1.1 RC1,2012-03-05,"","",100,2012-03-05 13:37,"","",492800,"",FLOW3 1.1.0 beta 1,"Doctrine 2 allows usage of @MappedSuperclass without @Entity, but in FLOW3 @Entity annotation is necessary. That's why the hint was added (http://forge.typo3.org/issues/27285).

Nowadays this behaviour is broken, because TYPO3\FLOW3\Reflection\ReflectionService::ensureAggregateRootInheritanceChainConsistency() is executed before the first call to Flow3AnnotationDriver::getClassSchema() and fails.

Proposed solution: add check to ensureAggregateRootInheritanceChainConsistency() do not try to check aggregate roots for schema-less objects.

It is however highly probable that sooner or later this same problem will happen again, so it may be advisable to deal with it in better way."
34547,TYPO3.Flow,Bug,"",Resolved,Must have,wrong variable name inside rename() of StreamWrapperAdapter,Bernhard Fischer,Bernhard Fischer,2012-03-06 09:10,Resource,1.0.4,2012-03-06,"","",100,2012-03-06 02:35,"","",492900,"",FLOW3 1.0.0,The rename function uses the variable $path which should be $path_from. No error occurred so far because the rename function isn't used.
34555,TYPO3.Flow,Bug,"",Resolved,Should have,StreamWrapperAdapter::stream_lock does not return StreamWrapper result,Bastian Waidelich,Bastian Waidelich,2012-03-23 09:39,Resource,1.1,2012-03-06,"","",100,2012-03-06 06:30,"","",493300,"",FLOW3 1.0.0,"While writing unit tests for the StreamWrapperAdapter, I came upon this issue: @StreamWrapperAdapter::stream_lock()@ does not return the results of the actual stream wrapper. But according to the docs this ""returns TRUE on success or FALSE on failure."".

Apart from that the StreamWrapperAdapter is lacking unit tests currently

Most of the functions in StreamWrapperAdapter call @createStreamWrapper()@ in order to retrieve the actual StreamWrapper. The method looks like this:
<pre>
<code class=""php"">
protected function createStreamWrapper($path) {
	if ($this->streamWrapper === NULL) {
		$explodedPath = explode(':', $path, 2);
		$scheme = array_shift($explodedPath);
		$this->streamWrapper = self::$objectManager->create(self::$registeredStreamWrappers[$scheme]);
	}
}
</code>
</pre>

If I get it right, this means that the streamWrapper is only instantiated the *first* time this method is called. @createStreamWrapper('sheme1://foo'); createStreamWrapper('sheme2://bar');@ would return the same instance.

*NOTE:* As Karsten mentioned in the comments, this is probably not true as PHP will create a fresh instance of the adapter for every use. But this should be secured with tests (also to prevent issues like #34547)"
34608,TYPO3.Flow,Bug,"",Resolved,Must have,ResourceStreamWrapper::seek gives exactly the wrong bool value,Ferdinand Kuhl,"",2012-03-12 21:38,Resource,1.0.4,2012-03-06,"","",100,2012-03-06 13:54,"","",495950,"",Git master,"The ResourceStreamWrapper does:

@return fseek($this->handle, $offset, $whence);@

The documentation to fseek says:
> Upon success, returns 0; otherwise, returns -1.

But PHP evaluates 0 to FALSE and -1 to TRUE. So the return value is always wrong. :("
34614,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,Evil packed bz2 package,Jan Roth,Karsten Dambekalns,2012-05-30 15:55,Build Process,1.0.5,2012-03-06,"","",100,2012-03-06 16:50,"","",496250,"",FLOW3 1.0.3,"in the FLOW3-1.0.3.tar.bz2 file is a bad fileentry for ./ . if you untar this bz2 file as root, you change your directory owner and group for your current directory.
That is very bad...... After i untar it, i can't not login via ssh and public key to my maschine, because openssh can't access my authorized_keys file.

Please fix this issue, it was very time expensive..."
34620,TYPO3.Flow,Bug,"",Resolved,Must have,Wrong return value for getAccessDecisionVoters(),Bernhard Fischer,Bernhard Fischer,2012-03-12 21:38,Security,1.0.4,2012-03-06,"","",100,2012-03-06 18:19,"","",496550,"",FLOW3 1.0.0,"The return value of the function getAccessDecisionVoters() in the AccessDecisionVoterManager should return a array. It doesn't really matter because this function is never referenced.
Type hinting for $securityContext is missing the leading \ and hinting for $authenticationManager in the PolicyEnforcement is also wrong."
34643,TYPO3.Fluid,Task,"",Resolved,Should have,variable annotations missing prepending backslash,Bernhard Fischer,Bernhard Fischer,2012-03-08 08:38,"",1.1,2012-03-07,"","",100,2012-03-07 09:30,"","",497700,"","",Automated scan found some incorrect annotations.
34648,TYPO3.Flow,Feature,"",Resolved,Must have,Implement a way to authenticate with a file based encrypted key,Aske Ertmann,Aske Ertmann,2012-05-10 20:39,Security,1.1,2012-03-07,"","",100,2012-03-07 11:23,"","",497900,"","","For the setup wizard we need a file based encryped key provider. For this we need a password token which only has a password credential. We also need an authentication provider for validating the keys and some service for retrieving, persisting & generating keys."
34660,TYPO3.Kickstart,Bug,"",Resolved,Should have,variable annotations missing prepending backslash,Bernhard Fischer,Bernhard Fischer,2012-03-08 08:38,"",1.1,2012-03-08,"","",100,2012-03-08 01:17,"","",498500,"",Git master,Automated scan found some incorrect annotations.
34672,TYPO3.Flow,Bug,"",Resolved,Must have,Production context is not working,Kira Backes,Karsten Dambekalns,2012-04-27 08:38,Reflection,1.1,2012-03-08,"","",100,2012-03-08 09:48,"","",499050,"",Git master,"When running an application (that uses Collections) in Production context the following exception is thrown:

<pre>
  Catchable Fatal Error: Argument 2 passed to
  TYPO3\FLOW3\Validation\Validator\GenericObjectValidator_Original::addPropertyValidator()
  must implement interface
  TYPO3\FLOW3\Validation\Validator\ValidatorInterface, null given, called
  in
  /var/development/flow3/finderON/Data/Temporary/Production/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Validation_ValidatorResolver_Original.php
  on line 240 and defined in
  /var/development/flow3/finderON/Data/Temporary/Production/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Validation_Validator_GenericObjectValidator_Original.php
  line 148
</pre>

.

Can be fixed by changing TYPO3\FLOW3\Reflection\ReflectionService.php:433
(Method isClassImplementationOf)

<pre>
		$this->loadOrReflectClassIfNecessary($className);
</pre>

to

<pre>
		$this->loadOrReflectClassIfNecessary($className);
		$this->loadOrReflectClassIfNecessary($interfaceName);
</pre>"
34674,TYPO3.Flow,Feature,"",Accepted,Should have,NotFoundView is not injected in ActionController,Kira Backes,Robert Lemke,2012-07-22 04:59,MVC,"",2012-03-08,"","",0,2012-03-08 12:47,"","",499150,"","",Should be injected in the ActionController so a user can overwrite it and show its custom NotFoundView when an action does not exist (it is already injected in the NotFoundController).
34675,TYPO3.Flow,Bug,"",Rejected,Should have,NotFoundView is not used for missing actions,Kira Backes,Karsten Dambekalns,2012-12-10 10:08,MVC,1.1.1,2012-03-08,"","",0,2012-03-08 13:06,"","",499200,"",FLOW3 1.1.0 beta 1,When an action is missing instead of an exception the NotFoundView should be used.
34682,TYPO3.Fluid,Bug,"",Under Review,Should have,Radio Button missing checked on validation error,Kira Backes,"",2013-11-20 14:58,ViewHelpers,"",2012-03-09,"","",0,2012-03-09 05:30,"","",499550,"",Git master,"The checked state of a radio button is not properly checked in the case of a validation error, this should be checked by comparing the value to the lastSubmittedFormData"
34749,TYPO3.Flow,Task,"",Resolved,Should have,Provide some examples how to nest inline VH's,Adrian Föder,Adrian Föder,2012-06-25 10:56,- Documentation -,1.1,2012-03-12,"","",100,2012-03-12 06:39,"","",502900,"","","It would be useful to have some more examples how to nest different variables, array and ViewHelpers; for example, how could

<pre>
...arguments=""{foo: bar, sample: baz -> f:nother.vh(more: stuff)}""
</pre>

be achieved; or may that even be correct?"
34751,TYPO3.Kickstart,Feature,"",Resolved,Should have,Kickstarting a package should generate a layout with base viewhelper,Christian Müller,Christian Müller,2012-04-26 20:38,"","",2012-03-12,"","",100,2012-03-12 07:50,"","",503000,"","",Without that any work based on the original template will not work out as you miss the base tag and it is in line with the kickstart:action command.
34783,TYPO3.Flow,Feature,"",Closed,Should have,Provide utility method to get unproxied class name,Adrian Föder,"",2012-03-16 09:00,Persistence,"",2012-03-13,"","",0,2012-03-13 05:55,"","",504600,"","","In some cases, @get_class($object)@ returns the Doctrine proxy class; and not the actual, intended class name.

In Doctrine itself, there is a method @Doctrine\Common\Util\ClassUtils...@

<pre><code class=""php"">
   /**
     * Get the real class name of an object (even if its a proxy)
     *
     * @param object
     * @return string
     */
    public static function getClass($object)
</code></pre>

which basically does some str_replace; unfortunately it doesn't work with FLOW3 proxies due to a different naming scheme.

A possibility is to provide a method that
<pre><code class=""php"">
if ($object instanceof \Doctrine\ORM\Proxy\Proxy) {
   return get_parent_class($object);
}
</code></pre>

but that's probably not very clean.

So, a reliable method to achieve that should be provided by FLOW3."
34811,TYPO3.Flow,Bug,"",Resolved,Should have,"Ghost command ""getflow3"" introduced with recent change",Karsten Dambekalns,Karsten Dambekalns,2012-03-13 21:41,Command,1.1,2012-03-13,"","",100,2012-03-13 16:57,"","",506000,"",Git master,"The fix for the ""./flow3"" invocation hint on Windows introduced a ""ghost command"" because methods in command controllers whose names end in ""Command"" are handled as, well, commands? :)"
34816,TYPO3.Flow,Feature,"",New,Should have,Long text encryption,Pankaj Lele,"",2012-03-14 03:33,Security,"",2012-03-14,"","",0,2012-03-14 03:33,"","",506250,"","","It should be possible to encrypt / decrypt a long plain text using the TYPO3\FLOW3\Security\Cryptography\RsaWalletServicePhp. This way 2 FLOW3 applications can talk with each other in encrypted way and the key trust is already established using the security:import*key commands. 

Currently the ""encryptWithPublicKey($plaintext, $uuid)"" method is only capable of encrypting a short text (only few characters depending on the length of the key) which is perfectly fine as it uses the openssl_public_encrypt.

Please provide another method or whatever best thing which is possible to encrypt/decrypt long text. It should be done probably with the openssl_seal and openssl_open PHP methods. This type of code is already written in the TYPO3.Surf package TYPO3\Surf\Encryption\OpenSslEncryptionService"
34817,TYPO3.Flow,Task,"",Resolved,Could have,Have a way to clear all sessions,Christian Müller,Christian Müller,2012-05-08 20:39,Session,1.1,2012-03-14,"","",100,2012-03-14 03:42,"","",506300,"","",""
34827,TYPO3.Flow,Feature,"",Resolved,Should have,Precompiled reflection data for rather static packages,Robert Lemke,Robert Lemke,2012-03-19 09:38,Reflection,1.1 beta 1,2012-03-14,"","",100,2012-03-14 06:46,"","",506800,"","","Packages which are usually not touched during development (such as FLOW3, Fluid etc.) don't need to be monitored for changes and thus could provide some precompiled reflection data which could be loaded if caches were flushed.

Such packages could be marked by a new ""frozen"" state which can be set and removed through a command line command."
34837,TYPO3.Flow,Bug,"",Resolved,Should have,flow3:cache:flush should care about the .Shortcuts state,Adrian Föder,Christian Müller,2012-03-23 07:14,Core,1.1 beta 1,2012-03-14,"","",100,2012-03-14 10:05,"","",507300,"",Git master,"Currently, after renaming a package path (name; from @Foo@ to @Acme.Foo@) manually, @flow3:cache:flush@ resulted in an error a class couldn't be found (naming the correct, new namespace).

So, for example, the old namespace was
<pre>
Foo\ViewHelpers\BarViewHelper
</pre>
while the new one, after renaming, is
<pre>
Acme\Foo\ViewHelpers\BarViewHelper
</pre>
(located in Packages/Application/Acme.Foo/Classes/....); and the corresponding error message was
<pre>
Class Acme\Foo\ViewHelpers\BarViewHelper could not be found 
</pre>
which means, he correctly looked for the new, actually intended one; but didn't have the file available.

The reason was that .Shortcuts didn't contain that (new) package path's representation.
IRC suggestion was to remove .Shortcuts completely, in order to get it rebuilt from scratch, when calling @flow3:cache:flush@."
34864,TYPO3.Flow,Bug,"",Rejected,Must have,inproper escape of attribute names,Nicholas Gray,Karsten Dambekalns,2012-03-19 06:35,Persistence,"",2012-03-14,"","",0,2012-03-14 18:14,"","",508650,"",FLOW3 1.0.3,"hi all,

I named an attribute ""order"" in my model and thus ran into problems running ""./flow3 doctrine:update"", since it was not escaped and then treated as MySQL command.

Here is the Error:

Uncaught Exception
  SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error
  in your SQL syntax; check the manual that corresponds to your MySQL
  server version for the right syntax to use near 'order position INT
  DEFAULT NULL' at line 1"
34866,TYPO3.Flow,Feature,"",Resolved,Should have,Allow fluently working with PropertyMappingConfiguration,Adrian Föder,Adrian Föder,2012-05-29 03:03,MVC,2.0 beta 1,2012-03-15,"","",100,2012-03-15 04:54,"","",508750,"","","Consider the following use case:

<pre><code class=""php"">
<?php

class SampleController extends \TYPO3\FLOW3\MVC\Controller\ActionController
	/**
	 * this magic method is automatically called prior the appropriate createAction
	 */
	public function initializeCreateAction() {
		$concreteClassName = $this->dummyFindOutConcreteProductProductClassName();
		
		/* @var $this->arguments['product'] \TYPO3\FLOW3\MVC\Controller\Argument (just for this example, please don't use in production code */
		$this->arguments['product']->setDataType($concreteClassName);
		
		$this->arguments['product']->getPropertyMappingConfiguration()->setTargetType($intendedRatingClassName);
		$this->arguments['product']->getPropertyMappingConfiguration()->setTargetTypeForSubProperty('author', 'TYPO3\Party\Domain\Model\Person');
		$this->arguments['product']->getPropertyMappingConfiguration()->allowCreationForSubProperty('author');
		$this->arguments['product']->getPropertyMappingConfiguration()->allowCreationForSubProperty('author.name');
		
	}

	/**
	 * Create a new product; expect any concrete product type.
	 * @param \Acme\Northwind\Domain\Model\AbstractProduct $product So far any kind of product
	 * @return void
	 */
	public function createAction(\Acme\Northwind\Domain\Model\AbstractProduct $product) {
	}
}
?>
</code></pre>

so most possible setter methods of @\TYPO3\FLOW3\Property\PropertyMappingConfiguration@, and hence @\TYPO3\FLOW3\MVC\Controller\MvcPropertyMappingConfiguration@ should @return $this@ in order to allow a fluent coding, e.g. 
<pre><code class=""php"">
		$this->arguments['product']->getPropertyMappingConfiguration()
		     ->setTargetType($intendedRatingClassName);
		     ->setTargetTypeForSubProperty('author', 'TYPO3\Party\Domain\Model\Person');
		     ->allowCreationForSubProperty('author');
		     ->allowCreationForSubProperty('author.name');

</code></pre>
"
34867,TYPO3.Flow,Feature,"",Resolved,Should have,Allow setting target type in MVC Argument,Adrian Föder,Adrian Föder,2012-03-23 07:31,MVC,1.1,2012-03-15,"","",100,2012-03-15 05:03,"","",508800,"","","Consider the following use case:

<pre><code class=""php"">
<?php

class SampleController extends \TYPO3\FLOW3\MVC\Controller\ActionController
	/**
	 * 
	 */
	public function initializeCreateAction() {
		$concreteClassName = $this->dummyFindOutConcreteProductProductClassName();
		$this->arguments['product']->setDataType($concreteClassName);
	}

	/**
	 * @param \Acme\Northwind\Domain\Model\AbstractProduct $product
	 */
	public function createAction(\Acme\Northwind\Domain\Model\AbstractProduct $product) {
	}
}
?>
</code></pre>

Due to the fact that sub property's target types are settable, it makes sense (and is required for that use case) to allow setting the target type of an @TYPO3\FLOW3\MVC\Controller\Argument@, too."
34872,TYPO3.Flow,Bug,"",Resolved,Must have,Singleton validators never have their options passed,Karsten Dambekalns,Adrian Föder,2013-04-05 05:38,Validation,2.0,2012-03-15,"","",100,2012-03-15 06:05,"","",509050,"",FLOW3 1.0.3,"The @ValidatorResolver@ does not pass options to validators that are singletons:
<pre>
			case Configuration::SCOPE_PROTOTYPE:
				$validator = new $validatorObjectName($validatorOptions);
				break;
			case Configuration::SCOPE_SINGLETON:
				$validator = $this->objectManager->get($validatorObjectName);
				break;
</pre>

Since singletons cannot get constructor arguments via @get()@ but only through object configuration, we should at least check for options given to a singleton here and inform the developer about a probably bug in his code?"
34875,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Clean up code (style),Karsten Dambekalns,Karsten Dambekalns,2012-06-25 09:26,"",1.1 RC1,2012-03-15,"","",100,2012-03-15 06:25,"","",509200,"","","There are a number of glitches in coding style and cleanliness, like leading backslashes in @use@ statements, unused variables, wrong code documentation?"
34879,TYPO3.Flow,Bug,"",Accepted,Must have,Proxied object is not update()able,Adrian Föder,Karsten Dambekalns,2013-01-22 09:17,Persistence,"",2012-03-15,"","",0,2012-03-15 07:18,"","",509400,"",Git 1.1,"in my use case, I have objects as children of a parent object.
I access these children via the <for each=""""> ViewHelper, and do further processing with each accrued object.
Such an accrued object is, in my case, a proxy representation of the actual object; during the further processing I modify that object (especially calling ->add() on it).

Still being the Proxy, I call persistenceManager->update() with it, but that gives the Exception
> The object of type ""TYPO3\FLOW3\Persistence\Doctrine\Proxies\AcmeDemoDomainModelProductProxy"" given to update must be persisted already, but is new.

also persistenceManager->isNewObject() claims it was a new object, but it definitely isn't."
34900,TYPO3.Flow,Feature,"",Resolved,Should have,New role: ANONYMOUS,Robert Lemke,Andreas Förthner,2012-05-08 20:39,Security,1.1 beta 1,2012-03-15,"","",100,2012-03-15 15:45,"","",510450,"","",Introduce a magic role which matches only if no account is currently authenticated.
35007,TYPO3.Flow,Bug,"",Resolved,Must have,Functional tests do not work with MySQL database,Christopher Hlubek,Karsten Dambekalns,2012-04-30 20:37,- Testing -,1.1,2012-03-19,"","",100,2012-03-19 10:15,"","",515700,"",Git master,"If persistence is enabled in functional tests and a MySQL database is configured, I get the following error when executing the test on a clean database:

<pre>
1) Planetflow3\Tests\Functional\Controller\StandardControllerTest::indexActionWithoutParametersDisplaysRecentItems
PDOException: SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'persistence_testentity' already exists

/Volumes/Data/Work/FLOW3/Planetflow3/Packages/Framework/Doctrine.DBAL/Classes/Connection.php:633
/Volumes/Data/Work/FLOW3/Planetflow3/Packages/Framework/Doctrine.ORM/Classes/Tools/SchemaTool.php:671
/Volumes/Data/Work/FLOW3/Planetflow3/Data/Temporary/Testing/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Persistence_Doctrine_PersistenceManager_Original.php:271
/Volumes/Data/Work/FLOW3/Planetflow3/Packages/Framework/TYPO3.FLOW3/Tests/FunctionalTestCase.php:119
/Volumes/Data/Work/FLOW3/Planetflow3/Packages/Application/Planetflow3/Tests/Functional/Controller/StandardControllerTest.php:38
/Volumes/Data/Work/FLOW3/Planetflow3/Packages/Framework/TYPO3.FLOW3/Tests/BaseTestCase.php:49
</pre>
"
35011,TYPO3.Flow,Bug,"",Resolved,Must have,Column type detection broken when Column annotation is used,Karsten Dambekalns,Karsten Dambekalns,2012-04-20 08:38,Persistence,1.1,2012-03-19,"","",100,2012-03-19 10:45,"","",515900,"",Git master,"If a Column annotation is used but no type argument is given, the default ""string"" type will be used and override the detection."
35016,TYPO3.Flow,Bug,"",Resolved,Should have,YamlSource creates invalid YAML files,Bastian Waidelich,Bastian Waidelich,2012-03-23 07:49,Configuration,1.1,2012-03-19,"","",100,2012-03-19 13:31,"","",516150,"",Git master,"@\TYPO3\FLOW3\Tests\Unit\Configuration\Source\YamlSource::save()@ currently separates the header from the configuration with @PHP_EOL@ but it should be @chr(10)@ according to the guidelines.
Apart from that, generated YAML files are not indented correctly, making it difficult to read them"
35030,TYPO3.Flow,Feature,"",Under Review,Should have,Dynamic locale detection,Andreas Wolf,Karsten Dambekalns,2013-09-26 12:08,I18n,"",2012-03-20,"","",0,2012-03-20 07:17,"","",516800,"","","Currently, the locale is automatically set to ""en"". It is however possible to manually set the locale to something else.

There should be a way to set the locale manually in a configurable way. Possible sources are: the HTTP ""accept language"" header, the URL (sth. like ""/en/path/to/page.html""), a cookie (after the user manually set the locale) or some user setting."
35034,TYPO3.Flow,Feature,"",Resolved,Should have,Automatic session expiration on user inactivity,Robert Lemke,Robert Lemke,2012-03-20 12:46,Session,1.1 beta 1,2012-03-20,"","",0,2012-03-20 07:39,"","",517000,"","",Sessions should expire automatically after a configured amount of time of inactivity.
35035,TYPO3.Flow,Bug,"",Resolved,Should have,Doctrine repository findAll is inconsistent,Christopher Hlubek,Karsten Dambekalns,2012-07-18 06:50,Persistence,1.1 RC2,2012-03-20,"","",100,2012-03-20 08:00,"","",517050,"",FLOW3 1.0.0,The findAll method of the special doctrine repository (needed for custom DQL afaik) returns an array of objects (through parent::findAll). The default repository does return a QueryResult object which is needed for widgets etc. to work. Also the Doctrine Query itself does return a QueryResult in execute(). So the current behavior is inconsistent and can lead to bugs.
35041,TYPO3.Fluid,Bug,"",Resolved,Should have,TranslateViewHelper returns empty string if id is missing and view helper tag is empty,Andreas Wolf,Karsten Dambekalns,2012-05-26 09:35,ViewHelpers,1.1 beta 2,2012-03-20,"","",100,2012-03-20 10:23,"","",517350,"",Git master,"With an empty view helper tag (<f:translate id=""some.message.id"" />) and a missing id, the view helper just returns nothing instead of displaying the id. From what is specified for the i18n API, I would expect to get the ID."
35052,TYPO3.Flow,Feature,"",Resolved,Should have,Make message origin hint configurable,Robert Lemke,Robert Lemke,2012-03-20 21:39,Log,1.1 beta 1,2012-03-20,"","",100,2012-03-20 12:36,"","",517900,"","","The logging FileBackend currently adds a hint about where the message was created for every log entry. While this feature can be useful in certain situations, it clutters the log file for the rest of us.
Thus this feature should be configurable and be disabled by default."
35059,TYPO3.Flow,Bug,"",Resolved,Should have,Default for nullable is TRUE but should be FALSE,Karsten Dambekalns,Karsten Dambekalns,2012-04-20 08:38,Persistence,1.1,2012-03-20,"","",100,2012-03-20 17:30,"","",518250,"",Git master,"The nullable option for columns is FALSE in Doctrine 2 unless otherwise indicated. Our annotation driver uses a default of TRUE, which breaks the intended alignment of behavior between vanilla Doctrine 2 and the FLOW3 integration."
35083,TYPO3.Flow,Bug,"",New,Should have,involving SecurityContext in Widget's __wakeup situation leads to an exception,Adrian Föder,"",2012-03-21 08:06,Object,"",2012-03-21,"","",0,2012-03-21 08:06,"","",519450,"",Git master,"I experience the situation that the attached exception occurs.
I have an object with an injected @\TYPO3\FLOW3\Security\Context@. This object is created and stored inside the widgetConfiguration.
After a subsequent request of the page the attached exception occurs. It seems that the DI after the __wakeup is not fully correctly handled and the securityContext lost its request property."
35090,TYPO3.Fluid,Bug,"",Resolved,Should have,base64-encode of URI-transferred serialized objects,Adrian Föder,Adrian Föder,2013-07-30 09:37,"","",2012-03-21,"","",100,2012-03-21 09:49,"","",519800,"",Git master,"At least Fluid-Widgets add a serialized object to links in order to transfer them across requests.
Maybe it's considerable to base64-encode these serialized objects to avoid problems like the [[FLOW3:Installation_hints#Unexpected-behavior-with-serialized-objects-in-request-arguments|suhosin's null-byte-omission]].

Additional explanation: serialized objects contain NULL bytes if a property of the object is protected."
35096,TYPO3.Flow,Bug,"",Closed,Should have,Subroutes can't use empty uriPattern as fallback,Sebastian ,Bastian Waidelich,2012-11-25 12:14,MVC - Routing,"",2012-03-21,"","",0,2012-03-21 13:23,"","",520050,"",(any),"I have several packages, for each package I like to create a routing shortcut.
So that instead of using these urls
<pre>
test.local/Myverylongpersonalname.Myproject/posts
test.local/Myverylongpersonalname.MyprojectTest/images
</pre>
I can use these
<pre>
test.local/mm/posts
test.local/test/images
</pre>

I prefer to shorten the routes by adding subroutes to the global Routes.yaml like this:
<pre>
-
  name: 'Myverylongpersonalname Myproject'
  uriPattern: 'mm/<MMSubroutes>'
  defaults:
    '@package': 'Myverylongpersonalname.Myproject'
  subRoutes:
    MMSubroutes:
      package: Myverylongpersonalname.Myproject
</pre>

Now I would expect that I can add uriPattern: '' as a fallback route in the Routes.yaml of Myverylongpersonalname.Myproject, but I get:
<pre>
The URI pattern ""mm/"" of route ""Myverylongpersonalname Myproject :: fallback"" ends with a slash, which is not allowed. You can put the trailing slash in brackets to make it optional. 
</pre>
Well and uriPattern: '(/)' doesn't work either."
35135,TYPO3.Flow,Feature,"",Resolved,Should have,Provide an inject() convenience method in Base Test Case,Robert Lemke,Robert Lemke,2012-03-26 08:40,- Testing -,1.1 beta 1,2012-03-22,"","",100,2012-03-22 06:33,"","",521800,"","","Testing code which uses dependency injection requires some additional lines of code for manually injecting the dependencies needed to run a unit test. This can become cumbersome in case of property injection, as reflection needs to be used in order to set a protected property.

An inject() method provided by the Base Test Case would make things a lot easier."
35136,TYPO3.Flow,Bug,"",Resolved,Should have,Problem with validating simple types,Rens Admiraal,Bastian Waidelich,2012-05-30 06:38,"","",2012-03-22,"","",100,2012-03-22 07:19,"","",521850,"",Git master,"When an argument of a controller action is annotated with @param integer $var, the validation never fails if a string is passed to the argument.

This is because the TypeConverter returns (integer) $value, which will always match on the Validator. This could for example be solved with something like this in the TypeCoverter:

<pre>
		if (!is_numeric($source)) {
			throw new \TYPO3\FLOW3\Exception('Can\'t convert source value to integer', 1332411849);
		}
</pre>

Problem with this approach is the output: an unfriendly error.

Maybe it would be possible to do a quick validation on simple types before the actual TypeConverter starts doing his job?"
35173,TYPO3.Flow,Bug,"",Closed,Should have,PropertyMapping: FloatConverter - map from float to float is not working,Nils Seinschedt,Nils Seinschedt,2014-02-19 04:13,Property,"",2012-03-23,"","",0,2012-03-23 05:18,"","",523700,"",FLOW3 1.0.0,"PropertyMapping: 
The FloatConverter does not allow to map from float to float.
In contrast to this behaviour the IntegerConverter maps from integer to integer."
35195,TYPO3.Flow,Feature,"",Resolved,Should have,Additional possible keys in source array for DateTimeConverter,Adrian Föder,Adrian Föder,2012-05-31 07:48,Property,2.0 beta 1,2012-03-23,"","",100,2012-03-23 12:21,"","",524800,"","","At the moment, the following is allowed:

<pre><code class=""php"">
/*
 * By using an array as source you can also override time and timezone of the created DateTime object:
 * array(
 *  'date' => '<dateString>',
 *  'hour' => '<hour>', // integer
 *  'minute' => '<minute>', // integer
 *  'seconds' => '<seconds>', // integer
 *  'timezone' => '<timezone>', // string, see http://www.php.net/manual/timezones.php
 * );
</code></pre>

Analog to this, it'd be good to allow three additional keys for day, month, year. This makes it possible to feed the source by independent <select> boxes for example, where each select box is day, month or year."
35200,TYPO3.Flow,Bug,"",Resolved,Could have,TYPO3\FLOW3\AOP\Exception\InvalidArgumentException thrown in file JoinPoint.php,Johannes K,Johannes K,2012-05-15 09:26,Session,1.1,2012-03-23,"","",100,2012-03-23 16:11,"","",525050,"",Git master,"In TYPO3\FLOW3\Session\Aspect\LoggingAspect , l. 68

 $reason = $joinPoint->getMethodArgument('reason') ?: 'no reason given';

there should be another check like ""$joinPoint->hasMethodArgument('reason')"" or something like that.

The argument ""reason"" does not exist in method TYPO3\FLOW3\Session\PhpSession->destroy
25 TYPO3\FLOW3\AOP\JoinPoint::getMethodArgument(""reason"")

24 TYPO3\FLOW3\Session\Aspect\LoggingAspect_Original::logDestroy(TYPO3\FLOW3\AOP\JoinPoint)

23 TYPO3\FLOW3\AOP\Advice\AbstractAdvice::invoke(TYPO3\FLOW3\AOP\JoinPoint)

22 TYPO3\FLOW3\Session\PhpSession::destroy(""Session was inactive for 72773 seconds, more than the configured timeout of 3600 seconds."")

21 TYPO3\FLOW3\Session\PhpSession_Original::autoExpire()

20 TYPO3\FLOW3\Session\PhpSession_Original::canBeResumed()

19 TYPO3\FLOW3\Session\PhpSession_Original::resume()

18 TYPO3\FLOW3\Session\PhpSession::resume()

17 call_user_func_array(array, array)

16 TYPO3\FLOW3\Session\PhpSession::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

15 TYPO3\FLOW3\Session\PhpSession::resume()

14 TYPO3\FLOW3\Core\Booting\Scripts::initializeSession(TYPO3\FLOW3\Core\Bootstrap)

13 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)

12 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)

11 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

10 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

9 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

8 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

4 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

3 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)

2 TYPO3\FLOW3\MVC\Web\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


I can look into it later, just wanted to have it documented for the record."
35243,TYPO3.Flow,Feature,"",Resolved,Must have,HTTP 1.1 Support ? Foundations,Robert Lemke,Robert Lemke,2012-04-11 08:38,Http,1.1,2012-03-26,"","",100,2012-03-26 12:18,"","",527150,"","","In order to cleanly separate between the domain of HTTP and that of the MVC framework, it is necessary to split up the request handling which is currently located in the MVC sub package of FLOW3. Two parts should be the result: a new Http sub package which is closely modeled after the HTTP 1.1 and related specs and the Mvc sub package which addresses the aspect of routing, action requests and their dispatching to the respective controllers."
35295,TYPO3.Fluid,Bug,"",Resolved,Must have,Alphanumeric-Validator fails on umlauts,Georg Ringer,Karsten Dambekalns,2013-01-05 09:30,ViewHelpers,"",2012-12-25,"","",100,2012-03-28 01:45,"","",529700,0.00,FLOW3 1.0.0,"this is a copy of #35284, 
-------------
The alphanumeric validator fails to validate for umlauts or other non-ascii letters.
-------------

this needs also be changed in @Tx_Extbase_Validation_Validator_AlphanumericValidator@ and then backported

for patch see https://review.typo3.org/#/c/9923/"
35298,TYPO3.Flow,Bug,"",Resolved,Should have,filename spelling inconsistent in the project,Christian Müller,Christian Müller,2012-04-30 20:37,Resource,1.1 beta 1,2012-03-28,"","",100,2012-03-28 02:41,"","",529850,"",Git master,"The ""filename"" is spelled differently in parts of the framework, it should be adapted. Especially the filename property in Resource has a getter and setter with different spelling."
35300,TYPO3.Flow,Bug,"",Resolved,Must have,Arguments of form __referrer are unserialized without a check,Andreas Förthner,Andreas Förthner,2012-04-14 20:39,Security,1.0.4,2012-03-28,2012-03-28,"",100,2012-03-28 03:51,"","",529950,"",FLOW3 1.0.0,"The request arguments of the referring request are a serialized string written to one of the hidden fields in a Fluid form. As the string is not checked before unserializing it, it is possible to unserialized arbitrary available objects.

Solution: This string has to be protected by a HMAC to protect FLOW3 from possible unserialize attacks."
35317,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Fix doc comments for authentication providers,Aske Ertmann,Aske Ertmann,2012-03-30 20:39,"",1.1,2012-03-28,"","",100,2012-03-28 07:42,"","",530750,"","",All the authentication providers have a incorrect return doc comment.
35324,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Remove vender namespace from Build/Common/PhpUnit/UnitTests.xml ,Soren Malling,Karsten Dambekalns,2013-01-10 08:32,- Testing -,2.0,2012-03-28,"","",100,2012-03-28 08:52,"","",531050,"","","Would't it make sense to remove the vendor namespace from Build/Common/PhpUnit/UnitTests.xml so you can use

<pre>
phpunit -c Build/Common/PhpUnit/UnitTests.xml
</pre>

and have all Tests run at once, using the same UnitTestBootstrap.php for all tests."
35338,TYPO3.Flow,Bug,"",Resolved,Must have,Action arguments of type DateTime throw Exception,Bastian Waidelich,Bastian Waidelich,2012-06-05 09:37,Validation,1.0.5,2012-03-28,"","",100,2012-03-28 13:31,"","",531750,"",Git 1.0,"If an action argument is an object, the ValidationResolver tries to instantiates that object to use it as Validator without checking the Interface.
So a simple controller action like following
<pre>
<code class=""php"">
public function someAction(\DateTime $date) {
}
</code>
</pre>
Provokes an exception @DateTime::__construct() expects parameter 1 to be string, array given@"
35354,TYPO3.Flow,Feature,"",Closed,Could have,Additional variants to annotate Validators,Adrian Föder,Karsten Dambekalns,2012-06-27 03:37,Validation,"",2012-03-29,"","",0,2012-03-29 05:03,"","",532550,"","","Currently (afaik), the only option to set a validator to a model property is to annotate it in the vicinity of the appropriate -method- property:

<pre><code class=""php"">
	/**
	 * @FLOW3\Validate(type=""NotEmpty"")
	 * @FLOW3\Validate(type=""RegularExpression"", options={ ""regularExpression""=""/^[mf]$/"" })
	 * @var string
	 * @ORM\Column(length=1)
	 */
	protected $gender;

	/**
	 * @FLOW3\Validate(type=""NotEmpty"")
	 * @var \TYPO3\Party\Domain\Model\PersonName
	 * @ORM\OneToOne
	 */
	protected $name;
</code></pre>

I now have two additional options in mind, one would be via Configuration.yaml (or maybe even an additional Validation.yaml:

<pre><code class=""yaml"">
-
  property: \Acme\Northwind\Person.gender
  validators:
    - NotEmpty
    - RegularExpression
        options:
          regularExpression: /^[mf]$/
-
  property: \TYPO3\Party\Domain\Model\PersonName.firstName
  validators:
    - NotEmpty
    - StringLength
        options:
          minimumLength: 2
    
-
  #dito for .lastName
</code></pre>

Second would be to allow ""deep"" annotating via the parameter we already know from method argument annotation:

<pre><code class=""php"">
	/**
	 * @FLOW3\Validate(type=""NotEmpty"")
	 * @FLOW3\Validate(""$firstName"", type=""NotEmpty"")
	 * @FLOW3\Validate(""$lastName"", type=""NotEmpty"")
	 * @var \TYPO3\Party\Domain\Model\PersonName
	 * @ORM\OneToOne
	 */
	protected $name;
</code></pre>

(for this example, remember @\TYPO3\Party\Domain\Model\PersonName@ has properties @firstName@ and @lastName@)."
35369,TYPO3.Flow,Bug,"",Resolved,Must have,DateTimeConverter's timezone key leads to unexpected behavior,Adrian Föder,Karsten Dambekalns,2013-02-09 11:30,Property,1.1,2012-12-25,"","",100,2012-03-29 09:57,"","",533300,0.00,FLOW3 1.0.0,"The doc comment of the DateTimeConverter says
<pre><code class=""php"">
/** [...]
 * By using an array as source you can also override time and timezone of the created DateTime object:
 * array(
 *  'date' => '<dateString>',
 *  'hour' => '<hour>', // integer
 *  'minute' => '<minute>', // integer
 *  'seconds' => '<seconds>', // integer
 *  'timezone' => '<timezone>', // string, see http://www.php.net/manual/timezones.php
 * );
[...]
</code></pre>

If the timezone is set (given), @\DateTime::setTimezone()@ is called on the already-created object.

But this method *modifies* the resulting date and time representation. Currently, the DateTime object is created via

<pre>
$date = \DateTime::createFromFormat($dateFormat, $dateAsString);
</pre>

So, if the user provided e.g. @15:04:23@ and timezone @EST@ (even compare to the html sample @ #27417), the following might happen:

# \DateTime::createFromFormat() creates a date representing @15:04:23 CET@, because the server's default timezone is CET (e.g.),
# timezone EST is set from the source, so ->setTimezone() is invoked, resulting in  modifying the \DateTime object into @11:04:23 EST@
# but the intended target date should be @15:04:23 EST@ (compare again the example @ #27417).

My suggestion would be a breaking change that throws @overrideTimezoneIfSpecified()@ away and finds the correct timezone at the 

<pre>
$date = \DateTime::createFromFormat($dateFormat, $dateAsString);
</pre>
 line. The third argument would then be the time zone.

*an additional way* could be a workaround that finds out the difference between the current and the intended timezone, applies ->setTimezone() and then ->modify()s the DateTime object with that difference period."
35387,TYPO3.Flow,Feature,"",Resolved,Could have,Configuration for own Formatters,Julian Wachholz,"",2013-07-01 10:07,I18n,"",2012-03-30,"","",0,2012-03-30 05:57,"","",534200,"","","The current implementation of @TYPO3\FLOW3\I18n\FormatResolver::getFormatter()@ only tries to get formatters from the @TYPO3\FLOW3\I18n\Formatter@ namespace.
It should, however, be somehow possible to use your own formatters in your own namespace.

I have two suggestions for this:

# Use annotations to collect all possible formatter names
# Add a setting in Settings.yaml with a list of registered Formatter-Namespaces"
35388,TYPO3.Flow,Feature,"",New,Could have,Use the current package as default for translations within controllers,Julian Wachholz,"",2013-12-03 17:12,I18n,"",2012-03-30,"","",0,2012-03-30 06:01,"","",534250,"","","The Translator::getTranslationBy* should use the current package to determine where to get the translation from, just like the TranslationViewHelper in Fluid does.

Currently it's quite tedious since the packageKey is the very last argument to those methods and you rarely need the other ones in between."
35394,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,"Document Routing feature ""appendExceedingArguments""",Bastian Waidelich,Karsten Dambekalns,2012-06-27 04:25,- Documentation -,1.1,2012-03-30,"","",100,2012-03-30 08:04,"","",534550,"","",See #30778
35416,TYPO3.Eel,Bug,"",Resolved,Should have,Fix failing eel unit test // Eel Code Detection expression,Sebastian Kurfuerst,Karsten Dambekalns,2012-07-13 10:06,"","",2012-03-30,"","",100,2012-03-30 13:14,"","",535650,"","",""
35420,TYPO3 Flow Base Distribution,Suggestion,"",New,Should have,Review use of try / catch in the Security Framework,Rens Admiraal,Andreas Förthner,2012-03-30 18:00,"","",2012-03-30,"","",0,2012-03-30 18:00,"","",535850,"","","Just to not forget about the comments in https://review.typo3.org/#/c/9558/

Karsten Dambekalns		Mar 12
Patch Set 1:
If that is considered proper use of the security framework? would be nice to have something that doesn't use try/catch.
Andreas Förthner		Mar 12
Patch Set 1: Looks good to me, but someone else must approve
Currently the security framework works like this. I agree that it is somehow strange to catch an exception here. On the other hand this makes it really explicit and really ensures that you are aware of coding the restricted case. For know I wouldn't change it, but we can discuss if we need some true/false method for access decisions."
35422,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,TYPO3 Security Framework should not take unexisting roles into account,Rens Admiraal,"",2012-04-26 08:38,"","",2012-03-31,"","",100,2012-03-30 18:49,"","",535950,"",Git master,"Now the Security Framework uses all roles available in the tokens. When a role is not configured in the Policy.yaml this should not have effect.

For example if you now create a new Phoenix user with the role 'User' the backend gives an 'Access denied!' because the security framework does not know the role User.

Expected behavior: just ignore the users role?"
35517,TYPO3.Flow,Feature,"",Resolved,Should have,Annotation Driver should use information about maximum identifier length for tables from DBAL,Christian Müller,Christian Müller,2012-04-20 08:38,Persistence,1.1,2012-04-02,"","",100,2012-04-02 03:10,"","",540650,"","",""
35524,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Split the Documentation package into DocTools and move the documentation to TYPO3.FLOW3 and TYPO3.TYPO3,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-04-02 07:17,"",1.1 beta 1,2012-04-02,"","",0,2012-04-02 05:06,"","",541000,"","",""
35682,TYPO3.Flow,Task,"",Resolved,Should have,Remove Selenium Test Case,Robert Lemke,Robert Lemke,2012-04-04 08:39,- Testing -,1.1,2012-04-04,"","",100,2012-04-04 07:56,"","",548850,"","","The Selenium Test Case is currently neither in use, nor supported by the core team. Possibly it's also not functional and not used by anybody else.
Remove it."
35706,TYPO3.Flow,Feature,"",Resolved,Should have,Virtual Browser for Functional Testing,Robert Lemke,Robert Lemke,2012-04-11 08:38,Http,1.1,2012-04-05,"","",100,2012-04-05 04:14,"","",550050,"","","I'd like a virtual ""Browser"" class which allows me to simulate arbitrary HTTP requests without actually sending them over the network. This would be great for testing controllers and any other component which is accessed through the HTTP stack."
35709,TYPO3.Flow,Task,Task #51183: CLI improvements,New,Should have,Implement global Command aliases,Bastian Waidelich,"",2013-08-19 08:33,Cli,"",2012-04-05,"","",0,2012-04-05 05:12,"","",550200,"","",Aliases (short names) for CLI commands are currently only supported for @runtime commands@ not for @compile time commands@ because the aliases are hard coded in the CommandManager which is executed at a later state.
35720,TYPO3.Flow,Bug,"",New,Must have,Access denied Exception for widget links to actions with a policy,Johannes K,"",2012-10-25 08:08,Security,"",2012-04-05,"","",0,2012-04-05 07:42,"","",550750,"",Git master,"In TYPO3\FLOW3\Security\Aspect\CsrfProtectionAspect::addCsrfTokenToUri() the detection for the target classname fails, if a link is generated  via <f:link.widget />, so the link is missing the  __csrfToken and you get an AccessDeniedException:

#1216919280: You are not allowed to perform this action. (More information)

TYPO3\FLOW3\Security\Exception\AccessDeniedException thrown in file
.../Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Security_Authorization_Interceptor_AccessDeny_Original.php in line 30.

Example to reproduce: 
Use the paginate widget for an action with a policy"
35748,TYPO3.Fluid,Feature,"",Resolved,Could have,Add generic data-* attribute,Julian Wachholz,Bastian Waidelich,2013-12-18 10:40,ViewHelpers,"",2012-04-06,"","",100,2012-04-06 10:07,"","",552150,"","","All elements in HTML5 can have any number of @data-*@ attributes.
This should be made easier to use than with the @additionalAttributes@ property.

Example:

<pre>
<f:link.action data=""{loading-text: 'loading...'}"" action=""create"">create a new foo</f:link.action>
</pre>
"
35763,TYPO3.Eel,Task,"",Resolved,Should have,Move README docs to Documentation/,Rens Admiraal,Karsten Dambekalns,2013-10-01 04:29,"","",2012-04-07,"","",100,2012-04-07 03:50,"","",552900,"","","With moving the code from github to git.typo3.org the need for a README.md is gone, we should move this to the normal documentation folder."
35766,TYPO3.Fluid,Feature,"",Rejected,Should have,add custom namespaces in settings.yaml,rottenrice no-lastname-given,"",2014-04-19 12:37,View,"",2012-04-07,"","",0,2012-04-07 08:09,"","",553050,"","","the repeated declaration of your own namespaces in the template files is an unnecessary overhead. with this update you can define custom namespaces in your Settings.yaml.

enhanced/edited TYPO3\Fluid\Core\Parser\TemplateParser:
<pre>
/**
 * Namespace identifiers and their component name prefix (Associative array).
 * @var array
 */
protected $namespaces = array();

/**
 * The FLOW3 settings
 * @var array
 */
protected $settings;

/**
 * Injects the settings and resets the namespace array
 *
 * @param array $settings The settings
 * @return void
 */
public function injectSettings(array $settings) {
	$this->settings = $settings;
	$this->reset();
}

/**
 * Resets the parser to its default values.
 *
 * @return void
 */
protected function reset() {
	$this->namespaces = array();
	if (isset($this->settings['Core']['Parser']['TemplateParser']['namespaces'])) {
		$this->namespaces = $this->settings['Core']['Parser']['TemplateParser']['namespaces'];
	}
}
</pre>

added Settings.yaml in Packages/Framework/TYPO3.Fluid/Configuration (required):
<pre>
TYPO3:
  Fluid:
    Core:
      Parser:
        TemplateParser:
          namespaces:
            f: 'TYPO3\Fluid\ViewHelpers'
</pre>

now each package has the possibility to add custom namespaces in Packages/Application/*.*/Configuration/Settings.yaml (optional)
<pre>
TYPO3:
  Fluid:
    Core:
      Parser:
        TemplateParser:
          namespaces:
            foo: 'my\foo\namespace'
</pre>"
35781,TYPO3.Flow,Feature,"",New,Should have,Model validation,Julian Wachholz,"",2012-04-08 11:06,Validation,"",2012-04-08,"","",0,2012-04-08 11:06,"","",553800,"","","Currently, only (action)method arguments and single properties in a Model can be tagged with @Validate.
In some cases however, it might be useful to validate a model in its entirety, especially if it's quite a complex one that needs rules between multiple properties.

Model validation would occur _after_ all properties have been set and validated.

Right now, one can always annotate the next higher location where the model is used,
but I think that this is redundant and related to the model. Method argument validators should use validation in the action specific context."
35783,TYPO3.Flow,Feature,"",New,Should have,Lifecycle method after property mapping,Andreas Wolf,"",2012-04-08 15:01,Object,"",2012-04-08,"","",0,2012-04-08 14:40,"","",553900,"","","Currently, there is initializeObject() that is called after DI. There is, however, no method that is called after property mapping. Having such a method would enable us e.g. to set some more properties after creating an object from a form.

Another option (instead of a ""real"" object lifecycle method) would be to have a method that is called solely by the property mapper after it has done its job."
35790,TYPO3.Fluid,Feature,Work Package #45013: Flexible plugin integration (TODO: Reviews),Resolved,Should have, allow f:link.action to operate on parent request,Fernando Arconada,Karsten Dambekalns,2013-05-06 13:35,ViewHelpers,2.0,2012-04-09,"","",100,2012-04-09 06:54,"","",554250,"","","Original bug description:
<pre>
if you use f:link.action inside a widget it generates links to the widget actions and not links to other controllers as expected
</pre>

See below for feature description"
35826,TYPO3.Flow,Feature,"",Resolved,Should have,Force option for flushing caches in edge cases,Robert Lemke,Robert Lemke,2012-04-10 20:37,Cache,1.1,2012-04-10,"","",100,2012-04-10 11:14,"","",556050,"","","Sometimes packages containing invalid PHP code which cause fatal errors can prevent FLOW3 from flushing code caches with ./flow3 typo3.flow3:cache:flush, because reflection data is loaded or created before the command can be executed. For these cases a --force option would be helpful which skips all non-essential initialization and flushes caches directly, including emptying the whole temporary directory."
35831,TYPO3.Flow,Bug,"",New,Must have,Deleting or unpublishing of a resource deletes all published symlinks (Web/_Resources/Persistent),Kira Backes,"",2012-04-11 03:31,"","",2012-04-10,"","",0,2012-04-10 14:26,"","",556300,"",Git master,n/t
35835,TYPO3 Flow Base Distribution,Bug,"",Rejected,Should have,In WebContext Settings.yaml is read from root directory if present,Steffen Ritter,Christian Müller,2012-04-14 03:16,"","",2012-04-11,"","",0,2012-04-11 04:10,"","",556500,"",Git master,"I made a copy of of Settings.yaml from Configuration/ to /
When accessing via WebBrowser the Settings.yaml from root directory is read and used."
35868,TYPO3.Flow,Bug,"",On Hold,Must have,Unstable condition in Utility\Environment,Adrian Föder,Karsten Dambekalns,2012-06-25 16:37,Environment,"",2012-04-11,"","",0,2012-04-11 10:59,"","",558100,"",(any),"@TYPO3\FLOW3\Utility\Environment::untangleFilesArray()@ has the following section:

<pre><code class=""php"">
		foreach ($convolutedFiles as $firstLevelFieldName => $fieldInformation) {
			if (!is_array($fieldInformation['error'])) {
</code></pre>

the responsible UnitTest reads as followed:

<pre><code class=""php"">
	public function getRawServerEnvironmentJustReturnsTheSERVERVariable() {
		$_SERVER = array('foo' => 'bar', 'REQUEST_TIME' => $_SERVER['REQUEST_TIME']);
		$environment = new \TYPO3\FLOW3\Utility\Environment('Testing');
		$this->assertEquals($_SERVER, $environment->getRawServerEnvironment());
	}
</code></pre>

so, $convolutedFiles equals that foo => bar array; and $fieldInformation is not an array, but a string.
@$fieldInformation['error']@ hence results in 

  > PHP Warning:  Illegal string offset 'error'

Maybe 
<pre>
if (!is_array($fieldInformation['error']))
</pre>
should be replaced with
<pre>
if (!isset($fieldInformation['error']))
</pre>

in order to avoid that.

Seems to be an 5.4 issue because nobody else noticed."
35892,TYPO3.Flow,Feature,"",Resolved,Should have,Give hint in exception message about aggregate roots in class hierarchies,Karsten Dambekalns,Karsten Dambekalns,2012-04-12 08:38,Persistence,1.1,2012-04-12,"","",100,2012-04-12 05:31,"","",559200,"","","The message ""In a class hierarchy either all or no classes must be an aggregate root, ""<foo>"" is one but the parent class ""<bar>"" is not."" should give a hint on how to solve this."
35894,TYPO3.Fluid,Bug,"",Resolved,Must have,"CheckboxViewHelper and RadioViewHelper missing an existence check for formObject, and thus an exception is being thrown",Sebastian Wojtowicz,Sebastian Wojtowicz,2012-06-18 11:38,ViewHelpers,1.1 RC1,2012-04-12,"",0.10,100,2012-04-12 06:08,"","",559300,"",Git master,"Scenario:
<pre>
Controller:
    indexAction(FormObject $formObject = NULL){ ... }
Template:
    <f:form ... object=""{formObject}' >
        <f:form.checkbox property=""somePropertyOfFormObject"" value=""yes""/>
        ...
 </pre>

This scenario fails with
<pre>
#1243325768: No value found for key ""TYPO3\Fluid\ViewHelpers\FormViewHelper->formObject""
</pre>


The problem is that in the CheckboxViewHelper and the RadioViewHelper we call @ $this->getPropertyValue()@ which callls @$formObject = $this->viewHelperVariableContainer->get('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject');@ even though we did not check if the formObject exists, so that instead we get thrown an exception.

For example in CheckboxViewHelper.php, Line 80 before we call getPropertyValue() we only check
<pre>
if ($this->isObjectAccessorMode())
</pre>
while all other [InputType]ViewHelper always check (in the getValue() function):
<pre>
if ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject'))
</pre>

So I think that in CheckboxViewHelper, Line 80 and in RadioViewHelper, Line 81 there should also be the same check for the existence of the formObject. Unless someone knows of a better place to inject that bugfix.
"
35912,TYPO3.Flow,Feature,"",Resolved,Must have,Improve performance on Windows,Bastian Waidelich,Bastian Waidelich,2012-05-21 10:11,Cache,1.1,2012-04-12,"","",100,2012-04-12 13:23,"","",560150,"","","Performance of FLOW3 on Windows is still quite bad.
Something can't go right there (e.g. @flow3:objectmanagement:proxyclasses@ takes > 5 seconds even with frozen packages and no changes!)

Test code (in *TYPO3.FLOW3/Classes/Core/Booting/Sequence.php*, line 88ff):
<pre>
<code class=""php"">
$start = microtime(TRUE);
$step($bootstrap);
$end = microtime(TRUE);
echo $step->getIdentifier() . ': ' . ($end - $start) . PHP_EOL;
</code>
</pre>"
35916,TYPO3.Flow,Task,"",Resolved,Should have,"Make system call to php binary reliable one for all, especially on Windows",Adrian Föder,Karsten Dambekalns,2012-12-12 16:12,Core,1.1.1,2012-04-12,"","",100,2012-04-12 13:49,"","",560350,"","","Currently, there are still issues with @\TYPO3\FLOW3\Core\Booting\Scripts@'

<pre><code class=""php"">
			$phpBinaryPathAndFilename = escapeshellcmd(\TYPO3\FLOW3\Utility\Files::getUnixStylePath($settings['core']['phpBinaryPathAndFilename']));
			$command = '""' . $phpBinaryPathAndFilename . '"" -c ' . escapeshellarg(php_ini_loaded_file()) . ' -v';
			system($command, $result);
			if ($result !== 0) {
				throw new \TYPO3\FLOW3\Exception('It seems like the PHP binary ""' . $settings['core']['phpBinaryPathAndFilename'] . '"" cannot be executed by FLOW3. Set the correct path to the PHP executable in Configuration/Settings.yaml, setting FLOW3.core.phpBinaryPathAndFilename.', 1315561483);
			}
			throw new \TYPO3\FLOW3\Exception('The compile run failed. Please check the error output or system log for more information.', 1297263663);

</code></pre>

Its very likely that this call still doesn't success in complicated Windows environment, where the path is e.g. set to @C:\Program Files (x86)\Zend\ZendServer\bin\php.exe@. Even that @escapeshellcmd@ brings up errors because the @(x86)@ is converted to  @^(x86^)@.

Additionally, the exception message should be more verbose and at least carry the actual @$command@ in order to make error catching more easy.
A few additional file_exists and other stuff may also make that stuff more reliable."
35935,TYPO3.Flow,Bug,"",Closed,Must have,Symlinks still don't work reliably under Windows,Adrian Föder,Karsten Dambekalns,2013-06-07 15:34,Core,1.1,2012-04-13,"","",0,2012-04-13 03:31,"","",561300,"",Git master,"Creation of symlinks under Windows is still not reliable due to, honestly, weird behavior of windows' UAC.
The system command @mklink /J@ seems to be interesting because it doesn't need as much elevated user permissions like @mklink /.D@ does (the opposite is a junction vs. a symlink)

I will gamble around with that a bit."
35963,TYPO3.Kickstart,Bug,"",Resolved,Should have,Kickstarting a command controller produces invalid code,Henrik Møller Rasmussen,"",2012-04-26 08:38,"","",2012-04-13,"","",100,2012-04-13 08:00,"","",562600,"",Git master,"The generated command controller extends a non-existing class.

Patch attached."
35965,TYPO3.Flow,Feature,"",Resolved,Should have,Session shouldn't start automatically,Peter Russ,Andreas Förthner,2012-05-07 20:37,Security,1.1,2012-04-13,"","",100,2012-04-13 08:16,"","",562700,"","","By default session handling is started automatically. This isn't useful when it comes to server/server communication.
Places where it should be fixed:
TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager line 130 
	 * @FLOW3\Session(autoStart=true)
and 
Package line 46/47
$dispatcher->connect('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'authenticatedToken', 'TYPO3\FLOW3\Session\SessionInterface', 'renewId');
$dispatcher->connect('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'loggedOut', 'TYPO3\FLOW3\Session\SessionInterface', 'destroy');
"
35970,TYPO3.Flow,Task,"",New,Should have,Improve performance of Utility/Arrays::integerExplode by using array_map,Marc Bastian Heinrichs,"",2012-04-13 09:38,"","",2012-04-13,"","",0,2012-04-13 09:38,"","",562950,"","",""
36010,TYPO3.Flow,Bug,"",Closed,-- undefined --,TYPO3\FLOW3\Exception thrown in file Bootstrap.php,Uschi Renziehausen,Adrian Föder,2012-05-25 08:38,- Error Handler Report -,"",2012-04-13,"","",0,2012-04-13 16:04,"","",564900,"",FLOW3 1.0.4,"It seems like the PHP binary ""C:\php/php"" cannot be executed by FLOW3. Set the correct path to the PHP executable in Configuration/Settings.yaml, setting FLOW3.core.phpBinaryPathAndFilename.
3 TYPO3\FLOW3\Core\Bootstrap::initializeForRuntime()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()

I am using windows and the exeption above is thrown when I try to test my first steps with flow 3 according to http://flow3.typo3.org/documentation/quickstart.html > Testing the Installation.

In Configuration/Settings.yaml I set phpBinaryPathAndFilename: 'E:\xampp\php\php.exe' and reloaded the page. The exeption is still there and still has C:\php/php, so perhaps the configuration is not read in which case this is a bug?

The version I downloaded is Base Distribution (1.0.4) which I could not select.

Regards Uschi"
36013,TYPO3.Flow,Bug,"",Closed,Should have,Uncaught Exception on package:(de)activate when package is already (de)activated or not specified.,Jacob Floyd,"",2012-04-19 01:55,Command,"",2012-04-13,"","",0,2012-04-13 18:05,"","",565050,"",Git master,"Try to activate a package that is already active, like TYPO3.FLOW3 or TYPO3.Fluid

<pre>
./flow3 package:activate TYPO3.FLOW3
</pre>

FLOW3 should say something like ""Package is already active"", but instead it throws an ""Uncaught Exeption"" with pretty useless information:

<pre>
Uncaught Exception


More Information
  Exception code      #0
  File                [snip]Cache/Code/FLOW3_Objet_Classes/TYPO3_FLOW3_Cli_CommandController_Original.php line 249
  Exception reference #201204413235602f31b8f
</pre>

The same exception occurs if you deactivate an already deactivated package.

If you don't specify the package to activate with @./flow3 package:activate@, you get the same fairly useless error message (only it cites line 172 instead of 249)."
36014,TYPO3.Fluid,Feature,"",Resolved,Should have,Prepend currency sign,Kilian Hann,"",2012-09-17 06:06,ViewHelpers,"","","","",0,2012-04-13 18:10,"","",565100,"","","Add an option to prepend the currency sign, e.g. @CHF 123.45@"
36030,TYPO3.Flow,Bug,"",Resolved,Should have,Forwarding of CLI requests throws an exception,Alexander Stehlik,"",2012-04-14 20:39,Command,"",2012-04-14,"","",100,2012-04-14 07:00,"","",565900,"",Git master,"When you call a CLI action with missing parameters you get an exception with no further explanation.

This is because TYPO3\FLOW3\Cli\CommandController::forward() throws a\TYPO3\FLOW3\MVC\Exception\StopActionException that is not catched anywhere.

Expected behaviour would be to catch the exception and try do process a new request."
36035,TYPO3.Flow,Bug,"",Resolved,Should have,CSRF protection prevents the triggering of authentication entry points in some cases,Andreas Förthner,Andreas Förthner,2012-04-14 20:39,Security,1.1,2012-04-14,"","",100,2012-04-14 08:52,"","",566150,"",Git master,"As CSRF protection is not needed when nobody is logged in, we can completely skip this feature then. This makes sure, that authentication entry points are triggered in any case correctly."
36049,TYPO3.Flow,Bug,"",Resolved,Should have,After running setfilepermissions some file rights are different from the ones in repository ,Marc Bastian Heinrichs,Karsten Dambekalns,2012-07-12 06:35,"",1.1,2012-04-14,"","",100,2012-04-14 10:56,"","",566850,"",(any),"<pre>
$git diff
diff --git a/Classes/Security/Authentication/Token/AbstractToken.php b/Classes/Security/Authentication/Token/AbstractToken.php
old mode 100755
new mode 100644
diff --git a/Classes/Security/Authentication/Token/TestingToken.php b/Classes/Security/Authentication/Token/TestingToken.php
old mode 100755
new mode 100644
diff --git a/Classes/Security/Authentication/Token/Typo3OrgSsoToken.php b/Classes/Security/Authentication/Token/Typo3OrgSsoToken.php
old mode 100755
new mode 100644
diff --git a/Classes/Security/Authentication/Token/UsernamePassword.php b/Classes/Security/Authentication/Token/UsernamePassword.php
old mode 100755
new mode 100644
diff --git a/Classes/Security/Authentication/Token/UsernamePasswordHttpBasic.php b/Classes/Security/Authentication/Token/UsernamePasswordHttpBasic.php
old mode 100755
new mode 100644
diff --git a/Resources/Private/Translations/ValidationErrors.de.xlf b/Resources/Private/Translations/ValidationErrors.de.xlf
old mode 100755
new mode 100644
diff --git a/Resources/Private/Translations/ValidationErrors.en.xlf b/Resources/Private/Translations/ValidationErrors.en.xlf
old mode 100755
new mode 100644
diff --git a/Resources/Private/Translations/ValidationErrors.fr.xlf b/Resources/Private/Translations/ValidationErrors.fr.xlf
old mode 100755
new mode 100644
diff --git a/Scripts/flow3.php b/Scripts/flow3.php
old mode 100755
new mode 100644
diff --git a/Scripts/migrate-annotations.php b/Scripts/migrate-annotations.php
old mode 100755
new mode 100644
diff --git a/Scripts/migrate.php b/Scripts/migrate.php
old mode 100755
new mode 100644
</pre>"
36050,TYPO3.Flow,Task,"",Rejected,Should have,Raise the minimum PHP version due to security issues,Aske Ertmann,Karsten Dambekalns,2012-05-15 09:49,Core,1.1,2012-04-14,"","",0,2012-04-14 11:32,"","",566900,"","","We should consider raising the minimum PHP version requirement in the Bootstrap since there is a security issue concerning null byte poisoning for all file functions. Since there is no sanitizing in FLOW3 concerning the null byte poisoning, we should raise the requirement to 5.3.4, since it is fixed in that release.

Another suggestion is to raise it to 5.3.6 and get rid of the PDO charset handling."
36056,TYPO3.Flow,Bug,"",Resolved,Should have,"Usage of "" in the Policy.yaml",Patrick Kollodzik,Karsten Dambekalns,2012-12-19 03:15,Security,1.1,2012-04-14,"","",100,2012-04-14 14:04,"","",567200,"",Git master,"The Policy.yaml that comes with TYPO3.FLOW3 has the following example:

<pre>
# resources:
#   methods:
#     TYPO3_FooPackage_PropertySetter: ""method(TYPO3\FooPackage\SomeClass->setSomeProperty())""
</pre>

If you follow that example and wrap the string with the "" character, then the following expression will fail:

<pre>
# resources:
#   methods:
#     ResourceName: ""method(Package\LoginController\SomeClass->setSomeProperty())""
</pre>

Because of the "" the \L will be removed and the expression will not work as expected. If you replace the "" with ' it will work.

The examples in the documentation use all the ' character, so it should be enough to change the Policy.yaml that comes with TYPO3.FLOW3. It seems it is a legal escape character for YAML, but it is a bit confusing.

The stripping happens in the YAML paser and not in FLOW3.

http://www.yaml.org/refcard.html

"
36077,TYPO3.Flow,Feature,"",Closed,Should have,Separate original classes and proxy classes in class cache,Lienhart Woitok,Lienhart Woitok,2013-07-26 13:00,Object,"",2012-04-14,"","",0,2012-04-14 15:49,"","",568250,"","","IDEs like PhpStorm get confused with code completion if proxy classes are known to the IDE. On the other hand, one can only set breakpoints in the original classes if those are known to the IDE. As long as proxy and original classes share the same cache directory one can not use both IDE features at the same time."
36088,TYPO3.Flow,Feature,"",Resolved,Should have,Improve error handling of translation handling,Alexander Stehlik,Alexander Stehlik,2012-05-07 08:39,I18n,1.1,2012-04-15,"","",100,2012-04-14 19:31,"","",568800,"","","At the moment, if a translation for a plural version of a translation is not available, the translation system silently fails.

It would be better to throw an exception if the translation is available but the matching plural version is missing so that the developer knows whats going on.

Additionally the documentation for the plural handling of the translation system should be updated. An example for a translation with multiple plurals is this:

<pre>
<group id=""my.unique.translationkey"" restype=""x-gettext-plurals"">
	<trans-unit id=""my.unique.translationkey[0]"">
		<source>MySourceText</source>
		<target>This is only {0} item.</target>
	</trans-unit>
	<trans-unit  id=my.unique.translationkey[1]"">
		<source>MySourceText</source>
		<target>These are {0} items.</target>
	</trans-unit>
</group>
</pre>

For more details you can also have a look at the ""Google+ Post"":https://plus.google.com/u/0/111164297971761777611/posts/L8mgHWWnKfV about this topic.


"
36114,TYPO3.Flow,Bug,"",Resolved,Must have,"Property Mapping breaks for file uploads, because $_FILES-Array doesn't get ""untangled"" anymore",Johannes K,Bastian Waidelich,2012-04-25 20:38,Http,1.1 beta 1,2012-04-15,"","",100,2012-04-15 13:56,"","",570100,"",Git master,"TYPO3\FLOW3\Http\Request is missing the functionality that is implemented in TYPO3\FLOW3\Utility\Environment::untangleFilesArray().

This causes the $source array in TYPO3\FLOW3\Property\PropertyMapper::convert() to have invalid keys from the $_FILES array (name, type, tmp_name, error, size) and causes this exception:
""#1297759968: Exception while property mapping at property path """": Property ""name"" was not found in target object of type Acme\Domain\Model\Event"".

This is how $source look like:
<pre>
array(15)
 '__identity' (10) => '3fbe7e6e-15dc-43af-93d5-6b6e173a58c4' (36)
 'title' (5) => 'Test' (8)
...
 'image' (5) => array(1)
   'resource' (8) => array(1)
     'submittedFile' (13) => array(2)
       'fileName' (8) => '' (0)
       'resourcePointer' (15) => '' (0)
 'name' (4) => array(1)
   'image' (5) => array(1)
     'resource' (8) => '' (0)
 'type' (4) => array(1)
   'image' (5) => array(1)
     'resource' (8) => '' (0)
 'tmp_name' (8) => array(1)
   'image' (5) => array(1)
     'resource' (8) => '' (0)
 'error' (5) => array(1)
   'image' (5) => array(1)
     'resource' (8) => integer 4
 'size' (4) => array(1)
   'image' (5) => array(1)
     'resource' (8) => integer 0
</pre>

"
36155,TYPO3.Kickstart,Bug,"",Resolved,Should have,kickstart:model example for property creation is wrong,Christian Müller,Christian Müller,2012-04-25 08:38,"",1.0.5,2012-04-16,"","",100,2012-04-16 08:28,"","",572150,"",Git 1.0,"<pre>
(for example ""title:string size:int type:MyType"").
</pre>

should be

<pre>
(for example ""title:string"" ""size:int"" ""type:MyType"").
</pre>"
36159,TYPO3.Flow,Bug,"",Resolved,Should have,StringLengthValdiator uses strlen which is not UTF-8 save,Christian Müller,"",2013-03-27 08:37,"","",2012-04-16,"","",100,2012-04-16 09:12,"","",572350,"",Git master,Will probably result in not correctly validated obejcts. How to abstract UTF-8 save string length functions like mb_strlen?
36162,TYPO3.Flow,Bug,"",Closed,Must have,TYPO3\FLOW3\Exception thrown in file Scripts.php,Martin ,"",2012-04-16 12:03,"","",2012-04-16,"","",0,2012-04-16 10:59,"","",572500,"",Git master,"Freshley installed linux with apache2 and php5 just tried to get the acme.demo started. if i try to flush caches:
Fatal error: Class 'TYPO3\FLOW3\MVC\Controller\ActionController' not found in /home/wurtzelsepp/Arbeitsfläche/git/Base/Packages/Application/Acme.Demo/Classes/Controller/CoffeeBeanController.php on line 19

trying in Browser: 
PHP 5.3.6-13ubuntu3.6 with Suhosin-Patch (cli) (built: Feb 11 2012 03:26:01) Copyright (c) 1997-2011 The PHP Group Zend Engine v2.3.0, Copyright (c) 1998-2011 Zend Technologies
Uncaught Exception in FLOW3
#1297263663: The compile run failed. Please check the error output or system log for more information. (More information)

TYPO3\FLOW3\Exception thrown in file
Packages/Framework/TYPO3.FLOW3/Classes/Core/Booting/Scripts.php in line 222.
Reference code: 20120416165742c836b7

And i dont get it why
tried new Php php-cli cgi and nothing format new nothing 




The compile run failed. Please check the error output or system log for more information.
10 TYPO3\FLOW3\Core\Booting\Scripts::initializeProxyClasses(TYPO3\FLOW3\Core\Bootstrap)

9 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)

8 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)

7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

4 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)

3 TYPO3\FLOW3\Http\RequestHandler::boot()

2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
36185,TYPO3.Kickstart,Bug,"",Closed,Should have,Creation of packages fails or they cannot be called later ,Sven Leuschner,Sven Leuschner,2012-05-21 11:25,"",1.0.5,2012-04-16,"","",50,2012-04-16 17:47,"","",573650,"",FLOW3 1.0.3,"I followed exactly the Quickstart-Guide provided with flow3 1.04 
I managed to get it running out of the box to the welcome-screen, then followed the written lines about setting some environment-variables and creating a basic package 
> ""flow3 kickstart:package MyCompany.MyPackage""
That seems to work as intended as 2 lines indicate the creation of directories in Installation-Path->Package->Application

But when I call them in my browser (Opera and Mozilla Firefox ) -> http://localhost/flow3/Web/MyCompany.MyPackage  ,
I get a nice error message: 

Uncaught Exception in FLOW3
#1218473352: The action name must start with a lower case letter, ""MyCompany"" does not match this criteria. (More information)

TYPO3\FLOW3\MVC\Exception\InvalidActionNameException thrown in file
E:\xampp\htdocs\flow3\Data\Temporary\Development\Cache\Code\FLOW3_Object_Classes\TYPO3_FLOW3_MVC_Web_Request_Original.php in line 331.
Reference code: 20120416232925d34ff1

Unfortunately the ""More information""-Link in the error-page leads to an empty page (There is currently no text in this page ......)

the same happens when I follow the Quickstart further and create Acme.Demo 

When I try to ""circumvent"" the error by simply creating the packages using lowercase, I get an error from kickstart telling me I have to use uppercase ... so a nice circular error-connection - or not so nice
"
36207,TYPO3.Fluid,Task,"",Resolved,Should have,Speed up performance in format.currency,Ingo Pfennigstorf,"",2014-02-19 05:36,ViewHelpers,"",2012-04-17,"","",100,2012-04-17 05:37,"","",574750,"","",Related to #34519 setting an empty default value for format.currency speeds this ViewHelper up
36217,TYPO3.Flow,Feature,"",Resolved,Should have,As a developer I would like to have access to php://input in a uniform way,Claus Witt,Robert Lemke,2012-04-17 10:11,Environment,1.1,2012-04-17,"","",0,2012-04-17 07:06,"","",575250,"","","When using flow3 to create rest controllers, sometimes you would like to be able to have access to php://input from multiple sources (authentication token, controller and aspect/pointcut might all be relevant places). However if doing a PUT request and trying to read the php://input multiple times, it will return an empty string.

I guess the correct place to have this is in TYPO3\FLOW3\Utility\Environment - and either setting php:/input content to a instance variable in the constructor - or saving the value of the stream on the first read (to save the call to file_get_contents - or similar - to use cases where it is actually used). 

I have attaached a quick diff to show what I mean. 
"
36236,TYPO3.Flow,Bug,"",Resolved,Must have,Call to method not being backed by an interface in Http RequestHandler,Adrian Föder,Robert Lemke,2012-05-15 09:22,Http,1.1,2012-04-17,"","",100,2012-04-17 11:13,"","",576200,"",Git master,"in Http's RequestHandler's handleRequest() method, there is

<pre>
$this->router->setRoutesConfiguration($this->routesConfiguration);
</pre>

in -my case- case of a Widget Request, @$this->router@ is @TYPO3\Fluid\Core\Widget\WidgetRouter@ which hasn't a @setRoutesConfiguration()@ method.

So now there are few issues with that:

  * the @$this->router@ is annotated to be @\TYPO3\FLOW3\Mvc\Routing\Router@, not @...RouterInterface@
  * the @RouterInterface@, however, hasn't the @setRoutesConfiguration()@ method.
  * the @TYPO3\Fluid\Core\Widget\WidgetRouter@ doesn't implement from that interface
  * and, as said, the @TYPO3\Fluid\Core\Widget\WidgetRouter@ also doesn't have the @setRoutesConfiguration()@."
36249,TYPO3.Fluid,Feature,"",Rejected,Won't have this time,Add autocomplete property to form input field,Kilian Hann,"",2012-11-14 02:32,"","","","","",0,2012-04-17 16:43,"","",576850,"","",Please add the autocomplete property to the input field
36276,TYPO3.Flow,Feature,"",Resolved,Should have,Make doctrine:migrate output just show executed migrations,Karsten Dambekalns,Karsten Dambekalns,2012-04-24 08:38,Persistence,1.1,2012-04-18,"","",100,2012-04-18 05:17,"","",577550,"","",.
36279,TYPO3.Flow,Bug,"",Resolved,Should have,"When setting file permissions, the return code is always 0, even on error",Karsten Dambekalns,Karsten Dambekalns,2012-04-25 08:38,Core,1.0.5,2012-04-18,"","",100,2012-04-18 05:27,"","",577700,"",Git 1.0,"If something goes wrong, it should instead return a non-zero error code."
36284,TYPO3.Flow,Task,"",Resolved,Must have,Move XLIFF files around so that their use is Pootle-compatible,Karsten Dambekalns,Karsten Dambekalns,2012-04-30 20:37,I18n,1.1,2012-04-18,"","",100,2012-04-18 05:47,"","",577950,"","","We need to change the way we put XLIFF files into the filesystem, so that we can use Pootle.

<pre>
We have a problem with the FLOW3 project on the translation server.
Currently the filename is something like Main.en.xlf, Main.de.xfl ...
And that naming convention is not supported by Pootle.

We can use two different schema:

1. A directory tree, but the XLIFF file must have the same name in each
   language project (like v4 use)
2. The GNU way, with filename like en.xlf, de.xlf, ... but only one file per
   project.
</pre>"
36297,TYPO3.Fluid,Bug,"",Resolved,Must have,ValidationResults ViewHelper must always render childnodes,Bastian Waidelich,Bastian Waidelich,2012-04-18 20:37,ViewHelpers,1.1,2012-04-18,"","",100,2012-04-18 09:13,"","",578600,"",Git master,The adjustments to the new HTTP implementation in FLOW3 introduced a regression that prevents the child nodes of the ValidationResults ViewHelper from being rendered if no validation errors occurred.
36301,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Supply PostgreSQL migrations,Karsten Dambekalns,Karsten Dambekalns,2012-04-30 04:42,"",1.1,2012-04-18,"","",100,2012-04-18 12:00,"","",578800,"","","The ""official"" packages should contain DB migrations for PostgreSQL as well."
36310,TYPO3.Flow,Bug,"",Resolved,Should have,ContextTest broken due to missing ActionRequestHandler,Jacob Floyd,Karsten Dambekalns,2012-06-28 04:30,MVC,"",2012-04-19,"","",100,2012-04-18 20:06,"","",579200,"",Git 1.1,"So, I'm running the test suite on a fresh checkout of git master @git clone --recursive git://git.typo3.org/FLOW3/Distributions/Base.git -o typo3@.

To run the tests, I'm doing @phpunit -c Build/Common/PhpUnit/UnitTests.xml@

Part way through, I'm getting:

<pre>
PHP Fatal error:  Class 'TYPO3\FLOW3\Mvc\TYPO3\FLOW3\Mvc\ActionRequestHandler' not found in /usr/share/php/PHPUnit/Framework/MockObject/Generator.php(170) : eval()'d code on line 7

Fatal error: Class 'TYPO3\FLOW3\Mvc\TYPO3\FLOW3\Mvc\ActionRequestHandler' not found in /usr/share/php/PHPUnit/Framework/MockObject/Generator.php(170) : eval()'d code on line 7
</pre>

Thanks to grep, it seems that the only tests that uses an ActionRequestHandler are in Tests/Unit/Security/ContextTest.php:
* securityContextIsSetToInitialized()
* initializeSeparatesActiveAdnInactiveTokens()

In both cases, @getMock('TYPO3\FLOW3\Mvc\ActionRequestHandler'@ is used. However, I don't see an ActionRequestHandler. There's an ActionRequest, but not a Handler. Does this need to change according to recent Http changes? should it be using Http\Request or Mvc\ActionRequest or something else entirely?

I'm using phpunit 3.5.13 and php 5.3.10-pl0-gentoo"
36333,TYPO3.Flow,Feature,"",Resolved,Should have,Using Locale parser in Float TypeConverter,Adrian Föder,Adrian Föder,2012-07-18 09:35,Property,2.0 beta 1,2012-04-19,"","",100,2012-04-19 09:52,"","",580300,"","","since the Validator has it, it would be nice and useful to let the Property Mapper use the Locale parser to differentiate between various given decimal and thousands separators"
36337,TYPO3.Flow,Feature,"",Resolved,Should have,"Allow ""configurable"" classes path in packages",Karsten Dambekalns,Karsten Dambekalns,2012-04-23 08:38,Core,1.1,2012-04-19,"","",100,2012-04-19 10:35,"","",580500,"","","Currently, the class loader expects to find classes inside ""Classes"" of each package. While this is fine for FLOW3 packages, it blocks (easy) use of other PSR-0 compatible packages - the code always has to be moved into ""Classes"". To make use of 3rd party code easier, e.g. by using Composer, we need to be able to specify a mapping of package keys to entry points for the class loader.

This change c/should remove the .Shortcuts folder again and could also make ""overlapping"" package keys possible (e.g. TYPO3.JobQueue and TYPO3.JobQueue.Beanstalk)."
36340,TYPO3.Flow,Task,"",Resolved,Should have,Environment class needs to be cleaned up,Karsten Dambekalns,Karsten Dambekalns,2012-04-25 20:38,Environment,1.1,2012-04-19,"","",100,2012-04-19 11:26,"","",580600,"","","With the HTTP foundation quite some things from @Environment@ have become obsolete. The class and it's ""users"" need to be adjusted."
36397,TYPO3.Flow,Bug,"",Resolved,Must have,baseUri setting no longer used since HTTP foundation changes,Karsten Dambekalns,Karsten Dambekalns,2012-04-25 20:38,Http,1.1,2012-04-20,"","",100,2012-04-20 15:42,"","",583300,"",Git master,The utility:environment:baseUri settings is no longer used (consistently) since the HTTP foundation changes have been introduced.
36410,TYPO3.Fluid,Feature,"",New,Should have,Allow templates to send arguments back to layout,Florian Carstens,"",2012-08-13 05:46,ViewHelpers,"",2012-04-21,"","",0,2012-04-21 10:30,"","",583950,"","","Layouts can differ a little on a website from page to page without affecting the whole layout. For example: Some pages contain a sidebar, others not. Or: Each page has it's own background which is set by a body or div container css class. I would like to set these kind of settings by sending arguments to the layout. That could e.g. be realised by extending the layout viewHelper:

<pre>
  <f:layout name=""Master"" arguments=""{cssClass: blueBackground}"" />
</pre>

Of course, I can do this in the controller. But I think this wouldn't be the right place according to the MVC design pattern."
36446,TYPO3.Flow,Bug,"",Resolved,Must have,"""classesPath"" is not added to PackageStates.php on creating a package",Robert Lemke,Karsten Dambekalns,2012-05-15 09:41,Package,1.1 beta 1,2012-04-23,"","",100,2012-04-23 04:25,"","",585700,"",Git master,"When doing a ./flow3 package:create, the PackageStates.php is updated by adding the new package, but the new entry lacks the ""classesPath"" field."
36495,TYPO3.Flow,Bug,"",New,Should have,HTTP Response is sent before persistence preventing Exceptions to be displayed on redirect,Alexander Berl,"",2012-04-23 18:28,Persistence,"",2012-04-24,"","",0,2012-04-23 18:28,"","",588050,"",Git master,"When a persistence Exception (e.g. _""Integrity constraint violation: 1048 Column '...' cannot be null""_ due to missing _@ORM\Column(nullable=true)_ annotation) is thrown after an action that does a redirect (e.g. a typical createObjectAction), the Exception isn't displayed (well it is but only for the matter of milliseconds the browser needs to do the redirect) because the redirect headers are sent before.

Therefore the Exception may go by unnoticed until the persistence is checked and Exception log inspected, which is undesired.
"
36500,TYPO3.Fluid,Bug,"",Resolved,Must have,Ajax widgets can't be executed,Nicole Cordes,"",2012-05-14 20:38,"","",2012-04-24,"","",100,2012-04-24 04:17,"","",588300,"",Git master,Any ajax widget can't be executed because of the missing function setRoutesConfiguration which is called by \TYPO3\FLOW3\Http\RequestHandler->handleRequest.
36502,TYPO3.Flow,Bug,"",Resolved,Must have,Precompiled reflection data is not removed on a cache:flush --force,Robert Lemke,Robert Lemke,2012-04-24 08:38,Cache,1.1 beta 1,2012-04-24,"","",100,2012-04-24 05:14,"","",588400,"",Git master,"Reflection data of frozen packages is not located in the context's temporary directory and thus not removed. This can, however, lead to weird behavior if old reflection data is still loaded despite a ./flow3 typo3.flow3:cache:flush --force"
36508,TYPO3.Flow,Bug,"",New,Should have,AuthenticationProvider Request Patterns,Carsten Bleicker,"",2012-04-24 06:39,Security,"",2012-04-24,"","",0,2012-04-24 06:39,"","",588700,"",Git master,"requestPatterns:
  ControllerObjectName: Does not match

Seems like only firewall settings matching requestPatterns."
36509,TYPO3.Flow,Feature,"",New,Should have,redirectToUri to an uri with acl forces a 403 because of missing csrf token.,Carsten Bleicker,"",2012-04-24 06:44,"","",2012-04-24,"","",0,2012-04-24 06:44,"","",588750,"","",maybe add to the documentation that uri redirects to stuff with acl throwing a 403 error.
36510,TYPO3.Flow,Feature,"",New,Should have,Firewall Redirect?,Carsten Bleicker,"",2012-04-24 06:57,"","",2012-04-24,"","",0,2012-04-24 06:57,"","",588800,"","","I want to implement somewhere some assumptions wich has to be valid to access some actions.
For Example: If primaryElectronicAddress::approved is false init a redirect to somewhere else.
I tried to to this by firewall but the firewall doesnt catch something to redirect.

Maybe the firewall is the wrong place here.
Maybe there shoud be something wich acts nearly like a firewall but call it
TYPO3\FLOW3\Assumption\ wich holds some pattern stuff f.e. to redirect?"
36516,TYPO3.Flow,Bug,"",Resolved,Should have,PackageStates.php are written on every request,Robert Lemke,Robert Lemke,2012-04-24 20:38,Package,1.1 beta 1,2012-04-24,"","",100,2012-04-24 09:49,"","",589100,"",Git master,"As it seems, the PackageStates.php file is re-written on every request (in development context), even if no related data has changed."
36517,TYPO3.Flow,Bug,"",Resolved,Should have,Functional tests with security do not work,Christopher Hlubek,Christopher Hlubek,2012-07-18 07:12,Security,1.1,2012-04-24,"","",100,2012-04-24 10:05,"","",589150,"",(any),After the HTTP refactoring there are some problems with the functional tests and security.
36518,TYPO3.Flow,Bug,"",Resolved,Should have,Http\Request::createFromEnvironment does not work on CLI,Christopher Hlubek,Christopher Hlubek,2012-04-26 04:22,Http,1.1,2012-04-24,"","",100,2012-04-24 10:08,"","",589200,"",Git master,Calling Http\Request::createFromEnvironment gives a notice about an undefined array index for @HTTP_HOST@ and @REMOTE_URI@. This should be guarded in the Request implementation.
36519,TYPO3.Flow,Bug,"",Resolved,Should have,flow3:package:import doesn't update PackageStates.php,Robert Lemke,Robert Lemke,2012-04-24 20:38,Package,1.1 beta 1,2012-04-24,"","",100,2012-04-24 10:31,"","",589250,"",Git master,.
36559,TYPO3.Fluid,Feature,"",New,Could have,New widget progress bar,Nicole Cordes,"",2012-04-25 09:11,"","",2012-04-25,"","",0,2012-04-25 09:11,"","",591250,"","","I developed a new widget which might be interesting to move it to the core. It's an universal progress bar calling a controller action by ajax to load progress.

You can easily use it in your own fluid templates by just adding 

<pre>
<f:widget.progressbar id=""progressbar"" action=""ajax"" message=""1"" messageText=""This text is shown below the progress bar"" arguments=""{itemsToLoad: 10}"" controller=""yourController"" package=""yourPackage"" subpackage=""yourSubpackage"" />
</pre>

For explanation:
* id means the id of the div container the progress bar is insert into
* action is the action to be called from the ajax request
* message indicates if a message under the progress bar should be displayed
* messageText is the default text to show (under the progress bar)
* arguments is an array of arguments passed to the action request
* controller defines the controller the action belongs to, if not set the current one is used
* package and subpackage define the package the controller belongs to, if not set the current ones are used

The actions has to return an json string having to keys:
* value has to be an integer representing the status in percent (with the percent sign)
* messageText is the string added to the message container below the progress bar (if enabled)

If you have any questions just ask me :-)
"
36562,TYPO3.Flow,Task,"",Resolved,Should have,"""Compile run failed"" output is confusing",Karsten Dambekalns,Robert Lemke,2013-03-24 05:28,Core,1.1,2012-04-25,"","",100,2012-04-25 09:31,"","",591400,"","","The exception thrown on a failed compile run produces quite confusing, verbose output without any benefit."
36563,TYPO3.Flow,Feature,"",Resolved,Should have,Add a simple file backend for caching that favors speed over flexibility,Karsten Dambekalns,Robert Lemke,2012-04-26 08:38,Cache,1.1,2012-04-25,"","",100,2012-04-25 09:37,"","",591450,"","","The tagging features of the file backend are powerful but come at a cost. Flushing caches by tag can be extremely costly when a lot of entries and tags are used.

It would be useful to have a simpler file backend that doesn't support tagging but is faster instead."
36565,TYPO3.Flow,Feature,"",Resolved,Should have,Provide method for retrieving current HTTP request,Robert Lemke,Robert Lemke,2012-04-25 20:38,Http,1.1 beta 1,2012-04-25,"","",100,2012-04-25 10:03,"","",591550,"","","Various application parts need a prominent place to get hold of the current HTTP request because it contains important environment information which was previously provided by Utility\Environment.

The RequestHandler should do that."
36568,TYPO3.Flow,Feature,"",Resolved,Should have,Make use of multiple file monitor instances easier/possible,Karsten Dambekalns,Robert Lemke,2012-04-26 08:38,Monitor,1.1,2012-04-25,"","",100,2012-04-25 10:28,"","",591700,"","",The fact that the FileMonitor doesn't use it's identifier internally (for caching) and the fact that the ModificationTimeStrategy is singleton do not really make the use of multiple file monitor instances easier?
36569,TYPO3.Flow,Bug,"",Resolved,Must have,Precompiled reflection data is not stored context-aware,Karsten Dambekalns,Robert Lemke,2012-04-25 20:38,Reflection,1.1,2012-04-25,"","",100,2012-04-25 10:32,"","",591750,"",Git master,The precompiled reflection data is not stored in a context-specific place. This can lead to very weird situations?
36572,TYPO3.Flow,Bug,"",Resolved,Should have,Force flushing caches fails if temporary directory does not exist,Karsten Dambekalns,Karsten Dambekalns,2012-04-25 20:38,Core,1.1,2012-04-25,"","",100,2012-04-25 10:53,"","",591900,"",Git master,"When force flushing caches the precompiled reflection data is removed using @removeDirectoryRecursively()@. But if that folder does not exist, the operation dies with an exception:

> ""/?/Data/Temporary/Production/PrecompiledReflectionData/"" is no directory."
36577,TYPO3.Flow,Bug,"",Resolved,Should have,Do not fallback to system temporary directory,Christian Müller,Christian Müller,2012-04-25 20:38,Environment,1.1 beta 1,2012-04-25,"","",100,2012-04-25 13:30,"","",592150,"",Git 1.0,As this could lead to problems with multiple FLOW3 instances on the same system we should throw an exception if the configured temporary path is not usable.
36578,TYPO3.Flow,Task,"",Resolved,Should have,precompiledReflectionStoragePath should no longer be used but instead derived from temporary path,Christian Müller,Christian Müller,2012-04-25 20:38,Reflection,1.1 beta 1,2012-04-25,"","",100,2012-04-25 13:33,"","",592200,"","",The setting for precompiledReflectionStoragePath should be removed to avoid unnecessary complexity and replaced by a defined path inside the configured temporary ptah.
36580,TYPO3.Welcome,Bug,"",Resolved,Should have,Broken links and outdated text on Welcome screen,Karsten Dambekalns,Karsten Dambekalns,2012-04-26 20:38,"",1.0.5,2012-04-25,"","",100,2012-04-25 16:22,"","",592300,"",Git master,"The links shown in the ""warning box"" when using production contect are broken. The ""About"" text mentions the number that shall not be named and could use a brush up on the list of contributors."
36617,TYPO3.Flow,Bug,"",Resolved,Must have,FunctionalTestRequestHandler does not implement HttpRequestHandlerInterface,Karsten Dambekalns,Karsten Dambekalns,2012-04-28 08:37,- Testing -,1.1 beta 1,2012-04-26,"","",100,2012-04-26 10:15,"","",594100,"",Git master,In some cases functional tests need to access @getHttpRequest()@ on the active RequestHandler. In functional tests this doesn't work.
36624,TYPO3.Flow,Bug,"",Resolved,Should have,"In CLI context no (HTTP) request is present, thus token separation fails",Karsten Dambekalns,Karsten Dambekalns,2012-04-26 20:38,Security,1.1,2012-04-26,"","",100,2012-04-26 11:37,"","",594450,"",Git master,"@separateActiveAndInactiveTokens()@ in @Security\Context@ fails if @$this->request@ is @NULL@. In that case, token separation should probably be skipped completely."
36625,TYPO3.Flow,Bug,"",Resolved,Must have,PersistenceQueryRewritingAspect does not support count() correctly,Karsten Dambekalns,Robert Lemke,2012-04-28 08:37,Security,1.1,2012-04-26,"","",100,2012-04-26 11:52,"","",594500,"",Git master,"If the aspect intercepts a count() method and the result (because of lacking access rights) would be ""none"", the aspect returns an EmptyQueryResult object which in turn can not be cast into an integer by the client code."
36626,TYPO3.Flow,Bug,"",Resolved,Must have,Content security does not work correctly,Karsten Dambekalns,Andreas Förthner,2012-06-20 14:53,Security,1.1 beta 3,2012-04-26,"","",100,2012-04-26 12:21,"","",594550,"",FLOW3 1.1.0 beta 1,"With the introduction of Doctrine and other changes, content security ceased to work as as expected."
36627,TYPO3.Flow,Feature,"",Closed,Won't have this time,Global Fallback Route,Bastian Waidelich,Bastian Waidelich,2012-07-26 08:02,MVC - Routing,"",2012-04-26,"","",0,2012-04-26 12:31,"","",594600,"","","Currently, if you try to link to an action and there is no matching route, one gets an exception.
I suggest to add a new setting, that adds a ""global fallback route"" to the *end* of all configured routes if enabled. That route has no defaults and accepts all arguments via query parameters.

So if no matching route was found before, this route will match and might create an ugly URI (@domain.tld?@package=Some.Package&@controller=SomeController&argument=someArgument@) but no exception.

There are a few open questions though:

* Whats a good name for that setting? ""TYPO3.FLOW3.mvc.enableGlobalFallbackRoute"" ?

* Should this be enabled by default? I think, yes. We need it for the Setup for example and it will probably ease the life of FLOW3 rookies. But it would be a breaking change (because you would be able to call actions you weren't before)"
36632,TYPO3.Flow,Bug,"",Closed,Should have,The requestPatterns in AbstractToken has value NULL,Rens Admiraal,Rens Admiraal,2012-06-28 04:32,Security,"",2012-04-26,"","",0,2012-04-26 15:09,"","",594850,"",Git 1.1,"I just installed a clean distribution of the blog package and for some reason this install throws an error because of the return value in hasRequestPatterns() which returns TRUE when the requestPatterns value is NULL.

For this I'll upload a related patch on gerrit. Problem is how the value can be NULL. setRequestPatterns has typehinting for $requestPatterns being array, and isn't even called somewhere in the code. The property is protected, and has a default value of array(). Besides that: the setRequestPatterns() method is never called.

"
36633,TYPO3.Flow,Bug,"",New,Should have,Reconstituted entities should not have the FLOW3_Persistence_clone property set,Christian Müller,"",2012-04-26 15:24,"","",2012-04-26,"","",0,2012-04-26 15:24,"","",594900,"",Git master,""
36634,TYPO3.Flow,Bug,"",New,Should have,Reconstituted entities do not have their properties set when initializeObject() is called,Christian Müller,"",2012-04-26 15:28,"","",2012-04-26,"","",0,2012-04-26 15:28,"","",594950,"",Git master,"The doctrine proxy __load method seems to be never called, instead UnitOfWork::createEntity() uses UnitOfWork::newInstance() which basically clones our proxy class (which also means we generate an UUID and set the clone property) and after that just inserts the properties..."
36637,TYPO3.Flow,Bug,"",Resolved,Should have,AdviceChain works with the wrong proxy instance in some cases,Andreas Förthner,Andreas Förthner,2012-04-27 08:38,AOP,1.1 beta 1,2012-04-26,"","",100,2012-04-26 17:50,"","",595100,"",Git master,"As the AdviceChain gets its proxy by a constructor argument, it might work on the wrong instance if the advice is used in different instances of the same object type. To solve this, the advice chain should always fetch the proxy instance from the current joinpoint."
36644,TYPO3.Eel,Bug,"",Resolved,Must have,Invalid variable type during PHP-peg parsing,Adrian Föder,Sebastian Kurfuerst,2012-06-21 10:37,"","",2012-04-27,"","",100,2012-04-27 02:46,"","",595450,"","","during processing, in php-peg\Parser.php there' the following lines of code:
<pre><code class=""php"">
	function store(&$result, $subres, $storetag = NULL) {
		$result['text'] .= $subres['text'];
</code></pre>

a var_dump of the $subres variable has the following ouput ending:
<pre>
(...many similar arrays)

array(4) {
  [""_matchrule""]=>
  string(11) ""Disjunction""
  [""name""]=>
  string(11) ""Disjunction""
  [""text""]=>
  string(47) ""context.children(this.getNodePath()).children()""
  [""code""]=>
  string(164) ""$context->getAndWrap('context')->callAndWrap('children', array($context->getAndWrap('this')->callAndWrap('getNodePath', array())))->callAndWrap('children', array())""
}
array(3) {
  [""_matchrule""]=>
  string(10) ""Identifier""
  [""name""]=>
  string(10) ""Identifier""
  [""text""]=>
  string(6) ""teaser""
}
string(6) ""teaser""

(end of processing)
</pre>

you see, the last occurence is a string; maybe due to a recursive call to the preceding Identifier/teaser thing.

Due to the fact $subres is in the very last case a string, $subres['text'] finally results in 
<pre><code class=""html"">
<!-- Exception while rendering page&lt;TYPO3.TYPO3:Page&gt;/body&lt;TYPO3.TypoScript:FluidRenderer&gt;/sections/teaser : Warning: Illegal string offset 'text' in C:\Users\afoeder\FLOW3\Flow3Org\Packages\Application\TYPO3.Eel\Resources\Private\PHP\php-peg\Parser.php line 171 -->
</code></pre>

This kind of warning seems to be a PHP 5.4 issue only, but it's logically incorrect however."
36651,TYPO3.Flow,Task,"",Resolved,Should have,"Update ""CGL on one page"" PDF and link it",Bastian Waidelich,Karsten Dambekalns,2012-06-25 11:35,- Documentation -,1.1 RC1,2012-04-27,"","",100,2012-04-27 05:31,"","",595800,"","","We once had a nice PDF containing the most important CGL on one page (see attachment). This has been removed with the relaunch of flow3.typo3.org apparently.
We should update the PDF and link it in the CGL section of the documentation on flow3.typo3.org

Some of the required changes:

* remove encoding declaration
* adjust license header
* remove obsolete class annotations (@pacakge, @version, @license)
* Replace \F3 with \TYPO3\FLOW3
* Add trailing backslash to ""ArrayObject"" in var annotation
* Add empty space between description and var annotations
* Remove @author annotations"
36655,TYPO3.Fluid,Bug,"",New,Should have,Pagination Links,Carsten Bleicker,"",2012-06-23 16:18,Widgets,"",2012-04-27,"","",0,2012-04-27 06:51,"","",596000,"",Git master,"TYPO3\Fluid\ViewHelpers\Link\WidgetViewHelper

CSRF Tokens arent generated if ACL matches."
36657,TYPO3.Flow,Bug,"",Resolved,Must have,Typo3OrgSsoToken uses removed method from Environment,Karsten Dambekalns,Karsten Dambekalns,2012-04-27 08:38,Security,1.1,2012-04-27,"","",100,2012-04-27 07:46,"","",596100,"",Git master,Environment does no longer have @getRawGetArguments()@
36659,TYPO3.Flow,Bug,"",Resolved,Must have,Functional test sees account roles from previous test,Robert Lemke,Robert Lemke,2012-04-28 08:37,Security,1.1 beta 1,2012-04-27,"","",100,2012-04-27 08:39,"","",596200,"",Git master,"If testable security is used in a functional test case, a user is still authenticated with the roles of a previous test if the current test doesn't do any new authentication. This is due to a session being kept across test boundaries.

<pre>
	/**
	 * @test
	 */
	public function publicActionIsGrantedForAdministrator() {
		$this->authenticateRoles(array('Administrator'));
		$this->restrictedController->publicAction();
	}

	/**
	 * @test
	 * @expectedException \TYPO3\FLOW3\Security\Exception\AuthenticationRequiredException
	 */
	public function customerActionIsDeniedForEverybody() {
		$this->restrictedController->customerAction();
	}
</pre>

The second test will fail because the role ""Administrator"" is still active. If the second test called $this->autenticateRoles(array()); it would actually work."
36662,TYPO3.Fluid,Bug,"",Needs Feedback,Should have,Checked state isn't always correct when property is collection,Kevin Ulrich Moschallski,Kevin Ulrich Moschallski,2013-08-14 09:39,ViewHelpers,1.1.1,2012-04-27,"","",0,2012-04-27 09:16,"","",596350,"",Git 1.1,The checkboxViewHelper doesn't always set the correct checked state when the property is an collection. I took the mechanism of the selectViewHelper and put it in the checkboxViewHelper.
36671,TYPO3.Flow,Bug,"",Resolved,Should have,When an exception occurs during Doctrine\Query->getResult() it is silently ignored,Karsten Dambekalns,Karsten Dambekalns,2012-05-15 09:26,Persistence,1.1,2012-04-27,"","",100,2012-04-27 10:47,"","",596800,"",Git 1.0,.
36679,TYPO3.Flow,Bug,"",Resolved,Must have,PersistenceQueryRewritingAspect broken if only one additional constraint is added,Karsten Dambekalns,Karsten Dambekalns,2012-04-28 08:37,Security,1.1,2012-04-27,"","",100,2012-04-27 13:14,"","",597200,"",Git master,.
36684,TYPO3.Flow,Bug,"",Closed,Should have,Fixes for functional security tests break custom tests,Karsten Dambekalns,Karsten Dambekalns,2012-06-25 10:54,- Testing -,1.1,2012-04-28,"","",0,2012-04-28 05:56,"","",597450,"",Git 1.1,"In @FunctionalTestCase.php@ the line @$this->securityContext->refreshTokens();@ causes severe problems for Christopher Hlubek's tests that deal with security. That line was added in https://review.typo3.org/9676 to fix #34466.

I tested without that line and indeed all functional security tests in FLOW3 still pass, if the exception expectation in @MethodSecurityTest@ is again changed from @AuthenticationRequiredException@ to @AuthenticationRequiredException@.

Christopher: how do your tests fail? Maybe you also have the same wrong expectation?"
36695,TYPO3.Flow,Feature,"",Resolved,Should have,Control Validation Groups and add Groups for Create and Update,Alexander Berl,"",2012-08-20 04:35,Validation,"",2012-04-28,"","",100,2012-04-28 18:26,"","",598000,"","","As a developer I want to be able to validate objects differently on creation and update, for example a user registration needs to validate for non-existance of properties username/email, however when updating the user object those validations may not be evaluated, but all others.

I suggest extending the Validation Group Changeset with a new Annotation ValidationGroups for action methods to override the default groups _(""Default"", ""Controller"")_ and adding validation groups _""Create""_ and _""Update""_ for the MVC actions *create* and *update*.
"
36696,TYPO3.Flow,Feature,"",Resolved,Should have,Allow setting response headers from different locations,Alexander Berl,Robert Lemke,2012-05-30 02:41,Http,1.1 beta 2,2012-04-29,"","",100,2012-04-28 20:26,"","",598050,"","","As a developer, I want to set response headers from locations different from the current controller invocation for various needs.
For example, I want to set the _""Vary: Accept-Language""_ header from a locale detection service, or the _""Cache-Control""_ headers from a caching service.

I suggest the RequestHandler should also provide access to the current response object, as it currently does to the HttpRequest object."
36714,TYPO3.Flow,Feature,"",Resolved,Should have,Use lifecycle annotations without HasLifecycleCallbacks,Karsten Dambekalns,Karsten Dambekalns,2012-05-03 08:40,Persistence,1.1,2012-04-30,"","",100,2012-04-30 04:48,"","",598950,"","","When using lifecycle annotations on methods, there should be no need to annotate the class itself with @HasLifecycleCallbacks@. It is probably intended to avoid parsing docblocks of all methods, but we do this anyway (and it's cached afterwards), so having to annotate the class *and* the method is just overhead."
36715,TYPO3.Flow,Feature,"",Accepted,Should have,Make simultaneous use of multiple persistence backends possible,Karsten Dambekalns,Karsten Dambekalns,2013-11-20 15:17,Persistence,"",2013-01-08,"","",0,2012-04-30 05:09,"","",599000,0.00,"",First step: collect ideas on how to do that at http://wiki.typo3.org/Multiple_persistence_backends
36717,TYPO3.Flow,Bug,Feature #29547: @identity should make property unique in Database,Resolved,Should have,Remove Identity from Resource,Christian Müller,Christian Müller,2012-05-03 08:40,"","",2012-04-30,"","",100,2012-04-30 06:45,"","",599100,"",Git master,"See discussion about Resource in parent task, we should remove the annotation in Resource to not change behaviour before we add the functionality for Identity annotations."
36720,TYPO3.Flow,Bug,"",Resolved,Must have,Settings from package cannot override default value with empty array,Christopher Hlubek,Christopher Hlubek,2013-04-05 09:37,"","",2012-04-30,"","",100,2012-04-30 09:04,"","",599250,"",Git master,"A more specific setting file cannot override a list of values (array) with an empty array. The method arrayMergeRecursiveOverrule is not consistent in its logic, since setting NULL will also override the default, so this should also work with an empty array if emptyValuesOverride is TRUE.

We need that fix to override security firewall filters in functional tests. Besides that the current behaviour is not intuitive when treating NULL and empty arrays differently and limits extensibility.

A fix for this - while logically correct - causes problems when loading policies, such that roles from different packages or contexts override each other where they should be additive in behaviour."
36734,TYPO3.Flow,Bug,"",Resolved,Should have,Transient properties cannot be property mapped,Alexander Berl,Karsten Dambekalns,2014-08-27 12:00,Property,"",2012-04-30,"","",100,2012-04-30 16:07,"","",599950,"",FLOW3 1.0.0,"When creating an object containing transient properties through a webform an exception is thrown that the property is not found within the object.

h2. Example

*Model*
<pre>
/**
 * A Baz
 *
 * @FLOW3\Entity
 */
class Baz {

	/**
	 * The password
	 * @var string
	 * @FLOW3\Transient
	 */
	protected $password;
...
}
</pre>

*Form*
<pre>
    <f:form action=""create"" name=""baz"" object=""{baz}"">
        Password: <f:form.textfield property=""password"" /><br />
        <f:form.submit value=""submit"" />
    </f:form>
</pre>

After submitting the form the following exception is thrown:

TYPO3\FLOW3\Property\Exception\InvalidTargetException thrown in file TYPO3_FLOW3_Property_TypeConverter_PersistentObjectConverter_Original.php
<pre>
Property ""password"" was not found in target object of type ""Foo\Bar\Domain\Model\Baz"".
20 TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter_Original::getTypeOfChildProperty(""Foo\Bar\Domain\Model\Baz"", ""password"", TYPO3\FLOW3\Mvc\Controller\MvcPropertyMappingConfiguration)

19 TYPO3\FLOW3\Property\PropertyMapper_Original::doMapping(array, ""Foo\Bar\Domain\Model\Baz"", TYPO3\FLOW3\Mvc\Controller\MvcPropertyMappingConfiguration, array)

18 TYPO3\FLOW3\Property\PropertyMapper_Original::convert(array, ""Foo\Bar\Domain\Model\Baz"", TYPO3\FLOW3\Mvc\Controller\MvcPropertyMappingConfiguration)

17 TYPO3\FLOW3\Mvc\Controller\Argument_Original::setValue(array)

16 TYPO3\FLOW3\Mvc\Controller\AbstractController::mapRequestArgumentsToControllerArguments()

15 TYPO3\FLOW3\Mvc\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

14 TYPO3\FLOW3\Mvc\Dispatcher_Original::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

13 TYPO3\FLOW3\Mvc\Dispatcher::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

12 call_user_func_array(array, array)

11 TYPO3\FLOW3\Mvc\Dispatcher::FLOW3_Aop_Proxy_invokeJoinPoint(TYPO3\FLOW3\Aop\JoinPoint)

10 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

9 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\Aop\JoinPoint)

8 TYPO3\FLOW3\Aop\Advice\AroundAdvice::invoke(TYPO3\FLOW3\Aop\JoinPoint)

7 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

6 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\Aop\JoinPoint)

5 TYPO3\FLOW3\Aop\Advice\AroundAdvice::invoke(TYPO3\FLOW3\Aop\JoinPoint)

4 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

3 TYPO3\FLOW3\Mvc\Dispatcher::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()
</pre>


The problem here is, that the property is skipped in reflection due to the Transient annotation (see ReflectionService->addPropertiesToClassSchema) and therefore also cannot be property mapped.

see http://lists.typo3.org/pipermail/flow3-general/2012-April/002285.html"
36750,TYPO3.Flow,Bug,"",Closed,Must have,Last parameter of CLI command never gets parsed,Nicole Cordes,"",2012-05-25 06:46,Command,"",2012-05-01,"","",100,2012-05-01 09:38,"","",600750,"",Git master,In TYPO3\FLOW3\Cli\RequestBuilder::parseRawCommandLineArguments the last argument never gets parsed. This is because of an empty array after resolving the last parameter.
36767,TYPO3.Flow,Bug,"",Resolved,Must have,generateHmac does not use safe getEncryptionKey leading to possibly invalid hmacs,Alexander Berl,"",2012-05-21 20:41,Security,1.1,2012-05-02,"","",100,2012-05-01 21:28,"","",601600,"",Git master,"Currently the generateHmac function of the *Security\Cryptography\HashService* directly accesses _$this->encryptionKey_ instead of using the (lazy loading) getter.
Hence under certain circumstances the encryptionKey may still be unloaded leading to wrong hmacs being generated, only being noticed when the hmac validation fails later on.
"
36776,TYPO3.Flow,Bug,"",Resolved,Should have,Property Mapping should be based on whitelist; configuration should be generated by form,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-05-15 08:38,MVC,1.1 beta 1,2012-05-02,"","",100,2012-05-02 08:43,"","",602050,"",Git master,"In order to make the property mapper more predictible and secure by default, we propose the following changes:

* We should be able to *explicitely* map allowed fields, and ignore all non-specified fields.
* If passing an object inside a link f.e., no modification of this object should be allowed at all
* if using Fluid, it should be safe by default but not required to specify any property mapping configuration

Following are the changes needed:

h2. Change PropertyMappingConfiguration 
!!! BREAKING PropertyMappingConfiguration::shouldMap() should use WHITELIST instead of BLACKLIST

* if a property is on blacklist, return FALSE directly
* if a property is on whitelist, return TRUE
* if all property are on whitelist, return TRUE
* by default, return FALSE

* $cfg->forProperty('image.author')->allowProperties('foo', 'bar')
* $cfg->forProperty('image.author')->allowAllProperties()
* $cfg->forProperty('image.author')->allowAllPropertiesExcept('foo')

* Usually, you only use one of the following, not all of them!

h2. PropertyMappingConfigurationBuilder should not set any type converter options by default

* !!! BREAKING PropertyMappingConfigurationBuilder should NOT set any type converter options by default, especially not CONFIGURATION_CREATION_ALLOWED or CONFIGURATION_MODIFICATION_ALLOWED

h2. generation of HMAC in Fluid Form Fields

 !!! Fluid Form Fields should generate Property Mapping configuration of allowed fields appropriately
-> similar to v4 processRequest

h2. Adjust ActionController

Action Controller: PropertyMapping config should be set from HMAC.


5) DOCUMENTATION:
wenn man nur bestimmte Objekte editieren soll (bspw. alle Blogs mit geradem erstellungsdatum) --> POLICY!!
--> values protected? (e.g. hidden fields / identity values that can't be changed)

"
36800,TYPO3.Flow,Task,"",Accepted,Should have,Streamline Resource object API,Robert Lemke,Robert Lemke,2013-08-02 11:03,Resource,"",2012-01-26,"","",50,2012-05-03 04:49,"","",603200,0.00,"","The API and mechanism for resources is, for some time now, not as intended. What we basically need to achieve is:

* make sure that identical resources (same sha1) share the same file
* allow to create multiple combinations of sha1 / file name so that the original file name is preserved even if identical resources are uploaded
* still make sure that Resource objects with the same combination of sha1 / file name are unique (@identity for $hash and $filename)
* make sure that if a Resource object is deleted, the related file is deleted as well
* make sure that a Resource object is removed if it is not used anymore (no relation from another entity exists anymore)

For this to achieve we need to do (among other things) the following:

* remove the ResourcePointer class and move the getHash() and __toString() method to Resource
* implement some onDelete event handler for Resource objects which cleans up non-used files
* fix orphaned entity handling for aggregate members

The last point is especially important as it is an important feature for the overall persistence."
36804,TYPO3.Flow,Bug,"",New,Should have,Orphaned entities within aggregates are not removed,Robert Lemke,"",2012-05-03 05:54,Persistence,"",2012-05-03,"","",0,2012-05-03 05:04,"","",603400,"",Git master,"Consider this example:

An entity Image has a many-to-one or one-to-one relation to an entity Resource.
Image is an aggregate root and is stored in an ImageRepository.
Resource does not have its own repository and thus is a practically member of the Image aggregate.

Now, if an Image object is removed, its Resource object remains in the database and can't accessed through any object or repository anymore."
36807,TYPO3.Flow,Task,"",Resolved,Should have,Add hints about frozen packages to cache:flush command,Bastian Waidelich,Bastian Waidelich,2012-05-03 08:40,Command,1.1 beta 1,2012-05-03,"","",100,2012-05-03 06:13,"","",603550,"","","Precompiled Reflection data is not recreated on flushing the cache (without --force flag). This can be confusing to people updating frozen packages.
The regular flush command should output a list of frozen packages like:
<pre>
Note:
Precompiled reflection data of frozen packages has not been removed.
Use typo3.flow3:package:refreeze or specify the --force option of
the cache:flush command in order to recreate it.
Following packages are frozen:
* TYPO3.FLOW3
* TYPO3.Fluid
</pre>"
36813,TYPO3.Flow,Feature,"",Resolved,Should have,Provide function for outputting word wrapped text to the command line,Robert Lemke,Robert Lemke,2012-05-03 20:38,Cli,1.1 beta 1,2012-05-03,"","",100,2012-05-03 08:55,"","",603850,"","",Similar to $this->output() and $this->outputLine() the CommandController could provide a method $this->outputFormatted() which allows for formatted output of the given text.
36830,TYPO3.Flow,Feature,"",Resolved,Should have,Implement Browser API in Functional Tests,Sebastian Kurfuerst,"",2012-05-15 08:38,"","",2012-05-04,"","",100,2012-05-04 01:29,"","",604700,"","",... based on DomCrawler
36840,TYPO3.Flow,Task,"",Accepted,Should have,Improve exception for wrong locales,Robert Lemke,Karsten Dambekalns,2012-06-25 12:47,I18n,"",2012-05-04,"","",0,2012-05-04 06:47,"","",605200,"","","I created a locale with the identifier ""en_EN"". I took me a while to realize that this is an invalid locale of course, as there is no country identified by ""EN"". The error message you'd currently see on trying this is the following:

#1328879703: The path ""resource://TYPO3.FLOW3/Private/I18n/CLDR/Sources/main/en_EN.xml"" does not point to an existing and accessible XML file.

We could improve this by throwing a more specific exception telling what is actually wrong - ""EN is not a valid region code according to ISO xyz / the CLDR""."
36859,TYPO3.Flow,Bug,"",Closed,Should have,URLs Break if the Route return a URI with Query string,Marc Neuhaus,Bastian Waidelich,2012-05-21 06:36,MVC - Routing,"",2012-05-05,"","",0,2012-05-05 05:48,"","",606150,"",Git master,"In cases where the Route returns an URI with a Query String attached the URI Builder adds a second ? to append the query string. In my case this happens through the BackendModuleArgumentsRoutePartHandler which already adds a query string.

I've attached a patch to check the matchingUri for a ? to append the query with a ? or & depending on that check."
36913,TYPO3.Flow,Bug,"",Resolved,Must have,HTTP PUT data not regonized as arguments ,Pankaj Lele,Robert Lemke,2012-05-26 09:35,Http,1.1 beta 2,2012-05-07,"","",100,2012-05-07 08:08,"","",608800,"",FLOW3 1.1.0 beta 1,"Data submitted with HTTP PUT method is not recognized in the TYPO3\FLOW3\Http\Request

This is required while developing a REST service with FLOW3. So e.g. with curl call like: 

curl -X PUT -d ""name=New name"" http://myservice.com/users/12345

the MyController->updateAction($user, $name) would receive $name as an argument."
36943,TYPO3.Flow,Task,"",Resolved,Should have,Catch exceptions in HTTP Browser,Robert Lemke,Robert Lemke,2012-05-08 08:38,Http,1.1 beta 1,2012-05-08,"","",100,2012-05-08 04:39,"","",610300,"","","Currently any exceptions caused by controllers etc. are not caught by the virtual browser. In order to make the behavior of the Browser class more realistic, these should be converted into a string and a 500 status should be set for the response.

This affects the InternalRequestEngine only."
36949,TYPO3.Flow,Feature,"",Resolved,Should have,Improve Property Mapper Exception message,Adrian Föder,Adrian Föder,2012-05-08 20:39,Property,1.1,2012-05-08,"","",100,2012-05-08 07:51,"","",610600,"","","The current exception message could be improved in order to make bug tracking more simple. The message *should* read
<pre>
Exception while property mapping for target type ""TYPO3\Media\Domain\Model\Image"", at property path ""submittedFile"": The target type was no string, but of type ""NULL""
</pre>

while it now reads only 
<pre>
Exception while property mapping at property path ""submittedFile"": The target type was no string, but of type ""NULL""
</pre>

The hint about the target type will make it simpler to know where to search."
36954,TYPO3.Flow,Bug,"",Resolved,Should have,Only use ansi colors for var_dump() if supported,Bastian Waidelich,Bastian Waidelich,2012-05-08 20:39,Cli,1.1,2012-05-08,"","",100,2012-05-08 10:34,"","",610850,"",Git master,"@\TYPO3\FLOW3\var_dump()@ currently uses ANSI codes to colorize variables on the CLI.
On Windows that's not supported by default and instead all special characters are outputted.
I don't know how to detect ansi support from PHP, so I would suggest to disable this on Windows for now.
The change is trivial:
<pre>
<code class=""php"">
$ansiColors = $plaintext;
</code>
</pre>

<pre>
<code class=""php"">
$ansiColors = $plaintext && DIRECTORY_SEPARATOR === '/';
</code>
</pre>"
36955,TYPO3.Flow,Feature,"",New,Should have,Add type filter to var_dump(),Bastian Waidelich,"",2012-05-08 10:39,Error,"",2012-05-08,"","",0,2012-05-08 10:39,"","",610900,"","","Idea: add filter options to @\TYPO3\FLOW3\var_dump()@ so that the dump can be configured for certain types / properties.
This is especially useful in Fluid:

<pre>
<code class=""html"">
{user -> f:debug(excludeProperties: 'addresses')}
{someObject -> f:debug(excludeTypes: 'Some\ClassName')}
</code>
</pre>"
36965,TYPO3.Flow,Bug,"",Resolved,Must have,Packages are ordered reverse in configuration manager making overwriting settings inconsistant,Aske Ertmann,Aske Ertmann,2012-05-10 20:39,Configuration,1.1 beta 1,2012-05-08,"","",100,2012-05-08 17:32,"","",611400,"",Git master,"The package order is determined by PackageStates.php, but in the configuration manager this order is reverse in order to make TYPO3.FLOW3 the first package to have it's configuration loaded."
36973,TYPO3.Flow,Bug,"",Closed,Could have,TYPO3\FLOW3\Exception thrown in file Bootstrap.php,devin ,Karsten Dambekalns,2012-05-25 08:37,- Error Handler Report -,"",2012-05-09,"","",0,2012-05-09 03:18,"","",611800,"",FLOW3 1.0.4,"It seems like the PHP binary ""D:\wamp\bin\php\php5.3.8"" cannot be executed by FLOW3. Set the correct path to the PHP executable in Configuration/Settings.yaml, setting FLOW3.core.phpBinaryPathAndFilename.
3 TYPO3\FLOW3\Core\Bootstrap::initializeForRuntime()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()
"
36988,TYPO3.Flow,Bug,"",Resolved,Must have,PropertyMapper chokes on Objects that are already converted,Marc Neuhaus,Sebastian Kurfuerst,2013-04-02 16:30,Property,1.1 beta 3,2012-12-25,"","",100,2012-05-09 05:05,"","",612550,0.00,Git master,"I've noticed that the PropertyMapper chokes on Objects which are already in the Target form. 
This happened to me with the TYPO3.Form Project in case where the DatePickerViewHelper already transforms the Value to a DateTime and the FormHandler later tries to map it again which fails because he isn't supposed to handle objects.

In this case i would suggest, to check if the source property is of the target property and skip it in that case.

Here's the origination ticket:
http://forge.typo3.org/issues/36722#note-8"
36996,TYPO3.Flow,Bug,"",Closed,Must have,DateTimeConverter,Matthias Witte,"",2014-02-18 03:47,"","",2012-05-09,"","",0,2012-05-09 06:49,"","",612900,"",FLOW3 1.0.4,"TYPO3.FLOW3/Classes/Property/TypeConverter

@return new \TYPO3\FLOW3\Validation\Error('The date ""%s"" was not recognized (for format ""%s"").', 1307719788, array($dateAsString, $dateFormat));@

At this position there should be thrown an Exception and returned NULL instead.

Something like:

@throw new \TYPO3\FLOW3\Property\Exception\TypeConverterException(...
return NULL;
@"
36997,TYPO3.Flow,Bug,"",Resolved,Should have,Use ActionRequest to validate authentication tokens,Bastian Waidelich,Bastian Waidelich,2012-05-14 08:40,Security,1.1 beta 1,2012-05-09,"","",100,2012-05-09 07:55,"","",612950,"",Git master,"Currently the security context passes the *HTTP Request*  to @TokenInterface::updateCredentials()@ in @updateTokens()@.

This has the disadvantage that authentication tokens can only access raw GET / POST parameters from the HTTP request. Arguments that are only available through routing are not accessible.

Take for example a token based authentication mechanism:

Routes.yaml:
<pre>
<code class=""yaml"">
-
  uriPattern: 'aproveToken/{__authentication.Some.Package.Authentication.AuthenticationKey.code}'
  defaults:
    '@package':    'Some.Package'
    '@controller': 'Some'
    '@action':     'aproveToken'
</code>
</pre>

in the authentication token there is no way to access the ""__authentication.Some.Package.Authentication.AuthenticationKey.code"" argument."
37001,TYPO3.Flow,Bug,"",Resolved,Must have,Catch Exception from inactivityTimeout,Carsten Bleicker,Karsten Dambekalns,2012-09-10 06:35,Security,"",2012-05-09,"","",100,2012-05-09 08:41,"","",613150,"",FLOW3 1.1.0 beta 2,"i played around a little bit with the session lifetime.
setting inactivityTimeout: 30
on inactivity for about 30 seconds flow3 throws the exception:
""#1258721059: The security context contained no tokens which could be authenticated""
Should this be catched and force a redirect to the default configured auth provider?"
37018,TYPO3.Flow,Bug,"",Resolved,Must have,CsrfProtectionAspect should not use removed environment methods.,Christian Müller,Christian Müller,2012-05-10 08:38,"","",2012-05-09,"","",100,2012-05-09 12:17,"","",614000,"",Git master,""
37053,TYPO3.Flow,Bug,"",Resolved,Must have,Code migration doesn't work on Windows,Bastian Waidelich,Karsten Dambekalns,2012-05-10 15:12,Cli,1.1 beta 1,2012-05-10,"","",100,2012-05-10 06:34,"","",615750,"",Git master,"I came accross following issues:
* in @Git::isGitAvailable()@ the system call pipes the output to */dev/null*. This is not supported on Windows
* in @Manager::registerMigrationFiles()@ the version number taken from the migration filename is casted to an integer which leads to duplicated versions"
37095,TYPO3.Fluid,Feature,"",New,Should have,It should be possible to set a different template on a Fluid TemplateView inside an action,Christopher Hlubek,Christopher Hlubek,2012-05-11 07:54,"","",2012-05-11,"","",0,2012-05-11 07:54,"","",617750,"","","Right now it's not possible to decide inside an action which view template should be rendered. Especially if the action itself doesn't have a template file the @canRender()@ method will always return @FALSE@. Inside the @initializeAction@ or @initializeView@ method it's too early / too late to set a different template file and path.

The idea is to always return @TRUE@ in the @canRender@ method and return the @NotFoundView@ in the call to @render@ when no template source could be found."
37105,TYPO3.Flow,Bug,"",Resolved,Must have,Using the Everybody Role in an ACL will result in dropped ACLs,Christian Müller,Christian Müller,2012-05-15 20:38,Security,"",2012-05-11,"","",100,2012-05-11 11:13,"","",618250,"",Git master,"PolicyService is reusing data for the same resource, unfortunately it can happen that this data is not the expected and so the resulting acls are not the ones configured."
37186,TYPO3.Flow,Bug,"",Resolved,Should have,flow3:package:refreeze displays verbose hints of cache:flush,Bastian Waidelich,"",2012-05-21 20:41,Cli,1.1,2012-05-15,"","",100,2012-05-15 09:24,"","",622100,"",Git master,With I4db274dcf0376ada53a3a46ed5c6b945543698d1 the @typo3.flow3:cache:flush@ command outputs all frozen packages. This message should be hidden when the cache:flush command is executed from another command (for example @flow3:package:refreeze@).
37188,TYPO3.Flow,Feature,"",Closed,Should have,Global verbosity flags for CLI Commands,Bastian Waidelich,Bastian Waidelich,2012-11-16 08:29,Cli,"",2012-05-15,"","",0,2012-05-15 09:28,"","",622200,"","",It should be possible to define the verbosity level of CLI Commands by specifying *globally supported* flags like @--quiet@ and @--verbose@.
37193,TYPO3.Flow,Bug,"",Resolved,Must have,Nested array annotation options are not rendered in proxy classes,Karsten Dambekalns,Karsten Dambekalns,2012-06-01 05:37,Object,1.0.5,2012-05-15,"","",100,2012-05-15 10:36,"","",622450,"",Git 1.0,"Instead of

@\TYPO3\FLOW3\Annotations\Validate(type=""bar1"", options={ ""foo""= { ""bar"" = ""baz"" } })

FLOW3 outputs

@\TYPO3\FLOW3\Annotations\Validate(type=""bar1"", options={ ""foo""= })"
37212,TYPO3.Flow,Feature,"",Accepted,Must have,Edge Side Includes (ESI),Julian Wachholz,Robert Lemke,2013-05-21 07:28,Http,"",2012-05-16,"","",0,2012-05-16 06:45,"","",623400,"","","Having a framework that supports ESI would give us a vast improvement in speed.
Symfony is currently the only framework that does support edge side includes and I think we can learn a lot from it. :)"
37220,TYPO3.Flow,Bug,"",Resolved,Should have,PackageStates.php uses absolute paths,Karsten Dambekalns,Karsten Dambekalns,2012-05-30 05:39,Package,1.1 beta 2,2012-05-16,"","",100,2012-05-16 08:49,"","",623800,"",Git 1.1,"Using absolute paths in the PackageStates.php causes problems in a chroot environment where the absolute path is different in CLI then in the HTTPD process.

Also relative paths allow to put PackageStates.php under version control to maintain a specific state even when paths differ on development and production systems."
37223,TYPO3.Flow,Bug,"",Resolved,Must have,Packages can be frozen in Production Context,Robert Lemke,Karsten Dambekalns,2012-06-20 14:53,Package,1.1 beta 3,2012-05-16,"","",100,2012-05-16 09:53,"","",623950,"",FLOW3 1.1.0 beta 1,"Packages should not be freezable in Production - and probably they are behaving correctly already. However, when flushing the caches for example in Production context, a list of frozen packages will be displayed.

Investigate if this is only a display issue in that command or if packages are truly handled as frozen in Production (which would be wrong). cache:flush in Production should flush all caches."
37224,TYPO3.Flow,Bug,"",Resolved,Must have,Wrong hint in 201201261636  code migration,Karsten Dambekalns,Karsten Dambekalns,2012-05-26 09:35,- Migrations -,1.1 beta 2,2012-05-16,"","",100,2012-05-16 10:14,"","",624000,"",FLOW3 1.1.0 beta 1,"Wrong:

\TYPO3\FLOW3\MVC\RequestInterface has been removed, use \TYPO3\FLOW3\Http\Request instead - e.g. if you implemented your own token.

Correct:

\TYPO3\FLOW3\MVC\RequestInterface has been removed, use \TYPO3\FLOW3\Mvc\ActionRequest instead - e.g. if you implemented your own token."
37227,TYPO3.Flow,Bug,"",On Hold,Must have,securityContext->getParty is not available in widget context,Adrian Föder,"",2012-06-25 16:14,Session,"",2012-05-16,"","",0,2012-05-16 10:37,"","",624150,"",(any),"consider the following scenario:

<pre><code class=""php"">
class SampleViewHelper extends \TYPO3\Fluid\Core\Widget\AbstractWidgetViewHelper {

	/**
	 * @var bool
	 */
	protected $ajaxWidget = TRUE;

	/**
	 * @FLOW3\Inject
	 * @var ...\ViewHelpers\Widget\Controller\SampleController
	 */
	protected $controller;

	/**
	 * @return array
	 */
	protected function getWidgetConfiguration() {
		$something = new \AnEntity();

...

</code></pre>

and

<pre><code class=""php"">
class AnEntity {

	/**
	 * @FLOW3\Inject
	 * @var \TYPO3\FLOW3\Security\Context
	 */
	protected $securityContext;

	/**
	 */
	public function initializeObject() {
		$this->securityContext->getParty();


...
</code></pre>

the Session implementation crashes; concretely the following error occurs:

<pre>
#1: Warning: session_write_close(): Failed to write session data (files). Please verify that the current setting of session.save_path is correct (/var/www/Data/Temporary/Development/Sessions) in /var/www/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Session_PhpSession_Original.php line 332 
</pre>"
37231,TYPO3.Flow,Bug,"",Resolved,Must have,"Code migration lacks hint on ""not empty"" behavior of validators",Karsten Dambekalns,Karsten Dambekalns,2012-05-26 09:35,- Migrations -,1.1 beta 2,2012-05-16,"","",100,2012-05-16 11:06,"","",624350,"",FLOW3 1.1.0 beta 1,""
37243,TYPO3.Flow,Feature,"",Closed,Should have,Authentication after long time of inactivity,Carsten Bleicker,Karsten Dambekalns,2012-06-28 05:09,Security,"",2012-05-17,"","",0,2012-05-17 02:37,"","",624950,"","","hi folks,
being logged in, going to bed, awake in the morning and did a reload
throws an exception instead of redirecting to the login page.

#1258721059: The security context contained no tokens which could be authenticated.
TYPO3\FLOW3\Security\Exception\AuthenticationRequiredException thrown in file
/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Security_Authentication_AuthenticationProviderManager_Original.php in line 142.
Reference code: 2012051708313083b115

better catch this and redirect to login?

"
37257,TYPO3.Flow,Bug,"",Resolved,Could have,NULL on IntegerConverter,Carsten Bleicker,Christian Müller,2012-12-10 12:44,Property,2.0 beta 1,2012-05-17,"","",100,2012-05-17 10:46,"","",625650,"",(any),"hi folks,
f.e. i have a model wich holds a property ""maxOrders"".
NULL represents ""unlimited""
0 represents 0
1 represents 1
...

so i have an input field where the user should be able to empty it with the
result that db field contains NULL (unlimited)

so in my humble oppinion the integer converter should convert nothing to null.
maybe in combination with a check of @ORM\Column(nullable=true)?
maybe the combination with @ORM\Column(nullable=true) could be also in any other converter?

kind regards
carsten


"
37259,TYPO3.Flow,Task,Feature #33371: HTTP 1.1 Support,Resolved,Must have,Improve spec coverage of Request / Response classes,Robert Lemke,Robert Lemke,2012-06-20 15:16,Http,1.1 RC1,2012-05-17,"","",100,2012-05-17 11:33,"","",625750,"","","The HTTP Request / Response classes are still lacking a lot of methods which make them a true reflection of the related standard (RFC 2616). In particular, charset handling, cache header support, content type etc."
37276,TYPO3.Flow,Feature,"",Closed,Should have,Customizable ValueObject hash,Adrian Föder,"",2012-05-21 06:00,Persistence,2.0 beta 1,2012-05-18,"","",100,2012-05-18 09:16,"","",626600,0.00,"","If I understand it correctly, the hash for a Value Object is calculated/done in @Persistence\Aspect\PersistenceMagicAspect::generateValueHash()@.
It seems (I'm just ""thinking loudly""), that that hash is built from
<pre>
* the object's Persistence Identifier, if one
* the concatenated representation of each constructor method argument, processed as following:
  * a serialize(), if an array
  * its actual value, if not an object
  * its Persistence Identifier, if one
  * its timestamp, if DateTime
</pre>

In my use case, a Doctrine Collection should also be part of the hash. I could imagine that this is not a seldom case in general, so I have two improvement suggestions:

* directly support the Doctrine collection case with a sub loop, for example, or the Collection->toArray() method
* or call a magic function, for example

<pre><code class=""php"">
/**
 * @FLOW3\ValueObject
 */
class FooBar {
	public function __construct() {
			// this is the constructor of this Value Object
		$this->that = 'some';
	}

	/**
	 * Generates the value object hash. Arguments are as in constructor.
	 * @param mixed $argument1 
	 * @param mixed $argument2 
	 * @return string The value object hash
	 */
	public static function generateValueObjectHash() {
		foreach (func_get_args()) ... whatever...

	}
</code></pre>

This @public static@ method could be, if present, called by the Aspect; else the usual process is applied to retrieve the hash.

What do you think? Should a customizable VO hash be possible altogether?"
37278,TYPO3.Flow,Bug,"",Closed,Should have,In reflection service isPropertyGettable() does not acknowledge getter methods which require one or more arguments,Jan Kraus,Karsten Dambekalns,2012-07-10 02:32,Reflection,"",2012-05-18,"","",0,2012-05-18 09:41,"","",626700,"",FLOW3 1.1.0 beta 1,"In reflection service isPropertyGettable() does not acknowledge getter methods which require one or more arguments

in model I have such method: public function getKeyValueConfig($key) { ...


and because of this reflection I have an error:
Warning: Missing argument 1 for XXX\Domain\Model\Channel_Original::getKeyValueConfig(), called in /TYPO3.FLOW3/Classes/Reflection/ObjectAccess.php on line 109 and defined in /Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/XXX_Domain_Model_Channel_Original.php line 59"
37279,TYPO3.Flow,Feature,"",New,Should have,Request PropertyMapping,Carsten Bleicker,"",2012-05-18 10:06,Property,"",2012-05-18,"","",0,2012-05-18 10:06,"","",626750,"","","atm i have to allow properties this way, right?
$this->arguments['section']->getPropertyMappingConfiguration()->allowCreationForSubProperty('ticketLimit');
$this->arguments['section']->getPropertyMappingConfiguration()->allowModificationForSubProperty('ticketLimit');
$this->arguments['section']->getPropertyMappingConfiguration()->getConfigurationFor('ticketLimit')->allowProperties('dailyLimit');



wouldnt it be easier to do something like this?
$this->arguments->allowProperties(
   'this.that'
   'this.alsothat'
   'another.that.this'
)

$this->arguments->allowCreationOfProperties(
   'this.that'
   'this.alsothat'
   'another.that.this'
)

$this->arguments->allowModificationOfProperties(
   'this.that'
   'this.alsothat'
   'another.that.this'
)
"
37286,TYPO3.Flow,Feature,Feature #37276: Customizable ValueObject hash,Closed,Should have,Include object properties in Value Object hash creation,Adrian Föder,Adrian Föder,2012-05-21 06:00,Persistence,1.1 beta 2,2012-05-18,"","",0,2012-05-18 11:35,"","",627100,"","","currently, the Value Object hash creation doesn't take arbitrary object properties into account (only DateTime properties at the moment).
PHP provides a @spl_object_hash()@ method, we should check if this is possible to add.
I'll provide a Test."
37292,TYPO3.Flow,Bug,"",Under Review,Should have,PropertyMappingConfiguration::mapUnknownProperties is not passed down to Subconfiguration,Marc Neuhaus,Sebastian Kurfuerst,2013-11-26 14:21,Property,"",2012-05-18,"","",0,2012-05-18 17:53,"","",627400,"",Git 1.1,"if i set allowAllProperties on my PropertyMappingConfiguration it still can fail because the setting doesn't get passed down in line 152 from getConfigurationFor.

I've attached a patch to pass down this setting."
37294,TYPO3.Flow,Feature,"",Closed,Could have,Property converters should allow NULL results,Carsten Bleicker,Carsten Bleicker,2014-02-19 04:11,Property,"",2012-05-19,"","",0,2012-05-19 05:51,"","",627500,"","","Can someone explain me why the DateTimeConverter returns a Validation Error and does not throw an exception? (Line #122)
All other Converters throwing exceptions only. shouldnt the validation only be a part of @FLOW3\Validate notations?"
37302,TYPO3.Flow,Bug,"",Needs Feedback,Should have,NumberValidator,Carsten Bleicker,Carsten Bleicker,2013-07-03 02:36,Validation,"",2012-05-19,"","",0,2012-05-19 12:50,"","",627900,"",FLOW3 1.1.0 beta 1,"Trying to use the NumberValidator and playing around with the option formatLength.

but an exception is thrown:
#1280218995: Number format was not found. Please check whether CLDR repository is valid

am i doing something wrong or is the cldr a little bit incomplete?

what i am trying to do is just validate an property value against:
@FLOW3\Validate(type=""Number"", options={ ""formatType""=""currency"", ""formatLength""=""short""})

defautl format lengts seems to be working but it allows me to set to many decimals.
f.e. it allows xxx,xxx but i want to allow only xxx,xx

the second thing is, that the floatConverter should also use the numbers parser
to convert user inputs on a german page with xxx,xx to xxx.xx ?

Kind regards
carsten

"
37316,TYPO3.Flow,Bug,"",New,Should have,Use findBestMatchingLocale instead of getDefaultLocale?,Carsten Bleicker,"",2012-05-20 03:35,Validation,"",2012-05-20,"","",0,2012-05-20 03:35,"","",628600,"",FLOW3 1.1.0 beta 1,"Shouldnt the getDefaultLocale() replaced by findBestMatchingLocale() to
use also the fallbacks etc? (Line 62)

from: $locale = $this->localizationService->getConfiguration()->getDefaultLocale();
to: $locale = $this->localizationService->findBestMatchingLocale();

Kind regards
Carsten"
37341,TYPO3.Flow,Bug,"",Resolved,Should have,credentialsSource in Account should be nullable,Karsten Dambekalns,Karsten Dambekalns,2012-05-26 09:35,Security,1.1 beta 2,2012-05-20,"","",100,2012-05-20 15:08,"","",629850,"",FLOW3 1.1.0 beta 1,"Not all authentication mechanisms need a ""credentials source"" (e.g. the typo3.org SSO provider), so the column for the property should be nullable"
37343,TYPO3.Flow,Bug,"",Resolved,Should have,Error in AOP Docs,Marc Neuhaus,Adrian Föder,2012-05-21 20:41,- Documentation -,1.1 beta 2,2012-05-20,"","",100,2012-05-20 15:44,"","",629950,"",Git master,"In the AOP docs the ""methodAnnotatededWith"" part is everywhere named ""methodAnnotat*eded*With"" with a double ""ed"" which is of course wrong :)"
37352,TYPO3.Flow,Bug,"",Under Review,Must have,generateValueHash() should use getIdentifierByObject(),Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Persistence,"",2012-05-21,"","",0,2012-05-21 05:59,"","",630400,"",Git 1.0,"The @generateValueHash()@ method only tries to use @FLOW3_Persistence_Identifier@ directly, but should use @getIdentifierByObject()@ to support custom identifier properties."
37354,TYPO3.Flow,Bug,"",Accepted,Should have,Do not apply generateValueHash() and generateUuid() if custom identifier is used,Karsten Dambekalns,Karsten Dambekalns,2012-07-10 02:30,Persistence,"",2012-05-21,"","",0,2012-05-21 06:04,"","",630500,"",Git 1.0,""
37357,TYPO3.Flow,Bug,Task #55953: Repair and streamline ValueObject support,Resolved,Should have,more suitable ValueObject hash creation for DateTime cases,Adrian Föder,Adrian Föder,2015-02-15 18:30,Persistence,"",2012-05-21,"","",100,2012-05-21 08:28,"","",630650,"",(any),"currently, DateTime objects are only represented by their (""unix-"") Timestamp, which may result in unpredictable behavior when server time (zone) or Daylight Saving Time changes.
An RFC850 formatted date seems to be more appropriate, it says e.g. @Monday, 15-Aug-05 15:52:01 UTC@ or @Monday, 21-May-12 14:19:41 CEST@ (note the *s* in CEST that indicates summer time).

Otherwise, both, for example, British Summer Time (+01:00) and Central European Time (non-summer) would be +01:00, but representing very different actual Dates. "
37358,TYPO3.Flow,Task,"",Resolved,Should have,"Make ""all"" parameter optional in package:refreeze",Bastian Waidelich,Karsten Dambekalns,2012-05-30 15:41,Cli,1.1 beta 2,2012-05-21,"","",100,2012-05-21 08:45,"","",630700,"","","Currently, if you want to refreeze all frozen packages you need to call
<pre>
./flow3 package:refreeze all
</pre>
It would be convenient if you could omit the packageKey argument altoghether."
37360,TYPO3.Flow,Feature,"",Resolved,Should have,Catch PDO exceptions to avoid outputting database information in exception backtrace,Aske Ertmann,Aske Ertmann,2012-07-18 11:14,Persistence,2.0 beta 1,2012-05-21,"","",100,2012-05-21 08:55,"","",630800,"","","If the PDO connection throws an exception, it's not catched by FLOW3, which leads to a debug backtrace showing the calls to the PDO calls revealing the database information. Even though this only happens in Production context, I still believe that it should not be shown there.

I've created a patch and provided before and after screenshots. I have also testet that normal sql exceptions are not catching by this, e.g. a missing table."
37361,TYPO3.Flow,Task,"",Resolved,Should have,Avoid usage of deprecated Doctrine method (\Doctrine\ORM\QueryBuilder->getRootAlias),Aske Ertmann,Karsten Dambekalns,2012-07-10 02:23,Persistence,1.1,2012-05-21,"","",100,2012-05-21 09:01,"","",630850,"","",\Doctrine\ORM\QueryBuilder:234:* @deprecated Please use $qb->getRootAliases() instead.
37363,TYPO3.Flow,Bug,"",Resolved,Must have,PersistenceManager->validateObject() ==> to many calls/loops/recursions somewhere in a subcall,Sebastian Wojtowicz,Karsten Dambekalns,2012-06-20 14:53,Validation,1.1 beta 3,2012-05-21,"","",100,2012-05-21 09:06,"","",630950,"",Git master,"h2. In a nutshell

In my project I add objects with lots of sub sub objects. They are added in bigger numbers, like often 50, sometimes 100 even up to 1000 elements at once (it's vocabularies). 
*The problem* is, right now it *takes already 25 seconds* on my local machine *to add only 10 elements* (with all their sub sub sub... objects of course, but still 25 seconds is way to much).
Currently I need to add 5000 vocabularies. This would take about 33 hours (if it doesn't fail at some point because of missing memory).

h2. Testcase

Having no idea what causes it I created a small test-case at https://github.com/Allisone/Wojtowicz.AddALot 

There you have a model hierarchy like this:
Elements A,B,C and D, so that As have Bs, Bs have Cs and Cs have Ds.

Via the commandline you can then call one of the following commands.
1. Create x Bs, each having a C, each C having a D
2. Create y As, each having x/y Bs, each having a C, each C having a D

I can see in the xdebug profiler output...
For 1. and x=20: 6480 calls are being made to @TYPO3\FLOW3\Error\Result->mergeProperty()@
For 2. and x=20 and y=4: 79656 calls are being made to @TYPO3\FLOW3\Error\Result->mergeProperty()@
(we get 20 Bs, each 5 Bs being added to an A)

Doing a small adjustment so that each B has 2 Cs (instead of one), I can see already 231576 @mergeProperty()@ calls in the 2. command call.

So... I can't say exactly where the bug is, just give you the upper description, hoping that someone finds that bug, either between @\TYPO3\FLOW3\Persistence\Doctrine\PersistenceManager\validateObject()@ and @TYPO3\FLOW3\Error\Result->mergeProperty()@ or at some place where f.e. to many validators where added (or similar). But I think it should be related to validation...

h2. More

For more details look at my provided testcase (+README):
https://github.com/Allisone/Wojtowicz.AddALot "
37372,TYPO3.Flow,Feature,"",Accepted,Should have,Inheritance in ORM should be configured automatically,Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Persistence,"",2012-05-21,"","",0,2012-05-21 10:33,"","",631400,"","","When classes are extended, inheritance should be configured automatically for Doctrine, using sane defaults. This avoids the need to foresee future needs when coding - especially for packages that are of general purpose and where no one can know in the beginning whether they will be extended or not."
37373,TYPO3.Flow,Feature,"",Under Review,Should have,"Make annotation overrides / ""injection"" via Objects.yaml possible",Karsten Dambekalns,Marc Neuhaus,2013-05-21 07:28,Configuration,"",2012-05-21,"","",0,2012-05-21 10:36,"","",631450,"","",@Objects.yaml@ should allow for adding and overriding annotations in classes. This would allow to modify ORM configuration or anything else driven through annotations without touching the code - especially useful for 3rd party code.
37376,TYPO3.Flow,Feature,"",Resolved,Should have,"Application-wide time stamp representing ""now""",Robert Lemke,Robert Lemke,2012-05-22 08:41,Utility,1.1 beta 2,2012-05-21,"","",100,2012-05-21 11:27,"","",631600,"","","We should provide an application-wide reference for a time reflecting ""now"" because:

* code using time() and comparing values with other parts of the application might, in an edge case, end up with different times, although they both mean ""now""
* testing code which uses time() or new \DateTime() is cumbersome or sometimes not possible"
37377,TYPO3.Flow,Bug,"",Resolved,Must have,Internal Request Engine needs to clear security context,Aske Ertmann,"",2012-06-18 09:38,Http,2.0 beta 1,2012-05-21,"","",100,2012-05-21 11:33,"","",631650,"",Git master,"In order to get the security tokens matching the new request created in the internal request engine, the security context should be cleared using the ""clearContext"" method. This means that the tokens will be matched with the configuration from the routing based on the new request and not the parent request.

This breaks ""TYPO3\TYPO3\Tests\Functional\Controller\Backend\BackendControllerSecurityTest::indexActionIsDeniedForEverybody"", because it throws an uncaught exception in the AuthenticationProviderManager, since no tokens are available when trying to authenticate. The reason why there aren't any tokens is, that the tokens are separated active/inactive when initializing the security context. When clearing the context, the separate method is called again with the correct controller object names allowing request pattern matching."
37385,TYPO3.Flow,Bug,"",Resolved,Should have,Annotation of Validate and IgnoreValidation,Carsten Bleicker,Karsten Dambekalns,2012-06-20 14:53,Validation,1.1 beta 3,2012-05-22,"","",100,2012-05-22 02:25,"","",632050,"",FLOW3 1.1.0 beta 1,"I would expect that notation of Validate and IgnoreValidation is the same.
@FLOW3\Validate(argumentName=""test""...) matches but @FLOW3\IgnoreValidation(argumentName=""test"") doesnt. i have to write
@FLOW3\IgnoreValidation(""$test"") or @FLOW3\IgnoreValidation(argumentName=""$test"").


The FLOW3\Validate does an ltrim of ""$"" wich the IgnoreValidation Annotation doesn't.
"
37387,TYPO3.Fluid,Bug,"",Resolved,Must have,Translate Helper: Arguments replacement is not working for default value,Krzysztof Daniel,Karsten Dambekalns,2012-07-18 06:35,ViewHelpers,1.1 RC2,2012-05-22,"","",100,2012-05-22 04:02,"","",632150,"",FLOW3 1.1.0 beta 1,"I have following tag and there is no translation in xliff file yet for key 'something'

<f:translate id=""something"" arguments=""{0: 'test'}"">You haven't created a {0}, yet</f:translate>

Expected behavior would be that it will output:
You haven't created a test, yet

But argument replacement is not working for default message and output is now:
You haven't created a , yet"
37402,TYPO3.Flow,Feature,"",Resolved,Should have,Make request handling RESTfuller,Bastian Waidelich,Robert Lemke,2013-01-25 10:20,Http,1.1 beta 2,2012-05-22,"","",70,2012-05-22 14:19,"","",632850,"","","Currently quite some work is required in order to create a FLOW3 based REST service. See comments: https://github.com/bwaidelich/REST-Test/commit/08749c0304d0f917781ca29f558dbb83f610fb57

Those features should be part of the core IMO:

h3. format negotiation:

We used to have a convenience method ""Environment:getAcceptedFormats()"":http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=blob;f=Classes/Utility/Environment.php;hb=d1a05a20c8e6f024291752c63aa58b29d6add618#l171 that determined the accepted format from the requests accept headers. The http request should be able to determine those itself.
*Note:* It would be nice if the request had a *list* of accepted formats so the controller could specify a list of supported formats and the first match would be used.

h3. consume input streams (see #36913)

Streams should be converted to arguments for POST & PUT requests.
Based on the content type the stream needs to be parsed (see https://github.com/bwaidelich/REST-Test/blob/master/Classes/RestRequestHandler.php#L119)

h3. improve provided RestController

The RestController should be able to set the Content-Type header of the response according to some pattern (see https://github.com/bwaidelich/REST-Test/blob/master/Classes/Controller/AbstractRestController.php#L40)
Also redirection and error handling need to be adjusted


I don't know what we could achieve for 1.1 still, but maybe we can at least make it easier for 3rd parties to hook in
"
37403,TYPO3.Flow,Bug,"",Resolved,Should have,IdentityRoutePart should set __identity array,Bastian Waidelich,Bastian Waidelich,2012-05-30 14:38,MVC - Routing,1.1 beta 2,2012-05-22,"","",100,2012-05-22 15:45,"","",632900,"",FLOW3 1.0.0,"@IdentityRoutePart::matchValue()@ currently returns the identifier of the @ObjectPathMapping@ record directly.
This makes it difficult to merge arguments with data from the *requestBody* (e.g. for PUT requests).
Instead, the route part should return an array in the format @array('__identity' => '<Identifier>')@"
37405,TYPO3.Flow,Feature,"",Under Review,Should have,When changing a property wich is used in routing the Link-VH should direkt to the new properties value,Johannes Steu,"",2014-11-02 12:25,MVC - Routing,"",2012-05-22,"","",0,2012-05-22 18:13,"","",633000,"","","When updating a models property wich is used in routing the Link.action-ViewHelper directs to the old properties value. 
The new Route with new values does work when typing in manually as the old one does.

The Documentation about Routing says:
_""Mappings from an object to it?s URI representation are stored in the ObjectPathMappingRepository in order to make sure, that existing links work even after a property has changed.""_

When using properties for routing they should be the mainly the value i set them. 
So i think the Link.Action-ViewHelper should direct to the new route automatically instead to the old one. The old route should still be working to make sure, that for example bookmarked links work even after updating the property."
37436,TYPO3.Flow,Feature,"",Resolved,Should have,PropertyMapper should allow settings like allowCreationForSubProperty('products.[n].tierprices.[n]'),Sebastian Wojtowicz,Christopher Hlubek,2012-12-10 07:11,Property,2.0 beta 1,2012-05-23,"","",100,2012-05-23 09:51,"","",634550,"","","In some projects you might want to allow objects with an unknown amount of sub objects like a catalog with products with images, tierprices and colorconfigurations. Imagine a products form with x rows and a <Add row> button at the bottom that dynamically creates new empty rows with an increased index so you can add as many products as you want. In my case it's even quite a lot more complex.

So... something like this is needed

(I)@
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty('products.[n]');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty('products.[n].tierprices');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty('products.[n].tierprices.[n]');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty('products.[n].tierprices.[n].price');
@

instead of 

(II)@
for($i = 0 ; $i < $very_big_number ; $i++){
	for($j = 0 ; $j < $very_big_number ; $j++){
		$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty(""products.$i"");
		$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty(""products.$i.tierprices"");
		$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty(""products.$i.tierprices.$j"");
		$this->arguments['newCatalog']->getPropertyMappingConfiguration()->allowCreationForSubProperty(""products.$i.tierprices.$j.price"");
	}
}
@

and also this should be possible

(III)@
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->getConfigurationFor('products')->allowProperties('[n]');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->getConfigurationFor('products')->getConfigurationFor('[n]')->allowProperties('tierprices');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->getConfigurationFor('products')->getConfigurationFor('[n]')->getConfigurationFor('tierprices')->allowProperties('[n]');
$this->arguments['newCatalog']->getPropertyMappingConfiguration()->getConfigurationFor('products')->getConfigurationFor('[n]')->getConfigurationFor('tierprices')->getConfigurationFor('[n]')->allowProperties('price');
@

of course it would be handy to have the allowProperties auto-created by a special renderTrustedPropertiesField() method.
I could imagine a view helper like this 

(IV)@
<f:trustedUnknownAmount preRenderAmount=""3"" iterator=""n"">
	<f:trustedUnknownAmount preRenderAmount=""2"" iterator=""m"">
		<f:form.textfield property=""products.{n}.tierprices.{m}.name"" />
	</f:trustedUnknownAmount>
</f:trustedUnknownAmount>
@

or at least have a alternative short syntax for (III)"
37438,TYPO3.Flow,Feature,"",Resolved,Should have,Remove setting default timezone on its own,Adrian Föder,Adrian Föder,2012-07-12 09:35,Core,2.0 beta 1,2012-05-23,"","",100,2012-05-23 10:41,"","",634650,"","","Core/Bootstrap contains the following lines:
<pre><code class=""php"">
if (ini_get('date.timezone') === '') {
	date_default_timezone_set('Europe/Copenhagen');
}
</code></pre>

I assume this is mainly to avoid that default_timezone E_WARNING (->Exception), which is fine so far.

As this timezone is a design decision however, I strongly recommend setting this to UTC. This is the only time zone that makes sense in any way in this context."
37445,TYPO3.Flow,Bug,"",Resolved,Should have,Router overrides POST arguments,Bastian Waidelich,Bastian Waidelich,2012-05-30 09:38,MVC - Routing,1.1 beta 2,2012-05-23,"","",100,2012-05-23 12:23,"","",635000,"",Git master,"I'm not sure whether this is was introduced with #36913, but the POST/PUT arguments are currently not merged with the arguments set from the router but instead Router::route() overrides arguments with the same name.

"
37448,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong Excepiton Message in TYPO3\FLOW3\Persistence\Repository,Johannes Steu,Karsten Dambekalns,2012-05-26 09:35,Persistence,1.1 beta 2,2012-05-23,"","",100,2012-05-23 12:47,"","",635150,"",Git master,"Hey,

i just found a wrong exception message. In TYPO3\FLOW3\Persistence\Repository on line 100 in remove()-function the ErrorMsg ist like

""The value given to add() was[..]"" but should be like ""The value given to remove() was[...]"""
37451,TYPO3.Flow,Task,"",Resolved,Should have,Rework usage of Roles in the security framework,Rens Admiraal,Rens Admiraal,2013-08-14 09:59,Security,2.0,2012-05-23,"","",100,2012-05-23 16:04,"","",635300,"","",Roles are now simple string values but there's actually an entity object for it. We need the Roles to be persisted (like for example to to add new roles in the phoenix backend)
37459,TYPO3.Fluid,Bug,"",Closed,Should have,FormViewHelper with GET method and query parameters in action is not usable,Christopher Hlubek,Bastian Waidelich,2012-05-24 06:32,ViewHelpers,"",2012-05-24,"","",0,2012-05-24 06:07,"","",635700,"",Git master,"If the form viewhelper is used with method=""GET"" and the action attribute that is built (given with @actionUri@ or using the URI builder) contains query paramters, they will be lost on form submission (http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4).

The form viewhelper should parse query parameters in the action URI and prepend them as hidden fields in the form to pass them to the request that is submitted."
37460,TYPO3.Fluid,Feature,"",Resolved,Should have,TagBuilder should allow access to attribue collection,Christopher Hlubek,Christopher Hlubek,2012-05-26 09:35,Core,1.1 beta 2,2012-05-24,"","",100,2012-05-24 06:18,"","",635750,"","","The TagBuilder should allow access to the attributes as it also allows access to the tag name, tag content, etc.

This is useful to extend and override existing viewhelpers and access the current data in the constructed tag."
37470,TYPO3.Flow,Feature,"",Resolved,Could have,Refactor FunctionalTestCase to extract authenticateAccount() functionality,Adrian Föder,Adrian Föder,2012-07-04 09:56,- Testing -,2.0 beta 1,2012-05-24,"","",100,2012-05-24 09:36,"","",636250,"","","In order to provide testability of an account authentication, it would make sense to extract that functionality from the @authenticateRoles()@ method into a new @authenticateAccount()@ method."
37473,TYPO3.Flow,Bug,"",New,Must have,Subsequent Exceptions related to Doctrine Entity Manager makes it snap shut,Adrian Föder,"",2012-10-25 04:29,- Testing -,"",2012-05-24,"","",0,2012-05-24 10:22,"","",636400,"",Git master,"If any exception occurs while persisting, and a subsequent test also tries to persist, an ORM Exception occurs telling that the Entity manager were closed.
Reproduction code in Functional Test:
<pre><code class=""php"">
	/**
	 * Fine, this throws, as expected, an Exception due to validation problems
	 * 
	 * @test
	 * @expectedException \TYPO3\FLOW3\Persistence\Exception\ObjectValidationFailedException
	 */
	public function firstFailingTestThatCorrectlyThrowsException() {
		$invalidAccount = new \TYPO3\FLOW3\Security\Account();
		$this->persistenceManager->add($invalidAccount);
		$this->persistenceManager->persistAll();
	}

	/**
	 * This (same code) throws now ""Doctrine\ORM\ORMException: The EntityManager is closed.""
	 * 
	 * @test
	 */
	public function secondFailingTestThatSaysEntityManagerWasClosed() {
		$invalidAccount = new \TYPO3\FLOW3\Security\Account();
		$this->persistenceManager->add($invalidAccount);
		$this->persistenceManager->persistAll();
	}

</code></pre>

Maybe this is some kind related: http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/transactions-and-concurrency.html#exception-handling"
37475,TYPO3.Flow,Feature,"",Resolved,Should have,Add UnitTest's @depends to ignored annotations,Adrian Föder,Adrian Föder,2012-05-26 09:35,Core,"",2012-05-24,"","",100,2012-05-24 10:41,"","",636500,"","",In order to set up dependencies as described in http://www.phpunit.de/manual/3.6/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.examples.StackTest2.php the @@depends@ annotation has to be allowed.
37481,TYPO3.Flow,Bug,"",Resolved,Should have,FLOW3's var_dump() chokes on Doctrine collections,Karsten Dambekalns,Karsten Dambekalns,2012-11-10 11:55,Error,1.1 beta 3,2012-05-25,"","",100,2012-05-25 06:42,"","",636800,"",Git 1.0,The humongous amount of data leads to out of memory errors and hogged down browsers?
37496,TYPO3.Fluid,Feature,"",Closed,Should have,placeholder attribute in textarea-viewhelper,Martin Hummer,"",2013-02-04 05:44,ViewHelpers,"",2012-05-25,"","",0,2012-05-25 16:30,"","",637550,"","","hello,

i just discovered that the placeholder attribute in the textarea viewhelper is missing.
the following code adds the placeholder according to the textfield viewhelper:


<pre>
	/**
	 * Renders the textarea.
	 *
     * @param string $placeholder A string used as a placeholder for the value to enter
     *
	 * @return string
	 * @api
	 */
	public function render($placeholder = NULL) {
		$name = $this->getName();
		$this->registerFieldNameForFormTokenGeneration($name);

		$this->tag->forceClosingTag(TRUE);
		$this->tag->addAttribute('name', $name);
		$this->tag->setContent(htmlspecialchars($this->getValue()));

        if ($placeholder !== NULL) {
            $this->tag->addAttribute('placeholder', $placeholder);
        }

		$this->setErrorClassAttribute();

		return $this->tag->render();
	}
}
</pre>"
37506,TYPO3.Fluid,Feature,"",Closed,Won't have this time,Building up Nested Forms with this ViewHelper,Carsten Bleicker,Bastian Waidelich,2012-06-25 09:17,ViewHelpers,"",2012-05-26,"","",0,2012-05-26 09:58,"","",638050,"","","Just want to know what you think about this viewhelper
f.e. you sould be able to pass one object to <f:form object=""{person} name=""person"">
and inside this form you can display subproperties f.e. personName by passing
and use general forms with single property namespace withoud . because of traversing.
it is possible to use it in unlimited depth by:

<f:form action='update' object=""{person}"" objectName=""person"" >
	<vh:nestedForm name=""personName"" object=""{person.name}"">
		<vh:nestedForm name=""subproperty"" object=""{person.name.supproperty}"">
			<vh:nestedForm name=""anothersubproperty"" object=""{person.name.supproperty.anothersubproperty}"">




Example usage:

#################################################
# Form                                          #
#################################################

<f:form action='update' object=""{person}"" objectName=""person"" >
	
	<vh:nestedForm name=""personName"" object=""{person.name}"">
		
		<fieldset>
			<legend><f:translate id=""person.name"" /></legend>
			<f:render partial=""Model/Fieldset/PersonName/Default"" />
		</fieldset>
		
	</vh:nestedForm>
	
</f:form>




#################################################
# Parial: Model/Fieldset/PersonName/Default     #
# If uses in nestedForm it it reusable anywhere #
#################################################

<label class=""control-label"" for=""firstName""><f:translate id=""personName.firstName"" />:</label>

<!--  No need for person.name.firstName because namespace will be set by nestedForm -->
<f:form.textfield id=""firstName"" property=""firstName"" />














"
37507,TYPO3.Flow,Bug,"",Closed,Should have,Doctrine Collection add existing,Carsten Bleicker,Karsten Dambekalns,2012-06-28 04:45,Persistence,"",2012-05-26,"","",0,2012-05-26 10:59,"","",638100,"",FLOW3 1.1.0 beta 1,"If you build up a nested form to UPDATE the party by a given subproperty input
<f:form.textfield property=""primaryElectronicAddress.identifier"" />
this will results in a doctrine exception:

#23000: SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '54513027-6fce-4e4b-972a-8cd394d3ef87-e8dcf75e-b057-4f65-be8c-767' for key 'PRIMARY'

in my humble opinion either the doctrine array collection should check for allready existing and dont add a new index.
instead of a new it should use the old index. otherwise i have 2 indexes with the same uuid.


"
37509,TYPO3.Flow,Bug,"",Closed,Should have,ElectronicAddressValidator validates identifier but setting errors for property ElectronicAddress,Carsten Bleicker,Karsten Dambekalns,2012-07-10 11:38,Validation,"",2012-05-26,"","",0,2012-05-26 13:28,"","",638200,"",FLOW3 1.1.0 beta 1,"I would expect, that Property Errors for Identifier will be added.
"
37542,TYPO3.Flow,Bug,"",Closed,Should have,Subproperty Validation (f.e. Party::primaryElectronicAddress / ::electronicAddresses) only Validates DoctrinceCollection Models,Carsten Bleicker,Karsten Dambekalns,2012-06-28 04:36,Validation,"",2012-05-28,"","",100,2012-05-28 07:04,"","",639850,"",FLOW3 1.1.0 beta 1,"my action updates a party.
incoming request arguments also contain the identifier of its primaryElectronicAddress.
on first submit of the form the property identifier is validated as email address, correct.

but submitting it again the only addresses in party::electronicAddresses containing errors.
primaryElectronicAddress remains empty.

cant figure out where this happens. do you allow the validation of an object and its subproperty only once?
if so, how should i get the validation errors for property primaryElectronicAddress::identifier?


kind regards
carsten"
37543,TYPO3.Fluid,Bug,"",Closed,Must have,Additional __identity field when using TYPO3.Media,Michel Albers,Bastian Waidelich,2013-08-14 09:38,ViewHelpers,1.1.1,2012-05-28,"",0.50,0,2012-05-28 08:30,"","",639900,"",FLOW3 1.1.0 beta 1,"When using a <f:form.upload /> field for uploading a TYPO3.Media Image, FLUID adds a hidden __identity field for the Image which results in an ""__identity mapping is not allowed"" exception when saving the record. Removing the hidden __identity field by deleting 

<pre>
$content .= $this->renderAdditionalIdentityFields();
</pre> 

from FormViewHelper.php on line 127 solves the particular problem. Some further if / else conditions are needed."
37547,TYPO3.Flow,Bug,"",Resolved,Must have,"Exception ""No class schema found for ""Doctrine\Common\Collections\Collection"". The   class should probably marked as entity or value object!"" should point out which model triggers the error",Michel Albers,Karsten Dambekalns,2012-06-20 14:53,Persistence,1.1 beta 3,2012-05-28,"","",100,2012-05-28 09:43,"","",640100,"",Git 1.1,title says all
37550,TYPO3.Flow,Bug,"",Resolved,Should have,TYPO3.FLOW3.http.baseUri does not work,Pankaj Lele,Karsten Dambekalns,2013-11-18 02:36,Http,"",2012-05-28,"","",100,2012-05-28 12:31,"","",640250,"",FLOW3 1.1.0 beta 1,"Setting TYPO3.FLOW3.http.baseUri to a value e.g. 'http://mywebsite.com/' really have no effect on the <base> tag and the resource links. 

This baseUri setting is really helpful when FLOW3 is running behind a nginx proxy. So that FLOW3 can be forced to render base tag and resource links with the baseUri of nginx site. 

Attached patch works very well. But not sure if it's clean approach. 

"
37554,TYPO3.Flow,Bug,"",Resolved,Should have,Http\Uri::PATTERN_MATCH_HOST has errors,Pankaj Lele,Adrian Föder,2012-06-18 11:38,Http,"",2012-05-28,"","",100,2012-05-28 14:06,"","",640450,"",FLOW3 1.1.0 beta 1,"<pre>
<?php
$ret = preg_match('/^[a-zA-Z0-9_~!&\',;=\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*$/', 'www.example.com', $matches);
?>
</pre>

Produces error ""PHP Warning:  preg_match(): Compilation failed: unmatched parentheses at offset 54"""
37558,TYPO3.Fluid,Task,"",Resolved,Should have,Form.Textfield ViewHelper's placeholder attribute should be (re)moved,Adrian Föder,Karsten Dambekalns,2013-01-25 02:37,ViewHelpers,2.1,2012-05-29,"","",100,2012-05-29 03:44,"","",640650,"","","currently, the @placeholder@ attribute in the Textfield ViewHelper is explicitly enabled: 

<pre>code class=""php"">
	public function render($required = NULL, $type = 'text', $placeholder = NULL) {
		// [...]
		if ($placeholder !== NULL) {
			$this->tag->addAttribute('placeholder', $placeholder);
		}
</code></pre>

For consistency, this part should either be completely removed and settable via @additionalArguments@ or, alternatively, set as @registerTagAttribute()@ in @initializeArguments()@. Of course we need to handle _deprecation_ accordingly.

If you neither agree, than this should at least be reproduced in the textarea ViewHelper."
37561,TYPO3.Flow,Feature,"",Resolved,Should have,Re-implement Accept Header / Content Negotiation support,Robert Lemke,Robert Lemke,2012-05-30 14:38,Http,1.1 beta 2,2012-05-29,"","",100,2012-05-29 05:20,"","",640800,"","","The older implementation is fairly limited to a single specific media type and also uses the old MIME terminology.

An improved implementation should be

* well integrated into the new HTTP support
* consider Quality Values while analyzing the Accept header
* use the new Internet Media Type terminology
* well tested"
37564,TYPO3.Flow,Bug,"",New,Should have,Validation of Parent Object containing properties of type ManyToOne and ManyToMany to same Target,Carsten Bleicker,"",2012-05-29 05:55,Validation,"",2012-05-29,"","",0,2012-05-29 05:55,"","",640950,"",FLOW3 1.1.0 beta 1,"Lets use the person model of the TYPO3.Party package as example.

The model contains a property $primaryElectronicAddress wich is a ManyToOne to ElectronicAddress and also a property $electronicAddresses
wich is a ManyToMany also to ElectronicAddress.

In my case i build up a form to update a person. this form also conains a field for property 'primaryElectronicAddress.identifier' to update also the primaryElectronicAddress.

If i submit this form with an invalid email, the validation of primaryElectronicAddress::identifier matches and
returning errors for the electronicAddress of the ManyToOne AND the ManyToMany cases, anything is fine. If i submit this again, the validation errors
only appears for the ManyToMany ElectronicAddress. I cant figure out why this happens, but it happens.

Anyone can take a look at this?

Kind regards
Carsten"
37569,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Dead symlink in release archives,Karsten Dambekalns,Karsten Dambekalns,2012-05-30 07:08,Build Process,1.1 beta 2,2012-05-29,"","",100,2012-05-29 09:06,"","",641200,"",FLOW3 1.0.2,There is a dead symlink from @Configuration/Production@ to @../../../shared/Configuration/Production@ in the archives. That should rather be a folder.
37571,TYPO3.Flow,Bug,"",New,Must have,Inherited proxies fail when implementing __clone,Kira Backes,"",2012-06-04 06:15,AOP,"",2012-05-29,"","",0,2012-05-29 10:22,"","",641300,"",Git master,"This seems to be exclusive for PHP 5.4
Error thrown (in development mode):
Notice: Undefined property:  [...]Class::$FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices

Change

<pre>
 435                 $proxyClass->addProperty('FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices', 'array()');
 436                 $proxyClass->addProperty('FLOW3_Aop_Proxy_groupedAdviceChains', 'array()');
 437                 $proxyClass->addProperty('FLOW3_Aop_Proxy_methodIsInAdviceMode', 'array()');
</pre>

to

<pre>
		$proxyClass->addProperty('FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices', 'array()', 'protected');
		$proxyClass->addProperty('FLOW3_AOP_Proxy_groupedAdviceChains', 'array()', 'protected');
		$proxyClass->addProperty('FLOW3_AOP_Proxy_methodIsInAdviceMode', 'array()', 'protected');
</pre>

in /TYPO3/FLOW3/AOP/Builder/ProxyClassBuilder.php"
37574,TYPO3.Flow,Bug,"",Resolved,Won't have this time,ReflectionData is not regenerated automatically,Bastian Waidelich,Karsten Dambekalns,2012-08-17 05:35,Reflection,1.1 RC2,2012-07-26,"","",100,2012-05-29 11:09,"","",641450,0.00,FLOW3 1.1.0 beta 2,If the signature of an action changes in a controller or I add a @FLOW3\Inject annotation I would expect the Controllers reflection data to be recreated in Development context. But that's not the case (even if the FLOW3 package and my custom package are not frozen).
37584,TYPO3.Flow,Feature,"",Resolved,Should have,Reliable getClientIpAddress() method,Robert Lemke,Robert Lemke,2012-05-30 14:38,Http,1.1 beta 2,2012-05-29,"","",100,2012-05-29 13:28,"","",641950,"","",We need a reliable way to determine the user's IP address - even if he was passed through several proxies or if some other webserver than Apache was used.
37604,TYPO3.Flow,Feature,"",Resolved,Should have,Make Flow RestController useless by improving MVC stack,Karsten Dambekalns,Bastian Waidelich,2014-12-16 05:50,Http,"",2012-05-30,"","",100,2012-05-30 07:05,"","",642950,"","",The REST controller provided by FLOW3 should be no longer needed if the MVC stack provides the needed functionality.
37607,TYPO3.Flow,Bug,"",Resolved,Must have,PackageStates are overwritten on each request,Christopher Hlubek,Christopher Hlubek,2012-05-30 09:38,Package,"",2012-05-30,"","",100,2012-05-30 08:26,"","",643100,"",Git 1.1,"The PackageStates.php is updated on each request (did test that with empty caches) because the package directory cannot be found using the condition

<pre>
if (!file_exists($configuration['packagePath'])) {
    ...
</pre>

This results in packages not being configurable (deactivating packages is not possible)."
37608,TYPO3.Flow,Task,"",Resolved,Should have,Functional routing tests,Bastian Waidelich,Bastian Waidelich,2012-07-09 12:05,MVC - Routing,1.1,2012-05-30,"","",100,2012-05-30 08:47,"","",643150,"","",Some important routing features urgently need functional tests
37619,TYPO3.Fluid,Bug,"",New,Should have,Fatal Error when using variable in name attribute of Section ViewHelper,Sebastian Michaelsen,"",2012-05-30 17:17,ViewHelpers,"",2012-05-30,"","",0,2012-05-30 17:17,"","",643700,"",Git master,"I'm experiencing this error with TYPO3 4.6, but from looking at the code I'm pretty sure this is reproducible with FLOW3 as well.

<pre>
<f:section name=""mySection_{type}"">
</pre>

This leads to a Fatal Error:
Call to undefined method Tx_Fluid_Core_Parser_SyntaxTree_RootNode::getText() in [...]/typo3/sysext/fluid/Classes/ViewHelpers/SectionViewHelper.php on line 90

I was playing around a bit but I did not find a way to fix this."
37639,TYPO3.Flow,Feature,"",Rejected,Could have,Allow overwriting the resource base uri,Adrian Föder,Karsten Dambekalns,2012-07-11 12:27,Resource,2.0 beta 1,2012-05-31,"","",0,2012-05-31 08:45,"","",644700,"","","currently, the @resourcesBaseUri@ is assumed from the current request (@Resource\Publishing\FileSystemPublishingTarget::detectResourcesBaseUri()@).
This makes every resource URI looking like this:

<pre>
http://www.acme.com/_Resources/Persistent/cff1839e83120f9a4d711dde511ca09fbb562005.js
</pre>

It would be nice to have an additional setting like
<pre><code class=""yaml"">
TYPO3:
  FLOW3:
    resource:
      publishing:
        overruleBaseDomain: 'cdn.acme.net'
</code></pre>

Having set only this, the resource URI will look like the following:
<pre>
http://cdn.acme.net/_Resources/Persistent/cff1839e83120f9a4d711dde511ca09fbb562005.js
</pre>

In addition, @overruleBaseSubdirectory@ is possible:
<pre><code class=""yaml"">
      publishing:
        overruleBaseDomain: 'cdn.acme.net'
        overruleBaseSubdirectory: 'ResourceStorage/WebResources/'
</code></pre>

will result into
<pre>
http://cdn.acme.net/ResourceStorage/WebResources/Persistent/cff1839e83120f9a4d711dde511ca09fbb562005.js
</pre>

Setting
<pre><code class=""yaml"">
        overruleBaseSubdirectory: ''
</code>
http://cdn.acme.net/Persistent/cff1839e83120f9a4d711dde511ca09fbb562005.js
</pre>

(in order to get rid of the '_Resources' subdirectory).

I'd say that @overruleBaseSubdirectory@ is only possible/allowed to set if @overruleBaseDomain@ is set. 

Of course an _alternative_ to @overruleBaseSubdirectory@ is to introduce @baseSubdirectory@ which is per default active and set to @'_Resources'@ (this would change 
<pre><code class=""php"">
	public function initializeObject() {
		if ($this->resourcesPublishingPath === NULL) {
			// $this->resourcesPublishingPath = FLOW3_PATH_WEB . '_Resources/';
			$this->resourcesPublishingPath = FLOW3_PATH_WEB . $this->settings['resource']['publishing']['baseSubdirectory'];
		}
</code></pre>


To also have an option to get rid of the @Static/@ and @Persistent/@ subdirectories, the same configuration rules can go for these, for example:
<pre><code class=""yaml"">
      publishing:
        overruleBaseDomain: 'cdn.acme.net'
        overruleBaseSubdirectory: 'ResourceStorage/WebResources/'
        overruleStaticBaseDomain: 'static.cdn.acme.net'
        overruleStaticBaseSubdirectory: ''
        overrulePersistentBaseDomain: 'persistent.cdn.acme.net'
        overrulePersistentBaseSubdirectory: ''
</code></pre>

An important clarification: all of this *only* affects the *Web* representation, i.e. what is outputted to the frontend in order to get an HTTP URI. The storage/symlink creation location does not change in any way.
Changing these settings are intended to require a setup in the rewrite rules, for example, because the actual storage on the file system isn't affected.
"
37648,TYPO3.Flow,Bug,"",Resolved,Should have,Examples for Objects.yaml to change the class are not valid,Krzysztof Daniel,Karsten Dambekalns,2012-06-26 05:28,- Documentation -,1.1,2012-05-31,"","",100,2012-05-31 12:12,"","",645150,"",FLOW3 1.1.0 beta 3,"You can see in documentation: http://flow3.typo3.org/documentation/guide/partiii/objectmanagement.html

Example: Objects.yaml file for object replacement:

  // Change the name of the class which
  // represents the object MyCompany\MyPackage\Greeter
MyCompany\MyPackage\Greeter:
  className: TYPO3\OtherPackage\GreeterWithCompliments


If you do that you have an exception that className parameter works only with Interfaces (Flow 1.1)"
37664,TYPO3.Flow,Task,"",Resolved,Should have,Improve Property Mapping Documentation,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-20 14:53,- Documentation -,1.1 beta 3,2012-06-01,"","",100,2012-06-01 03:15,"","",645950,"","",""
37665,TYPO3.Flow,Task,"",Resolved,Should have,Make validator resolver public API,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-20 14:53,Validation,1.1 beta 3,2012-06-01,"","",100,2012-06-01 03:23,"","",646000,"","",""
37666,TYPO3.Flow,Task,"",Resolved,Should have,Document Validation API,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-20 14:53,- Documentation -,1.1 beta 3,2012-06-01,"","",100,2012-06-01 03:26,"","",646050,"","",""
37668,TYPO3.Flow,Task,"",Resolved,Should have,Document Session API,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-20 14:53,- Documentation -,1.1 beta 3,2012-06-01,"","",100,2012-06-01 04:19,"","",646150,"","",""
37669,TYPO3.Flow,Task,"",Resolved,Should have,Document Utility Functions,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-20 14:53,- Documentation -,1.1 beta 3,2012-06-01,"","",100,2012-06-01 04:30,"","",646200,"","",""
37671,TYPO3.Fluid,Bug,"",Resolved,Should have,ViewHelper exceptions should not be caught in testing context,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-12 10:37,Core,1.1 RC1,2012-06-01,"","",100,2012-06-01 04:57,"","",646300,"",Git master,""
37672,TYPO3.Flow,Task,"",Resolved,Should have,Update Security Framework documentation,Rens Admiraal,"",2012-06-13 07:38,- Documentation -,"",2012-06-01,"","",100,2012-06-01 04:59,"","",646350,"","",""
37726,TYPO3.Flow,Task,"",Resolved,Should have,Packages should not be frozen by default,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,Package,1.1 beta 3,2012-06-04,"","",100,2012-06-04 06:33,"","",649000,"","","Due to the possible pitfalls with frozen packages, no packages should be frozen by default. This way a developer has to learn about frozen packages before he can be confronted with them (and their pitfalls)."
37727,TYPO3.Flow,Feature,"",Resolved,Could have,Make Package.php optional,Christian Jul Jensen,Christian Jul Jensen,2012-09-25 05:19,Package,2.0 beta 1,2012-06-04,"","",100,2012-06-04 08:17,"","",649050,"","","Currently the required Package.php file is the only thing that differentiates native from non-native psr-0 compatible components (assuming packagestate is configured correctly).

Making the file optional and using it only if present, would simplify the packagemanager so there would be no need to have special handling of non-native components."
37762,TYPO3.Flow,Task,"",Resolved,Should have,Code migration lacks info on getOriginalRequestMappingResults() replacement,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,- Migrations -,1.1 beta 3,2012-06-05,"","",100,2012-06-05 08:12,"","",650750,"","","The code migration should do two more replacements:

* getInternalArgument('__submittedArgumentValidationResults') instead of getOriginalRequestMappingResults()
* getInternalArgument('__submittedArguments') instead of getOriginalRequest()->getArguments()"
37765,TYPO3.Flow,Feature,"",Resolved,Must have,"Display detailed informations within the ""Could not resolve a route"" exception why FLOW3 URI building has failed.",Martin Brüggemann,Bastian Waidelich,2012-11-21 09:14,MVC - Routing,"",2012-06-05,"","",100,2012-06-05 09:06,"","",650900,"","","If you are trying to build a link in a Fluid template that can't be resolved FLOW3 throws a complex exception that doesn't explain in detail why the exception was thrown.

<pre>
Could not resolve a route and its corresponding URI for the given parameters. This may be due to referring to a not existing package / controller / action while building a link or URI. Refer to log and check the backtrace for more details. (More information)
</pre>

I know the details are logged in the System_Development.log file but beginners won't recognize this:

<pre>
WARNING   FLOW3  Router resolve(): Could not resolve a route for building an URI for the given route values.
    @action => index
    @controller => asdasdasd
    @package => example.mymodule
</pre>

FIX: The exception should directly display the problem - I even would like to see where the bad route is defined (path of the fluid template,...). 

I also think that it is a bit to restrictive to throw an exception for such a ""small"" problem. "
37770,TYPO3.Flow,Bug,"",Resolved,Must have,HTTP Request does not contain port information,Adrian Föder,Adrian Föder,2012-06-20 14:53,Http,1.1 beta 3,2012-06-05,"","",100,2012-06-05 11:20,"","",651150,"",Git master,Port information is not regarded when creating a new Request form ::create factory method
37784,TYPO3.Flow,Task,"",Rejected,Could have,Evaluate whether using substr_compare() instead substr()===,Adrian Föder,Karsten Dambekalns,2013-01-22 09:21,"","",2012-06-06,"","",0,2012-06-06 04:37,"","",651850,"","","consider using http://php.net/manual/function.substr-compare.php globally as preference over substr()

As a side note I'd still suggest introducing a Utilities method for comparing the beginning sequence, in order to avoid the pretty complicated and unintuitive handling of the substr_compare return values."
37813,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Upgrade to vfsstream 1.0,Christian Jul Jensen,Karsten Dambekalns,2012-09-24 06:35,- Testing -,2.0 beta 1,2012-06-07,"","",100,2012-06-07 08:03,"","",653250,"","","starting with v1.0.0 vfsstream has changed namespace and Compsoser is recommended install method.

We should upgrade tests to use the stable version.

Relevant for TYPO3.FLOW3 project as well"
37815,TYPO3.Flow,Bug,"",Closed,Must have,Object are not persisted,Soren Malling,Karsten Dambekalns,2012-06-28 04:38,Persistence,1.1,2012-06-07,"","",100,2012-06-07 09:00,"","",653350,"",FLOW3 1.1.0 beta 2,"With the following injected repository

<pre>
	/**
	 * Team repository
	 *
	 * @var \Familiefejden\Domain\Repository\TeamRepository
	 * @FLOW3\Inject
	 */
	protected $teamRepository;
</pre>

and calling the function

<pre>
		$this->teamRepository->add($newTeam);
</pre>

i expect to have my $newTeam (a valid!) object persisted, but nothing is persisted. I get forward to my next action ($this->forward(..)) with no exceptions.

Query log remains empty.

*./flow3 doctrine:update* commands works perfectly and tables are created"
37820,TYPO3.Flow,Feature,"",Resolved,Should have,Check validator options and make them self-documenting,Karsten Dambekalns,Karsten Dambekalns,2012-11-08 15:36,Validation,2.0 beta 1,2012-06-07,"","",100,2012-06-07 11:28,"","",653600,"","","Validators currently can invent any option on the fly, have to check them manually and they cannot be extracted for documentation automatically.

This should be changed."
37831,TYPO3.Flow,Task,"",New,Could have,Evaluate using PHP 5.4's internal web server for Functional Testing,Adrian Föder,"",2012-06-08 03:27,- Testing -,"",2012-06-08,"","",0,2012-06-08 03:27,"","",654150,"","","PHP 5.4 offers the option to start an instance of a simple, tiny web server with for example
<pre>
php -S localhost:8000
</pre>

Just for the record; the doc root can also be defined:

<pre>
php -S localhost:8000 -t /var/www/Web/
</pre>

Maybe an additional Request Handler can be introduced, that kicks in if the request hits against that CLI server: 

<pre><code class=""php"">
php_sapi_name() === 'cli-server'
</code></pre>

I'd like to collect some ideas how that can be used in functional tests, at least for the Http support or something.
The question is how to differenciate between what to serve and what to expect. We could establish, for example, the following

* Expect the tester person to manually start the PHP server at a specified port which is also configured in some YAML. The server's document root has to match the Web document root, like everytime
* If whatever request comes, the above mentioned RequestHandler kicks in, and...
* routes to a file, for example, that is defined by a user-defined header in the appropriate Functional Test. This target file than can return whatever the actual function test expects

This is only some vague ideas in order to get started; I also could imagine that the real FLOW3 behavior is intended to get tested, for example 404 err handling or routing.

"
37846,TYPO3.Flow,Feature,"",New,Should have,Should be able to declare more than one controllerObjectName per requestPatterns,Fernando Arconada,"",2012-06-11 05:10,Security,"",2012-06-08,"","",0,2012-06-08 11:30,"","",654900,"","","For example If you want to enable DefaultProvider in every controller but the ApiController and TokenEndpoint
requestPatterns:<pre>
  -
    controllerObjectName: '(?!My\Package\ApiController)'
  -
    controllerObjectName: '.*'
  -
    controllerObjectName: '(?!My\Package\TokenEndpoint)'</pre>

ApiController it's authenticated with other provider, for example an OAuth2AccessTokenProvider
the OAuth2 TokenEndpoind have to be authenticated following the OAuth2 draft and not the common way defined for the rest of your app"
37854,TYPO3.Flow,Feature,"",Resolved,Must have,Refactor ConfigurationManager to Support Custom Configuration Files,Marc Neuhaus,Marc Neuhaus,2013-04-12 08:39,Configuration,2.1,2012-06-08,"","",100,2012-06-08 17:23,"","",655300,"","","The ConfigurationManager should be capable to handle custom Configuration Files for cases like

ContentObjects.yaml for the TYPO3.TYPO3CR Package
Assets.yaml for the TYPO3.Asset Package"
37879,TYPO3.Flow,Feature,"",Resolved,Should have,Add some Signals for the Debug.Toolbar,Marc Neuhaus,"",2012-08-10 10:35,"","",2012-06-11,"","",100,2012-06-11 03:44,"","",656550,"","","- add an Signal to AbstractAdvice on Advice invokation
- add an Signal to ActionRequest when it's dispatched
- add getSignals to the SignalSlot\Dispatcher to get all configured Signals with it's slots"
37885,TYPO3.Flow,Feature,"",New,Could have,Add CLI to show the object-configuration for a FLOW3 object-name,Martin Ficzel,Martin Ficzel,2013-05-21 07:28,Cli,"",2012-06-11,"","",0,2012-06-11 04:52,"","",656850,"","","I suggest to add a cli command to show all informations the object manager has. The main purpose of this tool is to help developers understand what is really going on and to verify that Autowiring, AOP and SecurityRules are working as intended.

Questions the cli should answer:

* informations about packages

   * which classes are known
   * which aspects are found
* informations about flow3 object-names

   * which scope has this object 
   * autowiring
     
     * is autowiring on
     * which properties are injected
     * which injection methods are called
     * which objects would be injected 
   * which class would be really instanciated from the object manager
   * which AOP-JoinPoints match for this class
   * which Security Rules are applied for this class
"
37895,TYPO3.Flow,Bug,"",Closed,Could have,Packagemanager::ImportPackage doesn't use package specific Package class,Christian Jul Jensen,"",2013-01-21 11:12,"",2.0,2012-06-11,"","",0,2012-06-11 06:36,"","",657350,"",FLOW3 1.1.0 beta 2,"The importPackage initiates the standard Package class and not the Package specific one.

I'm not sure if there could be a reason for this. Also it might not be an issue, since it would be loaded correctly on the next run.

Slightly related: I came across this while looking in to composer support, and that would have to make the package specific Package.php optional anyway."
37903,TYPO3.Flow,Bug,"",Resolved,Must have,Uri respects query and fragment party only when path is present,Adrian Föder,Adrian Föder,2012-06-20 14:53,Http,1.1 beta 3,2012-06-11,"","",100,2012-06-11 09:56,"","",657750,"",Git 1.1,"With the current implementation, the query and fragment parts are only added to Uri's string representation if the path is set.
This means concretely, if
<pre>
http://www.example.org?q=foo
</pre>
is set, the query is omitted because the path is empty / not set.

As of http://tools.ietf.org/html/rfc3986#section-3 and http://tools.ietf.org/html/rfc3986#section-5.3, for example, the query and fragment may be present without the path part."
37966,TYPO3.Flow,Bug,"",Resolved,Should have,Unused configuration option detectPackages in Development settings,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,Configuration,1.1 beta 3,2012-06-12,"","",100,2012-06-12 12:19,"","",660900,"",Git 1.2 (master),.
37993,TYPO3.Flow,Bug,"",Resolved,Should have,"PhpSession settings should be named PhpSession, not PHPSession",Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,Session,1.1 beta 3,2012-06-13,"","",100,2012-06-13 05:34,"","",662250,"",Git 1.0,"The settings for the PhpSession are under the key PHPSession, which breaks consistency."
37995,TYPO3.Flow,Bug,"",Resolved,Must have,Exceptions in CommandController environment are not logged,Adrian Föder,Adrian Föder,2012-06-20 14:53,Cli,1.1 beta 3,2012-06-13,"","",100,2012-06-13 05:40,"","",662350,"",Git 1.2 (master),"If an exception occurs during a CommandController invokation, the exception isn't logged like users are used to (in Logs/Exeptions/{referencecode}.txt).
That's because the CommandRequestHandler trys/catches/handles any occuring exception on its own and not via the exception handler framework.
"
37997,TYPO3.Flow,Bug,"",Resolved,Should have,Recursion detection in instantiateClass is broken,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,Object,1.1 beta 3,2012-06-13,"","",100,2012-06-13 06:01,"","",662450,"",Git 1.0,"The recursion detection in @instantiateClass@ of the @ObjectManager@ is broken - if the speed-optimized path is used, the requested class is not removed from the list of classes being instantiated. "
38002,TYPO3.Flow,Task,"",Resolved,Should have,Refactor ExceptionHandler consructors to common use,Adrian Föder,Adrian Föder,2012-06-20 14:53,Error,1.1 beta 3,2012-06-13,"","",100,2012-06-13 07:20,"","",662700,"","","The implementors extending Error\AbstractExceptionHandler currently all implement their own __construct method which are all equal.
Move these all same constructors to the AbstractExceptionHandler itself."
38004,TYPO3.Flow,Bug,Task #27561: Complete documentation,Accepted,Should have,Missing CheatSheet folder for Getting Started manual,Francois Suter,Karsten Dambekalns,2014-11-07 04:58,- Documentation -,1.1.1,2012-06-13,"","",0,2012-06-13 08:23,"","",662800,"",FLOW3 1.1.0 beta 2,"Part II of the documentation is the Getting Started tutorial. The following file:

Documentation/TheDefinitiveGuide/PartII/ModelAndRepository.rst

mentions (in the first tip block) a CheatSheet folder which is supposed to contain the resulting code. This is missing. It would be very helpful to have it. It's possible to take bits from the Blog package, but it makes the tutorial far less friendly. It generally leads to having errors and exceptions and can lead to quite some frustration while going through trial and error to get the examples running."
38016,TYPO3.Flow,Bug,"",Resolved,Should have,Discourage people to expose anything but the Web folder,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,- Documentation -,1.1 beta 3,2012-06-13,"","",100,2012-06-13 12:22,"","",663400,"",(any),The quickstart only casually mentions the recommended setup of making @Web@ the document root of the web server. This should be changed so that it becomes clear why this is a bad idea.
38037,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Must have,Update FLOW3 manual,Karsten Dambekalns,"",2012-07-13 06:40,- Documentation -,1.1,2012-06-14,"","",100,2012-06-14 08:24,"","",664450,"","",""
38038,TYPO3.Flow,Task,Task #27561: Complete documentation,Accepted,Should have,Proofread FLOW3 manual,Karsten Dambekalns,Ryan J. Peterson,2012-08-17 05:16,- Documentation -,"",2012-06-14,"","",0,2012-06-14 08:25,"","",664500,"","",""
38065,TYPO3.Flow,Feature,"",New,Must have,Implement content security for DQL queries,Karsten Dambekalns,Andreas Förthner,2013-05-21 07:28,Security,"",2012-06-15,"","",0,2012-06-15 04:26,"","",665850,"","",""
38130,TYPO3.Fluid,Feature,"",New,Should have,Checkboxes and multiple select fields should have an assignable default value,Jost Baron,"",2012-06-17 03:54,"","",2012-06-17,"","",0,2012-06-17 03:54,"","",669100,"","","Currently, when a checkbox is left unchecked, an empty string is submitted for its value. But sometimes I'd like to define that value myself, or don't want to get anything at all.

If this is accepted, I'd volunteer to implement it myself."
38147,TYPO3.Fluid,Feature,"",Closed,Should have,Suggested addition to SelectViewHelper - allowing prepend/append of child content to rendered option tag list ,Claus Due,Claus Due,2012-12-10 07:16,ViewHelpers,2.0 beta 1,2011-05-03,"","",0,2012-06-18 05:42,"","",669950,"","","This is a simple but functional and useful addition to the SelectViewHelper. It adds two new boolean attributes: prependContent and appendContent. Setting one of these to TRUE (with preference for prependContent if both are TRUE) makes the ViewHelper either append of prepend the innerHTML.

It also removes the REQUIRED annotation from the $options tag - explanation of why this is good follows.

<pre>
<f:form.select prependContent=""TRUE"">
    <option value=""-1"">I am the first value</option>
</f:form.select>
// outputs...
<select ...>
    <option value=""-1"">I am the first value</option>
    <option...> // all further options
</select>
</pre>

Of course appendContent=TRUE places the first option below the others, not above.

Set to ""should have"" (but maybe should be ""must have"") because the select ViewHelper sorely lacks customization options (such as prefix to labels, special classes for special options etc) and this method allows 100% control over how options are rendered by simply leaving out the ""options"" argument and manually rendering the content of the select tag. Without this patch the only method of doing this is through Javascript which is complete overkill.

The logic should be solid enough to advocate the change of the options argument. It should make -complete- sense to the developer that, if options are left out, they either need to be supplied as an argument as per the Fluid standard - or defined as the content of the tag as per the HTML standard.

Patch performed on 4.5.2 sysext fluid source."
38154,TYPO3.Flow,Bug,"",Resolved,Should have,Validator shorthand notation does not work as documented,Karsten Dambekalns,Sebastian Kurfuerst,2012-06-20 14:53,Validation,1.1 beta 3,2012-06-18,"","",100,2012-06-18 10:31,"","",670300,"",Git 1.1,"According to http://flow3.typo3.org/documentation/guide/partiii/validation.html#creating-validator-instances-the-validatorresolver it is possible to use @Your.Package:Foo@ as validator type. This does not work, only @Your\Package:Foo@ works."
38172,TYPO3.Flow,Bug,"",Resolved,Should have,Routing cache only works for one request,Bastian Waidelich,Bastian Waidelich,2012-06-20 14:53,MVC - Routing,1.1 beta 3,2012-06-19,"","",100,2012-06-19 09:19,"","",671200,"",Git 1.1,"Currently the routing uses a @TransientMemory@ Cache Backend by default. Besides, objects in the routing values are converted to hashes using @spl_object_has()@ - which generates a new hash every request.

Instead a more persistent cache backend should be used and objects should be converted to their identifiers using the @PersistenceManager@.
*Note:* The cache needs to be flushed when ever a @Routes.yaml@ file has been changed an for functional tests"
38177,TYPO3.Flow,Feature,"",Rejected,Could have,Signal/Slot adapter for persistence events,Adrian Föder,Adrian Föder,2013-08-14 09:56,Persistence,"",2012-06-19,"","",0,2012-06-19 11:38,"","",671450,"","","Doctrine offers the so-called ""lifecycle"" events that are emitted on various stages in the life of an entity. I'd suggest to provide an Interface/Implementation pair for FLOW3 that translates these events to FLOW3 signals.
At the first draft, the implementation would of course handle Doctrine events.

My question to start with is, what ""events"" should that cover, initially? As a reminder; Doctrine offers

* preRemove
* postRemove
* prePersist
* postPersist
* preUpdate
* postUpdate
* postLoad
* loadClassMetadata
* preFlush
* onFlush
* postFlush
* onClear

Do we need to cover all these events? We should regard that not all backends offer exact equivalents, so we should agree to some common denominator."
38184,TYPO3.Flow,Bug,"",Resolved,Must have,PersistenceManager chokes on empty uploads,Bastian Waidelich,Bastian Waidelich,2012-06-21 04:38,Property,1.1,2012-06-19,"","",100,2012-06-19 16:33,"","",671800,"",Git 1.2 (master),"Given following setup:
<pre>
Domain/Model/SomeObject.php
<code class=""php"">
/**
 * @FLOW3\Entity
 */
class SomeObject {

	/**
	 * @var \Doctrine\Common\Collections\ArrayCollection<\TYPO3\FLOW3\Resource\Resource>
	 * @ORM\ManyToMany
	 */
	protected $resources;

	// ...

}
</code>
</pre>
<pre>
Template.html
<code class=""xml"">
<f:form method=""post"" action=""create"" object=""{newObject}"" objectName=""newObject"" enctype=""multipart/form-data"">
	<f:form.upload property=""resources.0"" />
	<f:form.upload property=""resources.1"" />
	<f:form.submit value=""Create""/>
</f:form>
</code>
</pre>

If you submit the form, following exception is thrown:
<pre>
#1337934455: Could not add object of type ""MyPackage\Domain\Model\SomeObject"" (in PersistenceManager:264)
Warning: spl_object_hash() expects parameter 1 to be object, null given in Packages/Framework/Doctrine.ORM/Classes/UnitOfWork.php line 1509
</pre>

A similar problem occurs when adding an intermediate object like ""File"" as OneToMany relation which contains a relation to one resource:

<pre>
Domain/Model/SomeObject.php
<code class=""php"">
/**
 * @FLOW3\Entity
 */
class SomeObject {

	/**
	 * @var \Doctrine\Common\Collections\ArrayCollection<\TYPO3\FLOW3\Resource\Resource>
	 * @ORM\OneToMany(mappedBy=""someObject"",cascade={""all""})
	 */
	protected $files;

	// ...

}
</code>
</pre>
<pre>
Template.html
<code class=""xml"">
<f:form method=""post"" action=""create"" object=""{newObject}"" objectName=""newObject"" enctype=""multipart/form-data"">
	<f:form.upload property=""files.0.originalResource"" />
	<f:form.upload property=""files.1.originalResource"" />
	<f:form.submit value=""Create""/>
</f:form>
</code>
</pre>

In that case the exception is thrown while property mapping already:

<pre>
#1297759968: Exception while property mapping for target type ""MyPackage\Domain\Model\SomeObject"", at property path ""files.0"": Catchable Fatal Error: Argument 1 passed to MyPackage\Domain\Model\File::setOriginalResource() must be an instance of TYPO3\FLOW3\Resource\Resource, null given, called in Packages/Framework/TYPO3.FLOW3/Classes/Reflection\ObjectAccess.php on line 182
</pre>


So, I'm not sure if that's a problem of the property mapper or the persistence actually. But this was not present before and is a blocker IMO"
38216,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Static method calls in reflected classes refer to _Original class,Christian Jul Jensen,"",2012-12-13 06:35,"","",2012-06-20,"","",0,2012-06-20 07:05,"","",673400,"",Git master,"Static method calls in reflected classes refers to the original class rather than the proxy. This gives issues in cases where ""self"" is used. fx. in Singleton style create methods."
38221,TYPO3.Flow,Task,"",Resolved,Should have,Add information about the context being cleared using the flow3:cache:flush command,Aske Ertmann,Aske Ertmann,2012-06-21 05:37,Command,1.1 RC1,2012-06-20,"","",100,2012-06-20 08:11,"","",673650,"","","At the moment using the cache clearing commands, it's not really visible what is being cleared. Since the cache clearing only clears for the current cli context when using the command, we should add which context has been cleared to the output."
38222,TYPO3.Flow,Feature,"",New,Could have,Step execution signals with concrete name,Adrian Föder,"",2013-02-21 10:39,Core,"",2012-06-20,"","",0,2012-06-20 08:26,"","",673700,"","","currently, Core\Booting\Sequence::invokeStep() looks
<pre><code class=""php"">
$bootstrap->getSignalSlotDispatcher()->dispatch(__CLASS__, 'beforeInvokeStep', array($step));
$identifier = $step->getIdentifier();
$step($bootstrap);
$bootstrap->getSignalSlotDispatcher()->dispatch(__CLASS__, 'afterInvokeStep', array($step));
</code></pre>
This requires listening to a specific step invocation to look like this (taken from an example):

<pre><code class=""php"">
$dispatcher->connect('TYPO3\FLOW3\Core\Booting\Sequence', 'afterInvokeStep', function(\TYPO3\FLOW3\Core\Booting\Step $step) use ($bootstrap) {
	if ($step->getIdentifier() === 'typo3.flow3:objectmanagement:compiletime:create') {
		$bootstrap->getObjectManager()->get('....');
	}
});
</code></pre>

Due to the fact that, I claim, invoke-step-listening surely always intends to affect a specific step, I suggest to involve additional ""magic"" signals that take their name from the step identifier, resulting in, for example,

<pre><code class=""php"">
$dispatcher->connect('TYPO3\FLOW3\Core\Booting\Sequence', 'afterInvokeStepTypo3Flow3ObjectmanagementCompiletimeCreate', function(\TYPO3\FLOW3\Core\Booting\Step $step) use ($bootstrap) {
	$bootstrap->getObjectManager()->get('....');
});
</code></pre>

"
38369,TYPO3.Fluid,Bug,"",New,Must have,Resource ViewHelpers should not fall back to request package,Bastian Waidelich,"",2012-06-25 09:55,View,"",2012-06-25,"","",0,2012-06-25 09:47,"","",681050,"",Git 1.1,"Currently the @f:uri.resource@ ViewHelper uses the package key of the current request to determine the absolute resource path, if no package is specified.

The resource interceptor that replaces links to assets by the resource viewhelper, so:
<pre>
<code class=""xml"">
<link rel=""stylesheet"" href=""../../../Public/Stylesheets/SomeFile.css"" media=""all"" />
</code>
</pre>
is (internally) converted into
<pre>
<code class=""xml"">
<link rel=""stylesheet"" href=""{f:uri.resource(resource: 'Stylesheets/SomeFile.css')}"" media=""all"" />
</code>
</pre>

So the resource ViewHelper uses the *current* package key to resolve the path to: @Current/Package/Resources/Public/Stylesheets/SomeFile.css@.
While this mostly works for FLOW3, in Phoenix the current package is usually *TYPO3.TYPO3* and resources are located in some site package.

Therefore the TypoScript Fluid renderer sets the requests package key from the Fluid template path:
<pre>
<code class=""php"">
if (strpos($templatePath, 'resource://') === 0) {
	$tmp = substr($templatePath, 11);
	$tmp2 = explode('/', $tmp);

	$fluidTemplate->getRequest()->setControllerPackageKey(array_shift(($tmp2)));
}
</code>
</pre>

This has the side effect, that all links in the Fluid template now point to the site package instead of the FrontendNode controller of the TYPO3 package!


I didn't set the category to ViewHelpers because IMO this should be fixed in the view: We probably need something like @resourcesPackage@ or similar that should be used by the resource ViewHelper instead of the requests package key."
38379,TYPO3.Eel,Feature,"",New,Should have,Implement a Eel-ViewHelper,Tobias Liebig,"",2013-04-08 05:03,"","",2012-06-25,"","",0,2012-06-25 13:06,"","",681550,"","","To make Eel available in Fluid-Templates, Eel (or Fluid) should provide an simple ViewHelper.
It should accept an eel expression argument (string, might already be parsed/rendered by fluid), passes that to Eel and return the result. The Fluid TemplateVariableContainer should be passed as the Eel ""Context"" to access the Fluid variable values within Eel.
"
38381,TYPO3.Flow,Bug,"",Resolved,Should have,Doctrine Repository | findAll()-method does not consider $this->defaultOrderings,Vaclav Janoch,Karsten Dambekalns,2012-07-18 06:50,Persistence,1.1 RC2,2012-06-25,"","",100,2012-06-25 14:10,"","",681650,"",FLOW3 1.0.0,"The findAll()-method of TYPO3\FLOW3\Persistence\Doctrine\Repository does not consider $this->defaultOrderings. A simple patch could be the following:

File: @TYPO3/FLOW3/Persistence/Doctrine/Repository.php@
<pre>
/**
 * Finds all entities in the repository.
 *
 * @return array The entities.
 */
public function findAll() {
	return $this->findBy(array(), $this->defaultOrderings);
}
</pre>

There might by also another way to set the default orderings.

As #35035 describes that findAll() is inconsitent regarding to the return value, this is also kind of inconsistent, because the TYPO3\FLOW3\Persistence\Repository->findAll()-method does consider the default orderings."
38382,TYPO3.Flow,Bug,"",Resolved,Could have,f:uri.resource do not have parameter of title,Krzysztof Daniel,Karsten Dambekalns,2012-07-13 07:35,- Documentation -,1.1,2012-06-25,"","",100,2012-06-25 16:52,"","",681700,"",FLOW3 1.1.0 beta 3,"http://flow3.typo3.org/documentation/guide/partiii/resourcemanagement.html gives an example:

{f:uri.resource(resource: image.originalResource, title: image.title)}

This seems not to be implemented as this helper do not have parameter of title.

Either helper or documentation shall be corrected. "
38404,TYPO3.Flow,Bug,"",Resolved,Should have,IdentityRoutePart should accept __identity array,Bastian Waidelich,Bastian Waidelich,2012-06-26 11:35,MVC - Routing,1.1 RC1,2012-06-26,"","",100,2012-06-26 09:34,"","",682800,"",Git 1.1,"Since #37403 IdentityRoutePart::matchValue() returns an identity array in the format @array('__identity' => '<Identifier>')@.
This format should also be accepted for IdentityRoutePart::resolveValue().
This is required for widgets that fetch the arguments from the current request and pass it to the UriBuilder."
38419,TYPO3.Flow,Feature,"",Resolved,Could have,Show time until lock expiry on CLI,Karsten Dambekalns,Karsten Dambekalns,2012-08-14 04:37,Cli,2.0 beta 1,2012-06-27,"","",100,2012-06-27 04:44,"","",683550,"","",Sometimes it would be helpful to see how long the lock expiry will take if working on the CLI.
38424,TYPO3.Flow,Feature,"",Resolved,Could have,Give Booting\Sequence an identifier (e.g. for logging),Karsten Dambekalns,Karsten Dambekalns,2012-09-10 07:35,Core,2.0 beta 1,2012-06-27,"","",100,2012-06-27 05:50,"","",683800,"","","The @Sequence@ does not have an identifier, it is hard to distinguish between sequences when requests are interleaved."
38435,TYPO3.Flow,Bug,"",Resolved,Must have,Reset the router for each functional test,Bastian Waidelich,Bastian Waidelich,2012-07-06 08:49,- Testing -,1.1,2012-06-27,"","",100,2012-06-27 10:10,"","",684350,"",Git 1.2 (master),"Currently all functional tests share the same instance of @\TYPO3\FLOW3\Mvc\Routing\Router@ because the InternalRequestEngine is of scope *singleton*.
This leads to unexpected results and failing tests if tests add custom routes.

The router instance should be reset for each test case."
38442,TYPO3.Flow,Bug,"",Resolved,Must have,Fatal error when performing a core:migrate,Peter Beernink,Christian Müller,2012-06-28 05:05,Core,1.1,2012-06-27,"","",100,2012-06-27 16:32,"","",684700,"",FLOW3 1.1.0 rc 1,"When performing a core migrate using 1.1rc1 a fatal error is given:
PHP Fatal error:  Class 'TYPO3\FLOW3\Core\Migrations\Version201206271128' not found in /......./Packages/Framework/TYPO3.FLOW3/Scripts/Migrations/Manager.php on line 179

It turns out that Packages/Framework/TYPO3.FLOW3/Migrations/Code/Version201206271128.php contains a different classname.
Changing the classname solves the issue and migration will succeed."
38459,TYPO3.Eel,Bug,"",New,Must have,Accessing a not present property/method should error verbosely,Adrian Föder,Sebastian Kurfuerst,2012-08-07 11:06,"","",2012-06-28,"","",0,2012-06-28 09:19,"","",685550,"","","in my case, I erroneously wrote
<pre>
page.body.title = ${context.attr('title')}
</pre>

which resulted in 
<pre><code class=""html"">
<!-- Exception while rendering page&lt;TYPO3.TYPO3:Page&gt;/body :
Catchable Fatal Error: Object of class TYPO3\Eel\FlowQuery\FlowQuery
could not be converted to string in /var/www/Data/Temporary/Development?
/Cache/Code/Fluid_TemplateCache/Standalone_template_file_Site_5d5f8dc75?
b9c07fb770fba32529975b68fe55c41.php line 1193 -->
</code>
</pre>

Christian perfectly summarized it to
> yep, so the parser correctly detects the FlowQuery and creates the FlowQuery object but it seems it isn't evaluated

He also provided the reason: there is no `attr`, it must be `property`.
So please provide a better exception catch for such cases. I filed this as _Bug_ because I think it's pretty important for users."
38476,TYPO3.Flow,Bug,"",Closed,Should have,RoutePart doesn't work with 'complex' uriPattern objects,Pascal Walter,Bastian Waidelich,2013-08-06 11:03,MVC - Routing,"",2012-06-29,"","",0,2012-06-29 05:36,"","",686400,"",Git master,"I tried to use the RoutePart for a 'complex' object.

*Routes.yaml:*
<pre>
-
  name: 'Single Plausibility Version Actions'
  uriPattern:    'versionplausibility/{@action}/{version}'
  defaults:
    '@package':    'ITC.Collab'
    '@controller': 'VersionPlausibility'
    '@action':     'show'
  routeParts:
    version:
      objectType: 'ITC\Collab\Domain\Model\VersionPlausibility'
      uriPattern: '{version.fork.item.name}/{version.fork.creatorDomain.name}/{version.number}'
</pre>

Resulting URL:
""http://localhost/versionplausibility/show///-1""

I removed the uriPattern and added a @FLOW3\Identity to a date property of the version class. That did work and routed well! (http://localhost/versionplausibility/show/2012-06-03) So i guess the uriPattern objects aren't correctly resolved

All references to other classes are set and work very well.
"
38547,TYPO3.Flow,Bug,"",Resolved,Should have,BaseUri contains default HTTPS port,Bastian Waidelich,Bastian Waidelich,2012-07-11 05:35,Http,"",2012-07-02,"","",100,2012-07-02 06:40,"","",689850,"",Git 1.1,"By resolving #37770 now the BaseUri (thus the base tag when using @<f:base />@) contains the HTTP port if it's not 80.
It should also be omitted for 443 (HTTPS)"
38561,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Create `Reflection` manual page,Adrian Föder,Adrian Föder,2012-07-13 04:35,- Documentation -,"",2012-07-02,"","",100,2012-07-02 12:12,"","",690500,"","","well, create Reflection manual page."
38582,TYPO3.Eel,Bug,"",Resolved,Must have,Eel Unit test fails on 32-bit system number is out of 32-bit range,Sebastiaan van Parijs,"",2012-07-03 15:35,"","",2012-07-03,"","",100,2012-07-03 07:43,"","",691550,"","","Unittest failure message: 
TYPO3\Eel\Tests\Unit\InterpretedEvaluatorTest::integerLiteralsCanBeParsed with data set #2 ('237498237473284', , 2.3749823747328E+14)
Failed asserting that 2147483647 is identical to 2.3749823747328E+14.

When change the number on line #35: to a number within the 32-bit range, the test does not fail.


"
38592,TYPO3.Fluid,Bug,"",Resolved,Must have,attributes with dashes lead to wrong exception message,Adrian Föder,Karsten Dambekalns,2012-07-18 04:46,ViewHelpers,1.1 RC2,2012-07-03,"","",100,2012-07-03 11:47,"","",692050,"",(any),"consider the following Fluid tag

<pre><code class=""html"">
<f:if condition=""1"" data-bar=""foo"">something</f:if>
</code></pre>

leads to the exception <pre>#1224485838: You closed a templating tag which you never opened!</pre>

Removing the @data-bar@ attribute also makes the exception disappear."
38622,TYPO3.Flow,Task,"",Resolved,Should have,Use Inject annotation instead of tag in Object\ConfigurationBuilder,Karsten Dambekalns,Karsten Dambekalns,2012-08-14 04:35,Object,2.0 beta 1,2012-07-04,"","",100,2012-07-04 03:28,"","",693500,"","","The ConfigurationBuilder still uses getPropertyNamesByTag().
"
38625,TYPO3.Flow,Bug,"",Resolved,Should have,Dumped exception traces have all arguments doubled in plaintext,Karsten Dambekalns,Karsten Dambekalns,2012-07-30 03:35,Error,1.1,2012-07-04,"","",100,2012-07-04 03:36,"","",693650,"",FLOW3 1.1.0 rc 1,"When an exception is dumped to Data/Logs/Exceptions/?txt all arguments are doubled, once with parenthesis around them, once without:<pre>
7 TYPO3\FLOW3\SignalSlot\Dispatcher::dispatch((TYPO3\FLOW3\Core\Bootstrap)TYPO3\FLOW3\Core\Bootstrap, (bootstrapShuttingDown)bootstrapShuttingDown, array)
</pre>"
38627,TYPO3.Flow,Feature,"",Rejected,Could have,Reflect which classes have properties with an annotation,Adrian Föder,Adrian Föder,2012-12-05 06:07,Reflection,"",2012-07-04,"","",0,2012-07-04 04:50,"","",693750,"","",Augment the reflection information with data about which classes have properties annotated by a specific annotation.
38646,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Create TypeConverter reference,Karsten Dambekalns,Karsten Dambekalns,2012-07-13 06:39,- Documentation -,1.1,2012-07-04,"","",100,2012-07-04 09:20,"","",694700,"","",.
38662,TYPO3.Flow,Bug,"",Closed,Must have,Media type not supported should throw 415 rather than 406,Adrian Föder,Adrian Föder,2012-07-05 08:35,MVC,1.1,2012-07-05,"","",0,2012-07-05 03:52,"","",695500,"",FLOW3 1.1.0 rc 1,"In the AbstractController there's a check for supported media types. If this does not match, currently a 406 is thrown but should be 415."
38667,TYPO3.Flow,Bug,"",Resolved,Must have,Use of Target in Annotations is wrong,Karsten Dambekalns,Karsten Dambekalns,2012-07-12 09:35,Annotations,1.1,2012-07-05,"","",100,2012-07-05 05:14,"","",695750,"",Git 1.1,"The way the @Target@ annotation is used in our annotation classes is wrong, the checks are never done.

The annotation must be used without namespace aliasing to work."
38669,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Create annotation reference,Karsten Dambekalns,Karsten Dambekalns,2012-07-18 04:45,- Documentation -,1.1 RC2,2012-07-05,"","",100,2012-07-05 05:18,"","",695850,"","",""
38680,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Document configuration validation,Karsten Dambekalns,Karsten Dambekalns,2012-07-16 06:35,- Documentation -,1.1,2012-07-05,"","",100,2012-07-05 09:22,"","",696350,"","",""
38713,TYPO3.Flow,Bug,"",Resolved,Should have,MemcachedBackendTest don't use TYPO3\FLOW3\Core\ApplicationContext,Dominique Feyer,Dominique Feyer,2012-07-09 05:36,- Testing -,1.1,2012-07-06,"","",100,2012-07-06 08:48,"","",698000,"",FLOW3 1.1.0 rc 1,"A different place the phpunit test don't initialize correctly MemcachedBackend class:

<pre>
$thatBackend = new \TYPO3\FLOW3\Cache\Backend\MemcachedBackend('Testing', $backendOptions);
</pre>

Must be changed to 

<pre>
$thatBackend = new \TYPO3\FLOW3\Cache\Backend\MemcachedBackend(new ApplicationContext('Testing'), $backendOptions);
</pre>"
38785,TYPO3.Flow,Feature,"",Resolved,Should have,The generic persistence should support the tearDown Method for resetting the database,Christopher Hlubek,Christopher Hlubek,2012-07-12 06:35,Persistence,1.1,2012-07-09,"","",100,2012-07-09 10:19,"","",701450,"","",The @PersistenceManager@ implementation from the generic persistence did not yet implement a @tearDown@ method to reset the storage. This is needed to benefit from the automatic reset of the test database in functional tests.
38787,TYPO3.Flow,Feature,"",Closed,Should have,"Provide an ""instanceof""-like method for string class names",Adrian Föder,Adrian Föder,2012-12-10 07:12,Reflection,2.0 beta 1,2012-07-09,"","",0,2012-07-09 10:48,"","",701550,"","","currently there is no method in PHP to do instanceof-like operations on class _names_, i.e. strings.
The reflection service would be a good place for this helper method."
38840,TYPO3.Flow,Bug,"",Resolved,Should have,RepositoryInterface slightly out of sync with code,Karsten Dambekalns,Karsten Dambekalns,2012-07-18 10:48,Persistence,1.1 RC2,2012-07-10,"","",100,2012-07-10 05:29,"","",704200,"",FLOW3 1.1.0 rc 1,The documented return value of @findAll()@ was wrong and the interface should/could have @__call@ declared.
38841,TYPO3.Flow,Bug,"",Resolved,Should have,Magic findBy methods in Doctrine\Repository do not return QueryResult,Karsten Dambekalns,Karsten Dambekalns,2012-07-18 10:49,Persistence,1.1 RC2,2012-07-10,"","",100,2012-07-10 05:48,"","",704250,"",(any),""
38859,TYPO3.Flow,Feature,"",Resolved,Should have,Allow to flush Production configuration cache in code.,Karsten Dambekalns,Karsten Dambekalns,2012-07-17 03:36,Configuration,2.0 beta 1,2012-07-10,"","",100,2012-07-10 09:35,"","",705050,"","",If writing configuration in Production context (use case: TYPO3.Setup) the cached configuration needs to be removed so changes can be picked up.
38871,TYPO3.Fluid,Bug,"",Closed,Should have,Generating links within script tags gives invalid documents,Jost Baron,"",2013-02-01 10:11,ViewHelpers,"",2012-07-11,"","",0,2012-07-11 07:40,"","",705650,"",(any),"When generating a link in a fluid template, which is enclosed by script-Tags to a given format, the ampersands are not escaped.

So
<script type=""text/javascript"">
    var link = '{f:uri.action(action: 'someAction')}';
</script>
generates a link like this:

index.php?id=123&tx_ext_pi1[controller]=SomeController&tx_ext_pi1[action]=someAction&cHash=foobar

This is invalid XHTML (even inside a script, according to the W3C-Validator), as the ampersands are literals. The same thing works fine outside of script tags."
38873,TYPO3.Fluid,Bug,"",Resolved,Should have,Remove eval from StandaloneViewTest,Christian Müller,Christian Müller,2012-07-12 06:35,"","",2012-07-11,"","",100,2012-07-11 07:55,"","",705750,"",Git 1.2 (master),StandaloneViewTest uses eval to create a class that inherits from StandaloneView to override some things. This doesn't work properly with proxy classes and is evil anyway!
38875,TYPO3 Flow Base Distribution,Suggestion,"",New,Should have,Have a Translator object available in action controllers,Francois Suter,"",2012-07-11 09:00,"","",2012-07-11,"","",0,2012-07-11 09:00,"","",705850,"","","One could expect most action controllers to need to issue messages. As these should ideally be localizable, it might be convenient to provide a Translator instance by default to action controllers."
38884,TYPO3.Flow,Bug,"",Resolved,Should have,"Wrong indentation in ""Contribute to FLOW3""",Karsten Dambekalns,Karsten Dambekalns,2012-07-12 09:35,- Documentation -,1.1,2012-07-11,"","",100,2012-07-11 12:10,"","",706300,"",(any),""
38944,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Write chapter about command line interface,Robert Lemke,Robert Lemke,2012-08-07 11:35,- Documentation -,1.1,2012-07-13,"","",100,2012-07-13 11:24,"","",709200,"","",""
38963,TYPO3.Flow,Bug,"",Resolved,Should have,Error in validationGroups documentation,Jesper Paardekooper,Rens Admiraal,2012-07-25 05:58,- Documentation -,1.1,2012-07-15,"","",100,2012-07-15 06:42,"","",710150,"",FLOW3 1.1.0 rc 1,"Using FLOW3 1.1.0 rc1

The validationGroups documention is not right. Couple of issues:
- Single quotes are not working for me
- ""name"" must be ""type""
- The syntax of the validationGroups is wrong

Tested in a real world application with the syntax from the patch file."
38980,TYPO3.Flow,Bug,"",New,Must have,ActionController: behavior of required arguments is not consistent,Adrian Föder,"",2014-05-27 08:14,Validation,"",2012-07-16,"","",0,2012-07-16 05:12,"","",711000,"",(any),"consider the following action controller case:

<pre><code class=""php"">
	/**
	 * @param string $term
	 * @FLOW3\Validate(""$term"", type=""NotEmpty"")
	 * @return void
	 */
	public function indexAction($term) {
		$this->view->assign('term', $term);
	}
</code></pre>

the following happens:

* calling @acme.package/search?term=foo@ everything's fine
* calling @acme.package/search?term=@ fine, too, the validator kicks in and the output is @An error occurred while trying to call Acme\Package\Controller\SearchController->indexAction(). Error for term: This property is required.@
* calling @acme.package/search@ an Exception occurs, telling _#1298012500: Required argument ""term"" is not set_. But this exception makes one unable to catch this case smoothly with the same treatment that'd apply for an empty, but set term.

Side note: if defining @$term = NULL@ in the method header, nothing at all happens when providing _no_ term argument.

Am I expecting something wrong or is there a bug / unintended behavior?"
38988,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong arguments check in buildConstructorInjectionCode (class TYPO3\FLOW3\Object\DependencyInjection\ProxyClassBuilder),Kobbe van Daatselaar,Karsten Dambekalns,2012-12-12 16:12,Object,1.1.1,2012-07-16,"","",100,2012-07-16 08:27,"","",711400,"",FLOW3 1.1.0 rc 1,"On line 370 there is a wrong check on the constructor arguments.
The current code doesn't allow a NULL value to be send to a class contructor.
The isset() check should be replaced by an array_key_exists check:

<pre>
if ($objectConfiguration->getScope() === \TYPO3\FLOW3\Object\Configuration\Configuration::SCOPE_SINGLETON) {
				$code .= '		if (!array_key_exists(' . $index . ', $arguments)) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException(\'Missing required constructor argument $' . $parameterName . ' in class \' . __CLASS__ . \'. ' . 'Please check your calling code and Dependency Injection configuration.\', 1296143787);' . ""\n"";
				//$code .= '		if (!isset($arguments[' . $index . '])) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException(\'Missing required constructor argument $' . $parameterName . ' in class \' . __CLASS__ . \'. ' . 'Please check your calling code and Dependency Injection configuration.\', 1296143787);' . ""\n"";
			} else {
				$code .= '		if (!array_key_exists(' . $index . ', $arguments)) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException(\'Missing required constructor argument $' . $parameterName . ' in class \' . __CLASS__ . \'. ' . 'Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â?? for other scopes you must pass each required argument to the constructor yourself.\', 1296143788);' . ""\n"";
				//$code .= '		if (!isset($arguments[' . $index . '])) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException(\'Missing required constructor argument $' . $parameterName . ' in class \' . __CLASS__ . \'. ' . 'Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â?? for other scopes you must pass each required argument to the constructor yourself.\', 1296143788);' . ""\n"";
			}
</pre>"
38999,TYPO3.Kickstart,Bug,"",Resolved,Must have,Kickstarter shows wrong hint for use of underscore,Simon Schaufelberger,Simon Schaufelberger,2012-07-25 10:35,"",1.1,2012-07-16,"","",100,2012-07-16 11:33,"","",711800,"",(any),"When kicktarting a new package and an underscore is used, an error message is shown that an underscore can be used which is wrong."
39005,TYPO3.Flow,Bug,"",Resolved,Should have,Proxies for Http\Request not used,Marco Falkenberg,Karsten Dambekalns,2012-08-14 05:35,Http,1.1,2012-07-16,"","",100,2012-07-16 16:46,"","",712100,"",FLOW3 1.1.0 rc 1,"The proxies for the Http\Request are generated but not used. So you are not able to use AOP for this class. For example try this:

<pre>
	/**
	 * @param \TYPO3\FLOW3\Aop\JoinPointInterface $joinPoint The current joinpoint
	 *
	 * @FLOW3\Around(""method(TYPO3\FLOW3\Http\Request->decodeBodyArguments())"")
	 * @return mixed Result of the advice chain
	 */
	public function transformRequestBody(\TYPO3\FLOW3\Aop\JoinPointInterface $joinPoint) {
		/** code **/
	}
</pre>

The advices are never called.

The bug is located in the Http\RequestHandler. There the Request is generated through a static constructor method. 

Maybe the request should be instantiated by the object manager while resolving the dependencies like the other properties of the request handler. 

Like this:

<pre>
	protected function resolveDependencies() {
		...
		$this->request = $objectManager->get('TYPO3\FLOW3\Http\Request');
	}
</pre>

Then you could feed the constructor of the request with a kind of ""RequestVariablesLocator"" which encapsulates the superglobals. When it's a singleton it get's injected.

Like this:

<pre>
	public function __construct(\TYPO3\FLOW3\Mvc\RequestVariablesLocator $requestVariableLocator) {
		$server = $requestVariableLocator->getServerVariables();

		$this->headers = Headers::createFromServer($server);
		$this->setMethod(isset($server['REQUEST_METHOD']) ? $server['REQUEST_METHOD'] : 'GET');
		$protocol = (isset($server['SSL_SESSION_ID']) || (isset($server['HTTPS']) && ($server['HTTPS'] === 'on' || strcmp($server['HTTPS'], '1') === 0))) ? 'https' : 'http';
		$this->uri = new Uri($protocol . '://' . (isset($server['HTTP_HOST']) ? $server['HTTP_HOST'] : 'localhost') . str_replace('/index.php', '', (isset($server['REQUEST_URI']) ? $server['REQUEST_URI'] : '/')));
		$this->server = $server;
		$this->arguments = $this->buildUnifiedArguments($requestVariableLocator->getGetVariables(), $requestVariableLocator->getPostVariables(), $requestVariableLocator->getPostVariables());
	}
</pre>"
39062,TYPO3.Flow,Bug,"",Resolved,Should have,Links in StandardView templare are broken,Karsten Dambekalns,Karsten Dambekalns,2012-07-18 11:29,MVC,1.1 RC2,2012-07-18,"","",100,2012-07-18 11:00,"","",714950,"",(any),The links point to URL no longer working.
39088,TYPO3.Flow,Feature,"",New,Should have,Add a sgnalslot before compilation,Kobbe van Daatselaar,"",2012-12-11 04:30,Core,"",2012-07-19,"","",0,2012-07-19 08:17,"","",716250,"","","I think it would be nice to have a signalslot before compilation.
Currently there is only a signalslot when compilation is finished successfully.

The compileCommand in the CoreCommandController could look like this:

<pre>
	public function compileCommand($force = FALSE) {
		$objectConfigurationCache = $this->cacheManager->getCache('FLOW3_Object_Configuration');
		if ($force === FALSE) {
			if ($objectConfigurationCache->has('allCompiledCodeUpToDate')) {
				return;
			}
		}
		
		$this->emitStartCompilationRun(); //THIS IS NEW

		$classesCache = $this->cacheManager->getCache('FLOW3_Object_Classes');
		$this->proxyClassCompiler->injectClassesCache($classesCache);

		$this->aopProxyClassBuilder->injectObjectConfigurationCache($objectConfigurationCache);
		$this->aopProxyClassBuilder->build();
		$this->dependencyInjectionProxyClassBuilder->build();

		$classCount = $this->proxyClassCompiler->compile();

		$objectConfigurationCache->set('allCompiledCodeUpToDate', TRUE);

		$classesCacheBackend = $classesCache->getBackend();
		if ($this->bootstrap->getContext()->isProduction() && $classesCacheBackend instanceof FreezableBackendInterface) {
			$classesCache->getBackend()->freeze();
		}

		$this->emitFinishedCompilationRun($classCount);
	}
</pre>

In our solution we wan't to do some stuff before the flow3 compiler kicks in"
39096,TYPO3.Flow,Bug,"",New,Should have,Unnecessary compile invoked in non production context?,Kobbe van Daatselaar,"",2013-08-14 09:35,Core,2.0.1,2012-07-19,"","",0,2012-07-19 11:04,"","",716650,"",FLOW3 1.1.0 rc 1,"In the initializeProxyClasses function in the Script.php file, the typo3.flow3:core:compile command will be invoked every request (even when nothing has changed).

I experience two issues with this:
1) Even when allCompiledCodeUpToDate is true in the initializeProxyClasses function. It always is false in the executed compile command, causing a compile in every request.

2) The compile command shouldn't be triggered in the first place (from initializeProxyClasses) when allCompiledCodeUpToDate evaluates to TRUE.
A compile is always triggered in non production context. When the compile runs (when issue 1 is solved) it doesn't do a compilation (because allCompiledCodeUpToDate then is TRUE), but you would still have the bootstrap of the compilation sub process. So in my opinion calling the compile in the first place is unnecessary.

I've discussed this issue on the IRC channel on 19-7-2012 (maybe useful to check the IRC logs)"
39121,TYPO3.Flow,Task,"",Rejected,Should have,Encapsulate PHP superglobals for Http\Requests,Marco Falkenberg,Marco Falkenberg,2012-08-29 06:37,Http,2.0 beta 1,2012-07-20,"","",0,2012-07-20 08:10,"","",717900,"","","The superglobals used for initializing the Http\Request classes ($_GET, $_POST, $_COOKIE, $FILES, $_SERVER) should be encapsulated in a wrapper. The advantages are:

* Because of the abstraction you can transparently implement a transformation of these variables, e.g. for different OS's or versions of PHP.
* You can add more utility functions to the encapsulating class in the future. 
* The encapsulating class could be a singleton and could be injected by constructor into the Http\Request class. By now the proxy for the Http\Request is not used because the HttpRequestHandler creates the Request by a static constructor function. "
39142,TYPO3.Flow,Bug,"",Resolved,Should have,Missing namespace in error message for TYPO3.FLOW3.core.phpBinaryPathAndFilename,Simon Schaufelberger,Simon Schaufelberger,2012-07-25 05:35,Error,1.1,2012-07-20,"","",100,2012-07-20 13:23,"","",718950,"",(any),In the error message with key: 1315561483 the namespace TYPO3 is missing.
39162,TYPO3.Eel,Feature,"",Resolved,Should have,Support for != comparison,Marc Neuhaus,Christopher Hlubek,2012-08-14 06:35,"","",2012-07-21,"","",100,2012-07-21 10:23,"","",719950,"","","currenty you can't use an != comparison, although you can use !foo == bar, it think ""!="" should be supported as well"
39214,TYPO3.Fluid,Feature,"",Closed,Should have,The textfield viewhelper should have an attribute 'step' to allow decimal numbers,Thomas Kirst,Bastian Waidelich,2012-07-25 08:40,ViewHelpers,2.0 beta 1,2012-07-24,"","",0,2012-07-24 07:05,"","",722550,"","","When using the textfield viewhelper to render a number field it will only accept integer values and no decimals. It is preferable to use the input field of type number which then tells iOS browsers to pull up the number keypad instead of the normal letters keypad. Then it must be possible to enter decimal values, however the default setting of this field is that it just takes integers. The decimal steps can be configured by the 'step' attribute and if you set it on 'any' every decimal number can be entered by the user.

I created a patch file which adds the needed line to the source.

Could anybody please add this patch? Thanks a lot!

Sample screen:

!number_keypad_sample.png!

[[textfield_stepAny_patch.txt]]"
39253,TYPO3.Flow,Feature,"",Accepted,Should have,Remove mirroring mode option and code,Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Resource,"",2012-07-25,"","",0,2012-07-25 08:50,"","",724450,"","",Resource mirroring through copy is too slow and we will not support non-symlink capable OSs.
39255,TYPO3.Fluid,Task,"",Resolved,Should have,reflectionService property in AbstractViewHelper should be protected instead of private,Aske Ertmann,"",2012-08-07 11:35,Core,2.0 beta 1,2012-07-25,"","",100,2012-07-25 09:17,"","",724550,"","","The property ""reflectionService"" in the AbstractViewHelper should be protected instead of private to allow usage of the reflection service in view helpers without having to inject again with another property name.

Needed here: https://review.typo3.org/#/c/9695 - see general comments and comments here https://review.typo3.org/#/c/9695/2/Classes/ViewHelpers/Widget/CommentsViewHelper.php"
39267,TYPO3.Flow,Bug,"",Resolved,Should have,RsaWalletServicePhp saves keys even if not modified,Robert Lemke,Robert Lemke,2012-07-30 02:35,Security,1.1,2012-07-25,"","",100,2012-07-25 11:45,"","",725150,"",Git 1.2 (master),The shutdown() method of the RsaWalletServicePhp saves its keys to disk even if they haven't been modified. This is unnecessary and may cause some hassles in certain setups.
39286,TYPO3.Flow,Bug,"",Resolved,Should have,FLOW3's var_dump() still chokes on Doctrine collections,Bastian Waidelich,Bastian Waidelich,2012-08-07 11:35,Error,1.1,2012-07-26,"","",100,2012-07-26 06:08,"","",726100,"",Git 1.2 (master),"The patch provided with #37481 didn't solve the issue unfortunately.
Now, if you debug entities with properties of type @\Doctrine\Common\Collections\Collection@ the debugger throws an exception because it tries to cast an array to string.
The reason is, that @\Doctrine\Common\Util\Debug::export()@ returns an @array@ or @stdClass@ while we expect a string."
39293,TYPO3.Flow,Bug,"",Resolved,Should have,ViewInterface->assign() method is annotated to expect object as value,Adrian Föder,Adrian Föder,2012-07-30 03:00,MVC,1.1,2012-07-26,"","",100,2012-07-26 08:21,"","",726450,"",(any),"it is
<pre>
	 * @param string $key Key of variable
	 * @param object $value Value of object
	....
	 */
	public function assign($key, $value);
</pre>

which should be `mixed` instead because everything is considered to be assignable."
39300,TYPO3.Flow,Bug,Bug #37574: ReflectionData is not regenerated automatically,Closed,Won't have this time,blocking ReflectionService: Call to a member function get() on a non-object ,Adrian Föder,"",2012-08-17 05:35,Reflection,1.1.1,2012-07-26,"","",0,2012-07-26 11:05,"","",726800,"",(any),"Most is commented in https://review.typo3.org/#/c/12575/, however a few steps to (hopefully) reproduce:

  * Use a full Phoenix, all on current master, especially with 12575 applied.
  * *make sure* also the FLOW3 subroutes are included, not only the TYPO3 ones.
  * run `phpunit --debug -c Build/Common/PhpUnit/FunctionalTests.xml Packages/Framework/TYPO3.FLOW3/Tests/Functional/Http/RequestHandlerTest.php`
  * this should result in the message `PHP Fatal error: Call to a member function get() on a non-object in /var/www/Packages/Framework/TYPO3.FLOW3/Classes/Reflection/ReflectionService.php on line 987`.
  * maybe, try to call your frontend without any given route; in my case this results in the same error."
39374,TYPO3.Flow,Bug,Task #27561: Complete documentation,Resolved,Should have,References to renamed / moved code in part II,Karsten Dambekalns,Karsten Dambekalns,2012-08-14 06:35,- Documentation -,1.1,2012-07-30,"","",100,2012-07-30 05:56,"","",730500,"",FLOW3 1.1.0 beta 1,"There are some references to outdated code in Part II of the guide, namely @flashMessageContainer->add()@ and some @MVC@ as well as @MVC\Web\Routing@"
39410,TYPO3.Fluid,Feature,"",Resolved,Should have,Implement reserved variables returning their intended representation,Adrian Föder,Adrian Föder,2012-08-09 10:35,Core,2.0 beta 1,2012-07-31,"","",100,2012-07-31 04:58,"","",732250,"","","currently, in Fluid there are reserved variables anyway, like true, false, on, off etc.
Enable accessing these values with {true}, {false} etc. to retrieve their intended value they're representing."
39413,TYPO3.Flow,Bug,"",Resolved,Must have,AOP: Property introduction seems to be broken,Rens Admiraal,Robert Lemke,2014-07-11 14:19,Reflection,"",2012-07-31,"","",100,2012-07-31 08:04,"","",732400,"",Git master,"Introducing a property does not work at the moment. The functional tests are passing.

Attached is a Test package as example to show the problem."
39414,TYPO3.Flow,Bug,"",New,Should have,Security Documentation ,Linh ,"",2012-12-15 15:41,- Documentation -,"",2012-07-31,"","",0,2012-07-31 09:31,"","",732450,"",FLOW3 1.1.0 rc 2,"At the section ""Using the authentification controller"" it is documented to call http://localhost/flow3/authenticate. When I try to call the url I receive a 404 error. I look up the flow3 package routes.yaml and tried http://localhost/flow3/authentication which worked for me. Maybe the documentation have to be updated."
39423,TYPO3.Flow,Feature,"",Resolved,Should have,Custom Error Renderers,Bastian Waidelich,Bastian Waidelich,2013-01-10 10:55,Error,2.0 beta 1,2012-12-25,"","",0,2012-07-31 11:41,"","",732900,0.00,"","It should be possible to render certain exceptions (based on exception class name and/or status code) with a custom (fluid) template.
This could also replace the currently used ""NotFoundController-mechanism""."
39424,TYPO3.Flow,Task,"",Resolved,Should have,Write documentation for HTTP framework,Robert Lemke,Robert Lemke,2012-08-16 16:35,- Documentation -,1.1,2012-07-31,"","",100,2012-07-31 11:41,"","",732950,"","",""
39428,TYPO3.Fluid,Bug,"",Resolved,Must have,Layout and partial identifiers should be independent of current controller name,Alexander Berl,Alexander Berl,2014-08-27 06:32,Core,1.1.1,2012-07-31,"","",100,2012-07-31 13:12,"","",733150,"",FLOW3 1.1.0 rc 2,"Currently, all templates get an identifier made up of package/subpackage, controller, prefix and unique hash.
This leads to all layouts and partials being compiled and cached once for each controller they are used from, even though the contents is independant and hence just a duplicate.

I suggest adding the controller name as part of the prefix in getTemplateIdentifier() only and stripping it from createIdentifierForFile()."
39432,TYPO3 Flow Base Distribution,Task,"",New,Should have,Clarify introducing properties,Rens Admiraal,"",2012-07-31 17:34,"","",2012-07-31,"","",0,2012-07-31 17:34,"","",733350,"","","When you have an aspect to introduce a property, it's not clear this is not possible without any other advice in the same aspect.

The actual error:

Uncaught Exception
  The class ""Test\Aspect\ModelAspect"" is tagged to be an aspect but doesn't
  contain advices nor pointcut or introduction declarations.

Which seems incorrect for the developer as he introduced a property. Either this error should be clarified, or it should be possible to introduce just a property (last one doesn't sound really like a usecase as you would expect changed behavior if a new property is added, so in a common usecase you would have at least 1 advise).

This part should also be clarified more in documentation"
