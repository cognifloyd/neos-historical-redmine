#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Sprint,Description
3,PHPCR,Feature,"",Closed,Should have,Add custom autoloader for phpCR package,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","","","","",0,2006-12-14 14:30,"","",1814200,"","","The phpCR package should supply a custom autoloader for the interfaces and
exceptions, to get rid of source:Packages/phpCR/Resources/PHP/phpCR_Interfaces.php and source:Packages/phpCR/Resources/PHP/phpCR_Exceptions.php

Otherwise we have to adapt those files in the future and the sheer number of includes seems error-prone."
49,PHPCR,Bug,"",Closed,Must have,Fix comments and clean up code in phpCR tests,Robert Lemke,Karsten Dambekalns,2010-10-20 05:40,"","","","",0.00,0,2007-04-04 11:31,"","",1814150,"","","Most of the comments in the phpCR_* tests still have HTML code or are just taken from the Jackrabbit tests (""Accessing jcr:uuid .... caused an ValueFormatException"" should be ""... phpCRValueFormatException"").

In general, the code layout is not completely clean (which we should strive for) and the code smells a bit like too many comments.

If you use comments, please add an extra tab before the ""//"" sign so they are indented above the code line they comment."
83,PHPCR,Bug,"",Closed,Must have,phpCR tests need cleanup,Robert Lemke,Karsten Dambekalns,2010-10-20 05:40,"","","","","",0,2007-12-19 12:44,"","",1814100,"","","There are a few issues with the phpCR tests. Among them:

* test case class names don't comply with the naming rules: phpCR_SomeTest instead of T3_phpCR_SomeTest
* @package annotations are mostly wrong, referring to phpCRJackrabbit
* some test methods are static
* some methods are not documented / lack doc comments

In general, some tests look more like functional tests than like unit tests - but I might be wrong with that."
2421,PHPCR,Task,"",Resolved,Must have,Adjust license to LGPL,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","",2009-01-07,"","",100,2009-01-07 06:53,"","",12350,"","",.
3844,PHPCR,Bug,"",Resolved,Should have,Type of param $in for importXML(...) not precisely specified,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","",2009-07-07,"","",100,2009-07-07 16:21,"","",1814050,"","","From David Buchmann:

??i read through the session interface. it declares the method importXML($parentAbsPath, $in, $uuidBehavior);??
??the full definition is here: http://github.com/k-fish/PHPCR/blob/545b05799b99ba6aebacec95b10db5c2ce2c1c1d/Classes/SessionInterface.php??
??what type of resource is to be expected here? http://ch.php.net/resource lists several that would be thinkable: ""domxml document"" and ""xml"" as well as ""stream"" and maybe others (i am no streams expert). it would be useful to specify this exactly...??

This applies to WorkspaceInterface and SessionInterface."
3845,PHPCR,Task,"",Resolved,Should have,Iterator behaviour - Java vs PHP,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","",2009-07-07,"","",100,2009-07-07 16:39,"","",18150,"","","From David Buchmann:

iterators are a bit different between java and php. in java, next() advances the iterator one step and then returns the current element. advancing behind the end throws an exception. usually, you do
<pre>
while(iterator.hasNext()) {
  item = iterator.next();
  ...
}
</pre>
in php, next() only advances the pointer to the next element, its return type is void. getting the element is done using current(), it is an error to call current() if you are not at an element. to check if next() moved you past the end, there is the valid() method. iterators can be used in the foreach construct, that relies on this semantics. this typically looks like
<pre>
foreach($iterator as $item) {
  ...
}
</pre>
PHPCR_IteratorInterface extends the php Iterator. in my opinion, it should follow the php iterator semantics, not the java ones. then it could be used with the foreach construct and it would be less confusing.

we should however define the nextNode() and the other nextXY to follow the java semantics, as they are actually discribed in the jcr
specifications. so they would internally do
<pre>
nextNode() {
 $this->next();
 return $this->current();
}
</pre>

and, while criticizing: do we need append method? if the base php iterator does not have it, i do not really see why we should have it here. those iterators are typically used in a search result. we can not add anything to the jcr workspace there, as we do not know where to put it. at least, it should be optional and allowed to throw something like a NotImplemented exception.
"
5161,PHPCR,Task,"",Resolved,Should have,Return type of getImportContentHandler needs to be specified,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","",2009-10-28,"","",100,2009-10-28 09:07,"","",23250,"","","From the jackalope mailing list:

>>> There is also getImportContentHandler() which in Java returns
>>> org.xml.sax.ContentHandler - what would that be best in PHP terms?

>> We should define our own content handler that implements an sax like
>> interface using something like the xml event handlers here.
>>
>> For the current jackalope phase I suggest to not implement that feature.
>> Since I currently don't see a use case for us and it appears to be a bigger
>> task.

> I will also leave this as not implemented, but we probably still should
> have an idea on what to return from that method. I'd suggest to return a
> ready-to-use configured instance of what xml_parser_create() gives you.
> You could then do:
>
<pre>
$handler = $workspace->getImportContentHandler('/import/root', ImportUUIDBehaviorInterface::IMPORT_UUID_CREATE_NEW);

$fp = fopen($url, 'r');
while(!feof($fp)) {
  $line = fgets($fp, 4096);
  xml_parse($handler, $line);
}
fclose($fp);
xml_parser_free($handler);
</pre>
>
> What do you think?

While I agree, that it needs something event based to make that method useful, using just the sax extension (php.net/xml) of php would be quite limiting. In the javaworld you can do your own sax-push-parser with a class without even having an XML file. With using the xml extension, It just can do xml documents/files

I therefore propose to ""invent"" a SAX Interface, which can be extended and someone can subscribe to it's events (like in sax), but on the other side, someone can push those events (not like in the sax case).

The interface should be as easy as possible and something like http://java.sun.com/j2se/1.4.2/docs/api/org/xml/sax/XMLReader.html or http://java.sun.com/j2se/1.4.2/docs/api/org/xml/sax/Parser.html but those 2 examples are certainly over-object-ified for PHP.

The first and example implementation of that interface would be a wrapper for the xml/sax extension mentioned above)

I don't know, if I find the time to ""invent"" something like that (I also didn't find anything on the net for such a beast), but as we won't implement that feature right now, it may be enough to just state: @... interface phpcr_xml_sax@ or something like that and come up with the actual implementation later.

And IIRC this will not be the only place, where there's a org.xml.sax.ContentHandler is needed."
5165,PHPCR,Task,"",Resolved,Should have,Make type for $out in XML export methods consistent with $in parameter in XML import,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:40,"","",2009-10-28,"","",100,2009-10-28 10:52,"","",23300,"","","We changed $in to be a URI, this should be applied to the XML export methods as well."
