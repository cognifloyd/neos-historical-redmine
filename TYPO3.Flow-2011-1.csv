#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Affected Flow version,Description
11893,TYPO3.Flow,Bug,"",Resolved,Should have,The hash identifying a ValueObject isn't sufficient,Jochen Rau,Karsten Dambekalns,2011-07-04 09:05,Persistence,1.0 beta 1,2011-01-05,"","",100,2011-01-04 23:38,"","",1778250,"","","After executing the constructor of a Value Object a hash is generated and stored in FLOW3_Persistence_ValueObject_Hash to identify the Value Object (eg. to support getIdentifierByObject($object)). But the algorithm for generating the hash isn't sufficient for some cases.

Let's assume we have a Value Object \F3\MyExt\Domain\Model\Color with a property $colorNumber=42. This Value Object has the same hash as a Value Object \F3\MyExt\Domain\Model\Length with a property $value=42. The same problem occurs, if a Value Object stores other objects in an SplObjectStorage or uses PHP classes like DateTime.

IMHO the identity of a ValueObject is fully determined only by taking all property values (including SplObjectStorages) *and* the class into account. The test for FLOW3_Persistence_Entity_UUID could possibly be dropped as a Value Object by definition can't reference to Entities."
11948,TYPO3 Flow Base Distribution,Story,"",Resolved,Should have,Security Framework improvements,Sebastian Kurfuerst,"",2011-05-06 03:56,"",1.0 beta 1,"","","",50,2011-01-06 08:14,"","",1766150,0.00,"",""
11950,TYPO3 Flow Base Distribution,Task,Story #11948: Security Framework improvements,Closed,Should have,Re-visit HMAC features,Sebastian Kurfuerst,Andreas Förthner,2011-05-06 02:17,"",1.0 beta 1,"","","",0,2011-01-06 08:14,"","",70350,"","",""
11951,TYPO3 Flow Base Distribution,Task,Story #11948: Security Framework improvements,Closed,Should have,Plan Implementation of Request Stack,Sebastian Kurfuerst,"",2011-05-06 02:17,"",1.0 beta 1,"","",0.00,0,2011-01-06 08:14,"","",70400,0.00,"",""
11953,TYPO3 Flow Base Distribution,Task,Story #11948: Security Framework improvements,Closed,Should have,look through issues in the tracker with the security category,Sebastian Kurfuerst,"",2011-05-06 02:17,"",1.0 beta 1,"","",0.00,0,2011-01-06 08:15,"","",70450,0.00,"",""
11954,TYPO3.Flow,Task,"",Resolved,Should have,Check the current status of i18n / L10n,Sebastian Kurfuerst,Karsten Dambekalns,2011-12-21 06:37,I18n,1.1 beta 1,"","","",50,2011-01-06 08:17,"","",70500,0.00,"",""
11955,TYPO3.Flow,Task,Task #11954: Check the current status of i18n / L10n,Resolved,Should have,assess the current state of the I18n feature,Sebastian Kurfuerst,Karsten Dambekalns,2011-12-21 06:37,I18n,1.1 beta 1,"","","",100,2011-01-06 08:17,"","",70550,"","",""
11956,TYPO3.Flow,Task,Task #11954: Check the current status of i18n / L10n,Resolved,Should have,"check Translate-ViewHelper in incubation state, and migrate it to fluid",Sebastian Kurfuerst,Karsten Dambekalns,2011-05-06 04:11,"",1.0 beta 1,"","","",100,2011-01-06 08:18,"","",70600,"","",""
11957,TYPO3.Flow,Task,Task #11954: Check the current status of i18n / L10n,Resolved,Should have,check how JavaScript strings can be translated,Sebastian Kurfuerst,Rens Admiraal,2011-12-15 13:34,"",1.0 beta 1,"","",0.00,100,2011-01-06 08:19,"","",70650,0.00,"",""
11958,TYPO3 Flow Base Distribution,Story,"",Resolved,Should have,Check loose ends in FLOW3,Sebastian Kurfuerst,"",2011-05-06 04:09,"",1.0 beta 1,"","","",0,2011-01-06 08:20,"","",1766300,0.00,"",""
11964,TYPO3 Flow Base Distribution,Task,"",Closed,Should have,Profile under windows,Sebastian Kurfuerst,Bastian Waidelich,2012-05-08 12:00,"",1.1,"","","",0,2011-01-06 08:23,"","",70900,"","",""
11969,TYPO3.Fluid,Task,"",Closed,Must have,Make widgets' template configurable,Sebastian Kurfuerst,Adrian Föder,2012-12-10 07:08,Widgets,2.0 beta 1,2011-04-01,"",0.00,100,2011-01-06 08:31,"","",71000,0.00,"",""
11970,TYPO3 Flow Base Distribution,Task,Story #11958: Check loose ends in FLOW3,Closed,Should have,Improve error handling in Property Mapper,Sebastian Kurfuerst,"",2011-05-06 02:17,"",1.0 beta 1,"","",0.00,0,2011-01-06 08:31,"","",71050,0.00,"",""
12099,TYPO3 Flow Base Distribution,Task,Story #11169: Implement new operator support,Resolved,Should have,Check feasibility and create rough concept,Robert Lemke,Robert Lemke,2011-05-06 02:12,"",1.0 beta 1,"","",0.00,0,2011-01-11 09:20,"","",71450,0.00,"",""
12100,TYPO3 Flow Base Distribution,Task,Story #11169: Implement new operator support,Resolved,Should have,Implement a generic Proxy Builder,Robert Lemke,Robert Lemke,2011-05-06 02:12,"",1.0 beta 1,"","",0.00,0,2011-01-11 09:20,"","",71500,0.00,"",""
12190,TYPO3.Flow,Bug,"",Resolved,Must have,Aggregate root detection does not work for non-standard repositories,Karsten Dambekalns,Karsten Dambekalns,2011-07-09 06:35,Persistence,1.0 beta 1,2011-01-13,"",2.00,100,2011-01-13 11:17,"","",1810650,"","","If a repository and the model it holds don't match via the naming conventions, the ReflectionService does not detect that the model is an aggregate root."
12204,TYPO3 Flow Base Distribution,Task,Story #11958: Check loose ends in FLOW3,Resolved,Should have,Improve Fluid Resource Interceptor Performance,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-05-06 02:17,"",1.0 beta 1,"","",0.00,0,2011-01-14 02:50,"","",72700,0.00,"","While I profiled the welcome package, I noticed that much time was spent during preg_match -- see attached screenshot ""before"". A quick drill-down showed that this was almost fully spent in the resource interceptor of fluid (99,2% of the time).

That's why I decided to optimize the RegEx a little bit, and add an early return which covers most cases, leading to a much improved behavior (see attached screenshot ""after"").

"
12210,TYPO3.Fluid,Bug,"",Closed,Must have,Widget Bootstrapper Call to undefined method Tx_Extbase_Object_Container_Container::getContainer(),Kevin Ulrich Moschallski,"",2011-01-21 08:34,Widgets,"",2011-01-14,"","",0,2011-01-14 06:10,"","",2593600,"","","When calling a ajax widget i recieve this error:

Call to undefined method Tx_Extbase_Object_Container_Container::getContainer()

I looked into the class and couldn't find such a method.

I replaced it with this:

$objectContainer = t3lib_div::makeInstance('Tx_Extbase_Object_Container_Container');
$objectContainer->registerImplementation($originalClassName, $classConfiguration['className']);

and everything works fine.

Patch attached."
12266,TYPO3.Flow,Bug,"",Rejected,Should have,AccountRepository QueryResult not reflecting correct result,Soren Malling,Karsten Dambekalns,2011-03-21 07:02,Persistence,1.0 beta 1,2011-01-15,"","",0,2011-01-15 14:24,"","",1810600,"","","This might be me, misunderstanding the queryResult return of a findAll function from \F3\FLOW3\Security\AccountRepository but here goes:

Debugging the output of $this->accountRepository->findAll() (using \F3\var_dump) i get the following dump

<pre>
F3\FLOW3\Persistence\QueryResult [prototype]
 dataMapper => F3\FLOW3\Persistence\DataMapper [singleton][filtered]
 persistenceManager => F3\FLOW3\Persistence\PersistenceManager [singleton][filtered]
 query => F3\FLOW3\Persistence\Query [prototype][filtered]
 queryResult => NULL
</pre>

from what I see, my queryResult (the resulting objects?) is empty. But adding the ""->toArray()"" function (or parsing it through <f:for ..><f:debug.. in fluid) I get my expected objects.

So, from my view, it looks like resulting objects isn't attached to the queryResult property?"
12365,TYPO3.Flow,Bug,"",Rejected,Must have,mapAndValidate() and map() behave differently,Robert Lemke,"",2011-05-06 03:27,Property,1.0 beta 1,2011-01-19,"","",0,2011-01-19 05:27,"","",1810550,"","","mapAndValidate() does not expect $target to be passed by reference. As a consequence, a string (object name) can be passed, BUT if an array would be passed, the function would actually do nothing (because the result is never returned)."
12430,TYPO3.Flow,Bug,"",Closed,Must have,F3\FLOW3\I18n\Cldr\Reader\Exception\UnableToFindFormatException thrown in file NumbersReader.php,Christian Lerrahn,Karol Gusak,2011-07-06 13:48,I18n,"",2011-01-21,"","",0,2011-01-21 01:31,"","",1778200,"","","I'm trying to validate data on a object which I created in the code and filled with data from a file.

I presume that the localisation causes this exception somehow. The code used to run with version that did not have localisation, yet.
Is this a bug or a configuration issue?

Number format was not found. Please check whether CLDR repository is valid.
50 F3\FLOW3\I18n\Cldr\Reader\NumbersReader::parseFormatFromCldr(F3\FLOW3\I18n\Locale, ""decimal"", ""default"")
49 F3\FLOW3\I18n\Parser\NumberParser::parseDecimalNumber(""1"", F3\FLOW3\I18n\Locale, ""default"", boolean)
48 F3\FLOW3\Validation\Validator\NumberValidator::isValid(""1"", boolean)
47 F3\FLOW3\Validation\Validator\GenericObjectValidator::isPropertyValid(F3\UtilityMeterReconciliation\Domain\Model\Asset_AOPProxy_Development, ""assetIdentifier"")
46 F3\FLOW3\Validation\Validator\GenericObjectValidator::isValid(F3\UtilityMeterReconciliation\Domain\Model\Asset_AOPProxy_Development, boolean)
45 F3\FLOW3\Validation\Validator\ConjunctionValidator::isValid(F3\UtilityMeterReconciliation\Domain\Model\Asset_AOPProxy_Development)
44 F3\UtilityMeterReconciliation\Controller\File\FileController::parseFileContents(""asset"", ""&quot;Asset_ID&quot;,&quot;Asset_Name&quot;,&quot;Asset_Use&quot;,&quot;Asset_Street_?et, Wandin North VIC 3139&quot;,&quot;Wandin North&quot;,3139,,
?"", array, boolean)
43 F3\UtilityMeterReconciliation\Controller\File\FileController::parseAction(F3\UtilityMeterReconciliation\Domain\Model\File_AOPProxy_Development)
42 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::parseAction(F3\UtilityMeterReconciliation\Domain\Model\File_AOPProxy_Development)
41 call_user_func_array(array, array)
40 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
39 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
38 F3\FLOW3\Security\Aspect\PolicyEnforcementAspect::enforcePolicy(F3\FLOW3\AOP\JoinPoint)
37 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
36 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
35 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::parseAction(F3\UtilityMeterReconciliation\Domain\Model\File_AOPProxy_Development)
34 call_user_func_array(array, array)
33 F3\FLOW3\MVC\Controller\ActionController::callActionMethod()
32 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::callActionMethod()
31 call_user_func_array(array, array)
30 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
29 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
28 F3\FLOW3\Security\Aspect\PolicyEnforcementAspect::enforcePolicy(F3\FLOW3\AOP\JoinPoint)
27 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
26 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
25 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::callActionMethod()
24 F3\FLOW3\MVC\Controller\ActionController::processRequest(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
23 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::processRequest(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
22 call_user_func_array(array, array)
21 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
20 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
19 F3\FLOW3\Security\Aspect\PolicyEnforcementAspect::enforcePolicy(F3\FLOW3\AOP\JoinPoint)
18 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
17 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
16 F3\UtilityMeterReconciliation\Controller\File\FileController_AOPProxy_Development::processRequest(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
15 F3\FLOW3\MVC\Dispatcher::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
14 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
13 call_user_func_array(array, array)
12 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
11 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
10 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(F3\FLOW3\AOP\JoinPoint)
9 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
8 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
7 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::initializeSecurity(F3\FLOW3\AOP\JoinPoint)
6 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
5 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
4 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
3 F3\FLOW3\MVC\Web\RequestHandler::handleRequest()
2 F3\FLOW3\Core\Bootstrap::run()
1 require(""/home/foobar/FLOW3-git/FLOW3/Packages/Framework/FLOW3/Scripts/FLOW3.php"")"
12442,TYPO3.Fluid,Feature,"",Resolved,Could have,Provide format.json ViewHelper,Kevin Ulrich Moschallski,"",2012-05-22 20:38,ViewHelpers,1.1,2011-01-21,"","",100,2011-01-21 09:48,"","",2593500,"","","Hi,

i suggest to add type json to the escape viewhelper.

Sometime you want to render json output with fluid and not with an own json view. The problem is that fluid also uses json like syntax, so if you want to add an object to a json string you run into a problem.

Imagine adding a link with the link viewhelper. It returns a sting with double quotes which need to be escaped for json.

I simply added type json to the escape viewhelper which returns the $value json_encode()'ed.

Tell me what you think.

Regards,
Kevin"
12502,TYPO3.Fluid,Feature,"",Resolved,Should have,translate viewhelper should have optional parameter extensionName,Georg Ringer,"",2012-05-07 05:01,ViewHelpers,"",2011-01-24,"","",100,2011-01-24 09:18,"","",2593450,"","","The translate view helper works great bug would be even better if it would be possible to add the extensionName as argument.

examples:
1) Using a standalone view with Tx_Fluid_View_StandaloneView makes it impossible to work with translationViewHelper without duplicating translations

2) using example #1 can sometimes lead to have no extensionName available, therefore no translation can ever happen

3) having many extension in one project but very often the same translations leads to the problem having duplicate keys.

[pending in v4mvc list]"
12612,TYPO3.Flow,Task,Task #11954: Check the current status of i18n / L10n,Resolved,Should have,Create a JavaScript localization provider / caching / service class,Rens Admiraal,Rens Admiraal,2011-12-15 11:37,"",1.0 beta 1,"","",0.00,100,2011-01-28 07:07,"","",75650,0.00,"",""
12777,TYPO3.Fluid,Bug,"",Resolved,Must have,Empty a tag ends with /> instead of </a>,Xavier Perseguers,Sebastian Kurfuerst,2011-05-06 09:35,ViewHelpers,1.0 beta 1,2011-02-04,"","",100,2011-02-04 08:50,"","",2593400,"","","When creating a link with no content, the result tag is

<a href=""http:///""/>

instead of

<a href=""http:///""></a>

or even better (if no url is provided):

<a href=""""></a>"
12862,TYPO3 Flow Base Distribution,Story,"",Resolved,Should have,"As Roger, I want a clean Property Mapper",Sebastian Kurfuerst,Sebastian Kurfuerst,2011-05-06 03:29,"",1.0 beta 1,"","","",67,2011-02-08 03:11,"","",1766250,0.00,"","{{>toc}}

h2. Goal

*The property mapper maps simple types to Objects*. (Hence, we (for now) drop the Object to Object support, although this could be added later)

*The Property Mapper maps all values present in $source to $target (or a subset thereof)* (right now, it requires a list of properties to be mapped, and if $source[$propertyName] does not exist, an error is thrown)

* We try to strip down the Property Mapper, and make it extensible instead.

h2. Wanted Features

* Support for Object Converters:
** array / ArrayObject / SplObjectStorage
** DateTime use case
** File Upload (Resource objects)
* Partial Validation should be supported
* Property Merging should be supported (pass in existing object as base-object)
* Better error handling in case target property is not found (right now, NULL returned)
* Mapping should be configurable
* Secure by default

h2. Basic Interface

<pre><code class=""php"">
map(mixed $source, string $targetType, PropertyMappingConfigurationInterface $propertyMappingConfiguration = NULL)
</code></pre>

* @$source@ can be:
** all simple values (integer, string, ...)
** ARRAY
** an Object implementing @ArrayAccess@
** *We will drop support for arbitary objects through @ObjectAccess::isPropertyGettable@* (for now)
** else EXCEPTION

* @$target@ is the classname on which the value should be mapped to (or a simple type)

Pseudocode:
<pre><code class=""php"">
map(...) {
	if ($propertyMappingConfiguration === NULL) {
		$propertyMappingConfiguration = $this->buildDefaultPropertyMappingConfiguration();
	}
	$propertyMappingConfiguration->setTargetType($targetType); // Just a convenience shorthand method
	$this->doMapping(....);
}

protected function doMapping(mixed $source, $propertyMappingConfiguration) {
	$typeConverter = $this->somehowDetermineTypeConverter(); // TODO, see below
	
	$object = $typeConverter->convertFrom($source, $propertyMappingConfiguration);
	
	foreach ($typeConverter->getPropertyNames($source) as $sourcePropertyName) {
		$targetPropertyName = $propertyMappingConfiguration->getTargetPropertyName($sourcePropertyName);
		if (!$propertyMappingConfiguration->shouldMap($targetPropertyName)) continue;

		$mappedPropertyValue = $this->doMapping($source[$sourcePropertyName], $propertyMappingConfiguration->getConfigurationFor($targetPropertyName));
		
		$typeConverter->setResultInTarget($target, $targetPropertyName, $mappedPropertyValue);
	}
	return $object;
}
</code></pre>

* The property mapper only *delegates* the actual mapping to *Type Converters*.
* Type converters expose the following information:
** Applicable source types
** The target type the converter can convert to
** A priority
* The used type converter is determined as follows:
** If a TypeConverter is set inside the current @propertyMappingConfiguration@, this one is taken.
** Else, we do the following:
<pre><code class=""php"">
$typeConvertersWhichCanHandleSourceType = // first, we pick all TypeConverters
		// which can handle $sourceType, and put it into an
		// associative array where KEY is the target class name of the converter
$classNamesInInheritanceHierarchy = // $targetType combined with all superclasses
		// and interfaces, ordered from the inside out (so the $targetType
		// is the first element in the list)

foreach ($classNamesInInheritanceHierarchy as $singleTargetClassName) {
	if (isset($typeConvertersWhichCanHandleSourceType[$singleTargetClassName])) {
		return the type converter from $typeConvertersWhichCanHandleSourceType[$singleTargetClassName] with highest priority
	}
}
// Exception if no type converter found
</code></pre>

* Type Converters have to adhere to the following interface:
<pre><code class=""php"">
public function convertFrom($source, $propertyMappingConfiguration);
public function getPropertyNames($source);
public function setMappingResultInTarget($target, $propertyName, $mappingResult);
</code></pre>

* In case a type converter does *not* want to handle a certain element (for whatever reason), he can throw an @DontWantToHandleThisInputException@ inside @convertFrom@. Then, the next Type converter according to the above rules is taken.

* Furthermore, the Property Mapper *can handle renaming of properties*, see the method @getTargetPropertyName@ in the @PropertyMappingConfigurationInterface@

h2. PropertyMappingConfiguration

<pre><code class=""php"">
interface PropertyMappingConfigurationInterface {
	
	/**
	 * @return string
	 */
	public function getTargetType();
	
	
	/**
	 * @return TRUE if the given propertyName should be mapped
	 */
	public function shouldMap($propertyName);
	
	/**
	 * @return PropertyMappingConfigurationInterface the property mapping configuration for the given PropertyName.
	 */
	public function getConfigurationFor($propertyName);
	
	/**
	 * @return string property name of target; can be used to rename properties from source to target.
	 */
	public function getTargetPropertyName($sourcePropertyName);
	
	/**
	 * @return mixed configuration value for the specific $typeConverterClassName. Can be used by Type Converters to fetch converter-specific configuration
	 */
	public function getConfigurationValue($typeConverterClassName, $key);
}
</code></pre>

This interface will have an implementing class ""PropertyMappingConfiguration"", looking like the following:

<pre><code class=""php"">
class PropertyMappingConfiguration implements PropertyMappingConfigurationInterface {
	public function setTargetType($type);
	public function setMapping($sourcePropertyName, $targetPropertyName);
	public function setConfigurationValue($typeConverter, $key, $value);
	
	/**
	 * Returns the default configuration for all sub-objects, ready to be modified
	 */
	public function defaultSubConfiguration();
	
	/**
	 * Returns the configuration for the specific property path, ready to be modified
	 */
	public function at($propertyPath);
	
}
</code></pre>

This API can then be used as follows:

* To globally disable the modification of entities by the property mapper:
 <pre><code class=""php"">$propertyMappingConfiguration->setConfigurationValue('F3....\EntityConverter', 'modificationAllowed', FALSE);</code></pre>
* To disable the modification of sub-entities of the root element:
 <pre><code class=""php"">$propertyMappingConfiguration->defaultSubConfiguration()->setConfigurationValue('F3....\EntityConverter', 'modificationAllowed', FALSE);</code></pre>
* To enable the creation of sub-objects inside a certain element:
 <pre><code class=""php"">$propertyMappingConfiguration->at('subobject1.subsubobject2')->setConfigurationValue('F3....\EntityConverter', 'creationAllowed', TRUE);</code></pre>

Furthermore, there will be a subclass @ControllerPropertyMappingConfiguration@, which has some convenience methods implemented such that people can program against a type-safe API:

<pre><code class=""php"">
class ControllerPropertyMappingConfiguration extends PropertyMappingConfiguration {
	public function allowCreationOfSubObjectsAt($position) {
		$this->at($position)->setConfigurationValue('F3....\EntityConverter', 'creationAllowed', TRUE);
	}
	public function allowModificationOfSubObjectsAt($position) {
		$this->at($position)->setConfigurationValue('F3....\EntityConverter', 'modificationAllowed', TRUE);
	}
}
</code></pre>

h2. Default Property Mapping Configuration

* The default property mapping configuration for the *top level* should configure the @Entity Type Converter@ to *modify* and *create new* objects
* The property mapping configuration further down the hierarchy should configure the @Entity Type Converter@ to *not modify* and *not create* objects.
* The above two things are safety precautions for the user.
* This boils down to the following code:

<pre><code class=""php"">
 $propertyMappingConfiguration->setConfigurationValue('F3....\EntityConverter', 'modificationAllowed', TRUE);
 $propertyMappingConfiguration->defaultSubConfiguration()->setConfigurationValue('F3....\EntityConverter', 'modificationAllowed', FALSE);
</code></pre>

h2. Type Converter examples

Here follow some examples of type converters, to see the concept more easily:

h3. Entity Type Converter

* *Input Type*: String and Array
* *Output Type*: Object
* *Priority*: low

<pre><code class=""php"">
public function convertFrom($source, $propertyMappingConfiguration) {
	if (is_string($source)) {
		if (/* is UUID */) {
			// create and return object
		} else {
			// Exception
		}
	}
	
	if (isset($source['__identity'])) {
		$target = // fetch from persistence
		if (count($source) > 1) {
			if ($propertyMappingConfiguration->getConfigurationValue('F3\....\EntityConverter', 'modificationAllowed') !== TRUE) {
				// throw exception
			}
			$target = clone $target;
		}
	} else {
		if ($propertyMappingConfiguration->getConfigurationValue('F3\....\EntityConverter', 'creationAllowed') !== TRUE) {
			// throw exception
		}
		$target = // new
	}
	
	return $target;
}

public function getPropertyNames($source) {
        if (is_string($source)) return array();
        return all $source property names, *except* __identity;
}

public function setMappingResultInTarget($target, $propertyName, $mappingResult) {
        // Set Property through Object Access
}
</code></pre>

h3. Date Type Converter

* *Input Type*: String and Array
* *Output Type*: DateTime
* *Priority*: low

<pre><code class=""php"">
public function convertFrom($source, $propertyMappingConfiguration) {
    new DateTime($source); // or more advanced...
};
public function getPropertyNames() {
    return array();
}
public function setMappingResultInTarget($target, $propertyName, $mappingResult) {
	// empty, as it is never called
}
</code></pre>

h3. SplObjectStorage/ArrayCollection Type Converter

* *Input Type*: Array
* *Output Type*: SplObjectStorage
* *Priority*: low

<pre><code class=""php"">
public function convertFrom($source, $propertyMappingConfiguration) {
    return new \SplObjectStorage();
};
public function getPropertyNames($source) {
    return array_keys($source);
}

public function setMappingResultInTarget($target, $propertyName, $mappingResult) {
    $target->attach($value);
}
</code></pre>

h2. Error Handling

* Instead of outputting human-readable error messages, the property mapper will throw *exceptions* in case of errors. For things like mandatory properties, specific validators should be used.

h2. Validation / Partial Validation

* The property mapper will *not* execute any validators for the given objects.
* However, it should return a list of mapped properties. This list can be used later, such that the ObjectValidator only needs to validate changed properties.

h2. Naming

*Object Converters will be superseded by this concept, and thrown away.*

*We suggest to change the naming in the following way:*

* PropertyMapper -> TypeMapper / ObjectMapper?
* Object Converter -> Type Converter

h2. Further work

* This concept could be extended lateron to work with *arbitrary* input objects, not just simple types. However, one would then need a way to deal with object inheritance hierarchies on the source side as well.
* Extend the concept such that Half-ready objects as $target are also supported; but we would use an explicit new API function for this:
<pre><code class=""php"">
merge(mixed $source, object $targetObject, PropertyMappingConfigurationInterface $propertyMappingConfiguration = NULL)
</code></pre>"
12863,TYPO3.Fluid,Bug,"",New,Should have,Attributes of a viewhelper can't contain a '-',Georg Ringer,Sebastian Kurfuerst,2011-10-21 07:37,Core,"",2011-02-08,"","",0,2011-02-08 03:25,"","",2593350,"",FLOW3 1.0.0,"It seems that a '-' in the key of an attribute destroys everything

example of viewhelper
<pre>
<f:for each=""{wallpapers}"" as=""wallpaper"">
<w:download allow-Upscaling=""1"" src=""uploads/tx_wallpaper/{wallpaper.image}"">1920 x 1200</w:download><br />
</f:for>
</pre>

gives the error
<pre>
Templating tags not properly nested. Expected: Tx_Fluid_ViewHelpers_ForViewHelper; Actual: Tx_Wallpaper_ViewHelpers_DownloadViewHelper
</pre>

2 possible solutions (IMHO):
- Allow the '-'
- Define allowed chars (a-z,0-9) and throw a correct exception"
12917,TYPO3.Flow,Bug,"",Rejected,Must have,Access denied by using the HashService Setter injection,Julian Kleinhans,Robert Lemke,2011-09-09 08:17,Security,1.0 beta 2,2011-02-09,"","",0,2011-02-09 16:43,"","",1810500,"","","[See https://review.typo3.org/#change,699]

If i use the HashService Setter injection in a protected area as a loggedin user i became an ""Access denied""

this is my Policy.yaml

<pre>
resources:
  methods:
    F3_Tutorials_RestrictedAdminArea: 'class(F3\Tutorials\Controller\Admin\.*)'
roles:
  Administrator: []
acls:
  Administrator:
    methods:
      F3_Tutorials_RestrictedAdminArea: GRANT
</pre>

in the Controller\Admin i used a setter injection for the HashService.

<pre>
public function injectHashService(\F3\FLOW3\Security\Cryptography\HashService $hashService) {
  $this->hashService = $hashService;
}
</pre>

and with this method in my code i become the ""Access denied"" page.. my logs:

<pre>
Successfully re-authenticated tokens for account ""test1"" [logged in F3\FLOW3\Security\Aspect\LoggingAspect::logManagerAuthenticate()]

Access denied (0 denied, 0 granted, 1 abstained) to method F3\Tutorials\Controller\Admin\AccountController::injectHashService(). [logged in F3\FLOW3\Security\Aspect\LoggingAspect::logJoinPointAccessDecisions()]
</pre>

if i used the property injection
<pre>

/**
* @inject
* @var \F3\FLOW3\Security\Cryptography\HashService
*/
protected $hashService;
</pre>

it works without problems.. only with the setter injection There is NO other ACL in a policy.yaml"
12953,TYPO3.Kickstart,Bug,"",Closed,Must have,Missing '?>' in 2 Files causes ./flow3 kickstart to crash,Regine Rosewich,Karsten Dambekalns,2011-07-06 10:02,"","",2011-02-10,"","",0,2011-02-10 11:37,"","",2740150,"","","There are two files:
/FLOW3/Packages/Framework/FLOW3/Classes/Resource/Resource.php
/FLOW3/Packages/Framework/Resources/Private/Configuration/Yaml/Loader.php
where the '?>' misses at the end.

This causes either an PHP error saying that a '}' is unnecessary in the specific file or saying that PHP has not enough memory."
12991,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,form.errors ViewHelper should merge property errors,Alexander Stehlik,"",2012-03-12 13:52,ViewHelpers,"",2011-02-11,"","",0,2011-02-11 12:00,"","",78850,"","","At the moment, the form.errors view helper returns, when the first PropertyError with the correct property name was found.

This is not sufficient because someone might add more errors to the errors array for the same property. So if I add a new property error in my validator, it won't get rendered, if the validators defined by @ annotations also added errors for the same property before.

This is what I do in the validator of my domain model:

<pre>
$error = t3lib_div::makeInstance('Tx_Extbase_Validation_PropertyError', 'mypropertyname');
$error->addErrors(array(new Tx_Extbase_Validation_Error('My error message.', 1233456789)));
$this->errors[] = $error;    
</pre>

At first, I reported this as an exbase bug (#9215) but I think this is more a issue of the form.errors view helper.

I'll attached a patch that should fix this issue.

"
12993,TYPO3.Flow,Bug,"",Resolved,Should have,Cache memcache backend: Memcache delete fails,Christian Kuhn,Karsten Dambekalns,2011-03-25 17:00,Cache,1.0 beta 1,2011-02-11,"","",100,2011-02-11 17:32,"","",1810450,"","","The memcache->delete() command fails sometimes, depending on use PHP memcache version. New stable debian squeeze is affected.

TYPO3 v4 committed the fix documented in issue http://bugs.typo3.org/view.php?id=15721 to trunk with revision 10438, this change should be ported to FLOW3."
12994,TYPO3.Flow,Bug,"",Resolved,Should have,Exception message for missing memcache wrong ,Christian Kuhn,Karsten Dambekalns,2011-03-21 07:00,Cache,1.0 beta 1,2011-02-11,"","",100,2011-02-11 17:57,"","",1810400,"","","Problem:
Caching framework memcache backend requires PHP module memcache, but the 
thrown exception nags about memcached (sic!).

Solution:
memcached -> memcache


This was tracked in TYPO3 v4 with http://bugs.typo3.org/view.php?id=16534 and committed to trunk with rev. 10446"
13045,TYPO3.Fluid,Bug,"",New,Should have,Entity decode of strings are different between if-conditions and output of variable,Armin Ruediger Vieweg,"",2011-10-21 07:37,"","",2011-02-15,"","",0,2011-02-14 19:08,"","",2593300,"",FLOW3 1.0.0,"If I assign the following to a variable:
<pre>&lt;ul class=&quot;csc-menu csc-menu-3&quot;&gt;&lt;li class=&quot;csc-section&quot;&gt
</pre>

And want to work with this string in an own viewhelper, I have to html_entity_decode it. If I not do this, the submitted string depends where I call the viewhelper.

-----

*Fluid-Template Example 1:*
<pre>
Cool String: {own:viewhelper subject='{variables}'}
</pre>
My viewhelper gets the subject:<pre>&lt;ul class=&quot; ...""</pre> as expected.

-----

*Fluid-Template Example 2:*
<pre>
<f:if condition=""{own:viewhelper subject='{variables}'}"">
<f:then>
...
</pre>^_Note: My viewhelper counts some html tags in the string and returns an integer._^

The given subject is now: <pre><ul class="" ...</pre>

-----

This is generally no big problem, but it is a little bit inconsistent and not documented.

Kind Regards"
13161,TYPO3 Flow Base Distribution,Task,"Story #12862: As Roger, I want a clean Property Mapper",Resolved,Should have,We also need some better Error / Warning / Notice handling,Sebastian Kurfuerst,"",2011-05-06 02:17,"",1.0 beta 1,"","",0.00,0,2011-02-18 09:29,"","",79900,0.00,"",""
13324,TYPO3.Flow,Bug,"",Resolved,Must have,It's not possible to update entities without repository,Bastian Waidelich,Karsten Dambekalns,2011-09-07 11:03,Persistence,1.0 beta 2,2011-02-24,"","",100,2011-02-24 04:39,"","",1778050,"","","Adding/removing entities to/from a collection of the parent object is possible by using the @attach()@/@detach()@ methods of the @SplObjectStorage@.
But there is no equivalent for *updating* objects yet.

More specific: How could one update a comment of the BlogExample without creating a CommentRepository."
13333,TYPO3.Flow,Bug,"",Resolved,Should have,AOP for methods with references do not work.,Martin Eisengardt,Christian Müller,2012-05-30 15:59,AOP,1.0.5,2011-02-24,"","",100,2011-02-24 09:45,"","",1810350,"",FLOW3 1.0.0,"Tried to log a method call to GenericPod\Backend->storeObject (fourth parameter is a reference to an array)

<pre>
//    
//    /**
//     * logging
//     *
//     * @param \F3\FLOW3\AOP\JoinPointInterface $joinPoint The current join point
//     * @return void
//     * @around method(F3\FLOW3\Persistence\Backend\GenericPdo\Backend->storeObject())
//     */
//    public function logStoreObject(\F3\FLOW3\AOP\JoinPointInterface $joinPoint)
//    {
//        $object = $joinPoint->getMethodArgument('object');
//        $id = $joinPoint->getMethodArgument('identifier');
//        $parent = $joinPoint->getMethodArgument('parentIdentifier');
//        $data = $joinPoint->getMethodArgument('objectData');
//        
//        $this->logger->log('GenericPDOBackend->storeObject(['.get_class($object).'], '.$id.', '.$parent.', ...)');
//        
//        $result = $joinPoint->getAdviceChain()->proceed($joinPoint);
//        return $result;
//    }
</pre>


error/exception:
</pre>
Warning: Parameter 4 to F3\FLOW3\Persistence\Backend\GenericPdo\Backend_AOPProxy_Development::storeObject() expected to be a reference, value given in </pre>
"
13342,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,f:form.checkbox does only render hidden input for first item of same name,martin no-lastname-given,Bastian Waidelich,2012-06-18 11:38,ViewHelpers,"",2011-02-24,"","",100,2011-02-24 12:46,"","",81500,"","",If you attempt to have multiple forms on the same page with inputs that have the same name-attr (i.e. multiple forms for items of the same type) the viewhelper will only render a hidden input for the first item. This means that only the first form will work as expected whereas all subsequent forms will have limited functionality.
13503,TYPO3 Flow Base Distribution,Task,Story #11948: Security Framework improvements,Resolved,Should have,Write policies for TYPO3 package,Robert Lemke,Andreas Förthner,2011-05-06 03:53,"",1.0 beta 1,"","","",0,2011-03-02 04:11,"","",82700,"","",""
13559,TYPO3.Flow,Bug,"",Accepted,Should have,ObjectSerializer failes with persistent objects within arrays,Martin Eisengardt,Karsten Dambekalns,2012-11-08 03:39,Persistence,"",2011-03-02,"","",0,2011-03-02 13:10,"","",1778000,"",FLOW3 1.0.0,"If a persistent object is contained in an array property, the serialization failes. It won't detect the object as persistent but will persist it as if it was a simple data object. This will be broken as soon as the session is resumed/ the object serializer is unserializing this data stream.

The reason is that persistent object detection is only present in method serializeObjectAsPropertyArray. Method buildStorageArrayForArrayProperty only contains a small is_object that won't respect the persistence:
<pre>
if (is_object($value)) {
				$storableArray[$key][self::TYPE] = 'object';
				$storableArray[$key][self::VALUE] = spl_object_hash($value);

				$this->serializeObjectAsPropertyArray($value, FALSE);
			}
</pre>"
13576,TYPO3.Flow,Bug,"",Resolved,Must have,AOP is not initialized during __wakeup(),Karsten Dambekalns,Robert Lemke,2011-03-03 09:57,AOP,1.0 beta 1,2011-03-03,"","",100,2011-03-03 05:39,"","",1810300,"","","Doctrine uses the unserialize trick combined with the prototype pattern, i.e. they store the unserialized object and clone it when needed again. During that clone, upon calling __clone(), the following notice is causing an exception:
<pre>Notice: Undefined index: __clone in ...Blog.php</pre>
Backtrace attached as PDF."
13604,TYPO3 Flow Base Distribution,Task,Story #11169: Implement new operator support,Resolved,Should have,Fix bugs and adjust affected code,Robert Lemke,Robert Lemke,2011-05-06 02:12,"",1.0 beta 1,"","",0.00,0,2011-03-04 03:42,"","",84100,0.00,"",""
13634,TYPO3.Flow,Bug,"",Closed,Must have,Wrong SQL statement in \F3\Persistence\Backend\GenericPdo\Backend.php,Regine Rosewich,Karsten Dambekalns,2011-03-28 11:07,Persistence,"",2011-03-04,"","",0,2011-03-04 18:04,"","",1777950,"","","Hi guys,

upon testing the blog example, I found a wrong SQL-statement generated in the above mentioned class. 


@			/**
			$sql['tables'][] = '""entities"" AS ""_entity"", ""properties_data"" AS ""d""';
			*/
			$sql['tables'][] = '""properties_data"" AS ""d"", ""entities"" AS ""_entity""';@

The commented line contains the wrong code throwing a SQL-Error. 

Hope it helps.

Regine"
13643,TYPO3.Fluid,Feature,"",Resolved,Should have,Create Command for XSD Schema generation,Jascha Dachtera,Bastian Waidelich,2012-05-08 08:38,Command,1.1,2011-03-05,"","",100,2011-03-05 11:00,"","",2593250,"","","Hello,

the Xsd Generation for Fluid ViewHelper Tags doesn't work (since quite some time I think). I created a patch to fix it. However I still don't know how to use it for autocompletion in Eclipse.

This is my first patch so I hope it's created correctly. :)

Greetings, Jascha"
13694,TYPO3.Flow,Task,"",Resolved,Should have,Provide good naming conventions for directories in Resources/,Robert Lemke,Bastian Waidelich,2013-01-11 13:36,- Documentation -,2.0,"","","",100,2011-03-08 09:30,"","",85200,"","","Currently we only have a limited set of naming suggestions for directories below ""Resources"". The current approach for Fluid templates (...../Templates/ControllerName/action.html) will clash with what we might want for TYPO3 Fluid templates (ie. page templates, templates for TypoScript objects etc.), so just using ""Templates"" is not good enough.

Anyway, we need some good defaults which cover a broad range of uses for storing templates but also related media."
13702,TYPO3 Flow Base Distribution,Task,Story #11169: Implement new operator support,Resolved,Should have,Replace remaining uses of objectManager->create() with new and adjust tests accordingly,Robert Lemke,"",2011-05-06 02:12,"",1.0 beta 1,"","","",0,2011-03-09 03:27,"","",85450,"","",""
13703,TYPO3 Flow Base Distribution,Task,Story #11169: Implement new operator support,Resolved,Should have,Fix file monitoring / optimize compile step,Robert Lemke,Robert Lemke,2011-05-06 02:12,"",1.0 beta 1,"","","",0,2011-03-09 03:28,"","",85500,"","",""
13796,TYPO3.Flow,Bug,"",Closed,Should have,"PHP Parse error:  syntax error, unexpected $end	",Regine Rosewich,"",2011-03-17 08:16,"","",2011-03-12,"","",0,2011-03-11 18:12,"","",1777900,"","","When trying to kickstart a new Application from the command-line, I get the following Error:

<pre>
PHP Parse error:  syntax error, unexpected $end in /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/FLOW3_Object_Classes/F3_FLOW3_Validation_ValidatorResolver_Original.php on line 415
</pre>

The mentioned file is, according to the eclipse-Editor, perfectly ok. So it seems almost impossible for me to track the problem."
13890,TYPO3.Flow,Bug,"",Closed,Must have,The compile run failed due to an exception while sending the HTTP request,Julian Kleinhans,Robert Lemke,2011-03-31 15:40,Core,1.0 beta 1,2011-03-17,"","",0,2011-03-17 16:51,"","",1810250,"","","This error comes with a http authorization (htaccess)

file_get_contents(http://domain.de/?FLOW3_BOOTSTRAP_ACTION=compile&FLOW3_BOOTSTRAP_COMPILYKEY=abc123)
Failed to open stream: HTTP request failed! HTTP/1.1. 401 Authorization Required in ...Bootstrap.php line 350

"
13891,TYPO3.Flow,Bug,"",Resolved,Should have,F3\FLOW3\Error\Exception thrown in file ErrorHandler.php,Daniel Poetzinger,Bastian Waidelich,2011-04-01 08:47,- Error Handler Report -,1.0 beta 1,2011-03-17,"","",100,2011-03-17 18:56,"","",1810200,"","","Notice: Undefined index: FLOW3_BOOTSTRAP_COMPILEKEY in /opt/local/apache2/htdocs/Conference/Packages/Framework/FLOW3/Classes/Core/Bootstrap.php line 298
4 F3\FLOW3\Error\ErrorHandler::handleError(8, ""Undefined index: FLOW3_BOOTSTRAP_COMPILEKEY"", ""/opt/local/apache2/htdocs/Conference/Packages/Framework/FLOW3/Classes/Core/Bootstrap.php"", 298, array)
3 F3\FLOW3\Core\Bootstrap::executeCompileSubrequestIfTriggered()
2 F3\FLOW3\Core\Bootstrap::run()
1 require(""/opt/local/apache2/htdocs/Conference/Packages/Framework/FLOW3/Scripts/FLOW3.php"")

Please include more helpful information!"
13906,TYPO3.Fluid,Bug,"",Closed,Should have,"No way to set ""ATagParams""",Daniel Poetzinger,Bastian Waidelich,2011-03-18 11:22,ViewHelpers,"",2011-03-18,"","",0,2011-03-18 10:33,"","",2593200,"","","All linkViewHelpers need a way to set a classname

http://git.typo3.org/TYPO3v4/CoreProjects/MVC/fluid.git?a=blob;f=Classes/ViewHelpers/Link/PageViewHelper.php;h=fe2c9a4762c95dfa802caf6fadb7cce06c14c8a6;hb=HEAD


"
13942,TYPO3 Flow Base Distribution,Task,"Story #12862: As Roger, I want a clean Property Mapper",Resolved,Should have,Restructured Property Mapper,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-05-06 02:17,"",1.0 beta 1,"","","",0,2011-03-21 06:14,"","",88150,"","",""
13943,TYPO3 Flow Base Distribution,Task,"Story #12862: As Roger, I want a clean Property Mapper",Resolved,Should have,Restructured MVC Error Handling ,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-05-06 02:17,"",1.0 beta 1,"","","",0,2011-03-21 06:14,"","",88200,"","",""
13973,TYPO3.Flow,Task,"",Resolved,Should have,Possible table name clash with Doctrine,Karsten Dambekalns,Karsten Dambekalns,2011-04-26 18:30,Persistence,1.0 beta 1,2011-03-22,"","",100,2011-03-22 11:31,"","",88500,"","","When having two entities with the same unqualified classname, they both end up with the same table name by default (ie. Blog\Domain\Model\Post vs. Forum\Domain\Model\Post)."
13974,TYPO3.Flow,Bug,"",Resolved,Should have,Tables are dropped after deactivating a package,Karsten Dambekalns,Karsten Dambekalns,2011-05-09 04:54,Persistence,1.0 beta 1,2011-03-22,"","",100,2011-03-22 11:32,"","",1777850,"","","When a package is deactivated, the way we use the SchemaManager of Doctrine drops related tables. This might be unexpected and unintentional for people..."
13977,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Document incompatibility of Apache's MulitViews and the resource rewrite rule,Andreas Förthner,Karsten Dambekalns,2011-08-24 04:14,- Documentation -,1.0 beta 1,2011-03-22,"","",100,2011-03-22 12:55,"","",88550,"","","The rewrite rule in the .htaccess file used to access the published resources is not compatible with enabled MultiViews in the Apache VHost. This should be documented in the installation instructions for FLOW3.

MultiViews have to be turned off!"
13979,TYPO3.Flow,Bug,"",Resolved,Could have,Problem with deleting package,Dawid ,Karsten Dambekalns,2011-04-11 06:00,Package,1.0 beta 1,2011-03-22,"","",100,2011-03-22 13:54,"","",1810150,"","","Looks like there is some kind of problem with recursive deleting files.

After typing ./flow3 package delete Packagekey i receive

Uncaught Exception in FLOW3 #1: Warning: rmdir(/var/www/flow/public/Packages/Application/Offices/Resources/Private/Templates/Office): Directory not empty in /var/www/flow/public/Packages/Framework/FLOW3/Classes/Utility/Files.php line 140
thrown in file Packages/Framework/FLOW3/Classes/Error/ErrorHandler.php
in line 82

Offices is my test package key.
It looks like it is tring to use rm with out -R parameter"
14017,TYPO3.Fluid,Bug,"",Resolved,Must have,Widgets are not compatible with Doctrine persistance,Peter Beernink,Karsten Dambekalns,2011-03-25 01:30,Widgets,1.0 beta 1,2011-03-24,"","",100,2011-03-24 04:07,"","",2604350,"","","Both the pagination and autocomplete are currently not compatible with the Doctrine persistance layer.

For example, when assigning a result from a repository to the objects attribute of the pagination widget, the following exception is thrown:
<pre>
PaginateViewHelper_Original::render() must be an instance of F3\FLOW3\Persistence\QueryResult, instance of F3\FLOW3\Persistence\Doctrine\QueryResult given
</pre>

I've only tested this with the pagination widget, but as both have the same annotation for $objects, I suspect that also the autocomplete is suffering from this issue.

"
14037,TYPO3.Flow,Feature,"",Resolved,Should have,Translation files (XLIFF) must be possible per package,Karsten Dambekalns,Karsten Dambekalns,2011-12-21 06:37,I18n,1.1 beta 1,2011-03-24,"","",100,2011-03-24 17:05,"","",1810100,"","","Currently the XliffTranslationProvider uses a hardcoded base path to look for XLIFF files of @resource://FLOW3/Private/Locale/Translations/@.

But it is necessary to have translations in each package, as it does not make sense to have labels for the Blog package in the FLOW3 package.

Also the TranslateViewHelper needs to offer the use of labels from different packages  - e.g. to use labels from the Blog by default but fetch labels for the login screen from a shared file in the FLOW3 package."
25448,TYPO3.Flow,Bug,"",Closed,Must have,Use of undefined constant 'X' during prototype injection,Karsten Dambekalns,Robert Lemke,2011-04-12 06:17,Object,"",2011-03-30,"","",0,2011-03-30 03:26,"","",1777800,"","","When a prototype is needed for DI but has constructor arguments (that can be created through a factory), everything could be fine. But since ProxyClassBuilder, line 398, contains only unfinished code, the proxy class contains code like
<pre>	/**
	 * Autogenerated Proxy Method
	 */
	public function FLOW3_Proxy_injectProperties() {
		$this->mailer = new \F3\SwiftMailer\Mailer(X));
	}</pre>
This then leads to exceptions in FLOW3 because PHP produces a notice: @Use of undefined constant X - assumed 'X' in .../Data/Temporary/902451e70049/StaticObjectContainer.php line ...@

One way to reproduce this is to try and use SwiftMailer."
25472,TYPO3.Flow,Bug,"",Resolved,Should have,Files::emptyDirectoryRecursively() cannot remove directories starting with a dot,Karsten Dambekalns,Karsten Dambekalns,2011-04-07 03:00,Utility,1.0 beta 1,2011-03-30,"","",100,2011-03-30 09:32,"","",1810050,"","","If a directory is to be emptied and it contains more directories whose name starts with a dot, those directories will not be removed."
25490,TYPO3.Fluid,Feature,"",Resolved,Should have,pagination is fairly simple and not usable in bigger projects,Georg Ringer,Bastian Waidelich,2011-04-02 05:00,Widgets,"",2011-03-31,"","",100,2011-03-31 07:13,"","",2593100,"","","The pagination widget is fairly simple and not usable in bigger projects with more than 50 records. The reason is that it just renders all links which are needed. So if there are 1000 records and 10 per page, this results in 100 links on the page.

Therefore it is needed to be able to skip the rendering of links at some point and implement something like:
< | 1 | 2 | 3 | [...] | 190 | 191 | 192.

Additionally the pagination uses some hardcoded labels which could be fixed with the same patch."
25605,TYPO3.Flow,Task,"",Resolved,Should have,In the FLOW3 Bootstrap in handleCommandLineSlaveRequest() persistAll() should be triggered by a signal slot,Andreas Förthner,Karsten Dambekalns,2011-05-18 02:35,Core,1.0 beta 1,2011-03-31,"","",100,2011-03-31 15:41,"","",91300,"","",See the Fixme in the code on line 289.
25607,TYPO3.Flow,Bug,"",Resolved,Should have,Reflection Service does not save emerged class reflections,Robert Lemke,Robert Lemke,2011-04-01 08:30,Core,1.0 beta 1,2011-03-31,"","",100,2011-03-31 16:00,"","",1810000,"","","Because the Reflection Service was not correctly connected to the bootstrap shutdown emerged classes (which were not automatically
registered during compile time) were not saved into the cache and therefore reflected again on every run."
25608,TYPO3.Flow,Bug,"",Resolved,Must have,Adjust functional tests to new proxy class mechanism,Andreas Förthner,Andreas Förthner,2011-04-01 15:17,- Testing -,1.0 beta 1,2011-03-31,"","",0,2011-03-31 16:07,"","",1809950,"","",Functional tests don't work anymore with the new bootstrap and proxy class mechanism.
25609,TYPO3.Flow,Bug,"",Resolved,Should have,Router should skip routes if the target controller does not exist,Bastian Waidelich,Bastian Waidelich,2011-04-19 12:30,MVC - Routing,"",2011-04-01,"","",100,2011-03-31 19:13,"","",1777750,"","","The Router should check if the Controller exists. If not, the route should be skipped when resolving route values.
Furthermore, if no route matches, an exception should be thrown."
25694,TYPO3.Flow,Bug,"",Closed,Should have,Multiple annotations with the same name are not supported by the reflection service,Andreas Förthner,"",2011-09-30 06:22,Reflection,1.0.0,2011-04-01,"","",0,2011-04-01 05:02,"","",1809900,"","","As the returned $tags array is indexed by the annotation name, e.g. two @validate annotations will override eachother."
25695,TYPO3.Fluid,Bug,"",Closed,Must have,Template of widgets can't be changed,Georg Ringer,Christian Müller,2012-09-20 04:58,Widgets,"",2011-04-01,"","",20,2011-04-01 05:19,"","",2593050,"",FLOW3 1.0.0,"Currently the widgets use the default template path only and it is impossible to override those which is kind of a nogo.

Attached patch fixes this. The path can be set via TS. e.g. 

<pre>
plugin.tx_fo.view.widgetRootPath = fileadmin/fo/
</pre>
If using the pagination widget, the index.html needs to be at fileadmin/fo/ViewHelpers/Widget/Paginate/Index.html

One open question: Is this the correct way to go with the part ""ViewHelpers"" inside this path? or should it be fileadmin/fo/Paginate/Index.html?"
25701,TYPO3.Flow,Bug,"",Closed,Should have,Various injection errors in FLOW3,Karsten Dambekalns,"",2011-06-20 04:57,Object,1.0 beta 1,2011-04-01,"","",40,2011-04-01 07:38,"","",1777700,"","","I see these with everything on master as of right now and clean caches:
* Could not autowire property F3\FLOW3\AOP\Builder\ProxyClassBuilder::emptyConstructorInterceptorBuilder because the method parameter in injectEmptyConstructorInterceptorBuilder() contained no class type hint.
* Could not autowire property F3\FLOW3\Command\CoreCommandController::signalSlotDispatcher because injectSignalSlotDispatcher() expects none instead of exactly 1 parameter.

The @EmptyConstructorInterceptorBuilder@ that is to be injectd in the first case does not exist anymore. But @injectSignalSlotDispatcher()@ *has* one parameter.

Is that a known issue?"
25714,TYPO3.Flow,Task,"",Resolved,Should have,Include Randomizer Library as external component,Andreas Förthner,Andreas Förthner,2011-11-04 13:06,Security,"",2011-04-01,"","",100,2011-04-01 12:07,"","",91600,"","",""
25776,TYPO3.Flow,Bug,"",Resolved,Should have,Doctrine proxy class files can't be overwritten by other SAPI type,Robert Lemke,Karsten Dambekalns,2011-04-13 05:00,Persistence,1.0 beta 1,2011-04-05,"","",100,2011-04-05 12:12,"","",1809850,"","","When you run FLOW3 with empty caches for example from the command line, Doctrine proxy classes will be created. However, these files can't be overwritten or trashed by FLOW3 when it's running in web mode because the files are created with read-only permissions for the group. The same happens vice versa (first hit with Web).

The solution would be to create Doctrine proxy files with @-rw-rw-r--@ permissions."
25790,TYPO3.Flow,Bug,"",Closed,Should have,newest Index of FLOW3 throws error,Regine Rosewich,Karsten Dambekalns,2011-06-20 19:17,Error,"",2011-04-06,"","",0,2011-04-06 07:48,"","",1777650,"","","After having updated FLOW3 to the newest Index. I get odd errors when trying to start the FLOW3-Welcome Package
<pre>
Uncaught Exception in FLOW3 #1297263663: Could not load object configuration from cache. This might be due to an unsuccessful compile run. One reason might be, that your PHP binary is not located in ""/Applications/MAMP/bin/php5.3/bin/php"". In that case, set the correct path to the PHP executable in Configuration/Settings.yaml, setting FLOW3.core.phpBinaryPathAndFilename.
thrown in file Packages/Framework/FLOW3/Classes/Core/Bootstrap.php
in line 369
</pre>

The php binary is exactly at the location, the error message says. So this obviously is not the reason for the error. Concerning the unsuccessful compile, I threw away ../FLOW3/Data to force FLOW3 to do a completely new compile ==> same error.

Then I tried to compile from the command-line and got the following error (consider the Way the firs 'FLOW3' is written in the first line, whereas the Folder in the Folder Structure of my MAC is written 'FLOW3')
<pre>
FLOW3: Invalid root path. (Error #1248964375)
""/Applications/MAMP/htdocs/Flow3/Packages/Framework/FLOW3/"" does not lead to
""/Applications/MAMP/htdocs/FLOW3/Packages/Framework/FLOW3/""
</pre>

This error got away when setting the FLOW3_ROOTPATH Environment Variable explicitly to the wanted writing form. But then the error mentionned first was thrown again. 

So as far as I can see, the caching mecanism has a problem. But which one?"
25801,TYPO3.Flow,Bug,"",Resolved,Should have,Request arguments should never contain objects,Bastian Waidelich,Bastian Waidelich,2013-10-23 05:37,MVC,"",2011-04-06,"","",100,2011-04-06 11:05,"","",1777600,"",(any),"Request arguments are serialized in Fluid forms in order to generate the hidden referrer fields that are required to ""replay"" the last request in case of an validation error. If a request argument is a complex type, the value of the @__referrer[arguments]@ hidden field gets huge which poses 3 major issues:
# you'll have to transfer a lot of unnecessary data
# the URI for redirects will grow to a point where the browser dies
# if an object is not serializable, you get serialization errors

Thus RoutePartHandler must not return objects. Instead they should return simple types/arrays understandable by the PropertyMapper (or a dedicated ObjectConverter)

*Discuss:* Should this be enforced in the routing process?"
25802,TYPO3.Flow,Task,"",Resolved,Should have,"Add notion of ""internal request arguments""",Bastian Waidelich,Sebastian Kurfuerst,2011-05-18 06:15,MVC,1.0 beta 1,2011-04-06,"","",100,2011-04-06 11:08,"","",92000,"","","The referrer fields that Fluid adds to all forms currently end up in the target request and thus in the form action of the next form.
Request arguments that start with two underscores should be ""framework internal"".
@Request::getArguments()@ should only return arguments that do *not* start with two underscores and we should add a non-API method -@Request::getReferrer()@- @Request::getReferringRequest()@ that would build a request object on the fly."
25804,TYPO3.Flow,Bug,"",Rejected,Must have,Distribution Base Package is not downloadable,Regine Rosewich,Bastian Waidelich,2011-04-08 05:14,"","",2011-04-06,"","",0,2011-04-06 11:10,"","",1777550,"","","The git-repository http://git.typo3.org/FLOW3/Distributions/Base.git is not clonable. The command
<pre>
git clone --recursive http://git.typo3.org/FLOW3/Distributions/Base.git 
</pre>

fails with the error:
<pre>
warning: remote HEAD refers to nonexistent ref, unable to checkout
</pre>
"
25816,TYPO3.Flow,Bug,"",Resolved,Must have,Improve error handling for invalid types,Robert Lemke,Robert Lemke,2011-09-09 08:21,Utility,1.0 beta 2,2011-04-07,"","",100,2011-04-07 02:50,"","",1809800,"","","After introducing the Utility\TypeHandling functions, an InvalidArgumentException is thrown if some @var annotation uses a wrong type (and certainly also if invalid types are used elsewhere). However, the exception doesn't (and can't) give any hint where the invalid type was declared.

We have two options to improve this:

1) let the TypeHandling functions return FALSE if the type could not be parsed and throw a proper exception in the calling method
2) let the calling method catch the TypeHandling exceptions and rethrow a better exception

I'm all for solution 1)"
25851,TYPO3.Flow,Bug,"",Resolved,Should have,"Methods whose name contain ""protected""  can't be adviced",Robert Lemke,Robert Lemke,2011-04-11 12:30,AOP,1.0 beta 1,2011-04-08,"","",100,2011-04-08 05:17,"","",1809750,"","","Due to a bug in the pointcut expression parser, methods which contain the string ""public"" or ""protected"" in their name cannot be adviced or trigger a Syntax Error exception in the parser."
25853,TYPO3.Flow,Bug,"",Resolved,Must have,Functional tests for persistence are broken,Karsten Dambekalns,Karsten Dambekalns,2011-04-12 09:30,- Testing -,1.0 beta 1,2011-04-08,"","",100,2011-04-08 06:42,"","",1809700,"","","When a database is configured globally it is used instead of the database configured in the FLOW3 package for Testing context.

If that is changed (by adding global configuration for Testing), the tests still fail due to tons of crap."
25858,TYPO3.Flow,Bug,"",Resolved,Should have,General global settings override local context settings,Karsten Dambekalns,Karsten Dambekalns,2011-04-11 06:00,Configuration,1.0 beta 1,2011-04-08,"","",100,2011-04-08 11:23,"","",1809650,"","","When evaluating the configuration of settings in FLOW3 the settings should be evaluated in the following order, later entries overriding previous ones:
# local settings
# global settings
# local context settings
# global context settings

Currently it is like this, though:
# local settings
# local context settings
# global settings
# global context settings

(local means per package, global means, erm, global)

One effect is that the persistence configuration for the Testing context is overwritten by the generic global configuration, which potentially breaks tests and dumps your data..."
25859,TYPO3.Flow,Bug,"",Resolved,Must have,CSRF protection does not work for methods that contain upper case characters,Bastian Waidelich,Andreas Förthner,2011-04-14 11:30,Security,"",2011-04-08,"","",100,2011-04-08 11:37,"","",1777500,"","","I'm trying to protect all methods of certain controllers with following policy rule:
<pre>
resources:
  methods:
    F3_BccVoting_RestrictedControllers: 'class(F3\BccVoting\Controller\(Circular|Elector|Electorate)Controller)'
</pre>

For some reason the @FLOW3-CSRF-TOKEN@ is not attached to links pointing to @F3\BccVoting\Controller\Elector::deleteAll()@. When clicking the link, the ""You are not allowed to perform this action."" exception though.

The problem is probably, that the policy service does not detect the method in the CsrfProtectionAspect because it is lowercased somewhere."
25874,TYPO3.Flow,Bug,"",Resolved,Should have,Security Randomizer produces a Warning on Windows if openssl_* is not available,Bastian Waidelich,Andreas Förthner,2011-04-14 09:00,Security,"",2011-04-11,"","",100,2011-04-11 04:27,"","",1777450,"","","In line 166ff of the Security_Randomizer script we're currently using to create the CSRF tokens a random string is generated with following command:
<pre>
$fp = @fopen('/dev/urandom', 'rb')
</pre>
Despite of the Error Control Operator a warning is produced that leads to an exception in Development mode.
We should check the OS here or try the windows commands first.."
25880,TYPO3.Flow,Bug,"",Resolved,Must have,Increase minimum PHP version,Bastian Waidelich,Bastian Waidelich,2011-04-12 06:30,Core,"",2011-04-11,"","",100,2011-04-11 06:04,"","",1777400,"","","Currently the @MINIMUM_PHP_VERSION@ is set to '5.3.0RC2-dev' in the Bootstrap.
But we're calling @\ReflectionMethod::setAccessible()@ in several places, which is only available with since PHP 5.3.2."
25881,TYPO3.Flow,Bug,"",Resolved,Must have,Inherited methods cannot be adviced,Robert Lemke,Robert Lemke,2011-04-12 05:30,AOP,1.0 beta 1,2011-04-11,"","",100,2011-04-11 06:04,"","",1809600,"","",Due to a bug in the AOP Proxy Class Builder methods of the target class which have been inherited from a parent class but haven't been overridden by the target class are not adviced. The problem is cause by using get_class_methods() instead of the corresponding ReflectionClass method. get_class_methods() only returns the names of methods which are declared directly in the given class while $class->getMethods() also returns those methods which were declared in a parent class.
25882,TYPO3.Flow,Feature,"",Resolved,Should have,Dedicated query log,Robert Lemke,Karsten Dambekalns,2011-05-03 11:30,Persistence,1.0 beta 1,2011-04-11,"","",100,2011-04-11 06:11,"","",1809550,"","","For debugging purposes it would be helpful to log queries executed by Doctrine into a dedicated log (""Query_Development.log"" for example). Like the other logs this should be configurable through settings."
25886,TYPO3.Flow,Task,"",Resolved,Should have,Clean up Request hierarchy and fix type hints,Karsten Dambekalns,Karsten Dambekalns,2011-07-20 03:39,MVC,1.0 beta 1,2011-04-11,"","",100,2011-04-11 07:36,"","",92450,"","","Currently we a hierarchy around RequestInterface like this:
<pre>RequestInterface
  + Request
  |   + Web\Request
  |       + Web\SubRequest
  + CLI\Request</pre>

This could be simplified by getting rid of @Request@ and combining it into @Web\Request@.

Another issue are type hints. Some places say they return @RequestInterface@ (e.g. the @ControllerContext@). This potentially leads to trouble, if one assumes @Request@ is returned, as that has some methods not defined in @RequestInterface@."
25902,TYPO3.Flow,Bug,"",Resolved,Must have,It's not possible to add an entity as link/redirect argument,Bastian Waidelich,Karsten Dambekalns,2011-05-02 15:00,Persistence,1.0 beta 1,2011-04-12,"","",100,2011-04-12 04:03,"","",1809500,"","","It's very common to redirect to a details view after creating an entity:
<pre>
<code class=""php"">
public function createAction(Foo $foo) {
	$this->fooRepository->add($foo);
	$this->redirect('show', NULL, NULL, array('foo' => $foo))
}
</code>
</pre>

But that won't work because the entity is not (yet) known to the Persistence Manager, which is asked for the identity of the object in the Route in order to convert Objects to Identity arrays:
<pre>
...
<code class=""php"">
if (is_object($routeValue)) {
	$uuid = $this->persistenceManager->getIdentifierByObject($routeValue);
</code>
...
</pre>"
25906,TYPO3.Flow,Bug,"",Resolved,Must have,Injection with settings use breaks,Karsten Dambekalns,Karsten Dambekalns,2011-05-05 11:35,Object,1.0 beta 1,2011-04-12,"","",100,2011-04-12 05:28,"","",1809450,"","","If configuring injection in @Objects.yaml@ and making use of settings for a factory there the generated proxy is broken, because it assumes @$this->settings@ exists.

It should use the static object container to fetch settings instead."
25907,TYPO3.Flow,Task,"",New,Should have,Referrer should only contain the URI of the previous request,Bastian Waidelich,"",2011-04-12 06:00,MVC,"",2011-04-12,"","",0,2011-04-12 06:00,"","",92500,"","","Currently we store all the referrer parts (package, subpackage, controller, action & arguments) of the original request (and it's parent request if it is a sub request) in the hidden referrer fields of each Fluid form.
This is quite expensive and fails for arguments that are not serializable. The latter should be fixed with #25801, but it would be nicer to simply store the (relative?) referrer URI in a hidden field.
It is needed only in case of a validation error and in that case the Router could be used to get package & co from the referrer URI.

*NOTE:* POST arguments will be lost (a POST request to an edit form e.g.)"
25908,TYPO3.Flow,Bug,"",Resolved,Must have,ProxyClassBuilder produces invalid code for prototype arguments,Bastian Waidelich,Robert Lemke,2011-05-03 11:00,Object,"",2011-04-12,"","",100,2011-04-12 06:13,"","",1777350,"","","When using SwiftMailer the ProxyClassBuilder creates following code in @F3_SwiftMailer_Message.php@:
<pre>
<code class=""php"">
private function FLOW3_Proxy_injectProperties() {
	$this->mailer = new \F3\SwiftMailer\Mailer(X);
}
</code>
</pre>

This obviously leads to an exception here.
I got this fixed by changing line 99 of the ProxyClassBuilder from
<pre>
<code class=""php"">
$preparedArguments[] = 'X';
</code>
</pre>
to
<pre>
<code class=""php"">
$preparedArguments[] = '\F3\FLOW3\Core\Bootstrap::$staticObjectManager->get(\'' . $argumentValue . '\')';
</code>
</pre>

Additionally I needed to add following lines to the beginning of the @ObjectManager::create()@ method:
<pre>
<code class=""php"">
if (isset($this->objects[$objectName]['f'])) {
	return $this->buildObjectByFactory($objectName);
}
</code>
</pre>

Not sure, if that is a clean solution, but it seems to fix the issue for me.
"
25922,TYPO3.Flow,Bug,"",Closed,Should have,Proxy classes have to be regenerated when the Objects.yaml has changed,Andreas Förthner,"",2012-04-25 05:59,Object,"",2011-04-12,"","",0,2011-04-12 11:00,"","",1777300,"",FLOW3 1.0.0,Otherwise we might end up in proxies that don't reflect the dependencies configured in the Objects.yaml.
25923,TYPO3.Flow,Task,"",Resolved,Should have,Clean up session files in compile run,Robert Lemke,Christian Müller,2012-05-08 20:39,Session,1.1 beta 1,2011-04-12,"","",100,2011-04-12 11:31,"","",92600,"","","During the compile run, certain / most caches are rebuilt. If an account is currently logged in, it won't be able to access restricted resources after a compile run because the session cookie doesn't have corresponding information in FLOW3 anymore. In this case the user will experience an Access Denied exception (not a nice experience).

If the PHP session data would be trashed during the compile run, the user would get a fresh session cookie on the next hit and instead of the Access Denied would be redirected to an authentication entry point due to a AuthenticationRequiredException."
25961,TYPO3.Flow,Bug,"",Resolved,Should have,HTML should be escaped in the pre output of DebugExceptionHandler,Aske Ertmann,Christian Müller,2012-05-31 08:01,Error,1.0.5,2011-04-14,"","",0,2011-04-14 07:47,"","",1777250,"",FLOW3 1.0.0,"I noticed this today when doing some debugging. Seems the html outputted in the pre tags isn't escaped..

<pre>
<pre>00173:    echo '<html><body><textarea>' . $response . '</textarea></body></html>';
00174:   } else {

</pre>
</pre>"
25965,TYPO3.Flow,Bug,"",Resolved,Must have,"AOP ProxyClassBuilder always detects an aspect as ""changed"" if no Dependency Injection is used in this aspect (f.e. in LazyLoadingObjectAspect)",Sebastian Kurfuerst,Karsten Dambekalns,2011-04-19 05:32,AOP,1.0 beta 1,2011-04-14,"","",100,2011-04-14 10:39,"","",1809400,"","","h2. Problem

If there is an aspect A, which does not need dependency injection, and *another* class C is modified, the ProxyClassBuilder is incorrectly assuming that Aspect A has changed, and triggers a full rebuild of *all* AOP target classes.

From method build() in Aop/Builder/ProxyClassBuilder:
<code class=""php"">
$rebuildEverything = FALSE;
		foreach (array_keys($this->aspectContainers) as $aspectClassName) {
			if ($this->compiler->hasCacheEntryForClass($aspectClassName) === FALSE) {
				$rebuildEverything = TRUE;
				$this->systemLogger->log(sprintf('Aspect %s has been modified, therefore rebuilding all target classes.', $aspectClassName), LOG_INFO);
				break;
			}
		}
</code>

for aspects which do not need Dependency Injection, ""hasCacheEntryForClass"" is always FALSE. This becomes clear when looking into the Object\Proxy\Compiler:
There, the cache is only written for classes where a proxy is needed.

h2. Hotfix

It can be solved by adding empty Dependency Injection (though this is no real solution)... I am not sure how to solve this in a clean way, that's why I first wanted to document it here."
25966,TYPO3.Flow,Bug,"",Resolved,Must have,ResourcePointer breaks if you upload the same file twice,Andreas Förthner,Sebastian Kurfuerst,2011-05-20 03:35,Persistence,1.0 beta 1,2011-04-14,"","",100,2011-04-14 11:08,"","",1809350,"","","As ResourcePointer is no valueobject (for doctrine) anymore, the resource manager creates a second one for the same file, if you upload it twice. Now the sha1 hash is the identifier of the ResourcePointer, and therefore we get a duplicate entry error from the database as we have twice the ""same"" object."
25988,TYPO3.Flow,Bug,"",New,Should have,Useless proxies are built for some classes,Karsten Dambekalns,"",2011-10-21 07:20,Object,"",2011-04-15,"","",0,2011-04-15 09:15,"","",1777200,"",FLOW3 1.0.0,"Consider the proxies for the Package classes, they contain no code except for some checks on constructor arguments. In fact, they are only built at all because of that checking code.

The attached patch fixes this, but can probably be optimized (do we ever need the check)?"
26078,TYPO3.Flow,Task,"",Resolved,Should have,Enforce RouteParts to only return simple types,Bastian Waidelich,Bastian Waidelich,2011-04-20 10:00,MVC - Routing,"",2011-04-18,"","",100,2011-04-18 04:31,"","",93050,"","","After calling @Route::matches()@, @Route::getMatchResults()@ must not contain objects. See #25801 for reasoning.
Additionally we should enforce that @Route::getMatchingUri()@ always returns a string."
26107,TYPO3.Flow,Bug,"",Resolved,Must have,Proxy class builder rebuild classes without AOP on every change,Christopher Hlubek,Christopher Hlubek,2011-05-05 07:00,"","",2011-04-19,"","",100,2011-04-19 05:30,"","",1777150,"","","Since classes that don't get a proxy class (if they don't use DI or AOP) are not put inside the cache, the build method of the ProxyClassBuilder will not find a cache entry inside the classes cache (hasCacheEntryForClass is always false).

So one change of a file still means a lot of time to go through each of these classes and not building an AOP proxy for them on the next run.

One possibility would be to also cache classes without proxy code (means duplication) or to store information somewhere inside the object configuration cache (means some effort to keep it in sync if the class eventually introduces DI or AOP)."
26128,TYPO3.Flow,Bug,"",Resolved,Should have,Doctrine persistence manager compilation should be configurable,Christopher Hlubek,Karsten Dambekalns,2011-05-24 05:35,Persistence,"",2011-04-19,"","",100,2011-04-19 10:11,"","",1777100,"","","The compile method of the Doctrine persistence manager is currently hard-coded inside the FLOW3 Metapackage:

<pre>
class Package extends BasePackage {

	/**
	 * Invokes custom PHP code directly after the package manager has been initialized.
	 *
	 * @param \F3\FLOW3\Core\Bootstrap $bootstrap The current bootstrap
	 * @return void
	 */
	public function boot(\F3\FLOW3\Core\Bootstrap $bootstrap) {
		require_once(__DIR__ . '/../Resources/PHP/AutoLoader.php');

		$bootstrap->registerCompiletimeCommandController('flow3:object');
		$bootstrap->registerCompiletimeCommandController('flow3:core');
		$bootstrap->registerCompiletimeCommandController('flow3:cache');

		$dispatcher = $bootstrap->getSignalSlotDispatcher();
		$dispatcher->connect('F3\FLOW3\Core\Bootstrap', 'finishedRuntimeRun', 'F3\FLOW3\Persistence\PersistenceManagerInterface', 'persistAll');
		$dispatcher->connect('F3\FLOW3\Core\Bootstrap', 'bootstrapShuttingDown', 'F3\FLOW3\Configuration\ConfigurationManager', 'shutdown');
		$dispatcher->connect('F3\FLOW3\Core\Bootstrap', 'bootstrapShuttingDown', 'F3\FLOW3\Object\ObjectManagerInterface', 'shutdown');
		$dispatcher->connect('F3\FLOW3\Core\Bootstrap', 'bootstrapShuttingDown', 'F3\FLOW3\Reflection\ReflectionService', 'saveToCache');

		$dispatcher->connect('F3\FLOW3\Command\CoreCommandController', 'finishedCompileCommand', 'F3\FLOW3\Persistence\Doctrine\PersistenceManager', 'compile');
	}
}
</pre>

If an alternative (generic) persistence is used, there is no need for the compile call, especially since Doctrine puts restrictions on the model.

There should be some kind of configuration option to prevent the Doctrine compilation."
26129,TYPO3.Flow,Task,"",Closed,Should have,Establish simple conventions for qualified and unqualified class names,Robert Lemke,"",2011-09-30 06:21,"",1.0.0,2011-04-19,"","",0,2011-04-19 10:15,"","",93100,"","",Refactor code and update documentation so that fully qualified class names with a leading backslash are allowed (and suggested) everywhere possible.
26132,TYPO3.Flow,Feature,"",Closed,Should have,FloatToFloatConverter missing in F3\Property\TypeConverter,Regine Rosewich,"",2012-03-14 09:19,"","",2011-04-19,"","",0,2011-04-19 11:53,"","",1777050,"","","When trying to updat a table row with float values using the ExtDirect Interface FLOW3 throws an error:
<pre>
Exception while property mapping at property path ""gewicht"":No converter found which can be used to convert from ""float"" to ""float""
</pre>

Copying the existing IntegerToIntegerConverter Class to a FloatToFloatConverter Class and changing this Class correspondingly solves the problem. "
26159,TYPO3.Flow,Bug,"",Resolved,Must have,PersistenceMagicAspect doesn't set unique identifier for value objects,Christopher Hlubek,Christopher Hlubek,2011-05-04 04:00,Persistence,1.0 beta 1,2011-04-20,"","",100,2011-04-20 14:07,"","",1809300,"","","In change _Ia8a607386d69b00183f4b20acd2823296a7cfdff_ the pointcut for the value hash generation was changed to @before@. With the current way of getting properties from the object, every value object gets the same identity. The aspect should consider the method arguments to calculate the value hash."
26196,TYPO3.Flow,Bug,"",Closed,Should have,Doctrine2: Object of class F3\FLOW3\Resource\Resource could not be converted to string,Julian Kleinhans,Karsten Dambekalns,2011-04-28 04:14,Persistence,"",2011-04-23,"","",0,2011-04-23 05:48,"","",1777000,"","","Since Doctrine2 integration i had the following error if i will store a Resource

<pre>
#1: Catchable Fatal Error: Object of class F3\FLOW3\Resource\Resource could not be converted to string in /FLOW3/Packages/Framework/FLOW3/Resources/PHP/Doctrine/DBAL/Statement.php line 98 (More information)
</pre>

For example:
<pre>
$flagResource = $this->resourceManager->importResource('resource://Tutorials/Public/Images/Icons/Germany.png');

$languageModel = $this->objectManager->create('F3\Tutorials\Domain\Model\Language');
$languageModel->setName('German');
$languageModel->setOriginalResource($flagResource);
$this->languageRepository->add($languageModel);
</pre>


Its strange, because F3\FLOW3\Resource\Resource is an entity and not an valueobject thats need a _toString method

"
26358,TYPO3.Flow,Feature,"",Resolved,Must have,Initialize sessions only when necessary,Robert Lemke,Robert Lemke,2011-10-19 19:37,Session,1.0.0,2011-04-27,"","",100,2011-04-27 09:05,"","",1809250,"","","As soon as a session is initialized, a cookie is sent to the browser and therefore making client- or proxy-side caching impossible / hard. We therefore should only initialize a session when really needed, for example after authentication or when objects in a session scope exist."
26365,TYPO3.Flow,Bug,"",Resolved,Should have,Importing resources causes integrity constraint violation: 1062 Duplicate entry,Julian Kleinhans,Sebastian Kurfuerst,2011-05-24 09:35,Resource,1.0 beta 1,2011-04-27,"","",100,2011-04-27 15:55,"","",1776950,"","","Example

<pre>
$flagResource = $this->resourceManager->importResource('resource://Tutorials/Public/Images/Icons/Germany.png');
$languageModel = $this->objectManager->create('F3\Tutorials\Domain\Model\Language');
$languageModel->setName('German');
$languageModel->setImage($flagResource);
$this->languageRepository->add($languageModel);
</pre>

and than

<pre>
  $this->languageRepository->removeAll();
</pre>

Problem:
the hash in the flow3_resource_resourcepointer doesnt delete

if i add the language again

<pre>
$flagResource = $this->resourceManager->importResource('resource://Tutorials/Public/Images/Icons/Germany.png');
$languageModel = $this->objectManager->create('F3\Tutorials\Domain\Model\Language');
$languageModel->setName('German');
$languageModel->setImage($flagResource);
$this->languageRepository->add($languageModel);
</pre>

an uncaught exception throws

<pre>
#23000: SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '3bed18a6e887a13c69c7f17ef7a00bfaead3ba8d' for key 'PRIMARY'
</pre>


This is the model
<pre>
/**
 * A tutorial language
 *
 * @package Tutorials
 * @subpackage Domain/Model
 * @scope prototype
 * @entity
 */
class Language {

	/**
	 * @var string
	 * @validate Alphanumeric, StringLength(minimum = 1, maximum = 20)
	 */
	protected $name;

	/**
	 * @var \F3\FLOW3\Resource\Resource
	 * @ManyToOne(cascade={""all""})
	 * validate NotEmpty
	 */
	protected $image;

	/**
	 * Sets the languages name
	 *
	 * @param string $name
	 * @return void
	 */
	public function setName($name) {
		$this->name = $name;
	}
	
	/**
	 * Returns the languages name
	 *
	 * @return string
	 */
	public function getName() {
		return $this->name;
	}

	/**
	 * Sets the original resource
	 *
	 * @param \F3\FLOW3\Resource\Resource $originalResource
	 * @return void
	 */
	public function setImage(\F3\FLOW3\Resource\Resource $image) {
		$this->image = $image;
	}

	/**
	 * Returns the original resource
	 *
	 * @return \F3\FLOW3\Resource\Resource $image
	 */
	public function getImage() {
		return $this->image;
	}
	
}
</pre>"
26394,TYPO3.Fluid,Bug,"",Rejected,Must have,Form Viewhelper does not work with html5 custom data attributes,martin no-lastname-given,"",2011-10-03 04:26,ViewHelpers,"",2011-04-28,"","",0,2011-04-28 04:58,"","",97950,"","","@<f:form.textbox property=""name"" data-anything=""some info"" />@

Will produce no output at all. 

It would be great if fluid's tag-processing was more liberal and transparent in general. Maybe switch to DOM instead of the custom implementation?"
26411,TYPO3.Flow,Feature,"",Closed,Must have,More meaningful exception on DB errors,Karsten Dambekalns,Karsten Dambekalns,2011-05-31 03:59,Persistence,1.0 beta 1,2011-04-28,"","",0,2011-04-28 09:32,"","",98500,"","","In case of a wrong Database Connection specification (wrong host, wrong socket, credentials, database not existing, ...) the user should get meaningful exception messages. 

Bug auction task won by T3N."
26481,TYPO3.Fluid,Bug,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,hidden fields should be rendered in extra section,Sven-S. Porst,Bastian Waidelich,2012-06-18 11:38,ViewHelpers,1.1 RC1,2011-04-29,"","",100,2011-04-29 03:33,"","",101550,"",Git master,"The form.checkbox view helper works in an unexpected way because it creates two, rather than one <input> elements.

This is a problem when using markup like

<pre>
<label>
  <f:form.checkbox ...>
  Checkbox name
</label>
</pre>

as one ends up having two <input>s inside the <label> which is invalid HTML. One has to make the effort to create id and for attributes for both tags to get things working correctly. This could be simpler.

In the long term it may be worth considering to add explicit support for <label> tags to the form field view helpers, to encourage label usage by offering straightforward support for it from the templating engine.

*UPDATE:* The solution would be to render the ""automatically generated"" hidden fields for checkboxes and select dropdowns in the hidden fields section at the beginning of a form"
26482,TYPO3.Flow,Bug,"",Resolved,Should have,Must specify table name with unique constraints and indexes with Doctrine 2,Regine Rosewich,Karsten Dambekalns,2011-05-04 11:00,Persistence,1.0 beta 1,2011-04-29,"","",100,2011-04-29 03:40,"","",101600,"","","If a unique-constraint or an additional index is needed for a table/object, the Doctrine 2 ORM has the possiblity to do this with a special annotation in the head of the class as shown in the following example:
<pre>
@table(uniqueConstraints={@UniqueConstraint(name=""klasse_unique"",columns={""klasse""})})
</pre>
If the full table name is not given in the annotation, like in the example above, the Doctrine 2 ORM generates a table which has exactly the name of the class. This collides with the new table-naming schema which normally names table like <package>_<subfolder of Domain\Model folder - if existing>_<classname>.

If you fully qualify the @table annotation like shown below it works fine.
<pre>
@table(name=""welupdm_stammdaten_klasse"", uniqueConstraints={@UniqueConstraint(name=""klasse_unique"",columns={""klasse""})})
</pre>

It should not be necessary to furnish the fully qualified table-name unless explicitly wanted or needed."
26493,TYPO3.Flow,Bug,"",Resolved,Must have,Repository::countAll() does not return integers,Bastian Waidelich,Karsten Dambekalns,2011-05-04 16:30,Persistence,1.0 beta 1,2011-04-29,"","",100,2011-04-29 06:53,"","",102150,"","",RepositoryInterface::countAll() should return integers. But apparently the doctrine integration does not cast the return type thus <pre>$repository->countAll() === 1</pre> will never be TRUE.
26531,TYPO3.Welcome,Bug,"",Resolved,Should have,Welcome package has fatal errors in link generation,Christian Jul Jensen,Christian Jul Jensen,2011-05-20 14:34,"","",2011-05-01,"","",100,2011-05-01 05:11,"","",104000,"","","It seems that FLOW3 now actually checks the presence of the package/controller/actions that links are generated for.

There are 2 links in the welcome package which are for non-existing combinations resulting in a fatal erros when trying to run the FLOW3 distribution for the first time."
26532,TYPO3.Welcome,Task,"",Resolved,Should have,Text in welcome package is outdated,Christian Jul Jensen,Robert Lemke,2011-07-06 06:32,"",1.0 beta 1,2011-05-01,"","",100,2011-05-01 05:12,"","",104050,"","","The instructional text in the welcome package is no longer valid, since the commandline tool has changed format."
26533,TYPO3.Kickstart,Bug,"",Resolved,Should have,Actions are not callable with new CLI controller,Christian Jul Jensen,Christopher Hlubek,2011-07-06 10:14,"",1.0 beta 1,2011-05-01,"","",100,2011-05-01 05:57,"","",104100,"","","The kickstarter is not usable with the new CLI script.

The actions needs to be changed to commands."
26542,TYPO3.Flow,Bug,"",Resolved,Must have,Autoincrement unique identifiers not working anymore,Martin Brüggemann,Karsten Dambekalns,2011-05-17 15:51,Persistence,1.0 beta 1,2011-05-01,"","",100,2011-05-01 17:15,"","",104550,"","","I used the @Id and @GeneratedValue properties as seen in the blog example package to have short urls with integer identifiers like /ticket/234 instead of FLOW3 standard resource identifiers. Unfortunately it dosn't work with relations.

<pre>
Uncaught Exception in FLOW3 Column name `flow3_persistence_identifier` referenced for relation from F3\Guruhelp\Domain\Model\Message towards F3\Guruhelp\Domain\Model\Ticket does not exist. thrown in file Packages/Framework/FLOW3/Resources/PHP/Doctrine/ORM/Tools/SchemaTool.php in line 485
</pre> 

This is an example model

<pre>
<?php
declare(ENCODING = 'utf-8');
namespace F3\Guruhelp\Domain\Model;

/**
 * @scope prototype
 * @entity
 */
class Ticket {

    /**
     * @identity
     * This ID is only for the ORM.
     *
     * @var integer
     * @Id
     * @GeneratedValue
     */
     protected $id;

[...]
   
    /**
     * @var \F3\Guruhelp\Domain\Model\Project
     * @ManyToOne(inversedBy=""tickets"")
     */
     protected $project;
 
[...]
}
</pre>"
26560,TYPO3.Flow,Feature,"",Resolved,Should have,Use reverse index for AOP matching,Christopher Hlubek,"",2012-03-14 09:46,AOP,"",2011-05-02,"","",0,2011-05-02 10:51,"","",105400,"","","The AOP matching done inside the ProxyClassBuilder is very slow. It doesn't scales well, because the complexity is tied by the number of pointcuts * methods (over all proxyable classes).

Since this number could get very large and the matching is a costly operataion, we should use a reverse index to get only the interesting pointcuts for a given target class.

Most pointcuts like @method(F3\FLOW3\MVC\Web\Routing\Router->resolve())@ could be easily indexed by using the class name and method name as the keys. Also the class and method tags could be used in an index. The setting pointcut filter could be evaluated and skipped. Since we have the 

This could greatly reduce the number of pointcut matchings done for each method."
26565,TYPO3.Flow,Bug,"",Resolved,Must have,Wrong doc comment in proxy class breaks ReflectionService->getMethodTagsValues,Christopher Hlubek,Christopher Hlubek,2011-05-04 11:30,"","",2011-05-02,"","",100,2011-05-02 11:55,"","",105650,"","",The method ReflectionService->getMethodTagsValues does a MethodReflection on the given class. But the new proxy mechanism generates a wrong method doc comment (tag values in one line).
26582,TYPO3.Flow,Bug,"",Rejected,Must have,Repository remove() throws error even if __identity is furnished,Regine Rosewich,Karsten Dambekalns,2011-10-20 09:13,Persistence,1.0.0,2011-05-03,"","",0,2011-05-03 07:24,"","",106500,"","","The attempt to remove an object from the repository throws an error even if the __identity (flow3_persistence_identifier) is furnished. If the object to remove is explicitly
searched with a query before removing it, the remove() works. Maybe the object-constellation causes the error as the 'complete' object consist of an abstract-object and the real-object joined with @InheritanceType(""JOINED"").

The error-message is as follows:
<pre>
A detached entity can not be removed. #0 /Applications/MAMP/htdocs/FLOW3/Packages/Framework/FLOW3/Resources/PHP/Doctrine/ORM/UnitOfWork.php(1264): Doctrine\ORM\UnitOfWork->doRemove(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse), Array)
#1 /Applications/MAMP/htdocs/FLOW3/Packages/Framework/FLOW3/Resources/PHP/Doctrine/ORM/EntityManager.php(472): Doctrine\ORM\UnitOfWork->remove(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse))
#2 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Persistence_Doctrine_PersistenceManager_Original.php(147): Doctrine\ORM\EntityManager->remove(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse))
#3 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Persistence_Doctrine_Repository_Original.php(100): F3\FLOW3\Persistence\Doctrine\PersistenceManager_Original->remove(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse))
#4 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_WeluPdm_Service_ExtDirect_V1_Controller_Stammdaten_KlassifizierungController_Original.php(200): F3\FLOW3\Persistence\Doctrine\Repository_Original->remove(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse))
#5 [internal function]: F3\WeluPdm\Service\ExtDirect\V1\Controller\Stammdaten\KlassifizierungController_Original->removeKlasseAction(Object(F3\WeluPdm\Domain\Model\Stammdaten\Klasse))
#6 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Controller_ActionController_Original.php(283): call_user_func_array(Array, Array)
#7 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Controller_ActionController_Original.php(183): F3\FLOW3\MVC\Controller\ActionController_Original->callActionMethod()
#8 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Dispatcher_Original.php(106): F3\FLOW3\MVC\Controller\ActionController_Original->processRequest(Object(F3\FLOW3\MVC\Web\Request), Object(F3\ExtJS\ExtDirect\TransactionResponse))
#9 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Dispatcher.php(101): F3\FLOW3\MVC\Dispatcher_Original->dispatch(Object(F3\FLOW3\MVC\Web\Request), Object(F3\ExtJS\ExtDirect\TransactionResponse))
#10 [internal function]: F3\FLOW3\MVC\Dispatcher->dispatch(Object(F3\FLOW3\MVC\Web\Request), Object(F3\ExtJS\ExtDirect\TransactionResponse))
#11 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Dispatcher.php(89): call_user_func_array(Array, Array)
#12 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AdviceChain_Original.php(74): F3\FLOW3\MVC\Dispatcher->FLOW3_AOP_Proxy_invokeJoinPoint(Object(F3\FLOW3\AOP\JoinPoint))
#13 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Security_Aspect_RequestDispatchingAspect_Original.php(131): F3\FLOW3\AOP\Advice\AdviceChain_Original->proceed(Object(F3\FLOW3\AOP\JoinPoint))
#14 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AroundAdvice_Original.php(48): F3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original->setAccessDeniedResponseHeader(Object(F3\FLOW3\AOP\JoinPoint))
#15 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AdviceChain_Original.php(72): F3\FLOW3\AOP\Advice\AroundAdvice_Original->invoke(Object(F3\FLOW3\AOP\JoinPoint))
#16 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Security_Aspect_RequestDispatchingAspect_Original.php(92): F3\FLOW3\AOP\Advice\AdviceChain_Original->proceed(Object(F3\FLOW3\AOP\JoinPoint))
#17 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AroundAdvice_Original.php(48): F3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original->blockIllegalRequestsAndForwardToAuthenticationEntryPoints(Object(F3\FLOW3\AOP\JoinPoint))
#18 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AdviceChain_Original.php(72): F3\FLOW3\AOP\Advice\AroundAdvice_Original->invoke(Object(F3\FLOW3\AOP\JoinPoint))
#19 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Security_Aspect_RequestDispatchingAspect_Original.php(75): F3\FLOW3\AOP\Advice\AdviceChain_Original->proceed(Object(F3\FLOW3\AOP\JoinPoint))
#20 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AroundAdvice_Original.php(48): F3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original->initializeSecurity(Object(F3\FLOW3\AOP\JoinPoint))
#21 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_AOP_Advice_AdviceChain_Original.php(72): F3\FLOW3\AOP\Advice\AroundAdvice_Original->invoke(Object(F3\FLOW3\AOP\JoinPoint))
#22 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Dispatcher.php(115): F3\FLOW3\AOP\Advice\AdviceChain_Original->proceed(Object(F3\FLOW3\AOP\JoinPoint))
#23 /Applications/MAMP/htdocs/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_ExtJS_ExtDirect_RequestHandler_Original.php(115): F3\FLOW3\MVC\Dispatcher->dispatch(Object(F3\FLOW3\MVC\Web\Request), Object(F3\ExtJS\ExtDirect\TransactionResponse))
#24 /Applications/MAMP/htdocs/FLOW3/Packages/Framework/FLOW3/Classes/Core/Bootstrap.php(320): F3\ExtJS\ExtDirect\RequestHandler_Original->handleRequest()
#25 /Applications/MAMP/htdocs/FLOW3/Packages/Framework/FLOW3/Classes/Core/Bootstrap.php(174): F3\FLOW3\Core\Bootstrap->handleWebRequest()
#26 /Applications/MAMP/htdocs/FLOW3/Web/index.php(38): F3\FLOW3\Core\Bootstrap->run()
#27 {main}
</pre> "
26658,TYPO3.Fluid,Task,Task #26664: Clean up Form ViewHelpers,New,Won't have this time,Make Form ViewHelpers consistent,Sebastian Kurfuerst,"",2012-06-20 05:37,ViewHelpers,"",2009-12-05,"","",75,2011-05-06 04:03,"","",109950,0.00,"",... should be done on T3DD
26662,TYPO3.Flow,Task,"",Resolved,Must have,Fix and cleanup UriBuilder,Bastian Waidelich,Bastian Waidelich,2011-05-10 05:35,MVC - Routing,"",2011-05-06,"","",100,2011-05-06 04:58,"","",110150,"","","Currently the UriBuilder does not reliably support SubRequests and it has some flaws, that should be fixed.
Some facts:

    * *setRequest()* resets the UriBuilder ($this->reset()) - _correct_

    * *setRequest()* expects an \F3\FLOW3\MVC\RequestInterface - _should be \F3\FLOW3\MVC\Web\Request !?_

    * *setArguments()* prefixes specified arguments, if argumentPrefix is not empty - _incorrect, setArguments should be a simple setter for $this->arguments_

    * *getArgments()* returns all arguments, including non-prefixed - _correct, if setter is fixed_

    * *setFormat()* stores the specified format string lower cased - _probably ok_

    * *setArgumentPrefix()* (non-api) ""Specifies the prefix to be used for all arguments."" - _should be -renamed to setControllerArgumentPrefix()- removed. Prefix comes from Request::getArgumentNamespace()_

    * *reset()* sets argument prefix and all arguments of the parent request if $this->request is a SubRequest - _incorrect. reset(9 should completely reset the UriBuilder (except for the request). parent request arguments should be added in build()_

    * *uriFor()* modifies $this->arguments - _incorrect, modified arguments should be passed to build() as method arguments_


"
26664,TYPO3.Fluid,Task,"",New,Won't have this time,Clean up Form ViewHelpers,Sebastian Kurfuerst,"",2012-06-20 05:37,ViewHelpers,"",2009-12-05,"","",75,2011-05-06 05:04,"","",110200,0.00,"",""
26665,TYPO3.Fluid,Feature,"",Resolved,Should have,Fluid: Implement String comparison,Sebastian Kurfuerst,"",2013-05-15 10:41,"","",2010-03-10,"","",100,2011-05-06 05:13,"","",1765700,0.00,"",""
26669,TYPO3.Flow,Feature,"",Resolved,Must have,Routing should support multidimensional arguments,Bastian Waidelich,Bastian Waidelich,2011-05-17 04:05,MVC - Routing,"",2011-05-06,"","",100,2011-05-06 05:43,"","",110400,"","","In order to create URIs for plugins and other sub requests (e.g. widgets) the routing needs to support default values of type array. Additionally the UriPattern must support the ""Fluid dot syntax"".

An example for such a route:
<pre>
<code class=""yaml"">
-
  name:          'Frontend content with plugin parameters and (HTML) format'
  uriPattern:    '{node}/conference/{f3_conference_typoscript_plugin.@action}.html'
  defaults:
    '@package':    'TYPO3'
    '@controller': 'Frontend\Node'
    '@format':     'html'
    '@action':     'show'
    'f3_conference_typoscript_plugin':
      '@package':    'Conference'
      '@controller': 'Account\Login'
  routeParts:
    node:
      handler:    F3\TYPO3\Routing\FrontendNodeRoutePartHandler
</code>
</pre>"
26687,TYPO3.Flow,Bug,"",Resolved,Must have,UTF-8 support is broken,Martin Brüggemann,Karsten Dambekalns,2011-05-12 04:35,Persistence,1.0 beta 1,2011-05-06,"","",100,2011-05-06 16:32,"","",111300,"","","I just saved some FLOW3 objects with german umlauts and it seems that there's a ""SET NAMES UTF-8"" or some Doctrine2 UTF-8 connection setting missing. Also all autogenerated MySQL tables have latin1_swedish_ci collation. Should be easy to fix this.

These are my connection settings in Settings.yaml

<pre>
FLOW3:
  persistence:
    backendOptions:
      driver: pdo_mysql
      host: 127.0.0.1
      port: 3306
      dbname: guruhelp_local
      user: root
      password: dasistnureinhohlespasswortdaskeinerkennt
      path: guruhelp
</pre>

"
26688,TYPO3.Flow,Feature,"",Closed,Should have,Magic Object Routes,Martin Brüggemann,Bastian Waidelich,2011-05-07 01:59,MVC - Routing,"",2011-05-06,"","",0,2011-05-06 16:48,"","",111350,"","","I'm dreaming of having a more intuitive way of defining default object-controller routes like this:

<pre>
-
  name: 'Ticket'
  uriPattern: 'tickets/{ticket}(.{@format})'
  defaults:
    @package:    Guruhelp
    @controller: Ticket
    @action:     show
    @format:     html
  routeParts:
    ticket:
      handler: F3\Guruhelp\Routing\TicketRoutePartHandler
</pre>

Should look like this:

<pre>
-
  name: 'Ticket'
  uriPattern: 'tickets/{ticket}(.{@format})'
  defaults:
    @package:    Guruhelp
    @controller: Ticket
    @action:     show
    @format:     html
</pre>

And the route configuration should autodetect what identifier to use (uuid or autoincrement integer values, depending on the model-aspect-definition) for resolving the object. Routes like tickets/9fadfc1e-c268-40f1-8190-547448d0d4b8.xml should work ""out-of-the-box"".

Today I have to use such an ugly route:

<pre>
-
  name: 'Ticket detail'
  uriPattern: 'tickets/show(.{@format})'
  defaults:
    @package:    Guruhelp
    @controller: Ticket
    @action:     show
    @format:     html
</pre>

..that resolves in something like this: tickets/show?ticket[__identity]=5f1e5e06-2430-45be-addf-4b5236d27229
"
26692,TYPO3.Fluid,Feature,"",Rejected,Must have,String comparison support for f:if,Martin Brüggemann,Bastian Waidelich,2011-05-24 05:42,ViewHelpers,"",2011-05-07,"","",0,2011-05-07 16:14,"","",111550,"","","I think it's really necessary that <f:if> fully supports simple string comparisons like this:

<pre>
<f:if condition=""{object.type} == 'cat'"">
  <p>I am a cat.</p>
</f:if>
</pre>

Today every string comparison has to be workarounded by setting additional boolean view-variables at the controller.

<pre>
<f:if condition=""{isCat}"">
  <p>I am a cat.</p>
</f:if>
</pre>
"
26745,TYPO3.Flow,Feature,"",New,Should have,MVC should know about entities lying in the session,Andreas Förthner,"",2012-07-10 06:14,MVC,"",2011-05-11,"","",100,2011-05-11 04:37,"","",114200,"","","If you want to prepare/edit/create an entity over some steps before you want persist it in the database, you will put it somewhere in the session. So far so good. As soon as you have an entity lying in the session and want to forward or redirect it to another action the persistence manager will be asked to return the identifier, to encode and decode the object to/from its identity array. As the entity is not yet added to a repository, the persistence manager will return FALSE and the forward/redirect breakes.

We should enable the persistence manager to know about every entity in the session and look at them before asking the underlying persistence layer (e.g. doctrine)."
26765,TYPO3.Flow,Feature,"",Accepted,Should have,Support class schema features for every reflected class,Christopher Hlubek,Karsten Dambekalns,2013-02-14 14:47,Reflection,"",2011-05-11,"","",0,2011-05-11 11:59,"","",115150,"","","Some features of the reflection in FLOW3 are only available through the class schema, e.g.:

* Property types
* Check if a property is an array or multi-valued

The problem is, that the class schema is only generated for entities or value objects. There should be some kind of general class schema for non-persistent classes or reflection service methods to get this information."
26767,TYPO3.Flow,Feature,"",New,Should have,Reflection method to get a method return type and documentation,Christopher Hlubek,"",2011-08-29 15:45,Reflection,"",2011-05-11,"","",0,2011-05-11 12:04,"","",115250,"","","Some use cases like the WSDL export in the SOAP package need more information about classes and methods than the reflection service currently supports. It is possible to get method parameters with type and options for example, but not the method return type.

There should be methods in the reflection service to get the method return type or the documentation of the return annotation."
26783,TYPO3.Flow,Feature,"",Rejected,Could have,Support settings via OS Environment,Robert Lemke,Christian Müller,2012-10-10 05:04,Configuration,2.0 beta 1,2011-05-12,"","",0,2011-05-12 09:52,"","",115950,"","","For sensitive data or other purposes it would be nice to support altering settings by some environment variables.

Example:

(YAML):
FLOW3:
  persistence:
    backendOptions:
      password: 'mypassword'

(.htaccess):

SetEnv FLOW3_FLOW3_PERSISTENCE_BACKENDOPTIONS_PASSWORD ""mypassword""
"
26785,TYPO3.Flow,Feature,"",Resolved,Should have,Doctrine Query Execution Commands,Robert Lemke,Karsten Dambekalns,2011-06-01 05:35,Persistence,1.0 beta 1,2011-05-12,"","",100,2011-05-12 10:00,"","",116050,"","","For the command line in general, but especially for the interactive shell, it would be nice to be able to execute arbitrary DQL / SQL queries and see the raw / polished output."
26786,TYPO3 Flow Base Distribution,Feature,"",Resolved,Must have,Use a safe password hashing mechanism,Christopher Hlubek,Christopher Hlubek,2011-07-18 06:05,"",1.0 beta 1,2011-05-12,"","",100,2011-05-12 10:36,"","",116100,"","","The current AccountFactory uses the @generateSaltedMd5@ method of the @HashService@. Since MD5 is considered to be not safe, we should switch to either sha1 or another method for password hashing (e.g. also use an hmac)."
26843,TYPO3.Fluid,Feature,"",Resolved,Should have,Padding Type in ViewHelper,Lars Malach,Bastian Waidelich,2011-09-13 03:45,ViewHelpers,"",2011-05-17,"","",100,2011-05-16 18:05,"","",118850,"","","Add the padding type as possible parameters to the PaddingViewHelper.

Of Example:
<pre><code class=""php"">
class Tx_Fluid_ViewHelpers_Format_PaddingViewHelper extends Tx_Fluid_Core_ViewHelper_AbstractViewHelper {
	/**
	 * Pad a string to a certain length with another string
	 *
	 * @param integer $padLength Length of the resulting string. If the value of pad_length is negative or less than the length of the input string, no padding takes place.
	 * @param string $padString The padding string
	 * @param string $padType Append the padding at this site (Possible values: right,left,both. Default: right)
	 * @return string The formatted value
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @api
	 */
	public function render($padLength, $padString = ' ', $padType = 'right') {
		$string = $this->renderChildren();

		$padTypes = array(
			'left' => STR_PAD_LEFT,
			'right' => STR_PAD_RIGHT,
			'both' => STR_PAD_BOTH,
		);
		if (!isset($padTypes[$padType])) {
			$padType = 'right';
		}

		return str_pad($string, $padLength, $padString, $padTypes[$padType]);
	}
}
</code></pre>"
26844,TYPO3.Fluid,Bug,"",Resolved,Should have,Wrong PaddingViewHelper description,Lars Malach,Bastian Waidelich,2011-09-13 03:45,ViewHelpers,"",2011-05-17,"","",100,2011-05-16 18:08,"","",118900,"","","File: PaddingViewHelper.php, Line: 49
(Just a copy of the PrintfViewHelper description)
<pre>
Format the arguments with the given printf format string.
</pre>

Could be:
<pre>
Pad a string to a certain length with another string
</pre>"
26862,TYPO3.Flow,Bug,"",Resolved,Must have,Doctrine\Query is not serializable,Sebastian Kurfuerst,Karsten Dambekalns,2011-06-07 13:35,Persistence,1.0 beta 1,2011-05-17,2011-05-18,"",100,2011-05-17 09:51,"","",119800,"","","For widgets, it is crucial that Query objects are serializable and deserializeable,
so one should be able to do:

 $newQuery = deserialize(serialize($query))
 $newQuery->execute() (or something else)

Maybe a functional test for this would be nice?

One thing I already discovered further is that the properties in QueryResult should be *protected*, not *private*.

Greets,
Sebastian"
26879,TYPO3.Flow,Bug,"",Resolved,Should have,Clone of lazy objects in generic persistence does not initialize the cloned object,Christopher Hlubek,Christopher Hlubek,2011-05-23 08:05,Persistence,"",2011-05-18,"","",100,2011-05-18 11:16,"","",120600,"","","With the LazyLoadingAspect on the @__clone@ method, the object in @thawProperties@ closure references still the original object after a clone. As a result, the cloned object is not initialized but marked as dirty and the persistence state is inconsistent.

As a workaround, the actual proxy in the aspect should be passed to the closure to fix the wrong reference in the case of a clone."
26880,TYPO3.Flow,Bug,"",Resolved,Must have,shutdownObject is not called anymore,Andreas Förthner,Andreas Förthner,2011-05-24 09:37,Object,1.0 beta 1,2011-05-18,"","",0,2011-05-18 11:31,"","",120650,"","","Since the new operator rewrite, shutdownObject is not called anymore, because the registration of shutdown objects got list. This has to be reintegrated into the proxy compilation."
26885,TYPO3.Flow,Bug,"",Resolved,Should have,It's not possible to order by relation properties,Bastian Waidelich,Karsten Dambekalns,2011-12-24 08:14,Persistence,"",2011-05-18,"","",0,2011-05-18 16:03,"","",120900,"",FLOW3 1.0.0,"The following code (in a custom repository) won't work if ""proposedSessionType"" is a relation..

<pre>
<code class=""php"">
protected $defaultOrderings = array(
	'proposedSessionType' => QueryInterface::ORDER_ASCENDING,
);
</code>
</pre>

Also it does not work to order by properties of a relation like:

<pre>
<code class=""php"">
protected $defaultOrderings = array(
	'proposedSessionType.title' => QueryInterface::ORDER_ASCENDING,
);
</code>
</pre>"
26886,TYPO3.Flow,Bug,"",Resolved,Must have,Uploaded resources get lost on validation errors,Bastian Waidelich,Sebastian Kurfuerst,2011-05-20 03:35,Resource,1.0 beta 1,2011-05-18,"","",100,2011-05-18 16:24,"","",120950,"","","If a resource is created through an upload (via ResourceTypeConverter) and a validation error occurs, there is currently no way of retrieving the resource in the referring action (neither from the controller nor in Fluid).

One solution would be to always persist the ResourcePointer on creation and extend the ResourceTypeConverter so that it can handle a serialized string that contains the Resource hash and required meta info (mime type, filename, ...)"
26903,TYPO3.Flow,Bug,"",Resolved,Should have,Flush Doctrine metadata cache with FLOW3 caches,Karsten Dambekalns,Karsten Dambekalns,2012-06-20 14:53,Persistence,1.1 beta 3,2011-05-19,"","",100,2011-05-19 05:33,"","",121800,"",Git 1.1,"When the FLOW3 caches are flushed, the Doctrine caches should also be flushed, and when we compile new metadata as well."
26943,TYPO3.Flow,Feature,"",Needs Feedback,Should have,Add i18n support to domain models,Kevin Ulrich Moschallski,Karsten Dambekalns,2013-05-21 07:28,I18n,"",2011-05-20,"","",0,2011-05-20 09:22,"","",123400,"","","Hi,

i found a doctrine Behavioral Extension which support annotation bases translation for domain models. Look at it here:

http://www.doctrine-project.org/blog/doctrine2-behavioral-extensions

It also has another interesting extension for updating a timestamp property every time an property is changed in a model. Don't know if FLOW3 supports something already, just for notice.

I tried to implement this extension myself in the EntityManagerFactory, but without luck. But i think i18n support for domain models is a major feature missing for beta1.

Regards,
Kevin"
26945,TYPO3.Flow,Feature,"",Resolved,Should have,Rewrite flashMessages to have similar functionality as in v4,Christian Müller,Christian Müller,2011-10-19 19:37,MVC,1.0.0,2011-05-20,"","",100,2011-05-20 09:39,"","",123500,"","",""
26950,TYPO3.Flow,Feature,"",Rejected,Should have,Add AccessDeniedException Handler,Heiko Kromm,"",2012-03-14 09:31,Security,"",2011-05-20,"","",0,2011-05-20 11:00,"","",123700,"","",If I have an AccessDeniedExeption caused by policy restrictions there should be a handler for redirecting to a different action.
26972,TYPO3.Flow,Bug,"",Resolved,Must have,File extension of resources must be lower cased,Bastian Waidelich,Bastian Waidelich,2011-05-23 04:05,Resource,"",2011-05-21,"","",100,2011-05-21 11:51,"","",124100,"","","When uploading a resource with upper case characters in the file extension (for instance ""SomeFile.JPG"") the saved persistent resource will be saved with a lower cased file extension (""<hash>.jpg""). This is correct, because it avoids clashes for two files with the same content (= same hash).
@Resource::getFileExtension()@ already returns the lowercased extension, @Resource::getFilename()@ does not yet."
26986,TYPO3.Flow,Feature,"",Accepted,Should have,Debug toolbar,Fernando Arconada,Christian Müller,2012-06-08 14:41,"","",2011-05-23,"","",0,2011-05-23 05:58,"","",124800,"","",I think that FLOW3 should have a debug toolbar like the Symfony one in developer mode
27015,TYPO3.Flow,Feature,"",Resolved,Should have,__sleep does not respect entities lying in arrays or other collections,Andreas Förthner,Andreas Förthner,2011-09-09 05:06,Object,1.0 beta 2,2011-05-24,"","",100,2011-05-24 09:41,"","",126250,"","","__sleep has to iterate over arrays/collections/splObjectSorage and search for entities that should not be serialized, but stored as identity array."
27045,TYPO3.Flow,Bug,"",New,Should have,Introduced properties are not available in the reflection service during a compile run,Andreas Förthner,"",2013-12-07 05:14,AOP,"",2011-05-26,"","",0,2011-05-26 05:52,"","",127750,"",FLOW3 1.0.0,"The AOP proxy builder must register each introduced property, that the other proxy builders can use the reflection service to ask for them..."
27087,TYPO3.Flow,Bug,"",Resolved,Must have,Command controllers cannot use arguments,Karsten Dambekalns,Christopher Hlubek,2011-05-31 10:31,MVC,1.0 beta 1,2011-05-27,"","",0,2011-05-27 09:37,"","",129850,"","",.
27088,TYPO3.Flow,Bug,"",On Hold,Should have,initializeObject() is called too early when reconstructing entities,Andreas Förthner,"",2013-04-08 11:53,Object,"",2011-05-27,"","",0,2011-05-27 09:40,"","",129900,"",FLOW3 1.0.0,"As it is called in __wakeup(), Doctrine did not yet inject the persisted properties, this is not what we want. The object should be fully initialized (DI and Persistence) when initializeObject() ist called. The same is true for objects fetched from persistence."
27091,TYPO3.Fluid,Feature,"",Closed,Should have,Viewhelpers for strtolower/strtoupper,Georg Ringer,"",2013-06-04 09:58,ViewHelpers,"",2011-05-27,"","",0,2011-05-27 10:08,"","",130050,"","","I would like to see 2 viewhelpers for strtolower() and strtoupper().

At the first this maybe sounds silly because this can be solved with CSS but this is not entirly true. There are languages (e.g. greek) where doing a simple ""text-transform:uppercase"" will be stupid because this can change the meaning of the text. The reason is because CSS is stupid and doesn't take the locale into account but PHP does.

"
27115,TYPO3.Flow,Feature,"",Closed,Must have,AOP should provide a way to change method parameters,Fernando Arconada,"",2011-10-17 17:31,AOP,"",2011-05-29,"","",0,2011-05-29 04:53,"","",131250,"","","Actually even with @around you cant change the called method arguments. There is a getArguments in the joinpoint but there isnt any setArguments, actually you can only change the returned value.
"
27116,TYPO3.Flow,Feature,"",Closed,Should have,Routing: Declared variables only available in POST but not in GET regexpr signature,Fernando Arconada,Bastian Waidelich,2011-09-30 06:08,MVC - Routing,"",2011-05-29,"","",0,2011-05-29 05:03,"","",131300,"","","Variables are declared only in the GET signature but you could have something like
-
  name: 'algo actions'
  uriPattern:    'algo/{@action}(/{myvar})'
  defaults:
    '@package':    Sifpe
    '@controller': Empresa
    '@action':     list
    '@format':     json
  POST:
   vars: [myvar2,myvar3]
   defaults:
    'myvar1': 'somevalue'
    'myvar2': 'somevalue'"
27117,TYPO3.Flow,Feature,Work Package #45088: Improved REST support,Resolved,Should have,Bind routes to HTTP request methods,Fernando Arconada,Bastian Waidelich,2013-06-25 11:36,MVC - Routing,2.0,2011-05-29,2013-04-13,"",100,2011-05-29 05:07,"","",131350,"","","Routes need an option to be limited to certain HTTP methods:


Limit one route to a HTTP method as in Symfony
-
  name: 'empresa actions'
  uriPattern:    'empresa/{@action}(/{empresa})'
  defaults:
    '@package':    Sifpe
    '@controller': Empresa
    '@action':     list
    '@format':     json
  requirements:
        _method:  POST|PUT

as in symfony2
http://symfony.com/doc/current/book/routing.html"
27118,TYPO3.Flow,Feature,"",Rejected,Should have,Routing: json format should use MIME application/json by default,Fernando Arconada,"",2012-03-12 14:02,MVC,"",2011-05-29,"","",0,2011-05-29 05:12,"","",131400,"","","Actually the format specified in routing doesnt have effect in the MIME, by default it's text/html
Whitout changing the View object common formats should be mapped to its MIMEs
JSON-> application/json"
27119,TYPO3.Fluid,Feature,"",Resolved,Should have,Declare namespaces in XML tag,Fernando Arconada,Bastian Waidelich,2013-01-10 10:27,Core,1.1 beta 1,2011-05-29,"","",100,2011-05-29 05:18,"","",131450,"","",One of the great things of FLUID is that is XML but namespace declaration isnt. There should be a way/tag to declare namespaces in a tag. If you could have your template as pure XML you could validate it with XML validation tools
27120,TYPO3.Fluid,Feature,"",Rejected,Should have,filters for ViewHelpers and templates,Fernando Arconada,"",2012-03-12 14:04,"","",2011-05-29,"","",0,2011-05-29 05:26,"","",131500,"","","You dont always want you HTML escaped. ViewHelpers could have filter attribute to avoid HTML escaping or for using you filter

<f:myviewhelper argument=""{blas}"" filter=""raw"" />
<f:myviewhelper argument=""{blas}"" filter=""removeBadWords"" />


<f:section filter=""raw> </f:section>

<f:filter type=""raw"">
   portion of code inside my template
<f:filter>

Filters could be pluggables at Package level or framework"
27170,TYPO3.Flow,Bug,"",Resolved,Must have,countByProperty does not work,Christopher Hlubek,"",2011-06-01 10:05,Persistence,"",2011-05-31,"","",100,2011-05-31 12:05,"","",133900,"","","A magic count method with property (e.g. @countByName@) does not work with the current Doctrine implementation of @count()@ in @F3\FLOW3\Persistence\Doctrine\Query@:

<pre><code class=""php"">
public function count() {
	try {
		$dqlQuery = clone $this->queryBuilder->getQuery();
		$dqlQuery->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_TREE_WALKERS, array('F3\FLOW3\Persistence\Doctrine\CountWalker'));
		return (int)$dqlQuery->getSingleScalarResult();
	} catch (\Doctrine\ORM\ORMException $e) {
		return 0;
	}
}
</code></pre>

The problem seems to be the clone of the query which results in an empty parameter array when executing the cloned query."
27232,TYPO3.Flow,Bug,"",Closed,Should have,"Create unit test for ""Original Request must only be set if there is a validation error""",Sebastian Kurfuerst,Robert Lemke,2012-05-21 10:47,MVC,1.1,2011-06-06,"","",0,2011-06-06 02:00,"","",136900,"",FLOW3 1.0.0,"May 18 2011 [+BUGFIX] (MVC): Original Request must only be set if there
is a validation error
Change-Id: Ic2179e21b97da9ad3cd4e5685f85e961c36edc63

In the commit message you write ""Then, the ""Speaker Profile"" of the
conference site is correctly filled out again."". Imagine that in the
changelog / release notes of the FLOW3 distribution ? doesn't make a lot
of sense. Also this changeset cries for a unit test because the logic /
motivation behind setting the original request could be explained by
that test and secured at the same time."
27233,TYPO3.Flow,Task,"",Resolved,Should have,Rename __CSRF-TOKEN to __csrfToken,Sebastian Kurfuerst,Karsten Dambekalns,2011-09-09 07:35,Security,1.0 beta 2,2011-06-06,"","",100,2011-06-06 02:01,"","",136950,"","","Refers to ""May 16 2011 [+BUGFIX] (MVC): Introduce internal Request Arguments""

Also remember to rename it in the ExtJS package as well!"
27277,TYPO3.Fluid,Bug,"",Resolved,Must have,Make widgets work again after recent changes in the UriBuilder and Request Handling,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-06-30 09:11,Widgets,1.0 beta 1,2011-06-07,"","",100,2011-06-07 10:11,"","",138900,"","",""
27283,TYPO3.Flow,Task,"",Resolved,Should have,Handle @InheritanceType in a correct manner,Rens Admiraal,Karsten Dambekalns,2012-12-12 03:17,Persistence,2.0 beta 1,2011-06-07,"","",100,2011-06-07 14:19,"","",139200,"","","If a model is extended the base class needs to be annotated with InheritanceType. Problem is that we don't know which classes will ever be extended, and Doctrine throws an error when the InheritanceType is set without discriminator map:

Uncaught Exception in FLOW3 Entity class 'F3\FLOW3\Security\Account' is using inheritance but no discriminator map was defined. thrown in file .../ORM/Mapping/MappingException.php in line 202


In such cases the annotation must be ignored by our annotation driver, or the IneritanceType should be set automagically if FLOW3 detects that a model is extended.

Relates to: https://review.typo3.org/#change,2130"
27284,TYPO3.Flow,Bug,"",Resolved,Must have,Signal dispatching through SignalAspect is broken,Karsten Dambekalns,Karsten Dambekalns,2011-06-11 17:35,SignalSlot,1.0 beta 1,2011-06-07,"","",100,2011-06-07 15:45,"","",139250,"","","When using the ""magic"" way of dispatching signals nothing happens, because the aspect does not remove the ""emit"" from the signal's method name. The dispatcher then ignores the request."
27285,TYPO3.Flow,Bug,"",Resolved,Should have,Exception with /** @MappedSuperclass */,Fernando Arconada,Karsten Dambekalns,2012-01-19 20:42,Persistence,1.0.3,2011-06-07,"","",100,2011-06-07 16:28,"","",139300,"",FLOW3 1.0.0,"If you have a mapped superclass in Domain/Model folder you will have an exception unless you mark the class with @entity

Doctrine2 Examples http://www.doctrine-project.org/docs/orm/2.0/en/reference/inheritance-mapping.html dont mark this kind of clasess as @entity

Not sure if it's better to mark as entity, may be yes, but it doesnt seem necessary in Doctrine2. All works ok and no new table is created in DB after tag as @entity

#1295973082 No class schema found for ""F3\Sifpe\Domain\Model\Apunte""
RuntimeException thrown in file
/var/www/html/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Persistence_Doctrine_Mapping_Driver_Flow3AnnotationDriver_Original.php in line 89."
27286,TYPO3.Fluid,Bug,"",Closed,Should have,FLUID: #1: Warning: htmlspecialchars(): Invalid multibyte sequence in argument,Fernando Arconada,"",2012-03-13 05:05,ViewHelpers,"",2011-06-07,"","",0,2011-06-07 17:12,"","",139350,"",FLOW3 1.0.0,"I have an exception just trying to retrieve objects from DB and displaying in a view
$apuntes = $this->apunteRepository->findAll();
$this->view->assign('apuntes',$apuntes);

Attached an export from my DB and MySQL variables

Note: this tables and data were not created by Doctrine. I have imported them from a mysqldump export from other DB.

------------------------------

Uncaught Exception in FLOW3
#1: Warning: htmlspecialchars(): Invalid multibyte sequence in argument in /var/www/html/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php line 79 (More information)

F3\FLOW3\Error\Exception thrown in file
Packages/Framework/FLOW3/Classes/Error/ErrorHandler.php in line 82.

Go to the FORGE issue tracker and report the issue - if you think it is a bug!

51 F3\FLOW3\Error\ErrorHandler::handleError(2, ""htmlspecialchars(): Invalid multibyte sequence in argument"", ""/var/www/html/FLOW3/Data/Temporary/Development/Cac?F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php"", 79, array)

50 htmlspecialchars(""Santo?a/Laredo 18/8/06"", 2, ""UTF-8"")


/var/www/html/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php:

00077:   switch ($type) {
00078:    case 'html':

00079:     return htmlspecialchars($value, ENT_COMPAT, $encoding);

00080:    break;
00081:    case 'entities':
"
27322,TYPO3.Flow,Feature,"",On Hold,Should have,"Add support for Appserver-in-PHP, which could result in much faster executions.",Sebastian Kurfuerst,Christopher Hlubek,2012-07-09 12:11,"","",2011-06-09,"","",0,2011-06-09 01:01,"","",141150,"","","Add support for Appserver-in-PHP, which could result in much faster executions.

* https://github.com/indeyets/appserver-in-php

h2. Installation of AiP

* Install php5-posix and php5-pcntl (through MacPorts, APT, ...)
* pear channel-discover pear.indeyets.pp.ru
* pear install indeyets/AppServer
"
27329,TYPO3.Flow,Feature,"",Rejected,Should have,Wrap Doctrine ArrayCollection in some FLOW3 collection,Bastian Waidelich,Karsten Dambekalns,2011-09-30 07:44,Persistence,1.0.0,2011-06-09,"","",0,2011-06-09 10:36,"","",141500,"","","FLOW3 currently uses the ""ArrayCollection"":http://git.typo3.org/FLOW3/Packages/FLOW3.git?a=blob;f=Resources/PHP/Doctrine/Common/Collections/ArrayCollection.php of Doctrine by default to store multivalue properties in models. It comes with nice features such as *map()* and *filter()*.
I suggest to wrap this in a custom FLOW3 collection in order to be able to extend its functionality and to gain more abstraction from Doctrine.
Besides this would make it easier to backport this feature to Extbase so that people already use the ""correct"" type in their models.
e.g.
<pre>
<code class=""php"">
class \F3\FLOW3\Utility\Collections\ArrayCollection extends \Doctrine\Common\Collections\ArrayCollection {
}
</code>
</pre>

@Karsten could you share your opinion on this?"
27332,TYPO3 Flow Base Distribution,Bug,"",Resolved,Could have,Problems with declare(ENCODING = 'utf-8'); in file header,Tim Wagner,Karsten Dambekalns,2011-07-06 10:01,"",1.0 beta 1,2011-06-09,"","",100,2011-06-09 16:12,"","",141650,"","","On MAC OS X 10.6.7 with default PHP installation (no Ports) every time you call command ./flow3_dev or ./flow3 it leads to the following error:

[09-Jun-2011 20:30:25] PHP Parse error:  syntax error, unexpected '*', expecting ',' or ')' in /private/var/www/flow3/Packages/Framework/FLOW3/Scripts/flow3 on line 3

The same error occurs when requesting the welcome page on the browser.

After removing declare(ENCODING = 'utf-8'); from each files header FLOW3 works as expected. "
27369,TYPO3.Flow,Bug,"",Resolved,Should have,"Docu, AbstractController: Clearer difference of forward/redirect",Stefan Neufeind,"",2011-06-11 15:05,"","",2011-06-11,"","",100,2011-06-10 19:30,"","",143500,"","",Make more clear what the difference is.
27375,TYPO3.Flow,Bug,"",Rejected,Should have,simplify email validator,Stefan Neufeind,Stefan Neufeind,2011-07-06 10:18,Validation,"",2011-06-11,"","",0,2011-06-11 12:56,"","",143800,"","",Regex for validation should be simplified (replaced) by using the approprivate filter_var() for that.
27378,TYPO3.Flow,Bug,"",Closed,Should have,JsonView not testable view \F3\FLOW3\Tests\FunctionalTestCase->sendWebRequest,Fernando Arconada,Robert Lemke,2012-06-25 16:16,- Testing -,1.1 RC1,2011-06-12,"","",0,2011-06-12 03:58,"","",143950,"",FLOW3 1.0.0,"If you try to create a Functional test that uses a JsonView you will have an exception
//'CuentaController' and 'list' action uses '\F3\FLOW3\MVC\View\JsonView'
class JsonOutputTest extends \F3\FLOW3\Tests\FunctionalTestCase {
    /**
     * @test
     * @return void
     */
    public function cuentasList() {
        $output = $this->sendWebRequest('Cuenta','Sifpe','list',array(),'json');
        $decoded = json_decode($output,TRUE);
        $this->assertTrue(is_array($decoded));
    }
}



E_ERROR: Call to undefined method Mock_ResponseInterface_a5944a04::setHeader()
#0 /var/www/html/FLOW3/Data/Temporary/Testing/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_View_JsonView_Original.php(137)
PHP Fatal error:  Call to undefined method Mock_ResponseInterface_a5944a04::setHeader() in /var/www/html/FLOW3/Data/Temporary/Testing/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_View_JsonView_Original.php on line 137
PHP Stack trace:
PHP   1. {main}() /tmp/phpunit_Sifpe_falcifer.php:0
PHP   2. MyTestRunner::main() /tmp/phpunit_Sifpe_falcifer.php:814
PHP   3. MyTestRunner::runTest() /tmp/phpunit_Sifpe_falcifer.php:796
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /tmp/phpunit_Sifpe_falcifer.php:485
PHP   5. PHPUnit_Framework_TestSuite->run() /usr/share/pear/PHPUnit/TextUI/TestRunner.php:305
PHP   6. PHPUnit_Framework_TestSuite->run() /usr/share/pear/PHPUnit/Framework/TestSuite.php:693
PHP   7. PHPUnit_Framework_TestSuite->runTest() /usr/share/pear/PHPUnit/Framework/TestSuite.php:733
PHP   8. PHPUnit_Framework_TestCase->run() /usr/share/pear/PHPUnit/Framework/TestSuite.php:757
PHP   9. PHPUnit_Framework_TestResult->run() /usr/share/pear/PHPUnit/Framework/TestCase.php:576
PHP  10. F3\FLOW3\Tests\FunctionalTestCase->runBare() /usr/share/pear/PHPUnit/Framework/TestResult.php:666
PHP  11. F3\FLOW3\Tests\BaseTestCase->runBare() /var/www/html/FLOW3/Packages/Framework/FLOW3/Tests/FunctionalTestCase.php:114
PHP  12. PHPUnit_Framework_TestCase->runBare() /var/www/html/FLOW3/Packages/Framework/FLOW3/Tests/BaseTestCase.php:52
PHP  13. PHPUnit_Framework_TestCase->runTest() /usr/share/pear/PHPUnit/Framework/TestCase.php:628
PHP  14. ReflectionMethod->invokeArgs() /usr/share/pear/PHPUnit/Framework/TestCase.php:738
PHP  15. F3\Sifpe\Tests\Functional\Output\JsonOutputTest->cuentasList() /var/www/html/Sifpe/Tests/Functional/Output/JsonOutputTest.php:0
PHP  16. F3\FLOW3\Tests\FunctionalTestCase->sendWebRequest() /var/www/html/Sifpe/Tests/Functional/Output/JsonOutputTest.php:11
PHP  17. F3\FLOW3\MVC\Controller\ActionController_Original->processRequest() /var/www/html/FLOW3/Packages/Framework/FLOW3/Tests/FunctionalTestCase.php:240
PHP  18. F3\FLOW3\MVC\Controller\ActionController_Original->callActionMethod() /var/www/html/FLOW3/Data/Temporary/Testing/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Controller_ActionController_Original.php:171
PHP  19. F3\FLOW3\MVC\View\JsonView_Original->render() /var/www/html/FLOW3/Data/Temporary/Testing/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_MVC_Controller_ActionController_Original.php:298
"
27379,TYPO3.Flow,Bug,"",Needs Feedback,Must have,add check to clear the database at tearDown in testing,Fernando Arconada,"",2012-03-14 09:41,"","",2011-06-12,"","",0,2011-06-12 04:05,"","",144000,"",FLOW3 1.0.0,"Actually in testing mode the database is cleared completely in static public function tearDownAfterClass() at the end of testing. You dont always want this behaviour, so please add a check in settings to enable this "
27417,TYPO3.Flow,Feature,"",Resolved,Should have,DateTime conversion support,Robert Lemke,Bastian Waidelich,2011-06-21 06:35,Property,1.0 beta 1,2011-06-14,"","",100,2011-06-13 18:43,"","",145850,"","","It should be possible to submit a date through a form via POST and receive a date time object as an argument in a controller. Hence we need a Type Converter supporting array to DateTime conversion. The input format should be configurable, unix timestamp would be a good default."
27482,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,CLI not working on Windows,Bastian Waidelich,Karsten Dambekalns,2011-08-04 02:20,"",1.0 beta 1,2011-06-15,"","",100,2011-06-15 16:53,"","",149050,"","","It seems, Git [1] ""resolves"" symlinks on Windows by creating a file that only contains the relative path to the target file.
E.g. it replaces (http://git.typo3.org/FLOW3/Distributions/Base.git?a=blob;f=flow3;h=2843cf594ee6b2d77c11afdd7ea8ead25d49048b;hb=HEAD) with a file that contains the string ""Packages/Framework/FLOW3/Scripts/flow3"" when one pulls the distribution.
See http://code.google.com/p/msysgit/issues/detail?id=224 for a corresponding bug report in the msysgit project.

Among other things this leads to the situation, that CLI arguments are stripped off when executing Commands through the console.

[1] using ""msysgit"":http://code.google.com/p/msysgit/"
27488,TYPO3 Flow Base Distribution,Task,"",Closed,Must have,Update documentation for 1.0 beta 1,Robert Lemke,"",2011-08-04 02:27,"",1.0 beta 1,2011-06-16,"","",0,2011-06-16 05:25,"","",149300,"","",This is an umbrella task for updating and extending the documentation of the packages in the FLOW3 base distribution.
27490,TYPO3.Flow,Feature,"",Resolved,Must have,Vendor Namespaces Support,Robert Lemke,Robert Lemke,2011-07-04 07:35,Object,1.0 beta 1,2011-06-16,"","",100,2011-06-16 05:28,"","",149400,"","","FLOW3 should support the concept of vendor namespaces and therefore support class names like the following, thus making the ""F3"" namespace obsolete:

\RobertLemke\AutoMakeTemplate\Controller\FooController
\Zend\...
\TYPO3\FLOW3\Package\PackageManagerInterface
\TYPO3\TYPO3\Domain\Model\Site
"
27491,TYPO3.Flow,Feature,"",Resolved,Must have,Support per-package Doctrine migrations,Robert Lemke,Karsten Dambekalns,2011-06-24 12:38,Persistence,1.0 beta 1,2011-06-16,"","",100,2011-06-16 05:28,"","",149450,"","",""
27499,TYPO3.Flow,Feature,"",Resolved,Should have,Refactor TypeConverter API,Bastian Waidelich,Sebastian Kurfuerst,2011-06-24 05:37,Property,1.0 beta 1,2011-06-16,"","",100,2011-06-16 10:35,"","",149850,"","","Currently TypeConverters support multiple source but only one target type.
As discussed with Robert, this should be changed so that you can specify an array of supported TargetTypes.
This makes especially sense when using TypeConverters independently from the PropertyMapper.

The TypeConverterInterface should be adjusted like:

-getSupportedTargetType()
+getSupportedTargetTypes()


@Sebastian I'm assigning this to you, because that should be changed before the backport of the PropertyMapper. Feel free to unasign yourself if you can't to it atm ;)"
27516,TYPO3.Fluid,Bug,"",Resolved,Should have,Translate labels in paginate widget,Alexander Stehlik,Karsten Dambekalns,2015-03-19 08:12,Widgets,"",2011-06-17,"","",100,2011-06-17 08:38,"","",150700,"",Git master,"At the moment, the labels for ""next"" and ""previous"" the paginate widget are hardcoded in the template.

The translate view helper should be used so that the labels can be localized."
27527,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Unable to run tests for F3\FLOW3\Tests\Unit\Security\Authorization\AccessDecisionVoterManagerTest,Michael Klapper,Karsten Dambekalns,2011-07-06 10:16,"",1.0 beta 1,2011-06-18,"","",100,2011-06-18 06:04,"","",151250,"","","When i use the testing package to run the tests on the web i got the following Fatal error.

<pre>
F3 \ FLOW3 \ Tests \ Unit \ Security \ Authorization \ AccessDecisionVoterManagerTest
Fatal error: Call to a member function isRegistered() on a non-object in /var/www/project/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_FLOW3_Security_Authorization_AccessDecisionVoterManager_Original.php on line 180 
</pre>"
27561,TYPO3.Flow,Task,"",Accepted,Could have,Complete documentation,Karsten Dambekalns,"",2013-09-23 06:56,- Documentation -,"",2008-07-15,"",2.00,84,2011-06-20 04:59,"","",152800,2.00,"",'nuff said
27562,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Must have,Update Persistence documentation,Karsten Dambekalns,Karsten Dambekalns,2011-06-24 09:36,- Documentation -,1.0 beta 1,2011-06-20,"","",100,2011-06-20 05:05,"","",152850,"","",It needs to have the Doctrine 2 stuff documented
27563,TYPO3.Flow,Feature,"",Resolved,Should have,Implement simple argument support for CommandController,Robert Lemke,"",2011-07-08 06:35,MVC,1.0 beta 1,2011-06-20,"","",100,2011-06-20 05:14,"","",152900,"","","Currently arguments can only be passed to a CommandController by specifying the argument name:

<pre>
./flow3_dev flow3:package:create --package-key MyPackage
</pre>

For cases like the one above it would be nice to be able to specify the argument without a name:

<pre>
./flow3_dev flow3:package:create MyPackage
</pre>

On the implementation side this could work as follows:

* if no argument name is specified, the argument order must match the order of the command function's arguments
* if an argument without name is specified, all non-optional arguments must be specified without a name in the correct order ? mixing non-optional arguments with and without specifying the name should not be possible (to avoid confusion)
* to make things easier we can (should) make the rule that options (ie. named arguments which are optional in the function's signature) must be specified before any unnamed argument (e.g flow3:package:create --description ""My Package"" --make-it-extra-cool MyPackage)"
27567,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Reorder chapters,Karsten Dambekalns,"",2011-10-19 19:37,- Documentation -,1.0.0,2011-06-20,"","",100,2011-06-20 05:42,"","",153100,"","","The chapters are not ordered in the way we explain(ed) parts of FLOW3 in sessions/workshops/tutorials so far, maybe we should do that..."
27569,TYPO3.Flow,Task,Task #3881: Complete documentation about MVC,Resolved,Must have,Document Routing features and setup,Karsten Dambekalns,Bastian Waidelich,2011-08-24 02:06,- Documentation -,1.0 beta 1,2011-06-20,"","",100,2011-06-20 05:49,"","",153200,"","",.
27573,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Could have,Update installation documentation,Karsten Dambekalns,Karsten Dambekalns,2011-08-24 01:47,- Documentation -,1.0 beta 1,2011-06-20,"","",100,2011-06-20 08:29,"","",153400,"","",.
27583,TYPO3.Fluid,Task,"",Resolved,Should have,Move raw ViewHelper to format.raw,Bastian Waidelich,Bastian Waidelich,2011-06-23 02:35,ViewHelpers,"",2011-06-20,"","",100,2011-06-20 15:05,"","",153900,"","","And adjust affected templates.
For compatibility reasons the old ViewHelper should be marked *deprecated* and kept for a while."
27607,TYPO3.Fluid,Bug,"",New,Must have,"Make Fluid comparisons work when first element is STRING, second is NULL.",Sebastian Kurfuerst,"",2012-03-12 14:18,Core,"",2011-06-21,"","",0,2011-06-21 00:45,"","",155100,"",FLOW3 1.0.0,"Taken from https://review.typo3.org/#patch,unified,2824,2,Classes/Core/Parser/SyntaxTree/ViewHelperNode.php :

> I know it is not in the table on php.net, but the case '' == NULL ($operand1 being string and $operand2 being NULL) should probably be comparable, too (and the PHP interpreter can of course compare them). What do you think?

I definitely agree, so we should implement this in Fluid v5 and provide tests for it, and then backport it."
27611,TYPO3.Flow,Bug,"",Resolved,Should have,Rename and combine TypeConverters,Bastian Waidelich,Bastian Waidelich,2011-06-22 08:35,Property,1.0 beta 1,2011-06-21,"","",100,2011-06-21 07:14,"","",155300,"","","The TypeConverters should be renamed so that each converter belongs to one target type:

<pre>
ArrayCollectionConverter -> ArrayCollectionConverter
ArrayToArrayConverter -> ArrayConverter
ArrayToObjectConverter -> ObjectConverter
ArrayToSplObjectStorageConverter -> SplObjectStorageConverter
BooleanToBooleanConverter -> BooleanConverter
IntegerToIntegerConverter -> IntegerConverter
PersistentObjectConverter -> PersistentObjectConverter
StringToBooleanConverter -> (not needed anymore)
StringToFloatConverter -> FloatConverter
StringToIntegerConverter -> (not needed anymore)
StringToSplObjectStorageConverter -> (not needed anymore)
StringToStringConverter -> StringConverter
</pre>
"
27613,TYPO3.Flow,Task,"",Resolved,Should have,Rename $omitSignalInformation to $passSignalInformation,Karsten Dambekalns,Karsten Dambekalns,2011-07-06 05:35,SignalSlot,1.0 beta 1,2011-06-21,"","",100,2011-06-21 08:00,"","",155400,"","","A flag that comes with double negation by default should be avoided, thus we should invert the name and meaning here.

Note: do we actually need this? If we keep it, maybe make the signal information an array, so it's easier to amend in the future? Currently the simple string with classname and method name is a little limited in expressiveness."
27614,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,Update Package documentation,Karsten Dambekalns,Karsten Dambekalns,2011-08-24 02:01,- Documentation -,1.0 beta 1,2011-06-21,"","",100,2011-06-21 08:07,"","",155450,"","",.
27627,TYPO3.Flow,Task,"",Resolved,Must have,Overhaul annotation support/syntax,Karsten Dambekalns,Karsten Dambekalns,2011-10-19 19:25,Reflection,1.0.0,2011-06-21,"","",100,2011-06-21 11:30,"","",156100,"","","I think it would be wise to decide on this before 1.0.0, the earlier the better. It has been discussed here and there in the past, but we need to get this thought through.

So, here are the basic questions:

# Do we adopt UpperCamelCase and case-sensitivity, like Doctrine 2 and Symfony 2 use it?
# Do we switch annotation parsing to the Doctrine Common library?

The case thing means
* consistency with Doctrine annotations we have in place already
* inconsistency with ""normal"" docblock API annotations
* the latter can be softened by using prefixes on annotations and have them lowercased, see http://symfony.com/blog/symfony2-annotations-gets-better for examples

The parser library switch would
* move the burden of maintaining a parser away from us
* force us to adapt the current annotation syntax
* possibly allow more flexibility"
27628,TYPO3.Fluid,Task,"",Resolved,Should have,Split escape ViewHelper into dedicated format ViewHelpers,Bastian Waidelich,Bastian Waidelich,2011-07-27 04:05,ViewHelpers,1.0 beta 1,2011-06-21,"","",100,2011-06-21 11:51,"","",156150,"","","Currently the *f:escape* ViewHelper is targeted at a lot of different use cases (html escaping, url encoding, strip tags, ...).
That makes it harder to test and to extend.
Additionally the current implementation has the severe side-effect that the input value is not escaped at all, if the specified format is not supported."
27637,TYPO3.Flow,Feature,"",Resolved,Should have,Make Value Objects read-only on Doctrine,Karsten Dambekalns,Karsten Dambekalns,2011-10-19 19:37,Persistence,1.0.0,2011-06-22,"","",100,2011-06-22 04:29,"","",156550,"","","Any @valueobject should have the readOnly attribute set for Doctrine 2.1, until value objects are supported for real.

When implementing this, update the persistence documentation accordingly (annotations table for Doctrine use)."
27640,TYPO3.Flow,Bug,Task #3881: Complete documentation about MVC,Resolved,Should have,Document property mapper,Karsten Dambekalns,Sebastian Kurfuerst,2011-10-19 19:37,- Documentation -,1.0.0,2011-06-22,"","",100,2011-06-22 05:34,"","",156700,"","",.
27649,TYPO3.Flow,Task,"",Resolved,Must have,Remove automatic DB schema updates,Karsten Dambekalns,Karsten Dambekalns,2011-07-06 05:05,Persistence,1.0 beta 1,2011-06-22,"","",100,2011-06-22 10:59,"","",157150,"","",Only exception: if an empty database is found the system should try to migrate to the latest state.
27655,TYPO3.Flow,Bug,"",Resolved,Must have,The differing names for basically the same persistence options are confusing,Karsten Dambekalns,Karsten Dambekalns,2011-09-07 11:04,Persistence,1.0 beta 2,2011-06-22,"","",100,2011-06-22 11:39,"","",157450,"","","_path_ and _host_ for Doctrine, _dataSourceName_ for the Generic persistence, and probably some more."
27668,TYPO3.Fluid,Task,"",Resolved,Should have,Change Escape Interceptor to use new format.htmlspecialchars ViewHelper,Bastian Waidelich,Bastian Waidelich,2011-08-04 02:11,Core,1.0 beta 1,2011-06-23,"","",100,2011-06-23 12:54,"","",158100,"","",and mark the existing escape ViewHelper deprecated.
27678,TYPO3.Fluid,Bug,"",Resolved,Should have,Deactivate EscapeInterceptor for certain ViewHelpers,Bastian Waidelich,Bastian Waidelich,2011-07-27 03:35,ViewHelpers,"",2011-06-24,"","",100,2011-06-24 06:56,"","",158600,"","","For some of the provided ViewHelpers one can exchangeably use either the *value* attribute or *childnodes* as input.

So all of the below variants should behave the same:
<pre>
<code class=""html"">
<f:format.plaintext>{foo}</f:format.plaintext>
{foo -> f:format.plaintext()}
<f:format.plaintext value=""{foo}"" />
{f:format.plaintext(value: foo)}
</code>
</pre>

But in fact the first two examples will get an escaped {foo} because by default the EscapeInterceptor is activated.

A solution would be to deactivate the interceptor for those ViewHelper by inserting the line
<pre>
<code class=""php"">
protected $escapingInterceptorEnabled = FALSE;
</code>
</pre>

*NOTE:* This *disables* htmlspecialchars() from beeing applied to childnodes so this must not be done for ViewHelpers that directly output the childnodes again!
"
27695,TYPO3.Flow,Bug,"",Closed,Must have,Production configuration cache not flushed on cache:flush,Karsten Dambekalns,"",2011-10-19 19:37,Cache,1.0.0,2011-06-25,"","",0,2011-06-25 06:27,"","",159450,"","",.
27698,TYPO3.Flow,Feature,"",Resolved,Should have,Roles should use an adequate data type to get persisted as entities ,Johannes K,Rens Admiraal,2013-08-14 10:00,Security,2.0,2011-06-26,"","",100,2011-06-25 19:59,"","",159600,"","","At the moment the roles of an account get saved as a php-serialized array inside ""flow3_security_account"", e.g.: 
<pre>
a:2:{i:0;s:12:""Adminstrator"";i:1;s:4:""User"";}
</pre> 

This is due to (in Packages/Framework/FLOW3/Classes/Security/Policy/Role.php)
<pre>
/**
 * @var array
 */
protected $roles = array();
</pre>

this should be something like this (untested, just to transport the idea, I have no idea of Doctrine)
<pre>
/**
 * @var \Doctrine\Common\Collections\ArrayCollection<\F3\FLOW3\Security\Policy\Role>
 * @ManyToMany
 */
protected $roles = array();
</pre>

so that they will get persisted as the already prepared entities \F3\FLOW3\Security\Policy\Role. "
27721,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Permissions of uploaded resources not correct,Karsten Dambekalns,Karsten Dambekalns,2012-03-15 05:37,Resource,"",2011-06-27,"","",0,2011-06-27 11:50,"","",160750,"",FLOW3 1.0.0,The permissions are not correct and furthermore the setgid bit doesn't have any effect.
27724,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Missing vfsStream produces empty output,Bastian Waidelich,Karsten Dambekalns,2011-06-29 06:01,"",1.0 beta 1,2011-06-27,"","",100,2011-06-27 15:35,"","",160900,"","","PHPUnit dies without output if vfsStream is not available.
This is fixed for me by replacing the line
<pre>
@require_once('vfsStream/vfsStream.php');
</pre>
with
<pre>
@include_once('vfsStream/vfsStream.php');
</pre>
in *UnitTestBootstrap.php*

@Karsten: I'm assigning this to you cause I don't have commit rights for BuildEssentials.git"
27770,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Remove deprecated methods/classes for FLOW3 1.1,Karsten Dambekalns,Karsten Dambekalns,2012-03-12 21:38,"",1.1,2011-06-29,"","",100,2011-06-29 09:32,"","",163200,"","","Everything that was deprecated before 1.0.0 can be removed (@create()@ on the ObjectManager will stay for Fluid *only*, to ease backporting)."
27793,TYPO3.Fluid,Bug,"",Resolved,Should have,"Replace ""f3"" namespace by ""f"" in fixtures & manual",Bastian Waidelich,Karsten Dambekalns,2011-07-04 08:35,"",1.0 beta 1,2011-07-01,"","",100,2011-07-01 06:58,"","",164350,"","","Currently Fluid still uses the ""old"" ViewHelper namespace ""f3"" in some Unit test fixtures and in the user manual. That should be replaced."
27798,TYPO3.Flow,Bug,"",Accepted,Must have,CSRF protection not working for forms in a plugin,Karsten Dambekalns,"",2013-08-14 09:35,Security,2.0.1,2011-07-01,"","",0,2011-07-01 10:33,"","",164600,"",FLOW3 1.0.0,"The CsrfProtectionAspect looks for package, subpackage, ... in the $arguments array, but for the request shown in the attached screenshot the information is one level below..."
27806,TYPO3.Flow,Bug,"",Resolved,Should have,DateTimeConverter should return Error objects for user-errors; and support converting an empty string to NULL,Michael Klapper,Sebastian Kurfuerst,2011-09-07 09:06,Property,1.0 beta 2,2011-07-02,"","",100,2011-07-01 20:11,"","",165000,"","","h2. Returning Error objects

The *TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter* should return an *\TYPO3\FLOW3\Error\Error* instead of throwing an *\TYPO3\FLOW3\Property\Exception\TypeConverterException*.

The advantage of this change is the much better handling of form convertion/validation error messages. The messages are stored as ""validationResults"" in *$this->arguments* of the current ActionController. 

Displaying the messages could be easily done with the Fluid ViewHelper *f:form.validationResults*.

h2. Support ""empty"" DateTime -> Convert to NULL

Right now, the DateTimeConverter is *required*, i.e. it is not possible to define an *optional* DateTime object.

When the DateTime converter returns NULL for the empty string, one can use ""@validate NotEmpty"" for required properties."
27810,TYPO3.Flow,Bug,"",Closed,Must have,ObjectManager returns Subclass sometimes,Johannes K,Christopher Hlubek,2011-09-24 12:17,Object,"",2011-07-02,"","",0,2011-07-02 09:18,"","",165200,"","","I have extended the original DateTimeConverter, to add some special time handling, simplified example

<pre>
namespace F3\Events\Property\TypeConverter

class DateTimeConverter extends \F3\FLOW3\Property\TypeConverter\DateTimeConverter {
	protected $priority = 3;

	protected function overrideTimeIfSpecified(\DateTime $date, array $source) {
		return parent::overrideTimeIfSpecified($date, $source);
	}
}
</pre>

Now the strange part: The Object-Manager returns my subclass:
<pre>
get_class($this->objectManager->get('F3\Events\Property\TypeConverter\DateTimeConverter')) === 'F3\Events\Property\TypeConverter\DateTimeConverter';
get_class($this->objectManager->get('F3\FLOW3\Property\TypeConverter\DateTimeConverter')) === 'F3\Events\Property\TypeConverter\DateTimeConverter';
</pre>

This finally leads to an exception from the propertymapper:
<pre>
#1297951378: There exist at least two converters which handle the conversion from ""string"" to ""DateTime"" with priority ""3"": F3\Events\Property\TypeConverter\DateTimeConverter and F3\Events\Property\TypeConverter\DateTimeConverter 
</pre>

This is not 100% reproducible and seems to depend on cache, but I haven't found the magic setting to make it always reproducible.

Chatlog: http://www.rvantwisk.nl/flow3-irc-log/2011/july/2.html

"
27820,TYPO3.Flow,Bug,"",Resolved,Should have,CLI arguments are not working for camelCased commands,Bastian Waidelich,Robert Lemke,2011-07-08 06:35,MVC,1.0 beta 1,2011-07-03,"","",100,2011-07-03 11:43,"","",165600,"","","If a CLI command method name contains uppercase characters, CLI arguments are not properly resolved because ReflectionService won't find the actual method if you don't call the command in the correct case.

A todo comment for CommandController::resolveCommandMethodName() already states
<pre>
@todo Find exact case of command method!
</pre>

To be in sync with the Web request handling, this shouldn't happen in the controller though, but in the CLI request:
Chaning
<pre>
public function getControllerCommandName() {
	return $this->controllerCommandName;
}
</pre>
to:
<pre>
public function getControllerCommandName() {
	$controllerObjectName = $this->getControllerObjectName();
	if ($controllerObjectName !== '' && ($this->controllerCommandName === strtolower($this->controllerCommandName)))  {
		$controllerClassName = $this->objectManager->getClassNameByObjectName($controllerObjectName);
		$commandMethodName = $this->controllerCommandName . 'Command';
		foreach (get_class_methods($controllerClassName) as $existingMethodName) {
			if (strtolower($existingMethodName) === strtolower($commandMethodName)) {
				$this->controllerCommandName = substr($existingMethodName, 0, -7);
				break;
			}
		}
	}
	return $this->controllerCommandName;
}
</pre>

should do the trick, but I failed injecting the objectManager (for compile time commands)"
27822,TYPO3.Fluid,Bug,"",Resolved,Should have,f:form.select performace,Carsten Bleicker,Bastian Waidelich,2012-01-10 09:43,ViewHelpers,"",2011-07-03,"","",100,2011-07-03 16:07,"","",165700,"",FLOW3 1.0.0,"hi there,
i have actualy a page with 20 select fields.
and it takes up do 20 sek. to render them out.
without select fields page is generated in 0,7 sek.
can somebody can reproduce this with 20 selects like this:
f:form.select options=""{0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10}""


maybe the problem is somewhere near the Tx_Fluid_Core_ViewHelper_ArgumentDefinition for registering ?


"
27825,TYPO3.Flow,Bug,"",Closed,Must have,TypeHandling should use the Collection interface as collection type ,Stephan Schuler,Karsten Dambekalns,2011-10-19 19:37,Utility,1.0.0,2011-07-04,"","",0,2011-07-04 04:52,"","",165850,"","","Only the following values are possible collection types that can have an element type annotation for children at the moment:
* array
* \ArrayObject
* \SplObjectStorage
* \Doctrine\Common\Collections\ArrayCollection 

As a \Doctrine\Common\Collections\PersistentCollection is no \Doctrine\Common\Collections\ArrayCollection but implements the \Doctrine\Common\Collections\Collection interface as well, FLOW3 should use the Collection interface for determining if its a collection type."
27826,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,"Missing ""size"" Attribute in the Form.Upload ViewHelper",Tim Lochmüller,Adrian Föder,2012-11-14 05:45,ViewHelpers,"",2011-07-04,"","",0,2011-07-04 05:57,"","",165900,"",FLOW3 1.0.0,"All inputs have the same attribute base. The ""size"" Attribute is missing in the Form.Upload ViewHelper..."
27916,TYPO3.Flow,Task,"",Resolved,Should have,Change default context to Development,Karsten Dambekalns,Karsten Dambekalns,2011-07-09 06:35,Core,1.0 beta 1,2011-07-06,"","",100,2011-07-06 10:48,"","",168750,"","",The default context for CLI and Web should be Development. Document the breaking change for everyone already using it and relying on Production as default context!
27926,TYPO3.Flow,Task,"",Closed,Should have,Disable I18n by feature switch for 1.0,Karsten Dambekalns,Karsten Dambekalns,2011-10-21 07:07,I18n,"",2011-07-06,"","",0,2011-07-06 13:49,"","",169250,"","",.
27938,TYPO3.Fluid,Bug,"",Resolved,Should have,Textfield view helper can not handle zero (not empty) values,Alexander Stehlik,"",2011-08-18 04:07,ViewHelpers,"",2011-07-07,"","",100,2011-07-07 07:03,"","",169850,"","","
When using the form.textfield view helper strings or integers that are 0 (zero) are treated as empty values. So if a user now enters 0 in the form field and then edits the object the form field will not show the ""0"" he entered but an empty field.

This is because in TextfieldViewHelper the empty() function of PHP is used:

<pre>
87 if (!empty($value)) {
88   $this->tag->addAttribute('value', $value);
89 }
</pre>

Since AbstractFormFieldViewHelper::getValue() will return NULL if no value was set, it would be better to use isset() in my opinion.


"
27968,TYPO3.Fluid,Bug,"",Resolved,Must have,DebugViewHelper doesn't use correct Vendor-Namespace,Johannes K,"",2011-07-08 06:35,ViewHelpers,"",2011-07-07,"","",100,2011-07-07 17:18,"","",171350,"","","should be:
<pre>
diff --git a/Classes/ViewHelpers/DebugViewHelper.php b/Classes/ViewHelpers/DebugViewHelper.php
index 456051d..f24ce4b 100644
--- a/Classes/ViewHelpers/DebugViewHelper.php
+++ b/Classes/ViewHelpers/DebugViewHelper.php
@@ -39,7 +39,7 @@ class DebugViewHelper extends \TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper {
 	 */
 	public function render($title = NULL) {
 		ob_start();
-		\TYPO3\var_dump($this->renderChildren(), $title);
+		\TYPO3\FLOW3\var_dump($this->renderChildren(), $title);
 		$output = ob_get_contents();
 		ob_end_clean();
 		return $output;
</pre>
"
27989,TYPO3.Flow,Bug,"",Resolved,Must have,Wrong check in our atomic writes code,Karsten Dambekalns,Karsten Dambekalns,2012-06-27 09:50,Cache,1.1 RC1,2011-07-08,"","",100,2011-07-08 09:29,"","",172400,"",FLOW3 1.0.0,"This is from Cache\Backend\FileBackend, similar stuff is patched into Doctrine's ProxyFactory:

<pre>
if ($result === FALSE) throw new \TYPO3\FLOW3\Cache\Exception('The temporary cache file ""' . $temporaryCacheEntryPathAndFilename . '"" could not be written.', 1204026251);
$i = 0;
$cacheEntryPathAndFilename = $this->cacheDirectory . $entryIdentifier . $this->cacheEntryFileExtension;
while (!rename($temporaryCacheEntryPathAndFilename, $cacheEntryPathAndFilename) && $i < 5) {
	$i++;
}
if ($result === FALSE) throw new \TYPO3\FLOW3\Cache\Exception('The cache file ""' . $cacheEntryPathAndFilename . '"" could not be written.', 1222361632);
</pre>

The second check for $result is moot, because it's not set in the rename loop..."
27995,TYPO3.Flow,Bug,"",Resolved,Should have,Quote arguments in system command on Windows,Bastian Waidelich,Bastian Waidelich,2011-07-19 12:05,Core,"",2011-07-08,"","",100,2011-07-08 11:36,"","",172700,"","","The bootstrap currently does not quote system call arguments on Windows. This leads to errors if the path to your php binary contains spaces.

<pre>
$command = 'SET FLOW3_ROOTPATH=' . FLOW3_PATH_ROOT . '&' . 'SET FLOW3_CONTEXT=' . $this->context . '&' . $this->settings['core']['phpBinaryPathAndFilename'] . ' -c ' . php_ini_loaded_file() . ' ' . FLOW3_PATH_FLOW3 . 'Scripts/flow3' . ' ' . escapeshellarg($commandIdentifier);
</pre>

Should be changed to:

<pre>
$command = 'SET FLOW3_ROOTPATH=""' . FLOW3_PATH_ROOT . '""&' . 'SET FLOW3_CONTEXT=""' . $this->context . '""&""' . $this->settings['core']['phpBinaryPathAndFilename'] . '"" -c ""' . php_ini_loaded_file() . '"" ""' . FLOW3_PATH_FLOW3 . 'Scripts/flow3' . ' ' . escapeshellarg($commandIdentifier) . '""';
</pre>

TODO: Test"
28016,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Cascade remove of cleared ArrayCollection,Henrik Møller Rasmussen,Karsten Dambekalns,2013-02-14 14:46,Persistence,"",2011-07-09,"","",0,2011-07-09 04:45,"","",173750,"",FLOW3 1.0.0,"If an aggregate root calls the clear() method of an ArrayCollection property with cascade=""all"", the child items are not removed from the database.

If however, you iterate through the collection calling remove($item) on the ArrayCollection, the items are removed from the DB. "
28035,TYPO3.Flow,Bug,"",Closed,Should have,FLOW3_REWRITEURLS is not taken into credit,Markus Bucher,Bastian Waidelich,2011-10-11 04:52,MVC - Routing,"",2011-07-09,"","",0,2011-07-09 09:23,"","",174650,"","","When mod_rewrite is not active and thus FLOW3_REWRITEURLS is not set with SetEnv, there is no error showing up during installation process or in Backend. This leads to errors and should be fixed."
28036,TYPO3.Flow,Bug,"",Resolved,Should have,Database password in Settings.yaml is not recognized when it starts with an ampersand,Daniel Lienert,Christian Müller,2011-10-19 19:37,Configuration,1.0.0,2011-07-09,"","",0,2011-07-09 09:28,"","",174700,"","","A password, that starts with an ampersand is not recognized. Ampersand on an other position causes no problem.

user: 'root'        # adjust to your database user
password: '&d4,Fg2'        # adjust to your database password
"
28052,TYPO3.Flow,Feature,"",On Hold,Should have,Possibility to enable or disable accounts,Julian Kleinhans,Julian Kleinhans,2013-05-21 07:28,Security,"",2011-07-09,"","",60,2011-07-09 14:42,"","",175500,"","","At the moment there is no possibility to enable or disable a account
"
28074,TYPO3.Flow,Feature,"",Needs Feedback,Should have,Provide a shell script that installs Phoenix or FLOW3 from git,Markus Bucher,Markus Bucher,2012-03-14 09:49,"","",2011-07-09,"","",0,2011-07-10 19:06,"","",176600,"","","The shell scripts should read the neccessary arguments to:
# checkout the latest version of Phoenix/FLOW3
# add submodules
# register the neccessary git config for pushing to gerrit
# set up the right Settings.yaml
# add the Phoenix test site"
28132,TYPO3.Flow,Task,"",Resolved,Should have,Shallow directory structure for packages,Robert Lemke,Robert Lemke,2011-07-14 11:05,Package,1.0 beta 1,2011-07-12,"","",100,2011-07-12 11:00,"","",179500,"","","With the introduction of vendor namespaces support the directory structure has become quite deep:

Package ""RobertLemke.Foo.Bar"" would reside in:
Packages/Application/RobertLemke/Foo/Bar/Classes/...

As discussed during T3DD11 we'd rather have a more shallow directory structure which also simplifies cloning a package from git:
Packages/Application/RobertLemke.Foo.Bar/Classes/...
"
28136,TYPO3.Flow,Feature,"",New,Should have,HTTP Semantics for Transactions and more,Benjamin Eberlei,"",2012-05-21 10:15,Persistence,"",2011-07-12,"","",0,2011-07-12 13:09,"","",179700,"","","Currently the Repositories are all flushed on every request no matter the type. It should default to only PUT, POST DELETE updating the repositories.

GET Requests should schedule Transactions manually in the controller.

Additionally transactions should be encapsulated in one action and not executed over many different actions. This is problematic because there is no way to stop a transaction. Transactions should be rolled back (no flushing) when an exception is thrown in the controller."
28137,TYPO3.Flow,Feature,"",Closed,Should have,Do not use clone in PersistentObject ParamConverter,Benjamin Eberlei,Karsten Dambekalns,2011-08-29 15:29,Persistence,1.0 beta 1,2011-07-13,2011-07-13,"",100,2011-07-12 13:11,"","",179750,"","","Currently clone is used inside the PersistentObject ParamConverter and objects have to be merged back into persistence context (in case of doctrine) using $em->merge(). This creates unnecessary performance problems where the state of an object is first moved into a new object, then moved back into the persistent object. 

This is a dependency of the previous transaction ticket, since cloning is currently necessary with transactions always being flushed to the database."
28138,TYPO3.Flow,Bug,"",Rejected,Should have,ReflectionService Cache should be case insensitive,Bastian Waidelich,Robert Lemke,2011-07-14 07:24,Reflection,"",2011-07-12,"","",0,2011-07-12 14:48,"","",179800,"","","Currently ReflectionService stores reflected classes and methods in the firstLevel Cache by referring to the correctly cased class/method name.
This should be changed to always use lowercased cache identifiers in order to make ReflectionService work for classes/methods where the case is not known (e.g. CommandController)."
28139,TYPO3.Flow,Bug,"",Resolved,Should have,Remove obsolete fix permissions on flow3_dev,Michael Klapper,"",2011-07-13 04:36,"","",2011-07-12,"","",100,2011-07-12 15:43,"","",179850,"","","Obsolete chmod call on *flow3_dev* - file does not exists any more.

In file: ./Packages/Framework/TYPO3/FLOW3/Scripts/setfilepermissions.sh
<pre>
sudo chmod 770 flow3_dev
</pre>"
28140,TYPO3.Welcome,Task,"",Resolved,Should have,Remove obsolete occurence of flow3_dev,Michael Klapper,"",2011-07-13 04:36,"","",2011-07-12,"","",100,2011-07-12 15:59,"","",179900,"","","On the welcome screen is still the obsolete call to *flow3_dev* available.

"
28172,TYPO3.Flow,Feature,"",Resolved,Should have,Provide CommandManager,Bastian Waidelich,Bastian Waidelich,2011-07-20 03:05,MVC,1.0 beta 1,2011-07-13,"","",100,2011-07-13 06:03,"","",181450,"","","Currently the CLI Command resolving is mostly handled by the CLI Request Builder.
But it still has some glitches (see https://review.typo3.org/#change,3298).
Besides there is some duplicated code, as we need to find available commands in various places.

My suggestion is to add a central service that knows all commands (and in which controller they reside) and can also match an input to existing commands.

The API could be:
<pre>
class CommandManager {

	/**
	 * @return array<Command>
	 */
	public function getAvailableCommands();

	/**
	 * @string $commandIdentifier foo.bar:baz:foos
	 * @return Command
	 * @throws CommandNotFoundException if no matching command is available
	 * @throws AmbiguousCommandIdentifierException if more than one Command matches the identifier (the exception contains the matched commands)
	 */
	public function getCommandByIdentifier($commandIdentifier);

}
</pre>"
28184,TYPO3.Flow,Bug,"",Rejected,Should have,"Unable to create database if entity contains member ""read""",Michael Klapper,Karsten Dambekalns,2012-01-04 15:11,Persistence,"",2011-07-13,"","",0,2011-07-13 15:49,"","",182050,"",FLOW3 1.0.0,"<pre>
/**
 * @scope prototype
 * @entity
 */
class MyModel {

	/**
	 * @var boolean
	 */
	protected $read = false;	
...
}
</pre>

Error message
<pre>


$ ./flow3 typo3.flow3:doctrine:create

Uncaught Exception in FLOW3 #42000: SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'read TINYINT(1) DEFAULT NULL, author VARCHAR(255) DEFAULT NULL, datetime DATETIM' at line 1
thrown in file Packages/Framework/Doctrine/Classes/DBAL/Connection.php
in line 618

#0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
   /var/www/project/Packages/Framework/TYPO3/FLOW3/Classes/Error/AbstractExceptionHandler.php:60

#1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()

</pre>

When i rename the member from ""$read;"" into ""$wasRead"" every thing works as expected."
28213,TYPO3.Flow,Bug,"",Resolved,Should have,Sites Configuration should overrule package Configuration,Bastian Waidelich,"",2012-05-14 20:38,Configuration,1.0.5,2011-07-14,"","",100,2011-07-14 15:13,"","",183450,"",FLOW3 1.0.0,"This is not really a bug, more a missing feature, but I think, this is rather important:
It's currently not possible to override configuration from within a Sites Package.

For example:
If you want to change the default authentication redirect URI, you could add following to the Settings.yaml of your site package:
<pre>
TYPO3:

   # redirect to login page when trying to access a protected page:
  FLOW3:
    security:
      authentication:
        providers:
          DefaultProvider:
            entryPoint:
              WebRedirect:
                uri: login.html
</pre>

But this will be overriden by the respective configuration in the Settings.yaml of the TYPO3 package.

Of course, you can copy those lines to the global Settings.yaml, but our goal should be to be able to provide all required settings with your site package..

It should be possible to somehow configure the order of how package settings are merged..

*Note:* I'm setting the target version to 1.0 beta 1 because this would probably be a breaking change afterwards.."
28228,TYPO3.Flow,Feature,"",Resolved,Must have,FLOW3 should be usable without Doctrine,Christopher Hlubek,Christopher Hlubek,2011-07-19 12:54,"","",2011-07-15,"","",100,2011-07-15 04:32,"","",184200,"","","FLOW3 should work without the Doctrine package. We should try to move the code that relies on Doctrine to a separate package to make FLOW3 more modular.

If I don't active the Doctrine package in the current version I'll get an exception during compilation:

<pre>
PHP Fatal error:  Class 'Doctrine\ORM\Query\TreeWalkerAdapter' not found in .../Packages/Framework/TYPO3.FLOW3/Classes/Persistence/Doctrine/CountWalker.php on line 24
</pre>

As a general goal we should try to push FLOW3 more into a component based architecture (though we provide the user with a full-stack framework with the base distribution)."
28231,TYPO3.Flow,Feature,"",New,Should have,Allow output to STDERR for CLI Response,Christopher Hlubek,"",2011-07-15 07:32,MVC,"",2011-07-15,"","",0,2011-07-15 07:32,"","",184350,"","",CLI Responses should have a possibility to output content for STDOUT and STDERR separately.
28245,TYPO3.Fluid,Bug,"",Resolved,Should have,Autocomplete Widget modifies query with every request,Bastian Waidelich,Bastian Waidelich,2011-07-19 05:05,Widgets,"",2011-07-15,"","",100,2011-07-15 13:25,"","",185050,"","","The autocomplete widget changes the query by adding constraints in the autocompleteAction of the widget controller.
But as the query is passed by reference this adds new constraints with every request instead of replacing the other ones.
Besides the amount of returned objects should be configurable (limit)."
28257,TYPO3.Flow,Bug,"",Resolved,Should have,Avoid Credentials to be stored in the request,Bastian Waidelich,Karsten Dambekalns,2011-08-26 03:36,Security,1.0 beta 1,2011-07-16,"","",100,2011-07-16 11:03,"","",185650,"","","When you authenticate using the PersistedUsernamePasswordProvider username & password are copied to the *GET Arguments* of the following request when used in SubRequests (plugins / widgets) because POST arguments are merged in the RequestBuilder. To avoid this, we should use ""internal request arguments"" for authentication (see #25802).

Concrete: The strings 'TYPO3.FLOW3.Security.Authentication.Token.UsernamePassword.username' and 'TYPO3.FLOW3.Security.Authentication.Token.UsernamePassword.password' in \TYPO3\FLOW3\Security\Authentication\Token\UsernamePassword::updateCredentials() should be replaced.
It could even be just __username & __password IMO.

*Note:* documentation and referring comments needs to be adjusted. To avoid headache, the token could still check for the old post vars and throw an exception (in dev context) / create a log entry (in other contexts)"
28283,TYPO3.Fluid,Bug,"",Resolved,Should have,Paginate Widget does not highlight current page,Bastian Waidelich,Bastian Waidelich,2014-12-16 05:24,Widgets,"",2011-07-18,"","",100,2011-07-18 04:12,"","",186950,"",(any),"The line
<pre>
$pages[] = array('number' => $i, 'isCurrent' => ($i === $this->currentPage));
</pre>
PaginateController::buildPagination() fails to set 'isCurrent' correctly for certain pages because $i is of type float and thus not (type safe) equal to $this->currentPage."
28294,TYPO3.Flow,Bug,"",Resolved,Must have,Command is not run in compile time if command identifier is abbreviated,Robert Lemke,Robert Lemke,2011-07-19 11:35,Core,1.0 beta 1,2011-07-18,"","",100,2011-07-18 08:43,"","",187500,"","","If a compiletime command is run through an short command identifier such as:
<pre>
./flow3 cache:flush
</pre>
the bootstrap does not recognize the command as a compile time command and runs it in runtime mode. This can lead to unexpected results."
28306,TYPO3.Flow,Bug,"",Resolved,Must have,Optional command line argument is ignored,Robert Lemke,Bastian Waidelich,2011-08-24 04:22,MVC,1.0 beta 1,2011-07-19,"","",100,2011-07-19 04:10,"","",188100,"","","Consider the following command as part of a command controller:

<pre>
public function importCommand($packageKey = NULL) {
   var_dump($packageKey);
}
</pre>

Call the command with <pre>./flow3 foo:import MyPackage.Key</pre>   

Expected result is MyPackage.Key, but actual result is NULL
"
28319,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Access denied will be logged at the wrong location in nested calls,Christopher Hlubek,"",2012-03-14 09:52,Security,"",2011-07-19,"","",0,2011-07-19 09:58,"","",188750,"",FLOW3 1.0.0,"If several method calls that were secured by the PolicyEnforcementAspect are nested, an AccessDeniedException will be logged for the outer method even when the access to the inner method was not allowed.

This is misguiding and makes policy debugging very hard. We should try to log the method that was actually not allowed and try to provide more context for debugging."
28327,TYPO3.Flow,Bug,"",Resolved,Should have,Argument mapping falsely detects tags from method description - ReflectionService RegExp issue,Robert Lemke,Sebastian Kurfuerst,2011-10-19 19:37,Reflection,1.0.0,2011-07-20,"","",100,2011-07-20 03:20,"","",189150,"","","Consider the following doc comment and method signature of a CommandController:

<pre>
	/**
	 * An example command
	 *
	 * The comment of this command method is also used for FLOW3's help screens. The first line should give a very short
	 * summary about what the command does. Then, after an empty line, you should explain in more detail what the command
	 * does. You might also give some usage example.
	 *
	 * It is important to document the parameters with @param tags, because that information will also appear in the help
	 * screen.
	 *
	 * @param string $requiredArgument This argument is required
	 * @param string $optionalArgument This argument is optional
	 * @return void
	 */
	public function exampleCommand($requiredArgument, $optionalArgument = NULL) {
		$this->view->appendContent('You called the example command.');
	}
</pre>

The property mapper will fail on this command because the ""@param tags,"" is detected as an argument definition and then the property mapper tries to convert the first argument into ""tags,"" ... which it can't'."
28373,TYPO3.Flow,Bug,"",Closed,Must have,Error after clearing temporary data,Christopher Hlubek,Robert Lemke,2011-09-09 04:42,Configuration,1.0 beta 2,2011-07-21,"","",0,2011-07-21 14:43,"","",191400,"","","After clearing temporary data in Production and calling the ""./flow3"" script to build up the cache I get the following error message:

<pre>
PHP Catchable fatal error:  Argument 1 passed to TYPO3\FLOW3\Utility\Arrays::getValueByPath() must be an array, null given, called in /var/www/xyz/releases/20110721202831/Packages/Framework/TYPO3.FLOW3/Classes/Configuration/ConfigurationManager.php on line 161 and defined in /var/www/xyz/releases/20110721202831/Packages/Framework/TYPO3.FLOW3/Classes/Utility/Arrays.php on line 159
</pre>

I suspect the cached configuration being wrong in this case."
28399,TYPO3.Flow,Feature,"",Needs Feedback,Should have,Validation message and code should be configurable for bundled validators,Christopher Hlubek,"",2012-12-10 09:52,Validation,"",2011-07-22,"","",0,2011-07-22 11:36,"","",192500,"","","For custom applications the bundled validators of FLOW3 are nice but unusable if different messages and codes have to be used (e.g. for a custom Regex Validator).

It would be more flexible to have two options @code@ and @message@ per Validator (or multiple if more than one message is added) that can be configured by the user. Additionaly a message type (""error"" or ""warning"") would be nice.

The code change is pretty straight forward and should be compatible to the current version:

<pre><code class=""php"">
protected function isValid($value) {
  ...
  // If invalid
  $message = isset($this->options['message']) ? $this->options['message'] : 'Default error message';
  $code = isset($this->options['code']) ? $this->options['code'] : 12345678;
  $this->addError($message, $code);
}
</code></pre>"
28422,TYPO3.Flow,Bug,"",Resolved,Must have,Doctrine persistence does not use correct package key for tables,Christopher Hlubek,Christopher Hlubek,2011-08-23 05:21,Persistence,1.0 beta 1,2011-07-24,"","",100,2011-07-24 05:42,"","",193600,"","","The Flow3AnnotationDriver is using the second namespace part as package key for the table name prefix. This does not work for packages without vendor name or packages with a deeper nesting of vendor names (e.g. 'Com.MyCompany.Foo').
"
28444,TYPO3.Fluid,Feature,"",Closed,Could have,Implement comment ViewHelper or language feature,Christopher Hlubek,Bastian Waidelich,2012-02-04 09:50,ViewHelpers,1.0.3,2011-07-25,"","",100,2011-07-25 04:51,"","",194600,"","","It would be great to have the possibility of commenting out Fluid code / markup without rendering it to the client. A CommentViewHelper that always returns an empty string would be trivial to write, but maybe a language feature for comments would make sense."
28477,TYPO3.Flow,Bug,"",Resolved,Must have,Method visibility filter does not work,Christopher Hlubek,Christopher Hlubek,2011-07-28 13:05,AOP,"",2011-07-26,"","",100,2011-07-26 10:53,"","",196200,"","","The method visibility filter is not doing anything (again). A wrong regexp match parses visibilities like @""public ""@ or @""protected ""@. The check for valid visibilities inside the PointcutMethodNameFilter is uselesss, because it accepts the space behind the visibility.

There is also no real unit test for the @parseDesignatorMethod@ method inside the PointcutExpressionParser and the functional test for protected methods had a wrong visibility (public instead of protected!)."
28486,TYPO3.Flow,Feature,"",Resolved,Should have,"Don't clone, use explicit change tracking instead",Benjamin Eberlei,Karsten Dambekalns,2011-08-26 10:15,Persistence,1.0 beta 1,2011-08-17,"","",100,2011-07-26 16:00,"","",196650,0.00,"","Currently the parameter converter uses ""clone"" to create copies of objects,

Much better would be to automatically set the change tracking to DEFERRED_EXPLICIT for all entities: http://www.doctrine-project.org/docs/orm/2.0/en/reference/change-tracking-policies.html

This would mean changes are only tracked when you explicitly call $em->persist(). You could then switch the implementation of the Doctrine Base Repository to not use ->merge, but ->persist.

This would greatly simplify the code and make it much more robust."
28487,TYPO3.Flow,Bug,"",Resolved,Must have,ActionController ErrorAction forgets SubpackageKey,Torsten no-lastname-given,Sebastian Kurfuerst,2011-09-08 04:35,MVC,1.0 beta 2,2011-07-26,"","",100,2011-07-26 16:21,"","",196700,"","","The method errorAction of TYPO3\FLOW3\MVC\Controller\ActionController forwards like this:

<pre>
$this->forward($referringRequest->getControllerActionName(), $referringRequest->getControllerName(), $referringRequest->getControllerPackageKey(), $referringRequest->getArguments());
</pre>

better would be something like this:

<pre>
$controllerPackageKey = $referringRequest->getControllerPackageKey();
if ($referringRequest->getControllerSubPackageKey() !== NULL) {
	$controllerPackageKey .= '\\' . $referringRequest->getControllerSubpackageKey();
}

$this->forward($referringRequest->getControllerActionName(), $referringRequest->getControllerName(), $controllerPackageKey, $referringRequest->getArguments());
</pre>

"
28525,TYPO3.Flow,Bug,"",Resolved,Should have,Caches are not flushed after creating a package,Robert Lemke,Robert Lemke,2011-07-28 12:35,Package,1.0 beta 1,2011-07-27,"","",100,2011-07-27 15:12,"","",198450,"","","After creating (or deleting, activating, deactivating) a package through the command line, the caches are not flushed. That can lead to interesting, but still unnecessary fatal errors."
28544,TYPO3.Fluid,Feature,"",Resolved,Should have,Compilation of Fluid Templates into PHP files,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-09-13 03:44,Core,"",2011-07-28,"","",57,2011-07-28 10:56,"","",199400,0.00,"",""
28545,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) fix encoding in HTML special chars VH,Sebastian Kurfuerst,Bastian Waidelich,2011-09-13 03:44,ViewHelpers,"",2011-07-28,"","",100,2011-07-28 10:57,"","",199450,"","",""
28546,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) add backporter tokens again to TemplateView,Sebastian Kurfuerst,Bastian Waidelich,2011-08-01 14:03,"","",2011-07-28,"","",100,2011-07-28 10:57,"","",199500,"","",""
28547,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,adjust backporter to show unused search/replace pairs,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-02 02:22,"","",2011-07-28,"","",100,2011-07-28 10:58,"","",199550,"","",""
28548,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) fix unit tests,Sebastian Kurfuerst,Bastian Waidelich,2011-08-01 15:34,"","",2011-07-28,"","",100,2011-07-28 10:58,"","",199600,"","",""
28549,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,"make widgets cacheable, i.e. not implement childnodeaccess interface",Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 10:58,"","",199650,"",FLOW3 1.0.0,""
28550,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,"(v4) make widgets cacheable, i.e. not implement childnodeaccess interface",Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 10:58,"","",199700,"",FLOW3 1.0.0,""
28551,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Accepted,Should have,(v4) backport VHTest,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-10-21 07:37,"","",2011-07-28,"","",80,2011-07-28 10:59,"","",199750,"",FLOW3 1.0.0,""
28552,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,(v5) write ViewHelper test for compiled run; adjust functional test to do two passes (uncached & cached),Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:00,"","",199800,"",FLOW3 1.0.0,""
28553,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,improve XHProf test setup,Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:01,"","",199850,"",FLOW3 1.0.0,""
28554,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,(v4) implement feature flag to disable caching,Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:01,"","",199900,"",FLOW3 1.0.0,""
28556,TYPO3.Fluid,Task,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,Collect profiling data,Bastian Waidelich,Sebastian Kurfuerst,2011-08-02 02:22,"","",2011-07-28,"","",100,2011-07-28 11:07,"","",200000,"","","Collect XHProf data of various scenarios:
* Not optimized
* Optimized, creating Compiled templates
* Optimized, compiled"
28557,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,Fix parameter type checking in Fluid,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-01 07:45,"","",2011-07-28,"","",100,2011-07-28 12:11,"","",200050,"","","#1: Warning: get_object_vars() expects parameter 1 to be object, string given in /opt/local/apache2/htdocs/Quickstart/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Reflection_ObjectAccess_Original.php line 133 (http://typo3.org/go/exception/1)

-> happens when one has <f:form object=""somethingWhichIsAStringButNoObject"" />"
28638,TYPO3.Flow,Bug,"",Resolved,Should have,Signals can't be defined in abstract classes,Bastian Waidelich,Robert Lemke,2011-09-29 06:36,AOP,1.0.0,2011-08-01,"","",100,2011-08-01 06:44,"","",203900,"","","The AOP ProxyClassBuilder produces invalid code when signals are defined in an abstract class.

*Steps to reproduce:*

<pre>
AbstractSignalTest.php
<code class=""php"">
<?php
namespace Foo\Bar;
abstract class AbstractSignalTest {

	public function testSignal() {
		$this->emitTestSignal();
	}

	/**
	 * @signal
	 */
	public function emitTestSignal() {}
}

?>
</code>
SignalTest.php
<code class=""php"">
<?php
namespace Foo\Bar;
class SignalTest extends AbstractSignalTest {

}
?>
</code>
In some controller:
<code class=""php"">
$signalTest = new \Foo\Bar\SignalTest();
$signalTest->testSignal();
</code>
</pre>

*Result:*
<pre>
#1: Notice: Undefined index: emitTestSignal in Development\Cache\Code\FLOW3_Object_Classes\Foo_Bar_AbstractSignalTest.php line 98
</pre>

The problem is, that the proxy code tries to access @$this->FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices@ which is declared private."
28652,TYPO3.Flow,Feature,"",Resolved,Should have,Exit code support for command-line responses,Robert Lemke,Robert Lemke,2011-08-02 03:36,MVC,1.0 beta 1,2011-08-01,"","",100,2011-08-01 14:30,"","",204600,"","",Commands should be able to define an exit code which is returned when FLOW3 exits.
28672,TYPO3.Flow,Bug,"",Resolved,Must have,Inconsistent configuration overrides for packages,Christopher Hlubek,Christian Jul Jensen,2012-11-28 06:35,Configuration,"",2011-08-02,"","",100,2011-08-02 07:28,"","",205600,"",FLOW3 1.0.0,"If one package overrides configuration of another package the result is not deterministic right now. The order of the loaded packages (from scanning the package paths, not the @PackageStates.php@) determines the order of the configuration.

We need to find a solution for this problem to always have a reliable and deterministic configuration."
28683,TYPO3.Flow,Feature,"",Closed,Should have,CachingFramework should accept cacheIdentifiers with special characters,Bastian Waidelich,"",2012-11-07 08:58,Cache,"",2011-08-02,"","",0,2011-08-02 09:29,"","",206150,"","","Currently the CachingFramework throws an exception if the specified cacheIdentifier contains a backslash for example.
This leads to the fact that we are (sometimes faultily) escaping the identifier in various places.
Instead the CachingFramework should handle this in a central place."
28733,TYPO3.Flow,Bug,"",Resolved,Must have,Implement LockManager for avoiding Race Conditions,Sebastian Kurfuerst,"",2011-08-23 14:35,Cache,1.0 beta 1,2011-08-04,"","",100,2011-08-04 02:34,"","",208650,"","",""
28782,TYPO3.Flow,Bug,"",Resolved,Must have,Can`t create other controller than Standard,Dawid ,Robert Lemke,2011-08-23 05:32,MVC,1.0 beta 1,2011-08-05,"","",100,2011-08-05 10:31,"","",211100,"","","I was checking FLOW3. I`ve downloaded sourcec yesterday.

After creating package (new) with StandardController I`ve typed

flow3.bat typo3.kickstart:kickstart:controller Packagename Something

I didn`t get SomethingController.php but StandardController.php
It ignores the name

Same thing on MacOS and Windows

D:\wamp\www\flow>flow3.bat typo3.kickstart:kickstart:controller Test Kontrolertestowy
+ .../Packages/Application/Test/Classes/Controller/StandardController.php
+ ...Private/Templates/Standard/Index.html"
28783,TYPO3.Kickstart,Feature,"",Resolved,Should have,Overwriting existing file,Dawid ,Robert Lemke,2011-08-29 05:46,"",1.0 beta 1,2011-08-05,"","",100,2011-08-05 10:33,"","",211150,"","","When you create new file like controller, model or repo with a name that already exists the old file is overwritten.
IMO there sould be an extra parameter that gives you possibility to overwrite BUT with out this parameter the new file musn`t overwrite the old one.

For example you can have similar names and misstype and your whole work is out. That is not good"
28806,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,check why flow3.bat is not included in the build,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-25 05:08,Build Process,1.0 beta 1,2011-08-07,"","",0,2011-08-07 01:53,"","",212300,"","",""
28814,TYPO3.Flow,Bug,"",Resolved,Should have,Permission issue in Package Manager?,Sebastian Kurfuerst,Robert Lemke,2011-08-25 08:06,"",1.0 beta 1,2011-08-07,"","",100,2011-08-07 11:55,"","",212700,"","","We have had the following report:

http://lists.typo3.org/pipermail/flow3-general/2011-August/001074.html

> Uncaught Exception in FLOW3 #1: Warning: chmod(): Operation not
> permitted in /srv/www/htdocs/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Package/PackageManager.php
> line 451
> thrown in file Packages/Framework/TYPO3.FLOW3/Classes/Error/ErrorHandler.php
> in line 81
> 
> #0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
> /srv/www/htdocs/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:60
> 
> #1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()

.. and should check if we can fix the issue or give the user a better explanation."
28862,TYPO3.Flow,Bug,"",Resolved,Should have,Inconsistent handling of roles as objects and strings in Account,Christopher Hlubek,Rens Admiraal,2013-04-12 08:39,Security,2.1,2011-08-09,"","",100,2011-08-09 05:44,"","",215100,"",FLOW3 1.0.0,"While the public methods of @Account@ that deal with @Role@s use objects, account internally stores only the role identifiers as strings. This should be changed."
28868,TYPO3.Flow,Feature,"",Resolved,Should have,Default Doctrine Annotation for single object relation should be derived automatically,Christian Müller,Karsten Dambekalns,2011-08-25 07:05,Persistence,1.0 beta 1,2011-08-09,"","",100,2011-08-09 08:45,"","",215400,"","","	/**
	 * @var \Me\MyPackage\Domain\Model\DepartmentPerson
	 */
	protected $departmentPerson = NULL;

Will result in strange errors that are not really helpful. Should by default create OneToOne or ManyToOne (maybe better) Relation (tbd) or at least give some warning on compile?"
28883,TYPO3.Welcome,Bug,"",Resolved,Must have,Pre-Beta Documentation link is a bit faulty,Patrick ,Robert Lemke,2011-08-24 04:05,"",1.0 beta 1,2011-08-10,"","",100,2011-08-10 03:35,"","",216150,"","","I've pulled todays version from GIT and tried to hit the link 'Pre-Beta Documentation' from the Welcome page. The link directs me to a non existent URL 'http://flow3.typo3.org/fileadmin/manual/nighly/'. I think it's just a typo 'nighly'->'nightly'.

"
28964,TYPO3 Flow Base Distribution,Feature,"",New,Could have,Integrate Behat tool for BDD,Fernando Arconada,"",2011-08-13 10:03,"","",2011-08-13,"","",0,2011-08-13 10:03,"","",220150,"","",In order to have BDD in FLOW3 should be great to integrate Bethat (http://behat.org/) as is it done for Symfony (or even better for FLOW3)
28972,TYPO3.Fluid,Bug,"",Resolved,Must have,(v5) Bug in new caching mechanism,Peter Beernink,Sebastian Kurfuerst,2011-08-16 03:23,Core,1.0 beta 1,2011-08-14,"","",100,2011-08-14 11:30,"","",220550,"","","After creating a fresh clone of the FLOW3 base distribution, I encountered the following behaviour.
When you run the FLOW3 Welcome package for the first time, everything works as expected however, when you refresh the page, all styling is gone.

It turned out that the HTML output is missing all code between the <f:base> and the first variable, {version} in this case.
Doing some further checking, that whole block is missing from the cached PHP code in the Cache/Code/Fluid_TemplateCache/...html file

Although I've tested this in v5, it might as well be also an issue in v4."
28981,TYPO3.Flow,Feature,"",Resolved,Should have,Implement autocompletion in interactive shell mode,Oliver Hader,Oliver Hader,2011-08-15 14:33,Core,1.0 beta 1,2011-08-15,"","",0,2011-08-15 07:27,"","",220950,"","",The autocompletion in the interactive shell mode shall show all available and non-internal commands.
28995,TYPO3.Flow,Bug,"",Resolved,Must have,Deferred Loading does not work with Doctrine QueryResult,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-16 04:05,Persistence,1.0 beta 1,2011-08-16,"","",100,2011-08-16 01:42,"","",221650,"","","When looking into Doctrine\QueryResult, it becomes obvious that the rows are *not* lazily initialized on first access, but initialized *all the time*. This is a severe performance penalty.

In #26862 the Doctrine Query was made serializable; but it was never accessed as the QueryResult was not lazy. This needs to be fixed."
29004,TYPO3.Fluid,Bug,"",Closed,Must have,if viewhelper does not evaluate conditions correctly,Manuel Stofer,Bastian Waidelich,2011-08-16 07:20,Core,"",2011-08-16,"","",0,2011-08-16 05:22,"","",222100,"","","Actually the if viewhelper just typecasts the parameter 'condition' to boolean
which is not what you expect when you read the comments in the header.

In the header of IfViewhelper.php you can find examples like:
<f:if condition=""{rank} % 2"">
    Will be shown if rank % 2 != 0.
</f:if>


But when you do something like this:

<f:if condition=""4 % 2"">
	4 % 2 != 0
</f:if>

<f:if condition=""4 == 5"">
	4 == 5
</f:if>


Fluid outputs: 

4 % 2 != 0
4 == 5


"
29037,TYPO3.Flow,Feature,"Feature #28486: Don't clone, use explicit change tracking instead",Rejected,Should have,Use annotation to mark entities as aggregate root,Karsten Dambekalns,Karsten Dambekalns,2011-08-26 10:15,Persistence,1.0 beta 1,2011-08-17,"","",100,2011-08-17 05:21,"","",223750,"","","* @aggregateRoot annotation (normative)
* Repository CAN exist for non-aggregate root -> EXPLAIN that this is pragmatic, but no clean DDD"
29038,TYPO3.Flow,Feature,"Feature #28486: Don't clone, use explicit change tracking instead",Resolved,Should have,Set useful defaults for cascade attributes in Doctrine,Karsten Dambekalns,Karsten Dambekalns,2011-08-26 07:35,Persistence,1.0 beta 1,2011-08-17,"","",100,2011-08-17 05:23,"","",223800,"","","Use DDD semantics to add cascade attributes all INSIDE aggregate boundaries, NO cascading to other aggregate roots. Manually added cascade wins over automagic, of course.
"
29039,TYPO3.Flow,Task,"Feature #28486: Don't clone, use explicit change tracking instead",Resolved,Should have,Change default policy for Doctrine to DEFERRED_EXPLICIT,Karsten Dambekalns,Karsten Dambekalns,2011-08-26 08:36,Persistence,1.0 beta 1,2011-08-17,"","",100,2011-08-17 05:26,"","",223850,"","","* change tracking policy -> explicit
* no more clone PersistentObjectConverter
* Repository adjustments
** add($obj) -> throw exception when object is not new
** remove($obj) -> throw exception when object is not known in persistence BE
** update($obj) -> throw exception when object is not known in persistence BE, call PersistenceBackend::persist()

Biggest change: without update() call no changes will be persisted, no more automatic persistence."
29040,TYPO3.Flow,Task,"Feature #28486: Don't clone, use explicit change tracking instead",Resolved,Should have,Adjust documentation to new persistence behavior,Karsten Dambekalns,Karsten Dambekalns,2011-08-26 10:14,- Documentation -,1.0 beta 1,2011-08-17,"","",100,2011-08-17 05:27,"","",223900,"","","* changed clone-behavior
* changed Repository::update()
* default cascade attributes
* marking aggregate roots"
29045,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Wakeup of Query sets wrong state if originally no constraint has been set,Ferdinand Kuhl,"",2011-08-17 11:39,"","",2011-08-17,"","",0,2011-08-17 11:21,"","",224150,"","","If I save a Query-Result in a WidgetController and afterwards call $result->getQuery->execute() I receive an empty result, because of the try-catch block around the execute call which simply returns an empty result in case of an exception.

The problem seems to be in the __wakeup() method of \TYPO3\FLOW3\Persistence\Doctrine\Query 
<pre>
	public function __wakeup() {
		$this->queryBuilder->where($this->constraint);
</pre>

everything works fine, if I inject a condition like this:

<pre>
	public function __wakeup() {
		if ($this->constraint)
			$this->queryBuilder->where($this->constraint);
</pre>"
29065,TYPO3.Fluid,Feature,"",Closed,Could have,HTML5 Custom Data Attributes,Thomas Allmer,Sebastian Kurfuerst,2011-09-22 09:09,Core,"",2011-08-17,"","",0,2011-08-17 17:51,"","",225150,"","","Fluid should support the use of HTML5 Custom Data Attributes as described in the W3C Specification[1].

The Patterns need to be changed so that attributes with ""-"" are actually identified as such. Currently fluid breaks with such attributes.
Furthermore ""data-*"" won't fit into the current way of registering attributes with a full name and type. Fluid will probably need a solution which allows a registration of patterns for attributes. (always with string as type?)

[1]: http://dev.w3.org/html5/spec/elements.html#embedding-custom-non-visible-data-with-the-data-attributes"
29066,TYPO3.Flow,Bug,"",Resolved,Must have,Doctrine::QueryResult->getQuery() does not clone the query before returning it,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-18 04:49,Persistence,1.0 beta 1,2011-08-18,"","",100,2011-08-18 00:28,"","",225200,"","",".. This means the original query gets modified, which is wrong.

We should also create a test case for this."
29158,TYPO3.Flow,Bug,"",Resolved,Must have,Exception is created but not thrown,Sascha Egerer,Karsten Dambekalns,2011-08-23 08:13,Persistence,1.0 beta 1,2011-08-22,"","",100,2011-08-22 09:28,"","",229650,"","","In the Flow3AnnotationDriver class an exception is created but not thrown because ""throw"" is missing."
29201,TYPO3.Flow,Feature,"",Resolved,Must have,Make generic persistence follow new paradigms,Karsten Dambekalns,Christopher Hlubek,2011-08-31 11:06,Persistence,1.0 beta 2,2011-08-24,"","",100,2011-08-24 01:09,"","",231750,"","","This means:

* persist only after @update()@ has been called
* dirty check only instances given to @update()@"
29202,TYPO3.Flow,Task,Task #27561: Complete documentation,New,Should have,Provide a Cherokee Server Configuration for FLOW3,Karsten Dambekalns,"",2011-08-24 01:45,- Documentation -,"",2011-08-24,"","",0,2011-08-24 01:45,"","",231800,"","",Explain how to set up Cherokee so it works with FLOW3.
29213,TYPO3.Flow,Task,"",Resolved,Must have,Make table name correspond to full model class name,Karsten Dambekalns,Karsten Dambekalns,2011-08-26 04:35,Persistence,1.0 beta 1,2011-08-24,"","",100,2011-08-24 06:40,"","",232350,"","",To avoid name clashes the generated table names should be based on the FQCN of a model.
29244,TYPO3.Flow,Bug,"",Resolved,Should have,cloning models don't reset persistence identifier,Torsten no-lastname-given,"",2011-08-26 09:06,Persistence,"",2011-08-25,"","",100,2011-08-25 08:56,"","",233900,"","","Adding cloned models to repository throws ""SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry"" Exception.

This solves the issue:
<pre>
public function __clone() {
	$this->FLOW3_Persistence_Identifier = \TYPO3\FLOW3\Utility\Algorithms::generateUUID();
}
</pre>

"
29257,TYPO3 Flow Base Distribution,Feature,"",Rejected,Should have,Doctrine migrations couldn't be specified by environment,Fernando Arconada,Karsten Dambekalns,2011-08-29 05:47,"","",2011-08-25,"","",0,2011-08-25 17:36,"","",234550,"","",From command line you can execute doctrine migrations only in production environment
29258,TYPO3.Flow,Feature,"",Needs Feedback,Should have,Provide a way to override classes by environment,Fernando Arconada,"",2012-03-14 14:29,"","",2011-08-25,"","",0,2011-08-25 18:01,"","",234600,"","","In FLOW3 you can define several environments in your configuration. But, how could you override a class (ie. a controller) depending of the environment?.

If you always can clone your server you dont need environments, even in configuration.

I'm thinking in something like

MyPackage
 Classes
  mycontroller.php
  ValidationEnvironment
    mycontroller.php


The class is only overrided if it is defined for this environment
Cause the feature could decrease the performance of the framework it could be enabled/disabled by a config option
"
29266,TYPO3.Flow,Task,Task #27561: Complete documentation,Resolved,Should have,"Transfer ""Introduction"" chapter to ReST",Sebastian Kurfuerst,Karsten Dambekalns,2012-06-25 12:50,- Documentation -,1.1,2011-08-26,"","",100,2011-08-26 04:26,"","",234950,"","",see attachment
29268,TYPO3.Flow,Task,Task #27561: Complete documentation,Closed,Should have,Transfer / Rewrite MVC chapter,Sebastian Kurfuerst,Robert Lemke,2012-07-31 11:40,- Documentation -,1.1,2011-08-26,"","",30,2011-08-26 04:27,"","",235050,"","",""
29271,TYPO3.Flow,Bug,"",Closed,Should have,Query setOrdering doesn't work on relations,Torsten no-lastname-given,"",2012-03-14 10:07,Persistence,"",2011-08-26,"","",0,2011-08-26 06:27,"","",235200,"",FLOW3 1.0.0,"TYPO3\FLOW3\Persistence\Doctrine\Query->setOrdering does not work on related fields:


Currently:
<pre>
	public function setOrderings(array $orderings) {
		$this->orderings = $orderings;
		$this->queryBuilder->resetDQLPart('orderBy');
		foreach ($this->orderings AS $propertyName => $order) {
			$this->queryBuilder->addOrderBy($this->queryBuilder->getRootAlias() . '.' . $propertyName, $order);
		}
		return $this;
	}
</pre>

Better:
<pre>
	public function setOrderings(array $orderings) {
		$this->orderings = $orderings;
		$this->queryBuilder->resetDQLPart('orderBy');
		foreach ($this->orderings AS $propertyName => $order) {
			$this->queryBuilder->addOrderBy($this->getPropertyNameWithAlias($propertyName), $order);
		}
		return $this;
	}
</pre>"
29290,TYPO3.Fluid,Bug,"",Resolved,Must have,Additional Identity Properties not set on mapping error,Torsten no-lastname-given,Bastian Waidelich,2013-09-26 10:36,ViewHelpers,"",2011-08-26,"","",100,2011-08-26 16:24,"","",236050,"",FLOW3 1.0.0,"After a mapping error occurred, no additional identity properties are set and FLOW3 tries to create a new object.

Could be easily fixed in TYPO3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper

currently:
<pre>
	protected function getValue() {
		$value = NULL;

		if ($this->arguments->hasArgument('value')) {
			$value = $this->arguments['value'];
		} elseif ($this->hasMappingErrorOccured()) {
			$value = $this->getLastSubmittedFormData();
		} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getPropertyValue();
		}
		if (is_object($value)) {
			$identifier = $this->persistenceManager->getIdentifierByObject($value);
			if ($identifier !== NULL) {
				$value = $identifier;
			}
		}
		return $value;
	}
</pre>


Better:
<pre>
	protected function getValue() {
		$value = NULL;

		if ($this->arguments->hasArgument('value')) {
			$value = $this->arguments['value'];
		} elseif ($this->hasMappingErrorOccured()) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getLastSubmittedFormData();
		} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getPropertyValue();
		}
		if (is_object($value)) {
			$identifier = $this->persistenceManager->getIdentifierByObject($value);
			if ($identifier !== NULL) {
				$value = $identifier;
			}
		}
		return $value;
	}
</pre>"
29292,TYPO3.Flow,Bug,"",Resolved,Must have,Typing help on FLOW3 shell exits,Hari K T,Robert Lemke,2011-09-06 06:06,Command,1.0 beta 2,2011-08-27,"","",100,2011-08-26 23:20,"","",236150,"","","I have typed ./flow3 flow3:core:shell and the shell prompt came .

When typing help , it throws the below error.

<pre>
hari@hari-Vostro1510:/media/Linux/flow3$ ./flow3 flow3:core:shell
FLOW3 Interactive Shell

FLOW3 > help

Uncaught Exception in FLOW3 #1: Catchable Fatal Error: Argument 1 passed to TYPO3\FLOW3\Command\CoreCommandController::echoSubProcessResponse() must be an array, null given, called in /media/Linux/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Command/CoreCommandController.php on line 246 and defined in /media/Linux/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Command/CoreCommandController.php line 303
thrown in file Packages/Framework/TYPO3.FLOW3/Classes/Error/ErrorHandler.php
in line 81
Reference code: 20110827084131a1af4f

#0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
   /media/Linux/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:60

#1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()

hari@hari-Vostro1510:/media/Linux/flow3$ ./flow3 flow3:core:shell
FLOW3 Interactive Shell

FLOW3 > 

Bye!
hari@hari-Vostro1510:/media/Linux/flow3$ 

</pre>"
29295,TYPO3.Flow,Bug,"",Closed,-- undefined --,Uncaught Exception in FLOW3 SQLSTATE[HY000]: General error: 1005 Can't create table 'phoenix.#sql-3dc_28' (errno: 150),Hari K T,Christian Müller,2011-11-07 15:55,Persistence,"",2011-08-27,"","",0,2011-08-27 08:31,"","",236300,"",FLOW3 1.0.0,"Hi ,

I was trying the Blog Tutorial . As I was not having the cheat sheet , at some point I downloaded the Blog Package from the git .

I did a migration and it throws the below errors . Is it a bug ?

<pre>

hari@hari-Vostro1510:/media/Linux/flow3$ ./flow3 doctrine:migrate

Uncaught Exception in FLOW3 SQLSTATE[HY000]: General error: 1005 Can't create table 'phoenix.#sql-3dc_28' (errno: 150)
thrown in file Packages/Framework/Doctrine/Classes/DBAL/Connection.php
in line 618

#0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
   /media/Linux/flow3/Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:60

#1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()

hari@hari-Vostro1510:/media/Linux/flow3$ 
</pre>"
29300,TYPO3.Flow,Bug,"",Resolved,Should have,Bug activating Package ./flow3 package:activate TYPO3.Faker,Hari K T,Robert Lemke,2011-10-21 07:24,Package,"",2011-08-27,"","",100,2011-08-27 13:30,"","",236550,"",FLOW3 1.0.0,"<pre>
hari@hari-Vostro1510:/media/Linux/flow3$ ./flow3 setup:profilingdata
The required package TYPO3.Faker is not active.hari@hari-Vostro1510:/media/Linux/flow3$ ./flow3 package:activate TYPO3.Faker
Flushed all caches.
PHP Fatal error:  Call to a member function dispatch() on a non-object in /media/Linux/flow3/Packages/Framework/TYPO3.FLOW3/Classes/SignalSlot/SignalAspect.php on line 49
hari@hari-Vostro1510:/media/Linux/flow3$ 

</pre>"
29303,TYPO3.Fluid,Bug,"",Resolved,Should have,TYPO3\Fluid\View\TemplateView getTemplateRootPath should be public,Fernando Arconada,"",2013-03-19 10:37,View,"",2011-08-28,"","",100,2011-08-28 05:30,"","",236700,"",FLOW3 1.0.0,"if TYPO3\Fluid\View\TemplateView setTemplateRootPath is public then the getTemplateRootPath should be also

The opposite have sense: set as protected and get as public. But if you could write you should be able to read what you have write"
29326,TYPO3.Flow,Bug,"",Resolved,Should have,./flow3 core:setfilepermissions should not rely on sudo without proper test,Steffen Müller,"",2013-02-15 11:21,Command,1.0 beta 2,2011-08-29,"","",100,2011-08-29 11:48,"","",237850,"","","@./flow3 core:setfilepermissions@ calls sudo without a proper test if it is installed and correctly setup.
On systems without sudo this leads to gazillions of ugly failing sudo calls within the find loop.

This can be reproduced on standard debian installation which is shipped without sudo.

I suggest not to rely on sudo at all, but prompt the user for running @./flow3 core:setfilepermissions@ as root or with sudo himself."
29358,TYPO3.Flow,Feature,"",Resolved,Should have,Enable use of @ (shut-up-operator),Ferdinand Kuhl,"",2011-09-05 07:06,Error,"",2011-08-30,"","",100,2011-08-30 11:23,"","",239350,"","","The FLOW3 error and exception handler does a good job. But if you have to integrate foreign code, suppressing foreign errors (E_STRICT or similar) is the only possibility to get this code to work.

PHP suggests to check (error_reporting() === 0) in order to realize if error_handling have been temporarily disabled.

I temporarily added to lines to the ErrorHandler::handleError function:

<pre><code class=""php"">if(error_reporting() === 0)
			return;</code></pre>"
29374,TYPO3.Flow,Bug,"",Resolved,Should have,ActionController doesn't initialize Errors correctly,Bastian Waidelich,Bastian Waidelich,2011-08-31 04:25,MVC,1.0 beta 2,2011-08-31,"","",100,2011-08-31 04:23,"","",240150,"","","The ActionController doesn't use the correct controller API in
getErrorFlashMessage(), arguments are not passed to the error FlashMessage resulting in the following message:
<pre>
An error occurred while trying to call %1$s->%2$s()
</pre>

As work around you can override the method @getErrorFlashMessage()@ in your controller."
29387,TYPO3.Flow,Feature,"",Needs Feedback,Should have,A token with wrong credentials should throw an exception,Christopher Hlubek,Andreas Förthner,2011-08-31 09:32,Security,"",2011-08-31,"","",0,2011-08-31 09:32,"","",240800,"","",It would be better if a token that has wrong credentials causes an exception in the AuthenticationProviderManager. I don't see any case right now where we would want to proceed with invalid / wrong credentials in a token.
29389,TYPO3.Flow,Feature,"",Resolved,Should have,Provide simple code migration mechanism,Bastian Waidelich,Karsten Dambekalns,2012-05-02 20:39,"",1.1,2011-08-31,"","",100,2011-08-31 09:58,"","",240900,"","","For people up-/downgrading from one FLOW3 version to another, there should be some tool that executes required migrations etc.

This could be a simple FLOW3 CLI Command IMO.
Changes that need to replace code could be put in @<Package>/Migrations/Php/Version<timestamp>.php@ (just like Doctrine migrations.
A consequence of that would be that changes must not break CLI (at least after caches have been flushed).

Some issues/questions:

* Do we need to provide a *downgrading* mechanismn?
* How can we track from which to which version the user is up-/downgrading?
* Do we need some automatic backup solution if anything goes wrong?"
29392,TYPO3.Flow,Bug,"",Resolved,Should have,Persistence\Generic\AbstractBackend does not cascade persist correctly,Karsten Dambekalns,Karsten Dambekalns,2011-09-02 06:06,Persistence,1.0 beta 2,2011-08-31,"","",100,2011-08-31 12:09,"","",241050,"","","When using the generic persistence some updates are not correctly persisted. One example is a change to the name of an account holder in the Blog (the username itself is changed correctly).
This at least occurred when using the PDO backend."
29395,TYPO3.Fluid,Bug,"",Resolved,Should have,SelectViewHelper with multiple=true cannot work with Collections,Ferdinand Kuhl,"",2011-11-08 00:37,"",1.0.1,2011-08-31,"","",0,2011-08-31 13:36,"","",241200,"",FLOW3 1.0.0,"When using collections as preselected values for SelectView-Helper with option multiple=""1"" the preselection is only possible when you have a ""public"" identity field.

The preselection for lists does only work if ""optionValueField""-Argument is set, which you cannot use with the internal flow3-identity.

First part of the solution is:
<pre><code class=""php"">
/**
 * Retrieves the selected value(s)
 *
 * @return mixed value string or an array of strings
 * @author Bastian Waidelich <bastian@typo3.org>
 */
protected function getSelectedValue() {
	$value = $this->getValue();
	if (!$this->hasArgument('optionValueField') && ! is_array($value)) {
		return $value;
	}
</code></pre>

(Important is the & ! is_array())

But than further the code runs in the next problem selecting by using $this->arguments['optionValueField'] to retrieve the value.
"
29405,TYPO3.Flow,Bug,"",New,Must have,"When storing a new entity inside the session, it will be fully serialized instead of just the reference being stored",Sebastian Kurfuerst,"",2013-04-04 05:34,Session,"",2011-09-01,"","",0,2011-09-01 03:15,"","",241700,"",FLOW3 1.0.0,"When having the following code:

<pre><code class=""php"">
$newEntity = new MyEntity();
$newEntityRepository->add($newEntity);

$someObjectWithSessionScope->setEntity($newEntity);
</code></pre>

Then, $newEntity is FULLY serialized; although it should only be stored as UUID reference in the session.

As an example, this happens when running the BlogExample setup; after creating an initial user -- this user is directly logged in, but the Account is fully stored in the session.

This leads to very weird bugs, in my case I wanted to store a reference to $account in another entity; and doctrine then told me that the object was not known yet.

The issue is in DependencyInjection\ProxyClassBuilder::buildSerializeRelatedEntitiesCode around line 239:


<pre><code class=""php"">
if (\$this->\$propertyName instanceof \\TYPO3\\FLOW3\\Persistence\\Aspect\\PersistenceMagicInterface && !\\TYPO3\\FLOW3\\Core\\Bootstrap::\$staticObjectManager->get('TYPO3\\FLOW3\\Persistence\\PersistenceManagerInterface')->isNewObject(\$this->\$propertyName) || \$this->\$propertyName instanceof \\Doctrine\\ORM\\Proxy\\Proxy) {
				if (!property_exists(\$this, 'FLOW3_Persistence_RelatedEntities') || !is_array(\$this->FLOW3_Persistence_RelatedEntities)) {
			
</code></pre>

Basically this check somehow needs to be adjusted, such that:
1) New objects *which are scheduled for addition* are serialized as UUID
2) New objects *which are NOT scheduled for addition* are serialized completely.

@Karsten: Any hints on how we can check that? It seems that PersistenceManagerInterface.::isNewObject also returns TRUE when the object is not known at all to the unit of work. Maybe we need to extend PersistenceManagerInterface then?
"
29406,TYPO3.Kickstart,Bug,"",Resolved,Should have,kickstart:commandcontroller renders appendContent() code,Robert Lemke,Karsten Dambekalns,2011-09-09 03:38,"",1.0 beta 2,2011-09-01,"","",100,2011-09-01 03:46,"","",241750,"","","The code rendered by this kickstart command renders 

   $this->response->appendContent(sprintf('You called the example command and passed ""%s"" as the first argument.', $requiredArgument));

but should render

   $this->outputLine('You called the example command and passed ""%s"" as the first argument.', array($requiredArgument));"
29407,TYPO3.Flow,Bug,"",Resolved,Should have,help command does not display description,Robert Lemke,Bastian Waidelich,2011-09-08 11:35,Command,1.0 beta 2,2011-09-01,"","",100,2011-09-01 03:50,"","",241800,"","","The command-line help command doesn't display the long help text of a single command.

Example:

   ./flow3 help kickstart:package

only displays this help text:

<pre>
Kickstart a new package

USAGE:
./flow3 kickstart:package <packageKey>

ARGUMENTS:
  packageKey           The package key, for example ""MyCompany.MyPackageName""
</pre>

This text is missing:
<pre>
Creates a new package and creates a standard Action Controller and a sample template for its Index Action.
For creating a new package without sample code use the package:create command.
</pre>"
29412,TYPO3.Flow,Task,"",Resolved,Should have,Remove generic PDO backend,Karsten Dambekalns,Karsten Dambekalns,2011-09-05 14:36,Persistence,1.0 beta 2,2011-09-01,"","",100,2011-09-01 05:05,"","",242050,"","","With the integration of Doctrine the old PDO based persistence backend is obsolete. The generic persistence basics will stay, for use by things like the CouchDB package."
29414,TYPO3.Flow,Bug,"",Resolved,Must have,Deletion of packages results in fatal error,Robert Lemke,Robert Lemke,2011-09-06 05:36,Command,1.0 beta 2,2011-09-01,"","",100,2011-09-01 06:54,"","",242150,"","","Most package operations (package:delete, package:deactivate etc.) and possibly also flow3:cache:flush result in a fatal error like this one:
<pre>
$ ./flow3 package:delete TYPO3.T3con11Typo3Org
Flushed all caches.

Fatal error: Call to a member function dispatch() on a non-object in /opt/local/apache2/htdocs/sites/flow3.org/Packages/Framework/TYPO3.FLOW3/Classes/SignalSlot/SignalAspect.php on line 49
</pre>
"
29415,TYPO3 Flow Base Distribution,Task,"",Resolved,Could have,Remove @license tags and add general license information,Robert Lemke,Karsten Dambekalns,2011-09-29 06:32,"",1.0.0,2011-09-01,"","",100,2011-09-01 06:59,"","",242200,"","",We should remove all @license tags in class doc comments and instead place a general LICENSE.txt file in the Documentation or Meta directory of each package. The general file comment block could also be simplified and mention that license file.
29416,TYPO3.Flow,Bug,"",Resolved,Must have,Aggregate root detection for Person vs AbstractParty is broken,Karsten Dambekalns,Karsten Dambekalns,2011-09-30 06:24,Persistence,1.0.0,2011-09-01,"","",100,2011-09-01 07:23,"","",242250,"","","The association from Account to Person is cascaded during persist, because the fact that Person has a PersonRepository is not detected from the type hint to AbstractParty in the Account class."
29419,TYPO3.Flow,Bug,"",Resolved,Should have,"It is impossible to use the Collection interface in ""type hints""",Karsten Dambekalns,Karsten Dambekalns,2011-09-09 09:21,Utility,1.0 beta 2,2011-09-01,"","",0,2011-09-01 09:16,"","",242400,"","","Currently it is not possible to use the Collection interface for @param or @var annotations, because the TypeHandling doesn't consider it a valid collection type. For the sake of decoupling it should be possible to do so, though."
29425,TYPO3.Flow,Bug,"",New,Should have,Deletion of a blog post with resources fails with FK constraint error,Karsten Dambekalns,"",2011-10-21 07:20,Persistence,"",2011-09-01,"","",0,2011-09-01 12:04,"","",242700,"",FLOW3 1.0.0,"[Debug this and update this issue to contain a ""neutral"" description.]"
29449,TYPO3.Flow,Bug,"",Resolved,Must have,Add safeguard preventing to reflect Doctrine Proxies,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-09-05 06:36,Reflection,1.0 beta 2,2011-09-01,"","",100,2011-09-02 00:58,"","",243350,"","","In some custom application of mine, I have accidentally reflected a doctrine proxy class; which lead to the ReflectionService being called like this:

<pre>ReflectionService::reflectClass('TYPO3\FLOW3\Persistence\Doctrine\Proxies\SandstormMediaWorkflowDomainModelProcessInstanceProxy')</pre>

The ReflectionService reflected the class, returned the expected result and then *saved* the information about the above classname in the cache.

Unluckily, the above class implements multiple interfaces:

* @Doctrine\ORM\Proxy\Proxy@
* @TYPO3\FLOW3\AOP\ProxyInterface@ (as also some aspects apply to the above class)

Now, on the next FLOW3 run, the following happens:

* The @Object\Configuration\ConfigurationBuilder@ iterates through all available class names, thus it will also iterate over @Doctrine\ORM\Proxy\Proxy@
* The @ConfigurationBuilder@ then asks @ReflectionService::getDefaultImplementationClassNameForInterface('Doctrine\ORM\Proxy\Proxy')@
* The ReflectionService returns *our above initial class (....Proxies\SandstormMedia.....Proxy)*; because that's the only known implementation of the Proxy interface
* then, various weird things can happen... for example @ReflectionService::getMethodTagsValues(...)@ might fail because the ...Proxy class could not be loaded by the autoloader.

This leads to errors like:

<pre>Uncaught Exception in FLOW3 Class TYPO3\FLOW3\Persistence\Doctrine\Proxies\SandstormMediaWorkflowDomainModelProcessInstanceProxy does not exist thrown in file Packages/Framework/TYPO3.FLOW3/Classes/Reflection/ReflectionService.php in line 595 #0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli() Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:60 #1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()
</pre>

So, the behavior is as follows:

* on first hit, everything works.
* on second hit, *at compile time*, the system seems to break randomly (took me quite some time to figure out what happens)

h2. Root Cause

The issue was caused by some custom package of mine, calling the ReflectionService in a wrong/unspecified way. I did $reflectionService->getClassSchema(get_class($object));
where $object was a doctrine proxy. And this lead to the above behavior.

h2. Possible Solutions

We somehow need to prevent the above root cause. For that, I see three possibilities, all of them adding a check to @ReflectionService::reflectClass()@

# fail silently when detecting that the incoming class name is a doctrine proxy
# throw an exception when detecting that the incoming class name is a doctrine proxy
# when detecting a doctrine proxy, find out the class name the user *really* wanted to reflect instead, and return this reflection data instead.

3) might have some side-effects; as we would need to touch most of the methods in the ReflectionService, everywhere @$this->reflectClass()@ is called. That's *why my preferred solution is 2)*.

h2. How to continue

I'll fix this issue; I'd just like your opinion which solution you like most.

Greets, Sebastian"
29452,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong use of sys_get_temp_dir() in unit tests,Karsten Dambekalns,Karsten Dambekalns,2011-09-06 04:06,- Testing -,1.0 beta 2,2011-09-02,"","",100,2011-09-02 04:08,"","",243500,"","","When running the unit tests, two warnings are emitted in EnvironmentTest:
@PHP Warning:  sys_get_temp_dir() expects exactly 0 parameters, 1 given in .../TYPO3.FLOW3/Tests/Unit/Utility/EnvironmentTest.php on line xx@
"
29457,TYPO3.Fluid,Bug,"",Resolved,Must have,Template Compiler creates invalid Class names,Bastian Waidelich,"",2011-09-07 05:36,Core,1.0 beta 2,2011-09-02,"","",100,2011-09-02 13:56,"","",243750,"","","The ""identifier"" of a compiled template is based on the last modification timestamp and on the name of the original template/partial/layout.
In Core/Compiler/TemplateCompiler::store() this identifier is used as part of the class name for the compiled template without sanitizing the string first. This leads to invalid class names (= fatal error) if the identifier contains (for example) a dash.

*Note:* This also affects v4 and needs to be backported!"
29476,TYPO3.Flow,Feature,"",New,Should have,Provider rendering time and query count for request,Robert Lemke,"",2011-09-05 03:22,"","",2011-09-05,"","",0,2011-09-05 03:22,"","",244700,"","",It would be nice if FLOW3 could calculate the rendering time and the amount of queries executed for a single request and then make that information available to the developer. A simple way to do that could be by adding an HTML comment or HTTP response header. Later on the admin tool should support it of course.
29486,TYPO3.Flow,Bug,"",Resolved,Should have,injectSettings() doesn't receive always the settings of its own package,Robert Lemke,Robert Lemke,2011-09-05 13:06,Object,1.0 beta 2,2011-09-05,"","",100,2011-09-05 06:18,"","",245200,"","","injectSettings() should always receive the settings of that package the inject method is declared in. That is, we should derive the package key for the settings from the name of the class containing the injectSettings() method.

Currently this is not the case for settings injection defined in the Objects.yaml and referring to a different class (see related issue)."
29488,TYPO3.Flow,Bug,"",Resolved,Should have,AuthenticationManager::authenticate() does not throw Exception for invalid credentials,Carsten Bleicker,Bastian Waidelich,2011-10-19 19:37,Security,1.0.0,2011-09-05,"","",100,2011-09-05 08:51,"","",245300,"","","if i send empty login data the result of authentication is allways true here.
can somebody reproduce this? exception is also not thrown.
talking about this part:
<pre>public function authenticateAction() {

	$authenticated = FALSE;
	try {
		$this->authenticationManager->authenticate();
		$authenticated = TRUE;
	} catch (\TYPO3\FLOW3\Security\Exception\AuthenticationRequiredException $exception) {
		// No Exception is thrown if user sends empty form?
		var_dump($exception);
	}

	/**
	 * At this point $authenticated is allways true if user sends empty form?
	 */ 
	var_dump($authenticated);
	die();

	if ($authenticated) {
	........
}
</pre>"
29489,TYPO3.Flow,Feature,"",Closed,Should have,Simple remote packages support,Robert Lemke,Robert Lemke,2012-11-12 03:51,Package,"",2011-09-05,"","",0,2011-09-05 09:39,"","",245350,"","","FLOW3 should offer some basic package management based on Git repositories.

This needs to be further specified; for the time being, this ticket acts as an anchor for this feature."
29506,TYPO3.Flow,Task,"",Resolved,Should have,Entities lying in the session should be lazy loaded,Andreas Förthner,Andreas Förthner,2011-09-07 06:37,Persistence,1.0 beta 2,2011-09-06,"","",100,2011-09-06 05:06,"","",246150,"","",This can be done be (de)serializing only lazy loading proxies instead of the original object.
29508,TYPO3.Flow,Bug,"",Closed,-- undefined --,multipart/form-data cannot be saved!,Andreas Keßler,Sebastian Kurfuerst,2011-09-19 07:01,Resource,"",2011-09-06,"","",0,2011-09-06 05:26,"","",246250,"","","Hey guys,

I have a form with an upload for a audio file. Since I changed the enctype of my form to ""multipart/form-data"" the form could not be saved anymore. No matter if I want to upload a file or not.

Controller and Model were set in the way it is described in http://flow3.typo3.org/fileadmin/manual/nightly/TheDefinitiveGuide/PartIII/ResourceManagement.html

This is my first bug report ever. I hope you find all necessary info in it.

Greets,
Andreas Keßler

Required argument ""song"" is not set.
20 TYPO3\FLOW3\MVC\Controller\AbstractController::mapRequestArgumentsToControllerArguments()

19 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

18 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

17 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

16 call_user_func_array(array, array)

15 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

14 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

13 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)

12 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

11 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

10 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

9 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

8 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

7 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::initializeSecurity(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

3 TYPO3\FLOW3\MVC\Web\RequestHandler_Original::handleRequest()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
29514,TYPO3.Flow,Feature,"",Resolved,Should have,AOP advices should be able to change method arguments,Andreas Förthner,Andreas Förthner,2011-12-21 06:37,AOP,1.1 beta 1,2011-09-06,"","",100,2011-09-06 09:21,"","",246550,"","",This can be done by adding a simple setter in the corresponding joinpoint.
29543,TYPO3.Flow,Task,"",Resolved,Should have,Clarifiy persistence behavior for inheritance in entities / aggregate roots,Karsten Dambekalns,Karsten Dambekalns,2011-09-30 06:25,Persistence,1.0.0,2011-09-07,"","",100,2011-09-07 11:58,"","",247950,"","","For aggregate roots being part of an inheritance chain, how should their repositories behave? Consider this example:

<pre>
AbstractParty
   +- Person
          +- User
</pre>

A @PersonRepository@ exists, no @UserRepository@ exists.

# Should the @PersonRepository@ also handle @User@ instances?
# Should it be possible to switch such behavior on/off?
# Or do we require developers to create a repository for every entity in such a chain?
# are the above options to be combined?"
29547,TYPO3.Flow,Feature,"",Resolved,Should have,@identity should make property unique in Database,Torsten no-lastname-given,Christian Müller,2012-05-03 08:40,Persistence,1.1,2012-04-30,"","",100,2011-09-07 15:37,"","",248150,0.00,"","A Property with the @indentify annotation is currently not unique in the database. 

So you could for example add 2 accounts with the same accountIdentifier. That shouldn't work."
29564,TYPO3.Flow,Feature,"",Closed,Should have,Change \TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter in order to compose a DateTime property from two input fields,Andreas Keßler,Bastian Waidelich,2012-01-30 07:28,Property,"",2011-09-08,"","",0,2011-09-08 06:32,"","",249000,"","","It should be able to set one \DateTime property from two inputs

<pre>
<input type=""text"" name=""event[date][date]"" value=""{event.date -> f:format.date(format:'d.m.Y')}"" />
<input type=""text"" name=""event[date][time]"" value=""{event.date -> f:format.date(format:'H:i')}""/>
<f:form.hidden name=""event[date][dateFormat]"" value=""d.m.Y H:i"" />
</pre>

The changes could be made in \TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter:121 and could look like this

<pre>
$time = """";
                        
if(isset($source['time']) && is_string($source['time'])) {
    $time = "" "".$source['time'];
}
                        
$dateAsString = $source['date'].$time; // original line 121
</pre>"
29572,TYPO3.Flow,Feature,"",Resolved,Should have,The resource manager should be able to create a resource directly from binary content,Andreas Förthner,Andreas Förthner,2011-12-21 06:37,Resource,1.1 beta 1,2011-09-08,"","",100,2011-09-08 08:35,"","",249400,"","",""
29576,TYPO3.Flow,Bug,"",Resolved,Must have,An advice parent class is not executed when its called via parent:: from its non-adviced subclass,Andreas Förthner,Andreas Förthner,2011-09-09 05:06,"",1.0 beta 2,2011-09-08,"","",100,2011-09-08 09:49,"","",249600,"","",""
29578,TYPO3.Flow,Feature,"",Resolved,Should have,You should be able to pass entities that have not yet been persisted as uri arguments,Andreas Förthner,Andreas Förthner,2011-12-21 06:37,MVC,1.1 beta 1,2011-09-08,"","",100,2011-09-08 11:09,"","",249700,"","",This can be achieved by storing these entities in session scope until they get persisted.
29582,TYPO3.Flow,Bug,"",Closed,Must have,you should be able to pass any kind of objects to action methods,Fernando Arconada,Karsten Dambekalns,2012-03-15 02:35,Property,"",2011-09-09,"","",0,2011-09-09 03:38,"","",249900,"",FLOW3 1.0.0,"if you try to pass an object not related to persistence manager to an actionmethod you will get an exeption:
Uncaught Exception in FLOW3
#1302628242: The given object is unknown to the Persistence Manager

This this wrong, for example if you want to implement an exception handler that would be called by other method and not from a web request. In general is wrong to think that all action will be called by a web request"
29603,TYPO3.Fluid,Bug,"",Closed,Must have,__toString() usage for rendering the compiled Fluid template breaks the concept of security exceptions,Andreas Förthner,"",2012-06-01 04:54,Core,1.0.5,2011-09-09,"","",0,2011-09-09 09:26,"","",250950,"",FLOW3 1.0.0,"PHP does not allow to throw exceptions within a __toString() method. Therefore security exception don't work while rendering the Fluid template. We somehow have to call a method to render a node and not just concatenate the objects as string and use the interal __toString() functionality. This is a really stupid PHP behaviour, that is documented here: http://php.net/manual/en/migration52.incompatible.php"
29694,TYPO3.Flow,Bug,"",Resolved,Must have,\TYPO3\FLOW3\Resource\Resource is missing the __toString Method,Torsten no-lastname-given,Karsten Dambekalns,2012-05-11 08:38,Resource,1.0.5,2011-09-12,"","",100,2011-09-12 09:06,"","",255450,"",FLOW3 1.0.0,"Hi,
the __toString method mentioned here:
<pre>
http://flow3.typo3.org/fileadmin/manual/nightly/TheDefinitiveGuide/PartIII/ResourceManagement.html
</pre>
is currently not present.

Would be great if someone could add this:
<pre>
public function __toString() {
  return (string)$this->getResourcePointer();
}
</pre>

So the described functionality 
<pre>
file_get_contents('resource://' . $resource); 
</pre>
will work."
29761,TYPO3.Flow,Bug,"",Resolved,Must have,@ignorevalidation annotation expects parameter name without $ (dollar sign),Karsten Dambekalns,Karsten Dambekalns,2011-09-21 09:36,MVC,1.0.0,2011-09-14,"","",100,2011-09-13 18:03,"","",258750,"","","When using the @ignorevalidation annotation, the parameter name must be given without a dollar sign, which is extremely counter-intuitive.

This was introduced with https://review.typo3.org/#change,816"
29777,TYPO3.Flow,Bug,"",Resolved,Should have,Removal of symlinked package resources fails,Robert Lemke,Robert Lemke,2011-09-14 16:05,Utility,1.0.0,2011-09-14,"","",100,2011-09-14 08:29,"","",259550,"","","The File System Resource Publisher removes invalid directories or symbolic links from the _Resources/Static/Packages/ folder. This rarely happens, but it does happen if some package providing static resources is deactivated.

In that case FLOW3 failed to remove the symbolic link because the removeDirectoriesRecursively() function did not consider symlinks (only directories).

For reproducing this bug, use a TYPO3 Phoenix installation and let the TYPO3.ExtJS symlink in _Resources/Static/Packages/ point to some invalid directory. On the next web hit, FLOW3 should crash."
29791,TYPO3.Kickstart,Bug,"",Resolved,Must have,"When kickstarting models with collections, invalid code is generated",Karsten Dambekalns,Bastian Waidelich,2012-12-12 16:12,"","",2011-09-14,"","",100,2011-09-14 16:49,"","",260250,"",FLOW3 1.0.0,"Not in all cases, but when using collections with element type hints, the generated code is wrong:

@./flow3 kickstart:model TYPO3.Blog Blog 'posts:\Doctrine\Common\Collections\Collection<\TYPO3\Blog\Domain\Model\Post>'@

results in setter code like

<pre>	/**
	 * Sets this Blog's posts
	 *
	 * @param \Doctrine\Common\Collections\Collection<\TYPO3\Blog\Domain\Model\Post> $posts The Blog's posts
	 * @return void
	 */
	public function setPosts(\Doctrine\Common\Collections\Collection<\TYPO3\Blog\Domain\Model\Post> $posts) {
		$this->posts = $posts;
	}</pre>

which results in a nasty error like

<pre>PHP Parse error:  syntax error, unexpected '<', expecting '&' or T_VARIABLE in .../Model/Blog.php on line xx</pre>"
29792,TYPO3.Flow,Bug,"",Resolved,Must have,exceeding arguments are ignored if a command has optional arguments,Karsten Dambekalns,Bastian Waidelich,2011-10-19 19:37,MVC,1.0.0,2011-09-14,"","",100,2011-09-14 16:51,"","",260300,"","","When kickstarting a model with

@./flow3 kickstart:model TYPO3.Blog Blog title:string description:string@

the generated code will not contain any trace of the title property. A ""workaround"" is possible: Calling

@./flow3 kickstart:model TYPO3.Blog Blog dummy:prop title:string description:string@

will result in a model with @title@ and @description@ (and without @dummy@).

That could very well be a problem of CLI argument handling, though."
29794,TYPO3.Kickstart,Feature,"",New,Should have,Initialize collections in generated models,Karsten Dambekalns,"",2011-09-14 17:23,"","",2011-09-14,"","",0,2011-09-14 17:23,"","",260400,"","",When a model is generated all properties of type @ArrayCollection@ should be initialized in the constructor.
29883,TYPO3.Kickstart,Feature,"",Resolved,Should have,Display a hint to update database schema,Robert Lemke,Robert Lemke,2011-09-18 16:35,"",1.0.0,2011-09-16,"","",100,2011-09-16 04:05,"","",264700,"","",The kickstart commands which create new models should display a hint that a schema update is necessary.
29895,TYPO3.Flow,Bug,"",Resolved,Should have,"""help <identifier>"" command does not work any longer",Karsten Dambekalns,Karsten Dambekalns,2011-09-18 07:36,Command,1.0.0,2011-09-16,"","",100,2011-09-16 06:15,"","",265300,"","","With the fix for #29792 the ""help <identifier>"" command stopped working. This is caused by the assumption of optional arguments being usable when used unnamed. The mentioned fix make it required to use optional arguments in a named form (as intended), thus this no longer works."
29905,TYPO3.Flow,Bug,"",Resolved,Must have,Enable property mapping of Value Objects,Sebastian Kurfuerst,Christopher Hlubek,2011-09-16 11:56,Property,1.0.0,2011-09-16,"","",100,2011-09-16 11:53,"","",265800,"","","If a value object is edited through a Fluid form, we should not try to fetch it from persistence, but need to re-create it from scratch due do the value object semantics.

Thus, we need to discard the __identity property in that case."
29907,TYPO3.Flow,Feature,"",Resolved,Must have,"Redirect to /login instead of raising a ""Entity not found."" exception if the userdata of an active session has been deleted",Martin Brüggemann,Karsten Dambekalns,2013-09-26 19:05,Security,2.1,2011-09-16,"","",100,2011-09-16 13:30,"","",265900,"","","If you are logged in into a secured FLOW3 project and delete the corresponding db user (for whatever reasons). There's an exception ""Entity not found."" raised instead - maybe caused by the invalid cookie data. It would be nicer, if the user would be redirected to the login page defined by ""entryPoint:WebRedirect:uri:""."
29908,TYPO3.Flow,Bug,"",Resolved,Must have,@HasLifecycleCallbacks and Doctrine2-Events like @PrePersist don't work.,Martin Brüggemann,Karsten Dambekalns,2011-09-20 05:05,Persistence,1.0.0,2011-09-16,"","",100,2011-09-16 13:37,"","",265950,"","","If you activate @HasLifecycleCallbacks in your model and build a @PrePersist function like the following one - it doesn't work (or I'm to stupid to get it work ;)

<pre>
<?php
declare(ENCODING = 'utf-8');
namespace Test\Animals\Domain\Model;

/**
 * @scope prototype
 * @entity
 * @HasLifecycleCallbacks
 */
class AnimalOwner {
    
    [...] 

    /**
     * @PrePersist
     */
    public function beforePersist(){
	echo ""I don't have a cat."";
	exit;
    }
}
</pre>

Or is there something missing in my model code?"
29910,TYPO3 Flow Base Distribution,Feature,"",Closed,Should have,Frontend development toolbar,Martin Brüggemann,Robert Lemke,2011-09-16 13:53,"","",2011-09-16,"","",0,2011-09-16 13:43,"","",266050,"","","I like using the Symfony2 web profile toolbar. Reading FLOW3 logs during development feels stupid. There should be some basic debug-informations like Overall-Performance/simple Profiling, used Fluid-Templates, DQL-Queries and additional informations in the DEVELOPMENT-Frontend."
29972,TYPO3.Flow,Feature,"",Under Review,Should have,Configurable Redirects,Bastian Waidelich,Tim Kandel,2013-10-02 09:43,MVC - Routing,"",2011-09-18,"","",0,2011-09-18 07:56,"","",269150,"","","We need a new Entity ""Redirect"" (in MVC/Web/Routing/Redirect) with the properties *sourceUri*, *destinationUri*, *-hasMoved-* *statusCode* and possibly *counter* and *host*.
Before a request is matched to package, controller and action, the router should check if a redirect is configured and return the respective redirect headers if that's the case."
29976,TYPO3.Flow,Bug,"",Resolved,Must have,CSRF token is always the same,Bastian Waidelich,"",2011-10-14 19:40,Security,1.0.0,2011-09-18,"","",100,2011-09-18 09:33,"","",269350,"","","This is probably a Windows issue (Windows 7, 64bit):
The blog example generates links like ""posts/new?__csrfToken=00000000000000000000000000000000"" for protected actions."
29977,TYPO3.Flow,Task,"",Resolved,Should have,URIs should be lower case by default,Bastian Waidelich,Bastian Waidelich,2011-09-22 13:05,MVC - Routing,1.0.0,2011-09-18,"","",100,2011-09-18 09:38,"","",269400,"","","Currently you can force generated URIs to be lower cased by adding ""toLowerCase"" to the Route configuration.
This should be the default though. The configuration option could be renamed to ""keepCase"" (This works for the whole route and for individual RouteParts)"
29978,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong default value 'Text' for $dataType in TYPO3\FLOW3\MVC\Controller\Arguments::addNewArgument(),Johannes K,"",2011-09-30 17:35,- Error Handler Report -,"",2011-09-18,"","",100,2011-09-18 09:43,"","",269450,"","","The default value 'Text' for $dataType in the signature of the method
<pre>
public function addNewArgument($name, $dataType = 'Text', $isRequired = TRUE, $defaultValue = NULL)
</pre>

should be 'string' because there is no TypeConverter for 'Text'.  

If I use
<pre>
$this->arguments->addNewArgument('test');
</pre>
and passes a value for test, I get this Exception:

<pre>
TYPO3\FLOW3\Property\Exception\InvalidTargetException thrown in file TYPO3_FLOW3_Property_PropertyMapper_Original.php

Could not find a suitable type converter for ""Text"" because no such class or interface exists.
25 TYPO3\FLOW3\Property\PropertyMapper_Original::findFirstEligibleTypeConverterInObjectHierarchy(""5"", ""string"", ""Text"")
24 TYPO3\FLOW3\Property\PropertyMapper_Original::findTypeConverter(""5"", ""Text"", TYPO3\FLOW3\MVC\Controller\MvcPropertyMappingConfiguration)
23 TYPO3\FLOW3\Property\PropertyMapper_Original::doMapping(""5"", ""Text"", TYPO3\FLOW3\MVC\Controller\MvcPropertyMappingConfiguration, array)
22 TYPO3\FLOW3\Property\PropertyMapper_Original::convert(""5"", ""Text"", TYPO3\FLOW3\MVC\Controller\MvcPropertyMappingConfiguration)
21 TYPO3\FLOW3\MVC\Controller\Argument_Original::setValue(""5"")
20 TYPO3\FLOW3\MVC\Controller\AbstractController::mapRequestArgumentsToControllerArguments()
19 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)
18 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)
17 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)
16 call_user_func_array(array, array)
15 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)
14 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)
13 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)
12 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)
11 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)
10 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)
9 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)
8 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)
7 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::initializeSecurity(TYPO3\FLOW3\AOP\JoinPoint)
6 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)
5 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)
4 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)
3 TYPO3\FLOW3\MVC\Web\RequestHandler_Original::handleRequest()
2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()
1 TYPO3\FLOW3\Core\Bootstrap::run()
</pre>
"
29979,TYPO3.Flow,Bug,"",Closed,Should have,PersistenceManager::getIdentifierByObject() only returns first Id property,Bastian Waidelich,"",2014-05-14 10:57,Persistence,"",2011-09-18,"","",0,2011-09-18 10:02,"","",269500,"",FLOW3 1.0.0,"The doc comment for @\TYPO3\FLOW3\Persistence\PersistenceManagerInterface::getIdentifierByObject()@ says, that the return type is ""mixed"".
Usually that is the UUID of the object (string).
If the object has an @Id property, that will be returned insted.
In case the object has multiple @Id properties, only the first of those is returned.

Example:
Mode:
<pre>
class ObjectPathMapping {

	/**
	 * @var string
	 * @Id
	 */
	protected $objectType;

	/**
	 * @var string
	 * @Id
	 */
	protected $uriPattern;

	/**
	 * @var string
	 * @Id
	 */
	protected $pathSegment;
[...]
}
</pre>

Now, only the value of $objectType would be returned. Instead I'd expect an array that contains the Id properties - or a serialized representation!?"
29982,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong table structure for multiple ManyToOne relations,Alexander Stehlik,Karsten Dambekalns,2011-10-14 18:58,Persistence,1.0.0,2011-09-18,"","",100,2011-09-18 10:33,"","",269650,"","","I stumbled upon an issue when using two @ManyToOne properties in one model, that both point to the same related model (in my case it was a transaction that had an ""account"" and a ""sourceOrTargetAccount"" property. Both had the following annotation:

<pre>
/**
 * @var \My\Namespace\MyPackage\Domain\Model\Account
 * @ManyToOne(cascade={""persist""})
 */
</pre>

After calling _doctrine:update_ there was only one column in the transaction table called *mypackage_account* that referenced values in the account table. Additionally I realised that the values of the sourceOrTargetAccount property were stored in this column. The value of the _account_ property was not stored anywhere.

To fix this, I used the _@JoinColumn_ annotation to specify the column:

<pre>
@JoinColumn(name=""source_or_target_account"", referencedColumnName=""flow3_persistence_identifier"")
</pre>

Maybe this behaviour is expected? If so this probably should be added to the docs.
 "
30017,TYPO3.Flow,Bug,"",Resolved,Should have,Functional tests see data from previous tests,Robert Lemke,Robert Lemke,2011-09-19 07:07,- Testing -,1.0.0,2011-09-19,"","",100,2011-09-19 05:49,"","",271400,"","","Data stored by functional tests are only flushed after a whole test case ran through, not after each individual test. This leads to unpredictable side effects."
30018,TYPO3.Flow,Feature,"",Resolved,Should have,For functional tests: provide function for forgetting instances,Robert Lemke,Robert Lemke,2011-09-19 07:07,Object,1.0.0,2011-09-19,"","",100,2011-09-19 05:53,"","",271450,"","","In some situations during functional testing, it is necessary to drop a registered singleton instance before / after running a single test, to make sure that a fresh one is used for the next test.

One example is the TYPO3CR NodeRepository which keeps track of added objects. Instead of implementing a special tearDown() method for that NodeRepository, it would be much cleaner to just drop the instance and thus getting a fresh NodeRepository for the next test."
30040,TYPO3.Flow,Bug,"",Resolved,Should have,Missing quotes in system() command in initializeForRuntime(),Adrian Föder,Bastian Waidelich,2011-11-16 06:36,Core,1.0.1,2011-09-19,"","",100,2011-09-19 10:35,"","",272550,"",FLOW3 1.0.0,"As a hardcore Windows user I again experienced a problem regarding the quotes for a system() command, in my case resolving to something like
system('c:\Program Files\Zend.....')

which ended as >> ""C:\Program"" is not an existing..... <<


so I fixed line 420 of Core/Bootstrap.php; changing from
<pre>
$command = escapeshellcmd($this->settings['core']['phpBinaryPathAndFilename']) . ' -c ' . escapeshellarg(php_ini_loaded_file()) . ' -v';
</pre>

...to
<pre>
$command = '""' . escapeshellcmd($this->settings['core']['phpBinaryPathAndFilename']) . '"" -c ' . escapeshellarg(php_ini_loaded_file()) . ' -v';
</pre>


This works now."
30052,TYPO3.Kickstart,Bug,"",Resolved,Should have,No @return annotations rendered on action methods,Karsten Dambekalns,Karsten Dambekalns,2011-09-29 06:32,"",1.0.0,2011-09-19,"","",100,2011-09-19 16:26,"","",273150,"","","The default should be @return void, as we assume Fluid is used."
30138,TYPO3.Fluid,Bug,"",Closed,Should have,"Bad error message ""TYPO3\FLOW3\Persistence\Doctrine\QueryResult could not be converted to string"" if necessary namespace hasn't been loaded ",Martin Brüggemann,Bastian Waidelich,2013-10-23 05:31,Core,"",2011-09-20,"","",0,2011-09-20 17:54,"","",277450,"",FLOW3 1.0.0,"If you write your own paginator widget, try to load it in your fluid template but forget to define the necessary namespace, there's the following error displayed:

<pre>
#1: Catchable Fatal Error: Object of class TYPO3\FLOW3\Persistence\Doctrine\QueryResult could not be converted to string in /Volumes/Data/Users/herr/Sites/_ZFWSPACE/guruhelp/Data/Temporary/Development/Cache/Code/Fluid_TemplateCache
[...]
</pre>

If the correct namespace is defined at the beginning of the viewhelper (f.e. {namespace g=Company\Testproject\ViewHelpers}) the user defined widget loads correctly and everything is fine. "
30163,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,var_dump recursion error,Rens Admiraal,"",2011-09-21 10:05,"","",2011-09-21,"","",100,2011-09-21 06:17,"","",278700,"","",If you dump an object which is in the blacklist of the debugger you have a chance on recursion since the actual dumped object is not checked against this array. For example the PersistenceManager. A dump of this object ends up in a memory exhausted error in PHP.
30192,TYPO3.Flow,Bug,"",Closed,Must have,TYPO3\FLOW3\MVC\Exception\InfiniteLoopException thrown in file TYPO3_FLOW3_MVC_Dispatcher_Original.php,Fabian Erni,Karsten Dambekalns,2011-10-19 04:06,- Error Handler Report -,"",2011-09-22,"","",0,2011-09-22 05:02,"","",280150,"","","Exception occures when trying to update a blog post (TYPO3.Blog) with invalid data (spaces in link title). 



Could not ultimately dispatch the request after 101 iterations.
18 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

17 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

16 call_user_func_array(array, array)

15 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

14 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

13 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)

12 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

11 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

10 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

9 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

8 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

7 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::initializeSecurity(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\AOP\Advice\AroundAdvice_Original::invoke(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AdviceChain_Original::proceed(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

3 TYPO3\FLOW3\MVC\Web\RequestHandler_Original::handleRequest()

2 TYPO3\FLOW3\Core\Bootstrap::handleWebRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()"
30223,TYPO3.Flow,Bug,"",Resolved,Must have,Column names for association properties are generated wrong,Karsten Dambekalns,Karsten Dambekalns,2011-10-11 18:00,Persistence,1.0.0,2011-09-23,"","",100,2011-09-23 04:01,"","",281650,"","","As discovered by Bastian, column names for associations are created in model tables not with the property name but the name that is to be used for join tables.

*Examle:*
<pre>/**
 * @var \TYPO3\FLOW3\Resource\Resource
 */
 protected $foo;</pre>

would create a column named @flow3_resource_resource@ instead of the expected @foo@."
30234,TYPO3.Flow,Bug,"",Closed,Should have,Compiled proxies override parent instance,Christopher Hlubek,Christopher Hlubek,2011-09-25 05:24,Object,1.0.0,2011-09-23,"","",0,2011-09-23 05:27,"","",282200,"","",A subclass of a singleton does override the parent instance in the object manager inside the constructor. See the functional test in the submitted patch for more information.
30253,TYPO3.Kickstart,Feature,"",Resolved,Should have,Make views aware of already existing properties on models,Christian Jul Jensen,Christian Jul Jensen,2011-09-30 06:28,"",1.0.0,2011-09-24,"","",100,2011-09-23 19:23,"","",283150,"","","Currently the generate always just have one property 'name', even if the model already exist and has other properties. The kickstarter should inspect the models and generate appropriate fields in the views for model properties."
30254,TYPO3.Flow,Bug,"",Resolved,Should have,The ResourceStreamWrapper should also return the resource path for non-existing persistent resources,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-09-24 12:05,"","",2011-09-24,"","",100,2011-09-23 19:36,"","",283200,"","","For file upload, we need to make sure that the ResourceStreamWrapper also returns the path for a non-existing persistent resource; so one can do:
<pre>
file_put_contents('resource://2908293473.....3434', 'Some resource content');
</pre>

We need that for TYPO3 Image uploads to work."
30255,TYPO3.Flow,Bug,"",Resolved,Should have,ObjectConverter needs to deal with constructor injection properties,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-09-24 14:35,Property,1.0.0,2011-09-24,"","",100,2011-09-23 19:43,"","",283250,"","","When a normal object is converted, the generic ObjectConverter is called (not the PersistentObjectConverter).

When this object relies on constructor arguments and does not provide setters for all options, that will break.

I'll prepare a patch which fixes the issue.

We need this for image upload in Phoenix"
30256,TYPO3.Flow,Feature,"",Resolved,Could have,Package help in CLI,Christian Jul Jensen,Bastian Waidelich,2012-05-08 11:34,Command,1.1,2011-09-24,"","",100,2011-09-24 08:17,"","",283300,"","","Would be nice to get help for one specific package fx. './flow3 help kickstarter' would display only the kickstart part of the help screen, maybe with some additional info about the commands"
30258,TYPO3.Flow,Feature,"",New,Should have,Support optional package dependencies,Christopher Hlubek,"",2011-09-24 12:34,"","",2011-09-24,"","",0,2011-09-24 11:41,"","",283400,"","","FLOW3 should support optional package dependencies to enable the usage of classes inside a package that belong to a suggested (optional) package. Right now the reflection service will die with a fatal error.

Possible solutions:

h1. 1. Blacklisting of class folders

The Package.php could blacklist folders inside @Classes@ depending on available packages. This way , the class that relies on an optional package would not be reflected and loaded.

h1. 2. Fake empty class

The classloader could fake an empty class (with throw statements on access) just to satisfy the reflection of a class."
30260,TYPO3.Flow,Bug,"",Resolved,Must have,CLI CommandManager throws exception for ambiguous commands,Bastian Waidelich,Bastian Waidelich,2011-09-28 08:36,MVC,1.0.0,2011-09-24,"","",100,2011-09-24 13:21,"","",283500,"","",@CommandIdentifier::getShortestIdentifierForCommand()@ currently fails to return the complete CommandIdentifier when getShortCommandIdentifiers() did not find an unambiguous alias.
30261,TYPO3.Flow,Bug,"",Resolved,Must have,CLI Help throws exception if related comments are not available,Bastian Waidelich,Bastian Waidelich,2011-09-28 13:05,Command,1.0.0,2011-09-24,"","",100,2011-09-24 13:24,"","",283550,"","","The @flow3:help:help@ command parses ""see"" annotations of the commands and retrieves their method description.
This leads to an exception if the target command is not available (e.g. if the respective package is not loaded).
For example: @flow3 help package:create@ throw an exception if the kickstarter package is not installed."
30262,TYPO3.Flow,Bug,"",Resolved,Must have,ObjectConverter expects to be configured as ArrayToObjectConverter,Karsten Dambekalns,Karsten Dambekalns,2011-09-25 06:36,Property,1.0.0,2011-09-24,"","",100,2011-09-24 13:32,"","",283600,"","","When checking for property mapping configuration the ObjectConverter asks for the ""ArrayToObjectConverter"" configuration."
30268,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,Setpermissions path incorrect,Felix Kopp,Karsten Dambekalns,2011-09-30 06:23,- Documentation -,1.0.0,2011-09-25,"","",100,2011-09-25 06:29,"","",283900,"","",In Readme file on Base root
30300,TYPO3.Flow,Feature,"",Resolved,Should have,Support mapping to subclass by argument,Christopher Hlubek,Christopher Hlubek,2011-12-21 06:38,Property,1.1 beta 1,2011-09-26,"","",100,2011-09-26 11:09,"","",285500,"","","When type hierarchies are used for modeling, it's necessary to map to a special subclass when creating new entities. This should be possible by a special (request) parameter in the source array of a type converter. For security reasons, this feature must be configured explicitly through a mapping configuration.

*Example:*

<pre>
class MyProject\MySpecialUser extends MyProject\User

source = {
  __type: 'MyProject\MySpecialUser',
  name: 'Foo'
}

targetType = 'MyProject\User'
</pre>

In this example, the created type should be an instance of @MyProject\MySpecialUser@.

The configuration could be given through a property mapping configuration like this:

<pre>
class MyObjectController {

	/**
	 * @return void
	 */
	protected function initializeCreateAction() {
		$argument = $this->arguments->getArgument('newMyObject');
		$configuration = $argument->getPropertyMappingConfiguration();
		$configuration->allowOverrideTargetType();
	}

}
</pre>

If the given type parameter is not an instance of the target type, an exception should be thrown."
30312,TYPO3.Flow,Bug,"",Resolved,Should have,Entity class name is not properly detected in Repository::__construct(),Bastian Waidelich,Thomas Hempel,2011-11-07 09:07,Persistence,1.0.1,2011-09-27,"","",100,2011-09-27 03:54,"","",286100,"",FLOW3 1.0.0,"If a package key contains the string ""Repository"", model class names are not correctly resolved in the Repository constructor because the line:
<pre>
$this->entityClassName = str_replace(array('\\Repository\\', 'Repository'), array('\\Model\\', ''), get_class($this));
</pre>
fails to detect the correct position of the substring and should be replaced by something like:
<pre>
$this->entityClassName = preg_replace(array('/\\Repository\\/', '/Repository$/'), array('\\Model\\', ''), get_class($this));
</pre>

See #30306"
30317,TYPO3.Flow,Feature,"",Resolved,Should have,Support mapping from integer to string,Christopher Hlubek,"",2011-09-28 09:36,"","",2011-09-27,"","",100,2011-09-27 05:16,"","",286350,"","",The StringConverter should be extended to support mapping from integer to string.
30351,TYPO3.Flow,Bug,"",Resolved,Must have,Can't use AOP with Repository,Fernando Arconada,Robert Lemke,2011-09-28 09:07,AOP,1.0.0,2011-09-27,"","",100,2011-09-27 08:32,"","",288050,"","","If you write an aspect of a Repository and this Repository is injected via DI in your controller then FLOW3 fires an Exception when you load your controller


Proof of Concept package and exception screenshot in the next URL 

http://goo.gl/ntfGm

It happens FLOW3 master commit 87863f3dd1db5786c03ba9c2ee4f91b7b718ec59"
30378,TYPO3.Flow,Feature,"",Closed,Could have,Cookie authentication,Adrian Föder,"",2012-01-13 11:03,Security,"",2011-09-28,"","",0,2011-09-28 05:13,"","",289400,"","","It would be nice having a proof cookie authentication possibility on board. I did a bit of research and found the following blog entry:

http://www.jasondavies.com/blog/2009/05/27/secure-cookie-authentication-couchdb/

Briefly said, this idea sets a cookie of form

<pre>
username + ':' + timestamp + ':' + HMAC(username + ':' + timestamp)
</pre>

Whenever a request arrives having this cookie set and of course matching the hash, the user is considered authenticated.
The most interesting thing is that the cookie is re-set after e.g. 10 minutes, so that hijacking this cookie is limited to a time window of 10 minutes.
Vice versa this means that an expired timestamped cookie is disregarded.


As I need this functionality for my project, I would be delighted to write this; but I think I need some kind of mentor that takes me by the hands, even to discuss some things.

What do you mean?"
30379,TYPO3.Flow,Bug,"",Resolved,Must have,Object persistence has side effects in functional tests,Robert Lemke,Robert Lemke,2011-09-28 08:36,- Testing -,1.0.0,2011-09-28,"","",100,2011-09-28 05:25,"","",289450,"","","Unpersisted objects which have been added, but not persisted (no Entity Manager flush() called) will still be present in following tests and thus generate side effects."
30380,TYPO3.Flow,Bug,"",Resolved,Should have,Optimistic Locking / @version annotation is not functional,Robert Lemke,Robert Lemke,2011-09-28 08:36,Reflection,1.0.0,2011-09-28,"","",100,2011-09-28 05:28,"","",289500,"","",FLOW3 seems to ignore the @version annotation which is needed for Doctrine's Optimistic Locking feature.
30417,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Package dependency names in Package.xml files need update,Benjamin Heek,Karsten Dambekalns,2011-10-19 19:27,"",1.0.0,2011-09-29,"","",100,2011-09-29 06:05,"","",291350,"","","In the Package.xml of the package TYPO3.FlOW3 there is a dependency on the package `Fluid`. 
But that name is invalid, because it has to be `TYPO3.Fluid`"
30418,TYPO3.Flow,Feature,"",New,Should have,Package bootstrapping following dependencies,Benjamin Heek,"",2011-10-21 07:38,Core,"",2011-09-29,"","",0,2011-09-29 06:09,"","",291400,"","","It would be nice if packages are bootstrapped in correct order, following the dependency constraints that are described in the Package.xml of a package

"
30423,TYPO3.Flow,Feature,"",New,Should have,Rendering template of other action without forward,Christopher Hlubek,"",2013-01-21 08:03,MVC,"",2011-09-29,"","",0,2011-09-29 06:59,"","",291600,"","","Rendering a template of another action without doing a forward is currently too complicated. It should be possible by just calling

<pre>
$this->view->render('actionName');
</pre>

The problem is a call to @resolveView@ which automatically uses a @NotFoundView@ for the view."
30424,TYPO3.Flow,Bug,"",New,Must have,Forward object arguments with changes,Christopher Hlubek,"",2011-10-21 07:20,MVC,"",2011-09-29,"","",0,2011-09-29 07:03,"","",291650,"",FLOW3 1.0.0,"Updated or cloned objects cannot be used as an argument in @forward@ right now, because they are always converted to an identity array and are not persisted yet. This must be possible.

There should be a two-way transform of source array into objects and objects into a source array (identity + updated properties)."
30425,TYPO3.Flow,Bug,"",New,Should have,New methods are not updated in Policies during Development,Christopher Hlubek,"",2011-10-21 07:20,Security,"",2011-09-29,"","",0,2011-09-29 07:06,"","",291700,"",FLOW3 1.0.0,"Adding a new method (e.g. inside a Controller) that is guarded by a Policy (such that a PolicyEnforcementAspect is applied to the method) in Development does always trigger an ""Access denied"" because the method is not known in the Policy cache.

This should work for development."
30428,TYPO3.Flow,Feature,"",New,Should have,Cloning of request arguments,Christopher Hlubek,"",2011-09-29 07:26,MVC,"",2011-09-29,"","",0,2011-09-29 07:26,"","",291850,"","","It should be possible to have two instances of the same entity in a controller action by specifying a ""@clone"" annotation for a parameter. This is needed if an original object and an updated object need to be passed to the view.

We have / will get identity problems with that of course, but we should find a solution for that.

One use case would be the update of an address with advanced address validation / correction. The user should be able to see a corrected version and a original version of the address if there are any corrections."
30436,TYPO3.Flow,Bug,"",Resolved,Must have,Access denied exception after session timeout with CSRF,Christopher Hlubek,Christopher Hlubek,2011-10-14 08:06,"","",2011-09-29,"","",100,2011-09-29 11:37,"","",292250,"","",An access of a CSRF protected action with an invalidated session throws an Exception (e.g. @\TYPO3\FLOW3\Security\Exception\AccessDeniedException@). This exception cannot be catched in any way. Also a reauthentication using an entry point is not possible right now.
30467,TYPO3.Flow,Bug,"",Resolved,Should have,Doctrine fails to initialize AOP and DI in some cases,Andreas Förthner,Andreas Förthner,2011-12-20 09:06,Persistence,1.0.2,2011-09-30,"","",100,2011-09-30 04:23,"","",293700,"",FLOW3 1.0.0,"When a Doctrine lazy loading proxy for an object is created for some specific purpose (e.g. when initializing session objects relating to an entity) but filled afterwards ""on the fly"" if this object is part of a wide range ""findBy"" call through some query, Doctrine initializes the lazy loading proxy but does not call __wakeup and therefore not initialize AOP and DI."
30491,TYPO3 Flow Base Distribution,Bug,"",Closed,Must have,Commands with only one optional argument don't work,Martin Brüggemann,Robert Lemke,2011-09-30 17:35,"","",2011-09-30,"","",0,2011-09-30 16:44,"","",294900,"","","I kickstarted a command controller and added one command action with one optional argument:

<pre>
[...]

class TestCommandController extends \TYPO3\FLOW3\MVC\Controller\CommandController {

    /**
     * Render the documentation for a specific package.
     * 
     * @param string $packageKey The unique package key
     * @return void
     */
    public function renderCommand($packageKey = NULL) {
	echo 'THIS IS '.$packageKey; 
        exit;
    }
</pre>

If I start the controller with:

<pre>
./flow3 test:render TYPO3.TheDefinitiveGuideToFLOW3
</pre>

it outputs:

<pre>
THIS IS 
</pre>

If I make the argument $packageKey required everything works fine and de render command outputs:

<pre>
THIS IS TYPO3.TheDefinitiveGuideToFLOW3
</pre>

Bug or feature?"
30493,TYPO3.Flow,Bug,"",Resolved,Should have,CLI argument handling chokes on = use,Karsten Dambekalns,Christian Müller,2011-11-10 05:36,Command,"",2011-10-01,"","",100,2011-09-30 18:02,"","",295000,"",FLOW3 1.0.0,When a value for an argument is given like @--name=value@ the result is an uncaught exception #1297759968.
30526,TYPO3.Kickstart,Bug,"",Resolved,Should have,When kickstarting models with DateTime properties invalid templates are generated,Bastian Waidelich,"",2011-10-06 03:36,"","",2011-10-03,"","",100,2011-10-03 09:52,"","",296550,"","","When kickstarting models that contain properties of type
DateTime, CRUD Views throw exceptions because the property
can't be converted to string implicitly.
This can be fixed by wrapping DateTime properties in
format.date ViewHelpers in the affected templates."
30536,TYPO3.Flow,Bug,"",Resolved,Should have,URI builder does not work correctly with arguments of subrequests,Andreas Förthner,"",2011-12-23 12:33,MVC,"",2011-10-04,"","",100,2011-10-04 03:52,"","",297050,"",FLOW3 1.0.0,"see https://review.typo3.org/#change,2001"
30542,TYPO3.Flow,Bug,"",Resolved,Must have,Static Route Parts are not reset,Bastian Waidelich,Bastian Waidelich,2011-10-19 19:37,MVC - Routing,1.0.0,2011-10-04,"","",100,2011-10-04 07:07,"","",297350,"","","@StaticRoutePart::resolve()@ sets the value to the route parts name (= the corresponding URI part).
@RoutePart::match()@ merges the route parts value into the resulting request arguments. The value of the route part must be reset to NULL before the route parth is processed.
The StaticRoutePart currently fails to do so. Usually this has no effect because match() is always called *before* resolve() but it fails when using FLOW3 with an app server like AiP."
30543,TYPO3 Flow Base Distribution,Bug,"",Closed,Should have,Classes disappearing cause havoc,Soren Malling,"",2011-10-19 19:42,"","",2011-10-04,"","",0,2011-10-04 07:32,"","",297400,"","","After ""pulling"" to commit a1c1304a26fd6e9173adccf58c6adb2b462d820f I got the following error in FLOW3 CLI

<pre>
aafie4300:typo3v5 sorenmalling$ ./flow3 

Uncaught Exception in FLOW3 #1265213849: The object ""TYPO3\Media\Domain\Repository\ImageRepository"" which was specified as a property in the object configuration of object ""TYPO3\TYPO3\Controller\Backend\ContentController"" (automatically registered class) does not exist. Check for spelling mistakes and if that dependency is correctly configured.
thrown in file Packages/Framework/TYPO3.FLOW3/Classes/Object/DependencyInjection/ProxyClassBuilder.php
in line 423
Reference code: 201110041021325e21dd

#0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
   /opt/local/apache2/htdocs/typo3v5/Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:49

#1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()

PHP 5.3.3 (cli) (built: Nov 17 2010 14:44:01) 
Copyright (c) 1997-2010 The PHP Group
Zend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies

Uncaught Exception in FLOW3 #1297263663: The compile run failed. Please check the error output or system log for more information.
thrown in file Packages/Framework/TYPO3.FLOW3/Classes/Core/Bootstrap.php
in line 414
Reference code: 201110041021322c68e5

#0 TYPO3\FLOW3\Error\DebugExceptionHandler::echoExceptionCli()
   /opt/local/apache2/htdocs/typo3v5/Packages/Framework/TYPO3.FLOW3/Classes/Error/AbstractExceptionHandler.php:49

#1 TYPO3\FLOW3\Error\AbstractExceptionHandler::handleException()


</pre>

Karsten mentions in his ""tweeting"" with me

<pre>
Ah, well. Classes disappearing cause havoc, true.
</pre>

Sorry, can't give better explanation ATM"
30555,TYPO3.Fluid,Feature,"",New,Could have,Make TagBuilder more extensible,Thomas Allmer,"",2012-06-29 06:41,Core,"",2011-10-04,"","",0,2011-10-04 15:18,"","",298000,"","","As a developer for Viewhelpers I would like to Extend available Viewhelper and probably modify some tag attributes based on various options without totally forking the viewhelper.

For that I need the possibility to get and set the value of tag attributes.

These Functions could look like this:

<pre>
	/**
	 * Sets the value of an attribute in the $attributes-collection
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function setAttribute($attributeName, $attributeValue, $escapeSpecialCharacters = TRUE) {
		return $this->addAttribute($attributeName, $attributeValue, $escapeSpecialCharacters);
	}

	/**
	 * Gets the value of an attribute in the $attributes-collection
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function getAttribute($attributeName) {
		return $this->attributes[$attributeName] ? $this->attributes[$attributeName] : '';
	}
	
	/**
	 * Checks if the tag has a certain attribute
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function hasAttribute($attributeName) {
		return $this->attributes[$attributeName] ? TRUE : FALSE;
	}
</pre>
"
30614,TYPO3.Flow,Bug,"",Resolved,Must have,Use of undefined policies throws exception,Peter Russ,"",2012-05-18 12:58,Security,"",2011-10-06,"","",0,2011-10-06 17:25,"","",300850,"",FLOW3 1.0.0,"Notice: Undefined index: Test in /srv/c/cdas/src/shared/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Security_Policy_PolicyService_Original.php line 317
35 TYPO3\FLOW3\Error\ErrorHandler::handleError(8, ""Undefined index: Test"", ""/srv/c/cdas/src/shared/Data/Temporary/Development/?3_FLOW3_Security_Policy_PolicyService_Original.php"", 317, array)

This happens due the fact, that there are roles available which are not define in any Policy. I would expect that in such a case a Access denied would occure. To fix just check if the key is set ;-) (see attached patch)

Keep on rocking...."
30633,TYPO3.Flow,Bug,"",Resolved,Should have,endless recursion when using the wrong php binary,Yves Poersch,Robert Lemke,2011-10-19 19:37,Core,1.0.0,2011-10-07,"","",100,2011-10-07 10:53,"","",301800,"","","If I uses non cli-php to call flow3, it will get an endless recursion.

It will be better to stop after 100 call, or so what?

P.S.: *wink* @ robert ;) thanks alot!"
30714,TYPO3.Flow,Bug,"",Closed,Should have,\TYPO3\FLOW3\var_dump() memory use causes fatal error debugging objects.,Alexander Schnitzler,"",2013-01-21 11:12,Error,"",2011-10-10,"","",0,2011-10-10 06:04,"","",305750,"",FLOW3 1.0.0,"During some FLOW3 CRUD testing, I got an error several times I wanted to debug objects that have related objects.

Something like \TYPO3\FLOW3\var_dump(new SomeObject()) always worked, more complex object trees caused PHP run out of memory.

In my example (see attached picture) I just created a ""new""-form to create a new Message-Object that has a User-Object related as the sender of the message. Yet the debugging of that simple thing failed."
30777,TYPO3.Fluid,Feature,"",Resolved,Should have,Catch Routing Exceptions in uri and link ViewHelpers,Bastian Waidelich,Bastian Waidelich,2012-06-05 09:16,ViewHelpers,1.0.0,2011-10-11,"","",100,2011-10-11 05:14,"","",308750,"","","Developers having a hard time figuring out what went wrong, if FLOW3 dies with a Routing Exception. Especially when you have a template that contains an invalid link.* or uri.* view helper, the exception ""Could not resolve a route...."" is very misleading.

I'd suggest to catch Routing Exceptions in the respective ViewHelpers and turn them into ViewHelper Exceptions. That way we can output a more meaningful error message (when we have a proper Fluid debug mode, the faulty template line will be outputted in dev context).

BTW: We might also do this for @ActionController::redirect()@"
30778,TYPO3.Flow,Bug,"",Resolved,Should have,Exceeding Request arguments should only be appended to URI if configured,Bastian Waidelich,Bastian Waidelich,2011-10-19 19:37,MVC - Routing,1.0.0,2011-10-11,"","",100,2011-10-11 05:14,"","",308800,"","","Currently when creating URIs/Links via the UriBuilder arguments that are not part of the configured route values are *appended* to the resulting URI as *query string*. This makes it difficult to get a reliable behavior.
Example:
Given following Routes.yaml
<pre>
<code class=""yaml"">
-
  uriPattern: 'foo/static'
  defaults:
    '@package':    'Acme.Demo'
    '@controller': 'Standard'
    '@action':     'index'

-
  uriPattern: 'foo/{dynamic}'
  defaults:
    '@package':    'Acme.Demo'
    '@controller': 'Standard'
    '@action':     'index'
</code>
</pre>

Now @<f:uri.action action=""index"" arguments=""{dynamic: 'bar'}"" />@ would result in the URI *foo/static?dynamic=bar*.
This could be solved by moving the second route above the first one,  but than the *matching* wouldn't work as expected because the URI *foo/static* would match the dynamic route then.

We do need the feature of appended query strings for fallback routes and if you want to explicitly use them.
As a solution I'd suggest to append the exceeding arguments only when configured in the respective route:

<pre>
<code class=""yaml"">
-
  uriPattern: 'foo/{dynamic}'
  defaults:
    '@package':    'Acme.Demo'
    '@controller': 'Standard'
    '@action':     'index'
  appendExceedingArguments: true
</code>
</pre>"
30825,TYPO3.Flow,Task,"",Resolved,Should have,Cleanup of (Flash)Messages API,Christian Müller,Christian Müller,2011-10-13 17:07,"","",2011-10-12,"","",100,2011-10-12 05:17,"","",311150,"","","To have a nice API for 1.0 cleanup of FlashMessage, FlashMessageContainer and Message objects is needed. Additionally usage in controllers should be cleaned up."
30826,TYPO3.Flow,Task,"",Resolved,Should have,Use Symphony YAML parser for settings instead of Horde/YAML,Christian Müller,Christian Müller,2011-10-19 19:37,Configuration,1.0.0,2011-10-12,"","",100,2011-10-12 05:37,"","",311200,"","",Ideally make a separate Symphony YAML package out of it.
30848,TYPO3.Flow,Task,"",Resolved,Should have,Make PHP session configurable,Martin Brüggemann,Martin Brüggemann,2011-10-19 03:59,Session,1.0.0,2011-10-12,"","",100,2011-10-12 09:22,"","",312300,"","","I'm using FLOW3 in a subdomain environment and need a way to have valid session cookies for all subdomains of a php session. It's easy to implement by adding some parameters in the start method of PHPSession.php

<pre>
    $cookieParameters['lifetime'],
			    $cookieParameters['path'],
			    $cookieParameters['domain'],
			    $cookieParameters['secure'],
			    $cookieParameters['httponly']
			);
</pre>

The cookie params could be set by adding the following yaml options.

<pre>
TYPO3:
  FLOW3:
    session:
      PHPSession:
        cookie:
        lifetime: 3600
        path:     '/'
        domain:   '.domain.com'
        secure:   false
        httponly: false
</pre>"
30857,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Set the RewriteBase configuration in the .htaccess by default,Rens Admiraal,Rens Admiraal,2011-10-21 07:39,"","",2011-10-12,"","",100,2011-10-12 13:58,"","",312750,"","","Apache server does not allow modules to reconfigure the DOCUMENT_ROOT, this can cause problems with mod_rewrite, and will cause problems with mod_vhost_alias.

This is fixed in a recent commit of apache, but can still affect a lot of installations. AFAIK it does not hurt to set the RewriteBase directive by default, so it might be worth to set it.

Apache commit which fixes this in apache: http://svn.apache.org/viewvc?view=revision&revision=1132494"
30858,TYPO3.Flow,Bug,"",Resolved,Must have,Proxy Class Builder ignores optional arguments with NULL default,Christian Müller,Christian Müller,2011-10-19 19:37,"",1.0.0,2011-10-12,"","",100,2011-10-12 14:35,"","",312800,"","",""
30861,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Remove declare(ENCODING) line ,Julian Wachholz,Karsten Dambekalns,2011-10-14 19:08,"",1.0.0,2011-10-12,"",0.50,100,2011-10-12 15:13,"","",312950,0.50,"","Since the declare() statement was dropped from FLOW3 sources, it should be removed everywhere.

The following files still have the declare(ENCODING = 'utf-8'); line:

./Packages/Framework/TYPO3.FLOW3/Tests/Unit/Security/Cryptography/Pbkdf2HashingStrategyTest.php
./Packages/Framework/TYPO3.FLOW3/Tests/Unit/Security/Cryptography/AlgorithmsTest.php
./Packages/Framework/TYPO3.FLOW3/Classes/Core/LockManager.php
./Packages/Framework/TYPO3.FLOW3/Classes/Security/Cryptography/PasswordHashingStrategyInterface.php
./Packages/Framework/TYPO3.FLOW3/Classes/Security/Cryptography/Pbkdf2HashingStrategy.php
./Packages/Framework/TYPO3.FLOW3/Classes/Security/Cryptography/Algorithms.php
./Packages/Framework/TYPO3.FLOW3/Classes/Security/Cryptography/SaltedMd5HashingStrategy.php
"
30890,TYPO3.Flow,Feature,"",Accepted,Should have,Developer Toolbar,Christian Müller,Christian Müller,2013-05-21 07:28,MVC,"",2011-10-13,"","",0,2011-10-13 09:17,"","",314350,"","","Create a toolbar that can be enabled to provide easy debugging features and help to the FLOW3 developer.

Some ideas (to be updated):

- Logfiles
- Exceptions
- Code browsing?
- Cache flush
- Statistical data (memory usage, request time)?
- DQL console
- Configuration Reader / Editor
- Fluid Inspector?
"
30914,TYPO3.Flow,Bug,"",Resolved,Should have,"Proxy methods for methods with ""by reference"" return type are broken",Andreas Förthner,Christian Müller,2012-05-30 16:00,AOP,1.0.5,2011-10-14,"","",100,2011-10-14 03:39,"","",315500,"",FLOW3 1.0.0,"The proxy class builder ignores the by-reference & in the proxy method, and therefore you get an PHP fatal error."
30929,TYPO3.Flow,Bug,"",Resolved,Should have,Routing does not always work if splitString is optional,Bastian Waidelich,Bastian Waidelich,2011-10-17 11:35,MVC - Routing,"",2011-10-14,"","",100,2011-10-14 08:21,"","",316250,"","","If the route part following an identity route part optional like
<pre>{post}(.html)</pre>
the IdentityRoutePart creates a correct link but matching of the URI without the optional part fails, if the dynamic part contains the split string (in this example if the post contains the string "".html"").
Instead always the complete request path should be matched against."
30933,TYPO3.Flow,Feature,"",Needs Feedback,Should have,Check for unique constraints on add(),Thomas Hempel,Karsten Dambekalns,2014-10-01 06:36,Persistence,"",2011-10-14,"","",0,2011-10-14 09:10,"","",316400,"","","If you define a uniqueConstraints in a Model you want to have that checked as soon as the add() method of your repository is called. If you don't do that it might lead into some problems later in your controller.

For example you have the following model:

<pre>
/**
 * @scope prototype
 * @entity
 * @Table(name=""acme_demo_domain_model_mymodel"", uniqueConstraints={@UniqueConstraint(name=""name_idx"", columns={""name""})})
 */
class MyModel {
	/**
	 * @var string
	 */
	protected $name;
	
	[snip]
}
</pre>

The propety name has a doctrine unique contraints which means that i can only exists once in the database.

Now you have this controller

<pre>
class AcmeDemoCommandController extends \TYPO3\FLOW3\MVC\Controller\CommandController {

	/**
	 * Add a MyModel
	 *
	 * Adds a MyModql with a given name
	 *
	 * @param string $name The name of the repository
	 * 
	 * @return void
	 */
	public function addCommand($name) {
		try {
			$newModelInstance = new \Acme\Demo\Domain\Model\MyModel($name);
			$this->MyModelRepository->add($newModelInstance);
		} catch (\Exception $e) {
			$this->outputLine('The MyModel could not be created!');
			return -1;
		}
		
		$this->outputLine('New MyModel was created.');
	}

}
</pre>

On the command line you do the following:

<pre>
./flow3 AcmeDemo:add foo
</pre>

This works the first time as expected.

When you execute it the second time, you get an Exception because the name ""foo"" is already present in the database. You get the Exception even though you put the code in a try catch blog is, this is because the method to actually save the changes is called after your code. The responsible method is persistAll().

This leads to some more problem which I put into a seperate issue. For now let me tell you that it doesn't work.

It would be really cool if the add would return something that tells me if an object can be persisted or not. Otherwise I had to check all my DB constraints manually whenever I work with my model. And if I understood DDD corectly, this is not the Domain of my controller. ;-)"
30934,TYPO3.Flow,Bug,"",Resolved,Should have,persistAll() should only be called if EntityManager is still alive,Thomas Hempel,Karsten Dambekalns,2011-12-19 05:06,Persistence,1.0.2,2011-10-14,"","",100,2011-10-14 09:12,"","",316450,"",FLOW3 1.0.0,"In some cases it can happen, that the EntityManager is closed at the end of an controller. This *can* be a valid situation. See #30933 for more information.

It would be good if the persistAll() method is only called if the EntityManager is really functioning."
30935,TYPO3.Fluid,Bug,"",Resolved,Should have,Catch ViewHelper exceptions and log them in production context,Bastian Waidelich,Christian Müller,2015-06-15 03:45,Core,"",2011-10-14,"","",100,2011-10-14 09:14,"","",316500,"",FLOW3 1.0.0,"from line 241 of the AbstractViewHelper:
<pre>
<code class=""php"">
try {
	return call_user_func_array(array($this, 'render'), $renderMethodParameters);
} catch (\TYPO3\Fluid\Core\ViewHelper\Exception $exception) {
	// @todo [BW] rethrow exception, log, ignore.. depending on the current context
	return $exception->getMessage();
}
</code>
</pre>

As the todo comment states, this should be caught in production context and logged to prevent information disclosure.
Code could look something like:
<pre>
<code class=""php"">
try {
	return call_user_func_array(array($this, 'render'), $renderMethodParameters);
} catch (\TYPO3\Fluid\Core\ViewHelper\Exception $exception) {
	if ($this->objectManager->getContext() === 'Development') {
		return $exception->getMessage();
	} else {
		$this->systemLogger->log([...]);
		return '';
	}
}
</code>
</pre>"
30937,TYPO3.Fluid,Bug,"",New,Should have,CropViewHelper stringToTruncate can't be supplied so it can't be easily extended,Thomas Allmer,"",2011-10-21 07:37,ViewHelpers,"",2011-10-14,"","",100,2011-10-14 10:32,"","",316600,"",FLOW3 1.0.0,"the CropViewHelper always gets its content via $this->renderChildren(); so you can't provide the text when using the Inline notation. It also makes it pretty hard to extend this viewhelper.

It should be like it is with most of the other viewhelper:
- add optional $stringToTruncate parameter
- set it to $this->renderChildren() if NULL
- see change below

<pre>
	/**
	 * Render the cropped text
	 *
	 * @param integer $maxCharacters Place where to truncate the string
	 * @param string $stringToTruncate What do you want to crop
	 * @param string $append What to append, if truncation happened
	 * @param boolean $respectBoundaries If TRUE and division is in the middle of a word, the remains of that word is removed.
	 * @param boolean $respectHtml If TRUE the cropped string will respect HTML tags and entities. Technically that means, that cropHTML() is called rather than crop()
	 * @return string cropped text
	 * @author Andreas Pattynama <andreas.pattynama@innocube.ch>
	 * @author Sebastian Kurfürst <sebastian@typo3.org>
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @author Felix Oertel <oertel@networkteam.com>
	 */
	public function render($maxCharacters, $stringToTruncate = NULL, $append = '...', $respectWordBoundaries = TRUE, $respectHtml = TRUE) {
		if ($stringToTruncate === NULL) {
			$stringToTruncate = $this->renderChildren();
		}
</pre>"
30980,TYPO3.Kickstart,Bug,"",Resolved,Could have,Generating ActionControllers using a comma separated list creates wrong Models and Repositories,Julian Wachholz,Karsten Dambekalns,2011-10-19 05:05,"",1.0.0,2011-10-16,"","",100,2011-10-16 11:55,"","",318700,"","","Using the following command:

    ./flow3 kickstart:actioncontroller --generate-related --generate-actions Acme.Demo Animal,Zoo

One would expect the Kickstarter to create 2 Models and 2 corresponding Repositories:

Model/Animal.php
Model/Zoo.php
Repository/AnimalRepository.php
Repository/ZooRepository.php

Instead, the following Model and Repository are created:

Model/Animal,Zoo.php
Repository/Animal,ZooRepository.php

"
31002,TYPO3.Flow,Bug,"",New,Should have,Generated __sleep method handles static properties as members.,Stephan Schuler,"",2011-10-21 07:20,Reflection,"",2011-10-17,"","",0,2011-10-17 07:51,"","",319800,"",FLOW3 1.0.0,"The __sleep method generated by \TYPO3\FLOW3\Object\DependencyInjection\ProxyClassBuilder::buildSerializeRelatedEntitiesCode tries to handle ""static"" properties.
Since ""$this->property"" throws an exception where self::$property should be used, the PhpSession::close() method catches an Exception ""SplObjectStorage::serialize() must return a string or NULL"".

I would suggest to treat static properties as transient by default."
31015,TYPO3.Flow,Bug,"",Resolved,Must have,Second classloader in ReflectionService doesn't know about packages,Karsten Dambekalns,Karsten Dambekalns,2011-10-18 03:37,Reflection,1.0.0,2011-10-17,"","",100,2011-10-17 12:47,"","",320450,"","",There should be reuse of the classloader already created in Bootstrap.
31019,TYPO3.Fluid,Feature,"",Resolved,Should have,FlashMessages ViewHelper should render message title and severity,Bastian Waidelich,Bastian Waidelich,2011-11-10 09:36,ViewHelpers,"",2011-10-17,"","",100,2011-10-17 15:27,"","",320600,"","","Currently <f:flashmessages /> renders the FlashMessages only by converting them into a string implicitly. That only returns the message Body of the respective FlashMessage. In order to render FlashMessages according to their type, the *severity* should be rendered into the flash message as CSS class. Besides the title of a message should be rendered, if specified."
31021,TYPO3.Flow,Feature,"",Resolved,Should have,PropertyMappingConfiguration should support not mapping of properties,Christian Jul Jensen,Christian Jul Jensen,2012-05-15 09:24,Property,1.1,2011-10-17,"","",100,2011-10-17 15:55,"","",320700,"","","Currently the shouldMap method of the PropertyMappingConfiguration always returns TRUE, it should be possible to configure it to ignore mapping of certain data/properties."
31042,TYPO3.Flow,Bug,"",Resolved,Must have,Throwing an exception throws an exception....,Adrian Föder,Karsten Dambekalns,2011-10-18 09:40,Reflection,1.0.0,2011-10-18,"","",100,2011-10-18 03:22,"","",321600,"","","after running the master branch intended to become RC1, I have @Uncaught Exception in FLOW3 #1: Warning: current() expects parameter 1 to be array, null given in [...]Packages\Framework\TYPO3.FLOW3\Classes\Reflection\ReflectionService.php line 932@. The mentioned line is

<pre>
throw new \TYPO3\FLOW3\Reflection\Exception(sprintf('Classes tagged as entity or value object must be of scope prototype, however, %s is declared as %s.', $className, current($classTagValues)), 1264103349);
</pre>

In fact, the @$classTagValues@ variable is *not set* in this function."
31052,TYPO3.Flow,Bug,"",Resolved,Must have,PackageManager::createPackage() creates invalid annotation,Bastian Waidelich,Bastian Waidelich,2011-10-19 19:37,Package,1.0.0,2011-10-18,"","",100,2011-10-18 05:08,"","",322100,"","","The @PackageManager::createPackage()@ that is called by the @flow3 package:create@ command still creates a Package.php file with a ""@scope"" annotation."
31061,TYPO3.Flow,Bug,"",Resolved,Must have,defective and maybe obsolete is_link() mirror function,Adrian Föder,Bastian Waidelich,2011-10-19 19:37,Utility,1.0.0,2011-10-18,"","",100,2011-10-18 06:14,"","",322500,"","","in \TYPO3\FLOW3\Utility\Files the function is_link is defective. The function returns

<pre>
return $normalizedPathAndFilename !== $normalizedTargetPathAndFilename
</pre>


in my concrete case the both variables had the values

<pre>
c:/users/afoeder/phpstormprojects/[...]/flow3/data/temporary/development/cache/data/flow3_monitor/
c:/users/afoeder/phpstormprojects/[...]/flow3/data/temporary/development/cache/data/flow3_monitor
</pre>

(note the trailing slash at the first one, $normalizedPathAndFilename). This leads to an incorrect function result and therefore @::emptyDirectoryRecursively@ does not work because it's relying on that function.


Anyhow, this function is a wrapper because of a bug; see the annotation @If http://bugs.php.net/bug.php?id=51766 gets fixed we can drop this.@
This seems fixed, hence the function could be removed and usages can be renamed to the native is_link() function."
31070,TYPO3.Flow,Bug,"",Resolved,Should have,Symlink related Unit Tests fail on some Windows systems,Bastian Waidelich,Bastian Waidelich,2011-11-10 05:06,- Testing -,"",2011-10-18,"","",100,2011-10-18 08:40,"","",322950,"",FLOW3 1.0.0,"Depending on the system configuration and the current Windows Username, the PHP function @sys_get_temp_dir()@ returns an abbreviated path to the temporary directory.
Details: By default, this function returns @C:\Windows\TEMP@ for me. But running the unit tests from CLI, it returns @C:\Users\BWAIDEL~1\AppData\Local\Temp\@ - That breaks our @\TYPO3\FLOW3\Utitlity\Files::is_link()@ work around.

To fix this, we should use @realpath(sys_get_temp_dir())@ or @tempnam()@ instead."
31082,TYPO3.Kickstart,Bug,"",Resolved,Must have,Kickstarter does not use addFlashMessage(),Bernhard Fischer,Karsten Dambekalns,2011-10-19 04:33,"",1.0.0,2011-10-18,"","",100,2011-10-18 13:53,"","",323550,"","",acording to ID: 1f9a0e65 the kickstarter should also use addFlashMessage() instead of flashMessageContainer->add()
31083,TYPO3.Flow,Bug,"",Resolved,Should have,Missing Lazy annotation in migration script,Julian Kleinhans,Julian Kleinhans,2011-10-18 16:05,Core,1.0.0,2011-10-18,"","",100,2011-10-18 15:10,"","",323600,"","",The Lazy annotation is missing in the migration-annotation.php script
31087,TYPO3.Flow,Bug,"",Closed,Must have,Uncaught Exception: invalid annotation,Julian Kleinhans,"",2011-10-20 16:15,Reflection,"",2011-10-19,"","",0,2011-10-18 18:23,"","",323800,"","","I get a totally strange exception 

<pre>
Uncaught Exception The @var annotation for ""Kj187\Tutorials\Domain\Model\Category::$context"" seems to be invalid. More Information Exception code #1284132314 File /Volumes/Server/data/htdocs/privat/tutorials3/Packages/Framework/TYPO3.FLOW3/Classes/Reflection/ReflectionService.php Exception reference #20111019001416e73202 
</pre>

Here is the Category::$context 

<pre>
	/**
	 * @var string
	 * @FLOW3\Identity
	 */
	protected $context;
</pre>

after a little debug session i found the reason. 
The problem is the optional second trim parameter in ReflectionService.php line 1119

<pre>
$declaredType = trim(implode(' ', $this->getPropertyTagValues($className, $propertyName, 'var')), ' \\');
</pre>

My PHP version is 5.3.8 and i use apache2 on a mac os x system based on mac ports

It works if i remove the second param, or if i wrap this line with a second trim function 
<pre>
$declaredType = trim(trim(implode(' ', $this->getPropertyTagValues($className, $propertyName, 'var')), ' \\'));
</pre>

any ideas ? 
discussion ?

or shoud i write this as a patch ?
"
31104,TYPO3.Flow,Bug,"",Resolved,Should have,package:import is broken due to changed git repository names,Karsten Dambekalns,Karsten Dambekalns,2011-10-19 08:08,Package,1.0.0,2011-10-19,"","",100,2011-10-19 06:26,"","",324600,"","","The stripping of ""TYPO3."" from project names in git is no longer needed."
31111,TYPO3.Flow,Bug,"",Resolved,Must have,Compiler::renderAnnotation() drops boolean values,Karsten Dambekalns,Karsten Dambekalns,2011-10-19 10:35,Object,1.0.0,2011-10-19,"","",100,2011-10-19 09:55,"","",324950,"",""," When rendering annotations into proxy classes, boolean values for options get lost."
31119,TYPO3.Fluid,Bug,"",Resolved,Must have,AjaxWidgetContext is not stored in session,Bastian Waidelich,Bastian Waidelich,2011-10-19 19:39,Widgets,1.0.0,2011-10-19,"","",100,2011-10-19 12:30,"","",325300,"","",The AjaxWidgetContextHolder is missing an *@FLOW3\Session(autoStart=true)* annotation that initiates the session.
31128,TYPO3.Flow,Task,"",Rejected,Should have,We should only have one source of random bytes,Christian Müller,Christian Müller,2011-10-20 03:52,Utility,"",2011-10-20,"","",0,2011-10-20 03:47,"","",325750,"","","Currently for generation of the persistent security token we use self made code in TYPO3.FLOW3/Classes/Utility/Algorithms.php but for example the CSRF token use the method from TYPO3.FLOW3/Resources/PHP/iSecurity/Security_Randomizer.php to generate random bytes.

We should unify that and use TYPO3\FLOW3\Utility\Algorithms::generateRandomBytes as wrapper for random byte creation."
31134,TYPO3.Flow,Bug,"",Resolved,Should have,Functional tests of controllers don't reset arguments,Christopher Hlubek,"",2011-11-07 09:07,MVC,"",2011-10-20,"","",100,2011-10-20 06:18,"","",326050,"",FLOW3 1.0.0,"Using @sendWebRequest@ to one controller with two different @arguments@ arrays will not reset the array in the controller.

Not tested against current trunk but I'm quite sure it won't work there too."
31160,TYPO3.Flow,Bug,"",Resolved,Should have,Scripts/migrate-annotations.php should work with symlinks,Marco Huber,Karsten Dambekalns,2011-10-25 06:06,"",1.0.1,2011-10-21,"","",100,2011-10-21 03:25,"","",327350,"",FLOW3 1.0.0,"In an environment with symlinks (the Folder Packages/Framework is included by a symlink) the script doesn't find the packages under Packages/Application, because the script uses the absolute path to Scripts/migrate-annotations.php.

I extended the script so you can give a second parameter with an absolute path."
31167,TYPO3.Fluid,Feature,"",Resolved,Could have,Stateless AJAX Widgets,Bastian Waidelich,Bastian Waidelich,2011-11-10 11:36,Widgets,"",2011-10-21,"","",100,2011-10-21 05:25,"","",327700,"","","Currently an AJAX Widget stores the *WidgetContext* in the *WidgetContextHolder* which again puts it in the current user session.
This should be configurable so that the context can be passed to the target widget action via GET/POST.
*Note:* This requires that the request handler verifies the HMAC of the widget request!"
31179,TYPO3.Flow,Bug,"",Resolved,Must have,injectSettings is called more than once for object instantiation,Fernando Arconada,Christian Müller,2012-07-18 06:25,Configuration,1.1 RC2,2011-10-21,"","",100,2011-10-21 15:52,"","",328300,"",FLOW3 1.0.0,"When defining @injectSettings@ in a class, one expects it to be called *once* per instantiation. In fact it is called as often as the class hierarchy is deep, i.e. when _StandardController extends AbstractController extends ActionController_ the @injectSettings@ method of _StandardController_ will be called three times."
31189,TYPO3.Fluid,Bug,"",Resolved,Should have,Make TextareaViewHelper HTML5 aware,rottenrice no-lastname-given,Bastian Waidelich,2012-07-30 03:00,ViewHelpers,1.1,2011-10-22,"","",100,2011-10-22 10:05,"","",328800,"",Git 1.0,"1. the code example seems to be deprecated. ""rows"" and ""cols"" are required attributes but are not used in the example.

2. i suggest to use ""rows"" and ""cols"" as optional attributes. in html5 they are no longer tagged as required. furthermore you want to set the width and height of a textarea in css instead of using an html attribute ...

links:
http://api.typo3.org/fluid/master/class-Tx_Fluid_ViewHelpers_Form_TextareaViewHelper.html
http://www.w3.org/TR/html5/the-button-element.html#the-textarea-element"
31192,TYPO3.Flow,Bug,"",Resolved,Should have,Update session cookie lifetime on activity,Julian Wachholz,Robert Lemke,2012-03-20 21:39,Session,1.1 beta 1,2011-10-22,"","",100,2011-10-22 12:18,"","",328950,"",Git master,"The lifetime of a session cookie (TYPO3\FLOW3\Session\PhpSession) is fixed.
After the time specified (default 1 hour) the cookie gets deleted, no matter how long ago the last activity of the user was.

The cookie's expiration date should be updated on every request.

This would, for example, prevent a session expiration while filling out a form.."
31210,TYPO3.Flow,Bug,"",New,Must have,constructor of proxy class not compatible with interfaces defening a constructor,Jordy de Jong,"",2011-11-07 16:02,Object,"",2011-10-24,"","",0,2011-10-24 05:05,"","",329850,"",FLOW3 1.0.0,"I have a class which implements an interface. This interface defines a constructor with a parameter. FLOW3 creates a proxy class which constructor is not compatible which the definition of the constructor in the interface.


example:


interface SomeClassInterface
{
    public function __construct($options = null);
}

class SomeAbstractClass implements SomeClassInterface
{
    public function __construct($options = null)
    {
       // do stuff...
    }
}

class MyClass extends SomeAbstractClass
{

}


FLOW3 creates the following:

class MyClass_Original extends SomeAbstractClass
{

}

class MyClass extends MyClass_Original
{
	public function __construct() {
		$arguments = func_get_args();

		if (!isset($arguments[0])) $arguments[0] = NULL;
		call_user_func_array('parent::__construct', $arguments);
	}
}




the constructor in the proxy method is not compatible with the constructor defined in the original interface"
31215,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Configuration/README refers to unused files,Karsten Dambekalns,Karsten Dambekalns,2011-11-07 07:57,- Documentation -,1.0.1,2011-10-24,"","",100,2011-10-24 06:08,"","",330100,"",FLOW3 1.0.0,"The README mentions FLOW3.yaml and Package.yaml, both of which are no longer used."
31261,TYPO3.Flow,Feature,"",New,Should have,Virtual objects - generate proxy classes for interfaces,Christopher Hlubek,"",2011-10-25 04:23,Object,"",2011-10-25,"","",0,2011-10-25 04:23,"","",332400,"","","It should be possible to declare an interface and configure an object (e.g. singleton based on a prototype with arguments) for it in @Objects.yaml@. Right now you have to write a factory class to have different singletons based on the same prototype object.

h3. Example:

*Objects.yaml*

<pre><code>
TYPO3\Example\MyInterface:
  scope: singleton
  className: TYPO3\Example\MyClass # <- scope: prototype
  arguments:
    1:
      value: Foo

TYPO3\Example\MyDebugInterface:
  scope: singleton
  className: TYPO3\Example\MyClass # <- scope: prototype
  arguments:
    1:
      value: Bar
  properties:
    debug:
      value: true
</code></pre>

There should be a generated proxy class for the interface that implements the interface. Dependency injection with the interface type should work with that automatically.

I think instantiating the interface with @new \TYPO3\Example\MyInterface()@ has not to work since it's also contra-intuitive to the default PHP behaviour. So DI or the ObjectManager must be used for that."
31262,TYPO3.Flow,Feature,"",New,Should have,Named arguments in Objects.yaml for constructor arguments,Christopher Hlubek,"",2011-10-25 04:26,Object,"",2011-10-25,"","",0,2011-10-25 04:26,"","",332450,"","","Working with positional arguments in constructor injection configuration is cumbersome.

It should be possible to use named arguments alternatively since it should be easy to get argument names by reflection.  "
31269,TYPO3.Flow,Task,"",Resolved,Should have,Display line number of exception in CLI mode,Robert Lemke,Robert Lemke,2011-11-22 06:44,Command,1.0.1,2011-10-25,"","",100,2011-10-25 06:03,"","",332800,"","","If an exception occurs in command line mode, only the file name but not the line number of the location causing the exception is displayed. For non-FLOW3 exceptions (like notices etc.) it's therefore difficult to find the actual root cause."
31270,TYPO3.Flow,Bug,"",Resolved,Must have,Proxy classes loose @return and @throws annotations,Karsten Dambekalns,Karsten Dambekalns,2011-11-07 10:36,Object,1.0.1,2011-10-25,"","",100,2011-10-25 06:11,"","",332850,"",FLOW3 1.0.0,"The proxy classes built by FLOW3 no longer contain @throws and @return annotations. This breaks code relying on that, like the SOAP WSDL generator."
31277,TYPO3.Flow,Feature,"",Resolved,Should have,Schema based validation for arrays,Bastian Waidelich,Martin Ficzel,2012-06-18 13:38,Validation,2.0 beta 1,2011-10-25,"","",100,2011-10-25 06:47,"","",333200,"","","As discussed on the last Code Sprint, some schema based validation similar to 
http://json-schema.org/ for arrays would be very useful for FLOW3.

h1. Goal

The JSON schema should be used to verify the syntax of:

* Settings
* Routes
* Image Processing Instructions
* Content Type Definitions
* Security Settings

Currently a typo in those sometimes leads to very confusing effects. By validation against a pre-made schema, we can tell the user meaningful errors. We could even integrate that in the exception handling: If an exception happens, we could validate the configuration, as an error in configuration most likely results in exceptions.

*Generally, we want to use schemata to validate arrays.*

h1. Specification

we should forward-port JSON-schema from http://tools.ietf.org/html/draft-zyp-json-schema-03 to PHP. We are only listing the differences here. We will refer to this work as *PHP schema*. Some major differences are:

* JSON schema validation does only distinguish between *valid* and *invalid*. We should furthermore have a third, in-between style; something like ""Bad smell"", which hints to errors. TODO how to implement it?
* We aim for an implementation of 1. - 5.25 of JSON Schema Draft 03.

h2. 3.1. Terminology

For this specification, *schema* will be used to denote a PHP Schema
definition, and an *instance* refers to a PHP value that the schema
will be describing and validating.

h2. 5.8. dependencies

* TODO do we need them?

h2. 5.20 default

* We don't need this.

h2. 5.23 format

We support the following additional formats:

* classname: A class name which is *known to the object manager* // TODO: should it be classname or objectname?

h2. 5.26. extends, 5.27 id, 5.28. ref, 5.29 $schema

* We don't need this.

h2. 6 Hyper Schema

* We don't need this.

h1. Implementation

Implementation-wise, the validator should be split into two parts: One for the implementation of the PHP schema, the second part for the FLOW3-specific additions.

* We should use \FLOW3\FLOW3\Error\Result
* the system should be developed test-driven.

h1. Future Work

The schema could even be self-learning to some extend (see https://github.com/kore/XML-Schema-learner for a similar example)."
31284,TYPO3.Welcome,Task,"",Resolved,Should have,add notice remove routes on deactivate welcome package,Karsten Vieth,Bastian Waidelich,2011-11-16 06:36,"",1.0.1,2011-10-25,"","",100,2011-10-25 10:18,"","",333550,"","","Point 4:
Remove the Welcome package (optional)
./flow3 package:deactivate TYPO3.Welcome


please add
Remove welcome routes from Configuration/Routes.yaml

"
31294,TYPO3.Flow,Bug,"",Closed,Must have,SkipCsrfProtection doesn't work for actions without parameters anymore,Martin Brüggemann,Karsten Dambekalns,2011-12-21 06:38,Security,1.1 beta 1,2011-10-25,"","",100,2011-10-25 15:32,"","",334000,"",FLOW3 1.0.0,"I tried to use the @FLOW3\SkipCsrfProtection with the following indexAction:
<pre>
        /**
	 * List action for this controller.
	 * @return string
	 * @FLOW3\SkipCsrfProtection
	 */
	public function indexAction() {
	    
	}
</pre>

Unfortunately this doesn't work anymore. It works again if I add a dummy parameter like this:
<pre>
        /**
	 * List action for this controller.
	 * @return string
	 * @FLOW3\SkipCsrfProtection
	 */
	public function indexAction($bernd = 'katze') {
	    
	}
</pre>

Maybe it's a small fix to change FLOW3s @DoctrineAnnotation\Target in Annotations\SkipCsrfProtection.php from ""METHOD"" to ""PROPERTY"" like this:

<pre>
<?php
namespace TYPO3\FLOW3\Annotations;

/*                                                                        *
 * This script belongs to the FLOW3 framework.                            *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License, either version 3   *
 * of the License, or (at your option) any later version.                 *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

use Doctrine\Common\Annotations\Annotation as DoctrineAnnotation;

/**
 * @Annotation
 * @DoctrineAnnotation\Target(""PROPERTY"")
 */
final class SkipCsrfProtection {}

?>
</pre>

But I'm not deep enough into this annotation stuff to imagine any side effects :)"
31311,TYPO3.Flow,Bug,"",Resolved,Must have,Logout must not rely on a session,Bastian Waidelich,Bastian Waidelich,2011-10-27 04:36,Security,1.0.1,2011-10-26,"","",100,2011-10-26 07:07,"","",334800,"",FLOW3 1.0.0,"@AuthenticationProvider::logout()@ currently throws an Exception if no session has been initialized yet (due to the ""loggedOut"" signal, the Session listens to)."
31339,TYPO3.Flow,Task,"",On Hold,Could have,Search,rottenrice no-lastname-given,"",2012-06-21 06:17,- Documentation -,"",2011-10-27,"","",0,2011-10-27 07:18,"","",336200,"","",a search would be nice. at the moment i use google what is not pleasant.
31363,TYPO3.Flow,Bug,"",Resolved,Should have,Windows newline in annotation block throws exception,Christof Rodejohann,Karsten Dambekalns,2011-12-21 11:06,Reflection,1.0.2,2011-10-27,"","",100,2011-10-27 14:11,"","",337400,"",FLOW3 1.0.0,"If a class annotation contains Windows newline character instead of the expected UNIX version, FLOW3 will quit with an Uncaught Exception.

Because of this a fresh clone from /FLOW3/Distributions/Base.git might fail under some circumstances (Windows and git config ""core.autocrlf = true""). This can be avoided with a correct git configuration, which is now documented in the wiki ( http://forge.typo3.org/projects/flow3/wiki/Installation_hints8 ). An example exception thrown by this configuration can be found here: http://pastebin.de/raw/?id=19666 and the bug under http://forge.typo3.org/issues/31087 is related to this issue.

The expected behavior is FLOW3 working with Windows new-line in annotations block.

PS: Thx to the #flow3 IRC channel and afoeder for figuring this out."
31373,TYPO3.Flow,Feature,"",Rejected,Could have,Annotation to enforce validation on setter,Christian Müller,"",2012-03-14 12:46,Validation,1.1,2011-10-28,"","",0,2011-10-28 04:03,"","",337900,"","",Something like @FLOW3\ValidateOnSet which you can annotate to a setter in a model. On each call the generated proxy should check the validation rules for this property before setting and if validation fails throw some error.
31380,TYPO3.Fluid,Bug,"",Resolved,Should have,DocComment of Form.ValidationResultsViewHelper is incorrect,Adrian Föder,Karsten Dambekalns,2012-05-30 15:56,ViewHelpers,1.0.5,2011-10-28,"","",100,2011-10-28 10:36,"","",338250,"",Git 1.0,"The current DocBlock says:
<pre>
 * <f:form.validationResults>
 *   <f:if condition=""{validationResults.flattenedErrors}"">
 *     <ul class=""errors"">
 *       <f:for each=""{errors}"" as=""error"">
 *         <li>{error.code}: {error}</li>
 *       </f:for>
 *     </ul>
 *   </f:if>
 * </f:form.validationResults>
</pre>
(see the comment at the getFlattenedErrors() function:
@ Get a list of all Error objects recursively. The result is an array,
	  where the key is the property path where the error occured, and the
	  value is a list of all errors (stored as array)@)



so due to that error result nesting, it should read:

<pre>
<f:form.validationResults>
	<f:if condition=""{validationResults.flattenedErrors}"">
		<dl class=""errors"">
			<f:for each=""{validationResults.flattenedErrors}"" as=""errors"" key=""propertyPath"">
				<dt>{propertyPath}</dt>
				<dd><dl>
					<f:for each=""{errors}"" as=""error"">
						<dt>{error.code}</dt>
						<dd>{error}</dd>
					</f:for>
				</dl></dd>
			</f:for>
		</dl>
	</f:if>
</f:form.validationResults>
</pre>

(disregard the fact that I use dl's here, although I like them more when it comes to nestings)"
31451,TYPO3.Fluid,Bug,"",Closed,Should have,Fluid XSD Generator uses removed method,Julian Wachholz,Bastian Waidelich,2012-02-23 14:54,"","",2011-10-31,"","",0,2011-10-31 06:40,"","",341750,"",Git master,"When trying to generate an XSD to use with my Editor the following Exception gets thrown:

    Fatal error: Call to undefined method TYPO3\FLOW3\Object\ObjectManager::getRegisteredObjects() in TYPO3\Fluid\Service\AbstractGenerator.php:70

This method has either been removed or renamed, but unfortunately couldn't find out where it went.

(This could also be seen as task to update the Fluid controllers to the new Syntax, e.g. use @FLOW3\Inject instead of injectFoo methods)"
31452,TYPO3.Flow,Bug,"",Resolved,Should have,IgnoreValidation with argumentName does not work for ActionController,Christopher Hlubek,Christopher Hlubek,2011-11-02 04:36,MVC,1.0.1,2011-10-31,"","",100,2011-10-31 06:44,"","",341800,"",FLOW3 1.0.0,"The following code will not work as expected:

<pre>
/**
 * @param \TYPO3\FLOW3\Tests\Functional\MVC\Fixtures\Controller\TestObjectArgument $argument
 * @FLOW3\IgnoreValidation(argumentName=""$argument"")
 */
public function showObjectArgumentAction(TestObjectArgument $argument) {
	return $argument->getEmailAddress();
}
</pre>

The ActionController still use getMethodTagsValues to get ignored arguments."
31474,TYPO3.Flow,Bug,"",Resolved,Should have,DoctrineCommandController::dqlCommand() uses removed method TYPO3\FLOW3\MVC\CLI\Request::getCommandLineArguments(),Johannes K,Johannes K,2011-11-04 08:06,Command,1.0.1,2011-10-31,"","",100,2011-10-31 14:18,"","",342900,"",FLOW3 1.0.0,"The method TYPO3\FLOW3\MVC\CLI\Request::getCommandLineArguments() does not exist anymore.
DoctrineCommandController::dqlCommand should call the method TYPO3\FLOW3\MVC\CLI\Request::getExceedingArguments() instead
"
31482,TYPO3.Kickstart,Feature,"",Resolved,Should have,"Usage of ""./flow3 kickstart:model"" should be better",Dietrich Heise,Bastian Waidelich,2012-11-21 06:14,"","",2011-11-01,"","",100,2011-11-01 06:27,"","",343300,"","","./flow3 help kickstart:model 

Outputs

USAGE:
  ./flow3 kickstart:model [<options>] <package key> <model name>


Should be something like

USAGE:
  ./flow3 kickstart:model [<options>] <package key> <model name> [<argument:type>]..."
31484,TYPO3.Flow,Feature,"",Needs Feedback,Could have,possibility to modify inner workings of proxy class builder,Jordy de Jong,"",2012-03-14 13:10,"","",2011-11-01,"","",0,2011-11-01 07:32,"","",343400,"","","It would be nice if there was some way to modify the inner workings of the Proxy Class Builder.

My use case: we want to be able to define the properties of our domain models, and the corresponding validations, in an external data dictionary / meta data repository. This way, properties can be easily be added to the domain without the the need for a developer. Also this way package X can easily add properties to a domain model defined in package Y, without the need for ""tedious"" developer work like creating new extending classes, adding getters and setters, etc. When generating the proxy classes for our domain model, I would like to be ablo to read the defined meta data for the domain model and use this to add properties to the generated domain model classes.

I'm not sure if this scenario fits the FLOW3 philosophy (if it is, maybe it's somthing we can contribute to the project) but at least it would be nice if it was possible to build this without hacking FLOW3"
31494,TYPO3.Kickstart,Bug,"",Resolved,Should have,Generated create action in CRUD controller has wrong doc comment,Andreas Wolf,Andreas Wolf,2011-11-02 04:36,"",1.0.1,2011-11-01,"","",100,2011-11-01 16:33,"","",343850,"",FLOW3 1.0.0,"In the create action of a CRUD controller, the parameter is $newSomething, while the docblock says it's $something. This leads to e.g. a warning in PHPstorm."
31500,TYPO3.Flow,Bug,"",Under Review,Must have,Argument validation for CLI requests is not done,Karsten Dambekalns,Karsten Dambekalns,2014-02-24 08:00,Validation,"",2011-11-02,"","",0,2011-11-02 03:29,"","",344150,"",FLOW3 1.0.0,"There is no code in place to validate CLI arguments. A first patch is available at https://review.typo3.org/#change,6014 - it's clearly WIP, though."
31502,TYPO3.Flow,Bug,"",Resolved,Must have,Validation during persistence got lost in Doctrine addition,Karsten Dambekalns,Karsten Dambekalns,2011-12-19 16:37,Validation,1.0.2,2011-11-02,"","",100,2011-11-02 03:34,"","",344250,"",FLOW3 1.0.0,When Doctrine 2 was introduced our own persistence backend was removed - but it was the place where validation upon persistence was invoked. This was not discovered as there was no test covering this and argument validation is still working.
31520,TYPO3.Flow,Bug,"",Rejected,Should have,Reflection Service's getPropertyAnnotations() doesn't respect @var annotations,Adrian Föder,Karsten Dambekalns,2011-12-14 09:38,Reflection,"",2011-11-02,"","",0,2011-11-02 13:34,"","",345150,"",FLOW3 1.0.0,"When calling 
@getPropertyAnnotations()@ or
@getPropertyAnnotation()@
of @\TYPO3\FLOW3\Reflection\ReflectionService@

the @var annotations are omitted as if they weren't there.

In contrast, e.g. @getPropertyTagValues()@ works for that."
31522,TYPO3.Flow,Bug,"",Resolved,Must have,ReflectionService prevents model from extending abstract base model without repository,Marc Neuhaus,Karsten Dambekalns,2012-07-18 05:31,Reflection,1.1 RC2,2011-11-02,"","",100,2011-11-02 15:10,"","",345250,"",FLOW3 1.0.0,"Hey!

i ran into some difficulties with using a base class for my models. The ""ensureAggregateRootInheritanceChainConsistency"" function of the ReflectionService prevents me from extending my Models from another class. 

I attached a diff to allow the extending from abstract classes.

Greetings Marc"
31642,TYPO3.Flow,Bug,"",Resolved,Should have,call a cli script with absolute path doesn't work,Dietrich Heise,Bastian Waidelich,2012-12-12 03:16,Cli,2.0 beta 1,2011-11-07,"","",100,2011-11-07 06:07,"","",351150,"",FLOW3 1.0.0,"[foobar ~]$ /var/www/htdocs/flow3
string(59) ""/var/www/htdocs/Packages/Framework/TYPO3.FLOW3/Classes/Core""
string(0) """"
FLOW3: Invalid root path. (Error #1248964375)
""/"" does not lead to
""/var/www/htdocs/Packages/Framework/TYPO3.FLOW3/""

If the script is called from the directory /var/www/htdocs

[foobar /var/www/htdocs]$ ./flow3
FLOW3 1.0.0 (""Development"" context)
usage: ./flow3 <command identifier>

See './flow3 help' for a list of all available commands.

"
31658,TYPO3.Fluid,Bug,"",Resolved,Should have,Inconsistency: Change argument handling of widget ViewHelpers,Sebastian Kurfuerst,"",2011-11-08 00:06,ViewHelpers,1.1 beta 1,2011-11-08,"","",100,2011-11-08 00:01,"","",351850,"",FLOW3 1.0.0,"* Change action parameter from ""action"" to ""@action""
* Add ""@format"" parameter
"
31667,TYPO3.Fluid,Bug,"",Resolved,Should have,AJAX widgets broken when called inside a loop,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-11-12 14:56,Widgets,1.0.1,2011-11-08,"","",100,2011-11-08 05:35,"","",352300,"",FLOW3 1.0.0,"As ViewHelpers are supposed to be stateless they were create once per
RenderingContext and reused whenever the RenderingContext fits.
Some ViewHelpers are not stateless, e.g. AJAX widgets.

AJAX widgets push their WidgetContext into an AjaxWidgetContextHolder
before they get rendered.

As soon as AJAX-WidgetViewHelpers were used multiple times within the
same RenderingContext (widgets in ForViewHelpers for example) differet
widgets share the same ViewHelper containing the same WidgetContext.
Because the WidgetContext contains all statefull information about a
widget, only the last rendered widget gets stored in the ContextHolder.
That makes equal AJAX widgets within a for-loop impossible because
each GUI representation interacts with only the last rendered PHP object.
"
31677,TYPO3.Flow,Bug,"",Resolved,Must have,Using current.securityContext Policies.yaml entities section triggers Parser Error,Ferdinand Kuhl,"",2012-04-26 08:38,Security,1.1,2011-11-08,"","",100,2011-11-08 07:52,"","",352750,"",Git master,"If you use some Content Security Rule like:

resources:
  entities:
    DigiComp_Fairdrive_Domain_Model_Disposition:
      DigiComp_Fairdrive_ForeignDispositions: this.createdfrom != current.securityContext.party

FLOW3 will crash completely with:

: Parse error: syntax error, unexpected $end in [...]FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Security_Aspect_PersistenceQueryRewritingAspect_Original.php(374) : eval()'d code"
31678,TYPO3.Flow,Feature,"",Resolved,Should have,Support BCrypt (Blowfish crypt) password hashing,Christopher Hlubek,Christopher Hlubek,2011-12-21 06:38,Security,1.1 beta 1,2011-11-08,"","",100,2011-11-08 08:03,"","",352800,"","",Password hashing with BCrypt should be supported and used as the default password hashing strategy.
31679,TYPO3.Flow,Feature,"",Resolved,Should have,Support multiple password hashing strategies,Christopher Hlubek,Christopher Hlubek,2011-12-21 06:38,Security,1.1 beta 1,2011-11-08,"","",100,2011-11-08 08:40,"","",352850,"","","The security framework should support multiple password hashing strategies. An identifier could be used to differentiate between different implementations. The hashed passwords should be self-descriptive, such that they contain an identifier for the password hashing strategy to use for validating the hashed password.

This allows an easy transition from PBKDF2 to BCrypt or other hashing strategies in the future. It also allows for the usage of different security levels in one application ."
31683,TYPO3.Flow,Bug,"",Closed,Should have,$joinPoint->getMethodArguments() looses the reference of the argument,Fernando Arconada,"",2012-03-14 13:13,AOP,"",2011-11-08,"","",0,2011-11-08 10:21,"","",353050,"",Git master,"For example
I have a aspect:
<pre>
         /**
	 * Register every exception 
	 *
	 * @FLOW3\AfterThrowing(""class(F2\MyPackage\.*)"")
	 * @param \TYPO3\FLOW3\AOP\JoinPointInterface $joinPoint
	 * @return void
	 */
	public function logException(\TYPO3\FLOW3\AOP\JoinPointInterface $joinPoint) {
		if ($joinPoint->hasException()) {
			$exception = $joinPoint->getException();
			$this->logger->log('Excepcion: ' . $joinPoint->getClassName() . ' ' . $exception->getMessage());
		}
	}
</pre>

Now I tried to write a RoutePartHandler, the  removeMatchingPortionFromRequestPath()  uses one argument by reference.
<pre>
class FileRoutePartHandler extends  \TYPO3\FLOW3\MVC\Web\Routing\DynamicRoutePart{
    protected function findValueToMatch($routePath)
    {
        $matches = array();
        preg_match('/^[0-9]{4}\/[0-9]{2}\/[0-9]{2}\/[a-z0-9\-]+/', $routePath, $matches);
        $result = (count($matches) === 1) ? current($matches) : '';
        return $result;
    }

}
</pre>

Then FLOW3 fires an exception (see attachment)


If I disable the Aspect then It works
"
31696,TYPO3.Flow,Bug,"",Resolved,Should have,TYPO3\FLOW3\Persistence\Doctrine\Query __sleep  __wakeup cycle defect,Ferdinand Kuhl,Sebastian Kurfuerst,2011-11-12 15:05,Persistence,1.0.1,2011-11-09,"","",100,2011-11-09 02:13,"","",353700,"",FLOW3 1.0.0,"If you pass a query result to an ajax-widget and execute it there, it substantially changes from the original query.

If you used complex ""where"" - criterions which involves joins, the parameters at the ajax-side leads to an error, because the joins will vanish during this process.
"
31698,TYPO3.Flow,Feature,"",Resolved,Should have,HMAC Convenience methods in HashService,Bastian Waidelich,Bastian Waidelich,2011-12-21 06:38,Security,1.1 beta 1,2011-11-09,"","",100,2011-11-09 03:49,"","",353800,"","","The Cryptography\HashService currently comes with two methods for creating & validating HMAC hashes: @generateHmac()@ and @validateHmac()@.
That requires the user to deal with the actual string and it's hash individually.
I suggest to add two methods @appendHmac()@ and @validateAndStripHmac()@ that allows the user to simply append the HMAC to a given string."
31765,TYPO3.Fluid,Feature,"",Resolved,Should have,Forward to Action of widgetController,Carsten Bleicker,Bastian Waidelich,2014-07-11 14:39,Widgets,"",2011-11-11,"","",100,2011-11-11 12:40,"","",357150,"","","widget controller has 2 actions:
1. indexAction
2. createAction

after createAction i want to forwad to the indexAction again.
but doesnt work. getting a white page withoud any result by using $this->forward('index).
any ideas to do something like a forward inside of the widget controller?

thanks
carsten"
31773,TYPO3.Flow,Bug,"",Resolved,Should have,"Query Parameter ""_"" triggers Notice ""Uninitialized string offset: 1"" ",Johannes K,Johannes K,2011-11-14 13:36,MVC,1.0.1,2011-11-12,"","",100,2011-11-12 08:14,"","",357550,"",FLOW3 1.0.0,"If FLOW3 gets a Request with a parameter named ""_"" the code check for an internal argument in TYPO3\FLOW3\MVC\Web\Request::setArgument() fails with a PHP Notice: Uninitialized string offset: 1 in line 362

http://flow3.localhost/?_=123

This happens e.g. in jQuery ajax calls do to avoid caching"
31777,TYPO3.Flow,Feature,"",Resolved,Should have,SubRoutes should allow routes starting or ending with /,Alexander Berl,Bastian Waidelich,2012-11-26 10:35,MVC - Routing,"",2011-11-12,"","",100,2011-11-12 12:46,"","",357750,"","","*Following scenario:*

I have a new FLOW3 application and want to include another application with a special route prefix. I choose the Blog example for simplicity leading to the following Routing setup in my global Routes.yaml:

<pre>
-
  name: 'Blog'
  uriPattern: 'blog/<BlogSubroutes>'
  defaults:
    '@package':    'TYPO3.Blog'
    '@format':     'html'
  subRoutes:
    BlogSubroutes:
      package: TYPO3.Blog
</pre>

This causes a FLOW3 Exception when calling the uri /blog with the message:
<pre>
The URI pattern ""blog/"" of route ""Blog :: Fallback rule"" ends with a slash, which is not allowed. You can put the trailing slash in brackets to make it optional.
</pre>

However, putting the slash into round brackets isn't a solution, since multiple optional route parts aren't allowed, which cannot be prevented when including external applications, and when calling /blog I end up at /blogadmin/setup which is obviously not the intended Fallback route way, nor the correct path.
""flow3 routing:list"" doesn't complain about this route btw.

The solution would be to remove the slash from the uriPattern and edit the TYPO3.Blog Routes.yaml to have all non-Fallback routes start with a slash.
However, then the Blog could not be inserted as the main Route, i.e. uriPattern: '<BlogSubroutes>', without editing the Routes.yaml file again, to avoid the Exception that Routes may not *start* with a slash.

*Feature Request:*
Hence I suggest to change the behaviour to allow SubRoutes to end with a slash, if not generally, then at least for the case that the subroute is empty (i.e. the Fallback case).

The line of code in question is TYPO3\FLOW3\MVC\Web\Routing\Route:542 as of FLOW3 1.0
<pre>
if (substr($this->uriPattern, -1) === '/') {
	throw new \TYPO3\FLOW3\MVC\Exception\InvalidUriPatternException('The URI pattern ""' . $this->uriPattern . '"" of route ""' . $this->getName() . 
		'"" ends with a slash, which is not allowed. You can put the trailing slash in brackets to make it optional.', 1234782997);
}
</pre>
Since the routes are merged by the ConfigurationManager beforehand it's not easy to check if the current subroutes' uriPattern is empty at this location. This would either require keeping the subroute parts in the Route object, or the easy solution would be to just remove these lines and possibly replace them with
<pre>
$this->uriPattern = rtrim($this->uriPattern, '/');
</pre>

which I'm not sure about the consequences yet.
"
31779,TYPO3.Flow,Bug,"",Closed,Should have,Command execution on Windows breaks with special chars in path,Alexander Berl,Bastian Waidelich,2012-02-12 13:44,Core,"",2011-11-12,"","",0,2011-11-12 17:38,"","",357850,"",Git master,"Currently, FLOW3 has problems executing shell commands on Windows when the php binary path contains special characters such as backslash, whitespace or round brackets.

*Steps to reproduce*
Setup FLOW3 on a windows machine (here using ZendServer CE on Windows7 x64) having PHP binary in a folder that contains whitespaces or other special characters.
Configure php binary path in Settings.yaml like this:
<pre>
    core:
      phpBinaryPathAndFilename: 'C:\Program Files (x86)\Zend\ZendServer\bin\php.exe'
</pre>


*Expected*
The correct escaped path should be:
<pre>
""C:\Program Files (x86)\Zend\ZendServer\bin\php.exe""
</pre>


*Actual*
_escapeshellcmd()_ escapes the path as:
<pre>
C:^\Program Files ^(x86^)^\Zend^\ZendServer^\bin^\php.exe 
</pre>

This leads to error messages like the following (in German, but the problem should be clear) when executing flow3 shell commands (e.g. ""flow3 routing:list"")
<pre>
Der Befehl ""C:\^Program"" ist entweder falsch geschrieben oder
konnte nicht gefunden werden.
</pre>

and prevents the cache compilation to work automatically in Development context.

*Solution*
The correct escaping is achieved by replacing the _escapeshellcmd_ call by _escapeshellarg_ for Windows OSes.
The attached patch wraps this choice in a new protected function escapeShellCmd inside TYPO3\FLOW3\Core\Bootstrap.
"
31781,TYPO3.Flow,Bug,"",Resolved,Should have,Report issue link in Debug Exception is incorrect,Alexander Berl,"",2011-11-16 09:06,Error,"",2011-11-13,"",0.00,100,2011-11-12 18:52,"","",357950,"",Git master,"Function _getCreateIssueLink_ of TYPO3\FLOW3\Error\DebugExceptionHandler:181 returns a link to
http://forge.typo3.org/projects/package-flow3/issues/new?...
where it should be
http://forge.typo3.org/projects/package-typo3-flow3/issues/new?...
"
31788,TYPO3.Flow,Feature,"",Rejected,Should have,[PERFORMANCE] cache implementation for AnnotationReader in Flow3AnnotationDriver,rottenrice no-lastname-given,Karsten Dambekalns,2012-03-07 10:07,Reflection,"",2011-11-13,"","",0,2011-11-13 10:54,"","",358300,"","","doctrine has classes to cache the parsed annotations. with cached annotations you can boost the parsetime by ~200ms (=15%, tested with TYPO3.Blog).

some caching strategies:
<pre>
$this->reader = new \Doctrine\Common\Annotations\CachedReader(
    new \Doctrine\Common\Annotations\IndexedReader(new \Doctrine\Common\Annotations\AnnotationReader()), 
    new \Doctrine\Common\Cache\ApcCache()
);
</pre><pre>
$this->reader = new \Doctrine\Common\Annotations\CachedReader(
    new \Doctrine\Common\Annotations\IndexedReader(new \Doctrine\Common\Annotations\AnnotationReader()), 
    new \Doctrine\Common\Cache\ArrayCache()
);
</pre><pre>
$this->reader = new \Doctrine\Common\Annotations\FileCachedReader(
    new \Doctrine\Common\Annotations\IndexedReader(new \Doctrine\Common\Annotations\AnnotationReader()), 
    CACHING_DIR
);
</pre>

it would be better to use the Objects.yaml to set the caching strategy instead of using __construct()


<pre>
/**
 * @var \Doctrine\Common\Annotations\AnnotationReader
 */
protected $reader;
</pre>i think it is better to use the interface \Doctrine\Common\Annotations\Reader 

--
class: TYPO3\FLOW3\Persistence\Doctrine\Mapping\Driver\Flow3AnnotationDriver"
31789,TYPO3.Flow,Bug,"",Closed,Must have,methodAnnotatedWith in AOP doesn't work,Marc Neuhaus,Karsten Dambekalns,2011-12-16 05:30,AOP,1.0.2,2011-11-13,"","",100,2011-11-13 17:06,"","",358350,"",FLOW3 1.0.0,"There is a problem with the PATTERN_MATCHPOINTCUTDESIGNATOR in the class PointcutExpressionParser.php on line 133.

if you try to create an methodAnnotatedWith aspect it fails, because the regex captures only method and not methodAnnotatedWith.

Greetings Marc"
31803,TYPO3.Flow,Feature,"",Resolved,Should have,Accessing Query Builder,Carsten Bleicker,"",2015-03-05 08:31,Persistence,"",2011-11-14,"","",100,2011-11-14 09:28,"","",359050,"","","Hi Folks,
i need a special query with additional fields in select statement and a HAVING.
for example:
$query = ""SELECT ort, plz, (
 "".$radius."" * SQRT(2*(1-cos(RADIANS(geo_b)) * 
 cos("".$rad_b."") * (sin(RADIANS(geo_l)) *
 sin("".$rad_l."") + cos(RADIANS(geo_l)) * 
 cos("".$rad_l."")) - sin(RADIANS(geo_b)) * sin("".$rad_b."")))) AS Distance 
 FROM plz Having Distance <= "".$umkreis."" 
 ORDER BY Distance
"";


as far as i know i can add special fields with:
$this->queryBuilder()->add(); by the queryBuilder of \TYPO3\FLOW3\Persistence\Doctrine\Query.
But the query builder is protected and there is no getter for it.
It is a good or a bad idea to add public function getQueryBuilder into the Query Class to enable a usage like:
$this->query->getQueryBuilder->add('select'...)?

if anybody could tell me how to do the query above, please tell me.

thanks a lot!
carsten"
31896,TYPO3 Flow Base Distribution,Feature,"",Resolved,Must have,Make Surf release job interact with release plugin on website,Karsten Dambekalns,Karsten Dambekalns,2011-11-22 11:14,Build Process,1.0.1,2011-11-17,"","",100,2011-11-17 16:45,"","",363650,"","",The Surf release job should register the created release and the corresponding downloads
31905,TYPO3.Flow,Bug,"",Resolved,Should have,getInterceptedRequest is NULL but ACL matches correctly DENY,Carsten Bleicker,"",2012-05-08 08:38,Security,1.0.5,2011-11-18,"","",100,2011-11-18 03:29,"","",364100,"",FLOW3 1.0.0,"hi folks,
i had defined an policy for one method wich allows only access if a role exists.
if i call this method without any matching token i will be redirected to the defined WebRedirect.
so anything works fine. but the getInterceptedRequest() of the security contenxt is NULL. it only holds
an interceptRequest if the security matches a second time again. I think there is something wrong with the session?

f.e:
getInterceptedRequest() is NULL if:
# init very first visit of my site provides a form wich sends to the controller with policy.
# submitting this form
# i will get redirected to login
# getInterceptedRequest() is NULL

getInterceptedRequest() is filled correctly if:
# init very first visit of my site provides a form wich sends to the controller with policy.
# submitting this form
# i will get redirected to login
# getInterceptedRequest() is NULL
# *going back*
# submitting again
# getInterceptedRequest() is filled correctly

any ideas?

"
31909,TYPO3.Flow,Feature,"",Resolved,Should have,Add more routing: cli-informations ,Martin Ficzel,"",2011-12-21 06:38,MVC - Routing,1.1 beta 1,2011-11-18,"","",100,2011-11-18 05:27,"","",364300,"","","The routing should be explorable from the cli. I suggest to implement the following commands:

# routing:show show informations for a single route
# routing:resolve show the generated path for a given controller
# routing:route show the controller a request would be routed to"
31912,TYPO3.Flow,Bug,"",Closed,Should have,Redirect in AbstractController and WebRedirect,Carsten Bleicker,Bastian Waidelich,2011-11-18 06:42,MVC,1.0.1,2011-11-18,"","",0,2011-11-18 06:04,"","",364450,"",FLOW3 1.0.0,"the redirecting works atm by default with http refresh header.
there should be a change for AbstractController::redirectToUri to:
$this->response->setHeader('Location', (string)$uri, true);
and in WebRedirect::startAuthentication to:
$response->setHeader('Location', $plainUri, true);



"
31931,TYPO3.Flow,Bug,"",Resolved,Should have,AuthenticationController is not working anymore,Christian Müller,Christian Müller,2012-01-13 11:02,MVC,1.0.3,2011-11-18,"","",100,2011-11-18 10:24,"","",365400,"",FLOW3 1.0.0,"The AuthenticationController has not been adapted to the recent changes in the FlashMessage API. Furthermore, users reported that the redirect to the previous request (on error) did not work. It work though after removing the second condition in the following if-statement in the PhpSession->start() method:

 if ($this->started === FALSE && isset($_COOKIE[session_name()])) {

(remove the isset(...))

"
31939,TYPO3.Fluid,Bug,"",Resolved,Must have,preselection with a multiple form.select with a M:N relation,Matthias Habegger,"",2013-01-21 11:22,ViewHelpers,"",2011-11-19,"","",100,2011-11-19 05:37,"","",365800,"",FLOW3 1.0.0,"I have a M:N relation between my two model ""book"" and ""category"".


Now I try to create a multiple select with the SelectViewHelper like that:
<pre>
<f:form.select property=""categories"" options=""{categories}"" optionLabelField=""name"" multiple=""multiple"" size=""7"" />
</pre> 

{categories} is a variable assigned in the controller.
that works fine, all, categories are shown in the select.


The problem is, that none of my preselected categories are selected.

The html output looks like that:
<pre>
<input type=""hidden"" name=""book[categories]"" value="""" />
<select id=""categories"" multiple=""multiple"" size=""7"" name=""book[categories][]"">
<option value=""0bc305ec-8aff-4fa8-bdeb-476d7c21c841"">Novels</option>
<option value=""8c2221e3-a3fd-4ce2-8f7e-66aac9eed5f5"">Second Category</option>
<option value=""c1ca0c2d-08c4-4b22-b9c7-69bbd42de840"">Third category</option>
</select>
</pre>

I analized the problem and it seems, that the method ""getSelectedValue"" in the ""SelectViewHelper"" can't handle multiple preselects.

I think the problem is also in the blog-tutorial when you try to edit post which already has related posts, they are not selected."
31942,TYPO3.Flow,Feature,"",Rejected,Should have,new act like objectmanager->create?,Carsten Bleicker,Karsten Dambekalns,2011-12-14 09:59,Object,"",2011-11-19,"","",0,2011-11-19 07:23,"","",365950,"","","hi folks,
maybe its usefull that new acts like the objectmanager to make it easy to change objects by object.yaml?
for examlpla:
new MyModel();
this could be analyzed by looking for interface implementation for this object.
if it has, take a look in objects. yaml config for this interface config and initialized the defined
class. what do you think?

concret problem for me was, that i had to add a public function to the doctrine query object to get access
to the queryBuilder parameter. i had to add in objects.yaml a new persistencemanager and a new query object.
if i would have the upper functionality the new \TYPO3\FLOW3\Doctrine\PersistenceManager::createQueryForType() knows
about my new Query Object.

kind regards
carsten"
31955,TYPO3.Fluid,Feature,"",New,Should have,f:uri.widget,Carsten Bleicker,"",2011-11-22 06:27,Widgets,"",2011-11-21,"","",0,2011-11-21 04:52,"","",366600,"","","f:link.widget should have the possibility to make the links absolute
and should be able to set controller etc of parentRequest to stay on the current page
if <f:base> is in use. at the moment there are only relative links, right?
there should also be a <f:from.widget> wich should clean the current widget config out of the
subrequest. otherwise all widget get params will be added again and after 10 klicks on the form
the uri will be more then allowed characters."
31957,TYPO3.Flow,Task,"",Resolved,Could have,Use curly braces instead of hashes in NotFoundView,Karsten Dambekalns,Karsten Dambekalns,2011-12-21 06:38,MVC,1.1 beta 1,2011-11-21,"","",100,2011-11-21 05:13,"","",366700,"","","The NotFoundView and it's template use ### as variable delimiter. This is inconsistent with Fluid using curly braces, even if at that point there is no Fluid anywhere nearby."
31974,TYPO3.Flow,Bug,"",Resolved,Must have,Date formatting in translations is broken,Karsten Dambekalns,Karsten Dambekalns,2011-12-21 06:38,I18n,1.1 beta 1,2011-11-22,"","",100,2011-11-21 18:20,"","",367550,"",Git master,"Well, it doesn't work. At all. The ""default"" format length is not read correctly and from there errors propagate."
31975,TYPO3.Flow,Bug,"",Resolved,Must have,Plural forms in XLIFF translations do not work,Karsten Dambekalns,Karsten Dambekalns,2011-12-21 06:38,I18n,1.1 beta 1,2011-11-22,"","",100,2011-11-21 18:24,"","",367600,"",Git master,Using plurals forms does not work like it should.
31997,TYPO3.Flow,Bug,"",Resolved,Should have,Security Context::hasRole should also work recursively; this makes <f:security.ifHasRole> work recursively as well,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-03-20 09:39,Security,1.1,2011-11-22,"","",100,2011-11-22 11:12,"","",368700,"",FLOW3 1.0.0,"Security Context::getRoles() returns ALL roles, while Security Context::hasRole checks only inside the first-level roles of the token. This needs to be fixed and made consistent.

"
32005,TYPO3.Welcome,Bug,"",Resolved,Should have,Links to FLOW3 website are broken,Karsten Dambekalns,Karsten Dambekalns,2011-12-08 11:36,"",1.0.2,2011-11-22,"","",100,2011-11-22 15:43,"","",369100,"",FLOW3 1.0.1,.
32014,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,Some unit tests break when run with PHPUnit 3.6,Karsten Dambekalns,Karsten Dambekalns,2011-12-22 02:48,- Testing -,1.0.2,2011-11-23,"","",100,2011-11-23 04:23,"","",369550,0.00,FLOW3 1.0.1,"When using PHPUnit 3.6 to run the unit tests, some tests fail. Partly this is caused by new restrictions in PHPUnit (one must no longer expect the generic Exception class) partly the more strict behavior of PHPUnit uncovers real bugs in the tests. Affected are tests in FLOW3 and Fluid."
32015,TYPO3.Flow,Bug,Bug #32014: Some unit tests break when run with PHPUnit 3.6,Resolved,Must have,Unit tests fail with PHPUnit 3.6,Karsten Dambekalns,Karsten Dambekalns,2011-12-19 16:06,- Testing -,1.0.2,2011-11-23,"","",100,2011-11-23 04:23,"","",369600,"",FLOW3 1.0.1,.
32016,TYPO3.Fluid,Bug,Bug #32014: Some unit tests break when run with PHPUnit 3.6,Resolved,Must have,Unit tests fail with PHPUnit 3.6,Karsten Dambekalns,Karsten Dambekalns,2011-12-09 09:06,"",1.0.2,2011-11-23,"","",100,2011-11-23 04:24,"","",369650,"",FLOW3 1.0.1,.
32035,TYPO3.Fluid,Task,"",New,Should have,Improve fluid error messages,Georg Ringer,"",2012-01-27 09:59,Core,"",2011-11-23,"","",0,2011-11-23 09:01,"","",370550,"","","The error messages of fluid could be a bit more helpful

Instead of 'Argument ""fo"" was not registered' use 'Argument ""fo"" was not registered for ""f:image""'

Instead of 'Required argument ""src"" was not supplied for ""f:image""'

so it is far easier to search for the error.

I don't know how a filename could be handled as this would be even more helpful"
32049,TYPO3.Flow,Bug,"",Resolved,Should have,Check for stripped comments not working,Karsten Dambekalns,Karsten Dambekalns,2011-12-09 11:36,Core,1.0.2,2011-11-24,"","",100,2011-11-24 05:58,"","",371200,"",FLOW3 1.0.1,"The bootstrap checks for the presence of doc comments, to avoid problems with some bytecode caches that strip comments.

That check is not working correctly (FALSE is returned but the check expects an empty string). In case an error is seen, the exception cannot be thrown as well (no classloader available at that point)."
32084,TYPO3.Flow,Feature,"",Resolved,Must have,Configurable base URI,Christopher Hlubek,Christopher Hlubek,2011-12-21 06:38,Core,1.1 beta 1,2011-11-25,"","",100,2011-11-25 05:34,"","",372950,"","","In certain situations and setups (FLOW3 behind loadbalancers, SSL offloading or using AiP) the base URI cannot be derived safely from a request. The base URI used in various parts of the system has to be configurable by the settings."
32105,TYPO3.Flow,Bug,"",New,Must have,IgnoreValidation ignored if ACL is set for this controller action,Carsten Bleicker,"",2011-11-26 05:22,Security,"",2011-11-26,"","",0,2011-11-26 05:22,"","",374000,"",FLOW3 1.0.0,"/**
* Creates a Chat to a specific Person
* @param \BLEICKER\Test\Domain\Model\Person $personToChatWith 
* @FLOW3\IgnoreValidation(""$personToChatWith"")
*/
public function createChatAction(\BLEICKER\Test\Domain\Model\Person $personToChatWith) {
....
}


the @FLOW3\Ignorevalidation has no effect if there is an acl for this controller action is defined so that all
model validations are executed.



"
32106,TYPO3.Flow,Feature,"",Accepted,Should have,Support for Object source in PropertyMapper,Marc Neuhaus,"",2013-06-24 03:59,Property,"",2011-11-26,"","",0,2011-11-26 08:45,"","",374050,"","","Hi,

i'm trying to ditch my old TypeConverters in my Admin Package. I'm trying to replace them with the core TypeConverters by added some Converters to convert from float, boolean, etc to string.

One thing i can't do with the default propertyMapper is to convert from a object like DateTime or a Collection.

Currently i use an extended version of the propertyMapper that allows objects as source type in the determineSourceType function.
I attached a diff for the changes i made.

Would be great to get this into core.

Greetings Marc"
32156,TYPO3.Flow,Feature,"",Rejected,Must have,"No detach() for Doctrine possible, memory problem with large data sets",Peter Russ,Karsten Dambekalns,2012-12-10 07:05,Persistence,2.0 beta 1,2011-11-29,"","",0,2011-11-29 06:12,"","",376500,"","","Running huge queries (i.e. some 10k results) we found that detaching an object isn't available in FLOw3 although there is such a method in Doctrine.
So we decided to add that to the persistence layer. This helps a lot also not completly solving problem of growing memory usage."
