#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Affected Flow version,Description
44278,TYPO3.Flow,Bug,"",Resolved,Must have,High memory consumption of Debugger::renderObjectDump() prevents display of Exceptions,Benno Weinzierl,Karsten Dambekalns,2013-01-26 06:37,Error,2.0,2013-01-02,"","",100,2013-01-02 11:43,"","",967500,"",Git master,"When an arbitrary Exception is thrown i get a ""Allowed memory Limit""-Error instead of the Flow Exception-Errormessage.

This seems to occure because \Doctrine\Common\Util\Debug::export($object, 12) is called with 12 nesting levels.
In TYPO3\Flow\Error\Debugger:
<pre>
        ....
	static protected function renderObjectDump($object, $level, $renderProperties = TRUE, $plaintext = FALSE, $ansiColors = FALSE) {
		$dump = '';
		$scope = '';
		$additionalAttributes = '';

		if ($object instanceof \Doctrine\Common\Collections\Collection) {
			return self::renderArrayDump(\Doctrine\Common\Util\Debug::export($object, 12), $level, $plaintext, $ansiColors);
		}
        ...
</pre>

if i change the 12 to 6 for example it works.
Sould this not be at least configurable via Settings.yaml?
"
44280,TYPO3.Flow,Bug,"",Resolved,Should have,Git core:migration check for applied version fail,Tarcisio Fedrizzi,Karsten Dambekalns,2013-01-15 04:38,- Migrations -,2.0,2013-01-03,"","",100,2013-01-03 05:07,"","",967600,"",(any),"When I migrate a package for the changes introduced in the code I get the following error:

<pre>
Applying TYPO3.FLOW3-201201261636
fatal: Invalid object name 'Migration'.
  Migrating Package.Name
    No changes were committed.

  -------------------------------------------------------------------------------
   Notes
  -------------------------------------------------------------------------------
  * \TYPO3\FLOW3\MVC\Web\RequestBuilder does not exist anymore. If you need to
    create requests, do ""new ActionRequest($parentRequest)"".
...
</pre>
I tracked down the problem to the migration script Git.php. The problem is in the
grep parameter specified without the = operator.
The attached patch solves the problem."
44285,TYPO3.Flow,Bug,"",Closed,-- undefined --,TYPO3\FLOW3\Exception thrown in file Scripts.php,torben ,Adrian Föder,2013-08-14 10:05,- Error Handler Report -,"",2013-01-03,"","",0,2013-01-03 08:30,"","",967850,"",Flow 2.0.0 beta 1,"It seems like the PHP binary ""C:\php/php"" cannot be executed by FLOW3. Set the correct path to the PHP executable in Configuration/Settings.yaml, setting TYPO3.FLOW3.core.phpBinaryPathAndFilename.
<pre>
10 TYPO3\FLOW3\Core\Booting\Scripts::initializeProxyClasses(TYPO3\FLOW3\Core\Bootstrap)
9 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)
8 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)
7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
4 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)
3 TYPO3\FLOW3\Http\RequestHandler::boot()
2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()
1 TYPO3\FLOW3\Core\Bootstrap::run()

Please include more helpful information!
</pre>"
44314,TYPO3.Flow,Task,"",Accepted,Must have,slightly file permissions for .../Configuration/* and .../Data/Persistent/EncryptionKey,Rafael Kähm,Karsten Dambekalns,2013-11-25 08:21,Security,"",2013-01-04,"","",0,2013-01-04 12:15,"","",969300,"","","File permissions for all files in 
*Configuration* folder 
and 
*Data/Persistent/EncryptionKey* 
have *644* permissions

they *should be 600*, because Apache and NGINX are for most Webserver configurations in the same group as webspace user. Also one stranger(f. e. by webhosting Server) can read all this files if this one can create symlinks to this files in own webspace.

Evidence: 

* User A:
** document root: /var/www/client1/userA

* User B:
** document root: /var/www/client2/userB

user B makes symlinks to all Configuration/*.yaml and to .../Data/Persistent/EncryptionKey files in its webspace and then call http://users-b-domain.dev/uri-to-symlink-that-points-to-users-A-file to read all this configuration files.
"
44361,TYPO3.Flow,Bug,"",New,Should have,TYPO3\Flow\I18n\Formatter\DatetimeFormatter - caching DATETIME type,Jerzy no-lastname-given,"",2013-08-14 09:35,I18n,2.0.1,2013-01-07,"","",0,2013-01-07 07:10,"","",971650,"",Flow 2.0.0 beta 1,"I've encountered problem with DatetimeFormatter using \TYPO3\Flow\I18n\Cldr\Reader\DatesReader::FORMAT_TYPE_DATETIME with multiple FORMAT_LENGTH_* options - after refreshing site, output is the same for all of them. It works fine with separete FORMAT_TYPE_DATE and FORMAT_TYPE_TIME. 

Code sample:

<pre>
            $someDate = new \DateTime();
            
            $full = $this->i18nDateFormater->format($someDate, $locale, array(
                \TYPO3\Flow\I18n\Cldr\Reader\DatesReader::FORMAT_TYPE_DATETIME,
                \TYPO3\Flow\I18n\Cldr\Reader\DatesReader::FORMAT_LENGTH_FULL
            ));
            var_dump($full);
            
            $short = $this->i18nDateFormater->format($someDate, $locale, array(
                \TYPO3\Flow\I18n\Cldr\Reader\DatesReader::FORMAT_TYPE_DATETIME,
                \TYPO3\Flow\I18n\Cldr\Reader\DatesReader::FORMAT_LENGTH_SHORT
            ));
            var_dump($short);
</pre>

Same thing with view helper:
<pre>
	{f:format.date(date: 'now', localeFormatType: 'dateTime',  localeFormatLength: 'full', forceLocale: true)}
	{f:format.date(date: 'now', localeFormatType: 'dateTime',  localeFormatLength: 'short', forceLocale: true)}
</pre>"
44375,TYPO3.Flow,Task,Feature #36715: Make simultaneous use of multiple persistence backends possible,Accepted,Should have,Make all persistence reads go through repositories,Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Persistence,"",2013-01-08,"","",0,2013-01-08 07:09,"","",972350,"","","Currently Flow fetches some objects directly via the PersistenceManager, without using the repositories for the fetched objects. This can lead to confusion (if a specialized getter is not called as expected) and prohibits the use of repositories to divert between persistence backends."
44376,TYPO3.Fluid,Bug,"",Resolved,Must have,Paginate widget throws exception,Bastian Waidelich,Bastian Waidelich,2013-01-08 09:36,Widgets,2.0,2013-01-08,"","",100,2013-01-08 07:39,"","",972400,"",Flow 2.0.0 beta 1,"With #43589 the action argument of link/URI ViewHelpers is not optional any longer (except for AJAX widget links/URIs where the argument falls back to the current action).
The template of the provided pagination widget has not been adjusted to that breaking change yet."
44396,TYPO3.Flow,Task,Feature #36715: Make simultaneous use of multiple persistence backends possible,Accepted,Should have,Move Doctrine ORM integration onto own namespace,Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Persistence,"",2013-01-09,"","",0,2013-01-09 05:43,"","",973400,"","",The @Persistence\Doctrine@ classes must go into @Persistence\Doctrine\ORM@ to avoid clashes.
44397,TYPO3.Flow,Bug,"",Resolved,Must have,Status for code migrations is broken (call to undefined function),Karsten Dambekalns,Karsten Dambekalns,2013-01-09 13:36,- Migrations -,2.0,2013-01-09,"","",100,2013-01-09 05:54,"","",973450,"",Flow 2.0.0 beta 1,The removal of @getPackageKey()@ on the code migrations needs to be reflected in the status output command.
44398,TYPO3.Flow,Task,"",Resolved,Should have,flow:core:migrate should ignore the Libraries folder,Karsten Dambekalns,Karsten Dambekalns,2013-03-19 09:37,- Migrations -,2.0,2013-01-09,"","",100,2013-01-09 05:57,"","",973500,"","",""
44402,TYPO3.Flow,Bug,"",Resolved,Must have,Regex search & replace in code migrations never done,Karsten Dambekalns,Karsten Dambekalns,2013-04-05 09:37,- Migrations -,2.0,2013-01-09,"","",100,2013-01-09 07:06,"","",973700,"",Flow 2.0.0 beta 1,"The code is all in place, but the last step of actually using it is missing?"
44434,TYPO3.Flow,Task,"",Resolved,Could have,Link generation in functional tests should behave like Apache with mod_rewrite,Karsten Dambekalns,Karsten Dambekalns,2013-08-02 04:52,- Testing -,2.0,2013-01-10,"","",100,2013-01-10 08:36,"","",975300,"","","Currently links generated in functional tests include ""index.php"" as the @FLOW_REWRITEURLS@ environment variable is not present (usually set in @.htaccess@ if mod_rewrite is available).

By adding this environment variable in @FunctionalTests.xml@ the tests would behave like most people would link building to work."
44458,TYPO3.Flow,Feature,"",Closed,Could have,Allow deletion of sub objects,Bastian Waidelich,Bastian Waidelich,2014-02-19 04:07,Property,"",2013-01-11,"","",0,2013-01-11 07:15,"","",976500,"","","Currently it's not possible to remove a subobject from an entity in it's updateAction without manual interaction.

h2. Example:

Imagine you have a domain object *Invoice* with 1:n relation to *Client* and a n:n relation to *InvoiceItem*
I want to display the invoice with its items and the related client.
The user should be able to remove items and the client from the invoice and submit the form.

*Note:* A solution would be to remove relations via AJAX but that's a different topic

h3. RFC:

I could imagine following solution:

Submit the form with
<pre>
<code class=""html"">
<input type=""hidden"" name=""client[__remove]"" value=""1"" />
<input type=""hidden"" name=""items[__remove]"" value=""UUID1, UUID2"" />
</code>
</pre>

an alternative syntax for the collection removal could be:

<pre>
<code class=""html"">
<input type=""hidden"" name=""items[__remove][UUID1]"" value=""1"" />
<input type=""hidden"" name=""items[__remove][UUID2]"" value=""1"" />
</code>
</pre>

The *PersistentObjectConverter* would have to take care of the removals probably.

h3. Security:

We probably need a new constant *PersistentObjectConverter::CONFIGURATION_DELETION_ALLOWED* (in addition to *CREATION* and *MODIFICATION*) which need to be set in the propertyMappingConfiguration for the corresponding object."
44471,TYPO3.Flow,Bug,"",Resolved,Should have,Apc Cache backend has side effects,Tymoteusz Motylewski,Karsten Dambekalns,2013-04-05 10:37,Cache,2.0,2013-01-11,"","",100,2013-01-11 16:40,"","",977150,"",(any),"If two caches use the APC cache backend, one cache can write and get entries from the other by just using the same key!
see:
http://forge.typo3.org/issues/38135
and patch
https://review.typo3.org/#/c/12145/8"
44496,TYPO3.Flow,Bug,"",Resolved,Must have,New doctrine.annotations classes are proxied but should not,Christian Müller,Karsten Dambekalns,2013-01-14 04:42,Persistence,2.1,2013-01-14,"","",100,2013-01-14 04:01,"","",978400,"",Git master,doctrine.annotations was moved out of Doctrine.Common and so aren't excluded from object management anymore. With that fatal errors occur even when just calling the flow command.
44520,TYPO3.Flow,Bug,"",Resolved,Should have,Case-sensitivity switch for Query::equals() is not implemented,Karsten Dambekalns,Karsten Dambekalns,2013-12-04 02:47,Persistence,2.0,2013-01-14,"","",100,2013-01-14 15:14,"","",979600,"",(any),""
44521,TYPO3.Flow,Bug,"",Resolved,Should have,ObjectPathMappingRepository always checks case-sensitive,Karsten Dambekalns,Bastian Waidelich,2014-02-21 16:36,MVC - Routing,2.0.1,2013-01-14,"","",100,2013-01-14 15:22,"","",979650,"",(any),"The @ObjectPathMappingRepository@ always checks for matches using a case-sensitive check. This worked fine for most people so far, because the most common collation on MySQL is probably utf8_unicode_ci, which is case-*in*sensitive anway."
44535,TYPO3.Flow,Bug,"",Resolved,Should have,"Subclasses of SplObjectStorage, ArrayObject, Collection not considered collection type",Karsten Dambekalns,Karsten Dambekalns,2013-08-02 05:21,Utility,2.0,2013-01-15,"","",100,2013-01-15 07:10,"","",980350,"",(any),@TypeHandling::isCollectionType()@ does not consider inheritance when it comes to the checking it does. Thus a subclass of @SplObjectStorage@ or an implementation of Doctrine's @Collection@ interface will not pass the check.
44542,TYPO3.Flow,Task,"",New,Should have,Mention the risk of requestPatterns regarding foreign package's SecurityContext usage,Adrian Föder,Adrian Föder,2013-01-17 12:39,- Documentation -,"",2013-01-15,"","",0,2013-01-15 11:43,"","",980700,"","","If someone sets a RequestPattern to his package's namespace, for example
<pre><code class=""yaml"">
security:
  authentication:
    providers:
      DefaultProvider:
        provider: 'PersistedUsernamePasswordProvider'
        requestPatterns:
         controllerObjectName: 'Acme\.+'
</code></pre>

This will have an evil side effect when using and relying on foreign package's SecurityContext usage, because the foreign (controller) request won't involve the above authentication provider since the RequestPattern does (of course) not match.

The foreign package is requested, for example via a Widget; the widget includes the SecurityContext, the SecurityContext tries to authenticate the tokens; but since the DefaultProvider token has the requestPattern set and does not match for this widget's request; the token will be deactivated and may result into actually no authentication taking place.
As a result, the SecurityContext has no tokens and is unable to conduct any authentication, account retrieval etc.

This seems ""as programmed"", but should be emphasized in the documentation http://flow.typo3.org/documentation/guide/partiii/security.html#request-patterns as a .. caution note or similar."
44563,TYPO3.Flow,Feature,"",New,Should have,Logged in users via HTTP Basic always get re-authenticated,Marco Falkenberg,"",2013-01-16 05:28,Security,"",2013-01-16,"","",0,2013-01-16 05:28,"","",981750,"","","Logged in users via HTTP Basic will always be re-authenticated by the authentication provider manager, because the UsernamePasswordHttpBasic token always sets the authentication status either to ""authentication needed"" or ""no credentials given"".

There are two cons related to this fact:

1. After being logged in, every following request results in a new authentication which could (or better should) be very cheap depending on the used hashing strategy. Thus requests taking a long time and stressing the server.
2. Every requests results in changing to a new session.

A possible solution could be to narrow down the use of ""authentication needed"" and only re-authenticate under the following circumstances:

1. The username has changed.
2. The password has changed.

Detecting a change of the username is easy. Just store the logged in user in the token and compare it with the current.

Detecting a change of the password is the problem, because you should not store the last used password in the token (security). Also hashing the password is no good idea. Maybe you could ignore changes in password and rely on getting the same username password combination all over the time (or for a limited timespan).

Maybe some else has an idea how to solve this more deterministic?
"
44566,TYPO3.Flow,Task,"",Closed,Should have,RFC: Change CGL to remove closing PHP tag,Christopher Hlubek,"",2013-10-25 06:30,- Documentation -,"",2013-01-16,"","",100,2013-01-16 07:57,"","",981900,"","","Having a closing PHP tag in class definitions is cumbersome, error prone (if whitespace is inserted after the tag) and not common in most other frameworks.

Therefore we should change this rule in our CGL

> Always use the closing tag ?> at the end of a file, don?t leave it out (this ain?t no Zend Framework, dude)

to something like

> Don't end files with the closing PHP tag @?>@

The change can be easily automated with a code migration that we ship with the next Flow version."
44572,TYPO3.Fluid,Feature,"",Resolved,Could have,Format.Case ViewHelper in order to change the case of string values,Adrian Föder,Adrian Föder,2014-05-08 03:48,ViewHelpers,"",2013-01-16,"","",100,2013-01-16 09:48,"","",982200,"","","Have an @f:format.case@ ViewHelper with the options ""lower"", ""upper"" and ""capital"" which results into @strtolower@, @strtoupper@, and @ucfirst@."
44602,TYPO3.Flow,Bug,"",Resolved,Should have,Update YAML schemas to latest changes,Bastian Waidelich,Bastian Waidelich,2013-01-31 04:36,"",2.0,2013-01-17,"","",100,2013-01-17 08:07,"","",983700,"",Git master,"Currently
<pre>
./flow configuration:validate --type Settings
</pre>
and
<pre>
./flow configuration:validate --type Objects
</pre>

Return errors for Flow configuration.
The respective schemas need to be adjusted to recent changes"
44604,TYPO3.Flow,Task,"",New,Should have,Add a guide for installing Flow on Win7 x64 XAMPP,Oliver Eglseder,Oliver Eglseder,2013-08-14 09:35,- Documentation -,2.0.1,2013-01-17,"","",100,2013-01-17 08:59,"","",983800,"","",""
44622,TYPO3.Flow,Feature,"",Resolved,Could have,Add unique entity validator,Aske Ertmann,"",2013-01-31 07:36,Validation,2.0,2013-01-17,"","",100,2013-01-17 18:13,"","",984700,"","","After creating a unique entity validator for Neos I shared it in the IRC channel and people seemed to like the idea. So I've moved it into the Flow package and would like some feedback if people would like to have this general validator or if we should keep it out.

It works for action controllers and is intended for create and update methods. The uniqueness is defined by the entity's identity properties. It should work with both Doctrine and Generic persistence.

_Thanks to RafaelK, sorenmalling & afoeder for helping getting it to the final implementation._"
44670,TYPO3.Welcome,Bug,"",Resolved,Could have,JS in Welcome Package broken,Axel Böswetter,Karsten Dambekalns,2013-03-19 11:37,"","",2013-01-20,"","",100,2013-01-20 08:36,"","",987100,"",Flow 2.0.0 beta 1,"Hi,

I've just installed the 2.0b1 in a VM and recognized that the javascript in the welcome package seems to be broken. The mootools core v1.2.2 seems to be buggy as it does not return the first h2 element via @element.getFirst()@ but the "".tab"" div itself, which results in non object error after @element.getFirst('h2)@. It also results in a broken layout, as the ""tab-*"" css classes are not correctly assigned so that the stylesheets in the Styles.css don't apply correctly.

Just replace the mootools library with the latest one and everthing seems to be fine again. I used the latest @mootools-core-1.4.5-full-compat-yc.js@ from the mootools website.

This is just cosmetical, I know, but normaly it's the first part of Flow every new user sees.

Regards,
Axel"
44684,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Authorization header redirect in .htaccess strips the Basic-prefix,Peter Rauber,"",2014-09-16 17:41,"","",2013-01-21,"","",0,2013-01-21 05:38,"","",987800,"",(any),"The .htaccess file in the web folder contains this command:
SetEnvIfNoCase Authorization ""Basic ([a-zA-Z0-9\+/=]+)"" REMOTE_AUTHORIZATION=$1

This will strip the prefix ""Basic "" from the authorization header.

Changing this to:
SetEnvIfNoCase Authorization ""Basic ([a-zA-Z0-9\+/=]+)"" REMOTE_AUTHORIZATION=$0

worked for me. Maybe this should be updated in the shipped .htaccess-File."
44702,TYPO3.Fluid,Bug,"",Resolved,Should have,"[CGL] ""public static"" instead of ""static public""",Tymoteusz Motylewski,"",2013-01-31 04:36,"","",2013-01-21,"","",100,2013-01-21 16:32,"","",988700,"",Git master,"In the TemplateParser class scope should be ""static public"" not ""public static"""
44706,TYPO3.Fluid,Task,"",Resolved,Should have,[CGL] small cgl issues in AbstractViewHelper,Tymoteusz Motylewski,"",2013-01-31 04:36,"","",2013-01-21,"","",100,2013-01-21 17:26,"","",988900,"","",""
44710,TYPO3.Fluid,Bug,"",Resolved,Should have,[CGL] Fix some cgl issues spotted during backporting,Tymoteusz Motylewski,"",2013-02-18 15:37,"","",2013-01-22,"","",100,2013-01-21 18:20,"","",989050,"",Git master,Container issue for cgl problems spotted while syncing Flow Fluid and CMS Fluid
44712,TYPO3.Flow,Task,"",Accepted,Should have,Decouple Argument-Building in the HTTP-Request-Constructor,Achim Fritz,"",2013-01-23 05:19,Http,"",2013-01-22,"","",0,2013-01-22 02:13,"","",989150,"","","It should be possible to create a HTTP-Request-Object without reading all arguments in the Constructor, especially the body-arguments in a PUT/POST-Request from the input stream ""php://input"".

If I need a HTTP-Request-Object in my RequestHandler for decide if i can handle this Request, the Creation of the HTTP-Request-Object empties the input stream and every later created HTTP-Request-Object gets no body-arguments.

Perhaps the input stream can be read first, when accessing the Request-Arguments

"
44730,TYPO3.Flow,Feature,"",Resolved,Should have,Support stream resources as content for HTTP Request,Robert Lemke,"",2013-01-23 07:36,Http,2.1,2013-01-22,"","",100,2013-01-22 14:51,"","",990050,"","","If the HTTP Request would support stream resources instead of strings for setContent() and the CurlEngine would take this into consideration, files could be sent with curl through its INFILE feature."
44738,TYPO3.Flow,Feature,"",New,Must have,Re-Validation of argument's custom validators,Marco Falkenberg,"",2013-01-23 03:19,Validation,"",2013-01-23,"","",0,2013-01-23 03:19,"","",990450,"","","There are situation where the automatic validation of arguments, that happens BEFORE passing the arguments to the action-method, is not enough. The validation should be able to be reactivated in the controller-action. E.g if you do some business logic inside the action.

A very simple and common example, is where you want to validate an item after adding some sub-items to it: 

<pre>
public function addChildAction(Parent $parent, Child $child) {
  $parent->addChild($child);
  $this->revalidateArguments();
}
</pre>

<pre>
class BadNameChoiceValidator extends \TYPO3\Flow\Validation\Validator\GenericObjectValidator {

  protected function isValid($parent) {
    foreach($parent->getChilds() as $child) {
      if($parent->lastName === 'Walker' && $child->firstName === 'Johnny') {
        $this->addError('Name is to alcoholic!', 1357116916);
      }
    }
  }

}
</pre>

Thus the ValidatorInterface should have a reset-method. E.g. the ObjectValidator could reset its validatedInstancesContainer there."
44740,TYPO3.Flow,Feature,"",Resolved,Should have,Add support for doctrine's 'indexBy'-annotation in FlowAnnotationDriver,Marco Falkenberg,"",2015-03-05 08:33,Persistence,"",2013-01-23,"","",100,2013-01-23 04:14,"","",990550,"","","There is a nice feature for indexing doctrine's collections (One-To-Many & Many-ToMany). See http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/working-with-indexed-associations.html

It would be nice if Flow's annotation would transport this annotation as well.

Many thanks!"
44743,TYPO3.Flow,Bug,"",Resolved,Should have,Wrong variable declaration in Security\Context,Karsten Dambekalns,Karsten Dambekalns,2013-04-05 10:37,Security,2.0,2013-01-23,"","",100,2013-01-23 05:55,"","",990700,"",FLOW3 1.1.0,The @$request@ member is annotated as being @Http\Request@ but must be @Mvc\ActionRequest@
44753,TYPO3.Flow,Bug,"",Closed,Must have,"Using 'authenticationRequired' action name for ""WebRedirect"" gives exception",Adrian Föder,"",2013-02-06 07:09,Session,"",2013-01-23,"","",0,2013-01-23 09:53,"","",991200,"",Git master,"//edit: nevermind initial description; the actual point is: if my action is named like below (""@authenticationRequired@""), the exception occurs as described. However, if I rename the action to something else, even maybe ""@authRequired@"", the problem does not occur.
I verified that definitely with a fresh cache-flush and warmup and a very fresh browser instance each time...

-------
(following is obsolete):

consider the following use case:
<pre>
<code class=""yaml"">
    security:
      authentication:
        providers:
          DefaultProvider:
            provider: 'PersistedUsernamePasswordProvider'
            entryPoint: 'WebRedirect'
            entryPointOptions:
              routeValues:
                '@package': 'Acme.Acme'
                '@controller': 'Authentication'
                '@action': 'authenticationRequired'
</code>
<code class=""php"">
// AuthenticationController:
public function authenticationRequiredAction() {
	$this->addFlashMessage('You must be logged in to see this page');
		
		// not necessary to reproduce, but to show the intention:
	#$this->forward('login');
}
</code>

#1: Notice: unserialize(): Error at offset 12196 of 12384 bytes in ...\TYPO3.Flow\Classes\TYPO3\Flow\Cache\Frontend\VariableFrontend.php line 80
</pre>

The following is the end of the serialized content:
<pre>
controllerActionName"";s:5:""index"";s:12:"" * arguments"";a:0:{}s:20:"" * internalArguments"";a:1:{s:11:""__csrfToken"";s:32:""8dc6e96bfbed85aec3b0ea7c45d6bc85"";}s:18:"" * pluginArguments"";a:0:{}s:20:"" * argumentNamespace"";s:0:"""";s:9:"" * format"";s:4:""html"";s:13:"" * dispatched"";b:1;s:16:"" * parentRequest"";r:65;s:14:"" * rootRequest"";r:65;s:19:"" * referringRequest"";N;}}i:2;O:47:""TYPO3\Fluid\Core\Widget\AjaxWidgetContextHolder"":2:{s:23:"" * nextFreeAjaxWidgetId"";i:0;s:17:"" * widgetContexts"";a:0:{}}}
</pre>

The offset 12196 is exactly the (last) semicolon at @rootRequest"";r:65;@, so maybe a recursion fails or something...

That VariableFrontend access, btw, comes with @TYPO3\Flow\Session\Session_Original::resume()@.

Can you (please) reproduce this? Just adding that ->addFlashMessage() to a WebEntryPoint'ed controller action and hitting a secured page (letting the WebEntryPoint kick in) with a fresh session should show the error."
44765,TYPO3.Flow,Bug,"",Resolved,Should have,Functional test broken,Michael Klapper,Karsten Dambekalns,2013-04-05 05:38,Security,2.0,2013-01-23,"","",100,2013-01-23 17:18,"","",991800,"",Flow 2.0.0 beta 1,"If you run the functional tests, you'll get the following exception thrown.

<pre>
TYPO3\Flow\Security\Exception: The security Context cannot be initialized yet. Please check if it can be initialized with $securityContext->canBeInitialized() before trying to do so.
</pre>

This is a side effect of the following commit:
<pre>
commit ce08c301e116f3e775657a977c3f1bc3ee4fcad3
Author: Sebastian Kurfuerst <sebastian@typo3.org>
Date:   Thu Jan 17 17:57:44 2013 +0100

    [BUGFIX]Â The security context is only allowed to be initialized after routing took place

...

 This is a follow-up to issue #42601; where the according code has been
    implemented.

    Change-Id: I724c1b352dd1807ba53b1e336f2d90e90360ff4d
    Releases: master, 2.0

</pre>"
44826,TYPO3.Fluid,Bug,"",Resolved,Should have,groupedFor cannot group by DateTime-Objects,Wouter Wolters,"",2013-03-26 12:36,"","",2013-01-26,"","",100,2013-01-26 11:46,"","",994850,"",(any),The Fluid-ViewHelper groupedFor cannot group by as DateTime-Object defined properties.
44885,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Make documentation fit for docs.typo3.org,Karsten Dambekalns,Karsten Dambekalns,2013-01-30 12:36,- Documentation -,2.0,2013-01-28,"","",100,2013-01-28 08:37,"","",997800,"","","* move images to @Images/@ next to source file(s)
* add Settings.yml"
44889,TYPO3.Fluid,Bug,"",Resolved,Should have,Format urlencode viewhelper should work with objects that implement __toString,Christian Müller,"",2013-03-21 11:37,"","",2013-01-28,"","",100,2013-01-28 10:11,"","",998000,"",(any),currently a check for is_string prevents format.urlencode to work with objects that implements __toString
44891,TYPO3.Flow,Feature,"",New,Should have,Routes should be able to enforce http/https protocol,Ondrej Hatala,"",2014-05-14 13:55,MVC - Routing,"",2013-01-28,"","",0,2013-01-28 10:53,"","",998100,"","","It should be possible to set http/https protocol for each route separately (for e.g. for the checkout page of the e-shop).

<pre>
-
  name: 'Checkout'
  uriPattern: 'checkout'
  defaults:
    '@package':    'Eshop'
    '@controller': 'Checkout'
    '@action':     'index'
    '@format':     'html'
    '@protocol':     'https'
</pre>

Default behaviour should be to use http.
If https is specified for the route and you arrive through http, automatic redirect to https should ensue."
44997,TYPO3.Flow,Bug,"",Resolved,Must have,JsonView outputs unreliable DateTime representation,Adrian Föder,Adrian Föder,2013-03-20 11:37,MVC,2.0,2013-01-31,"","",100,2013-01-31 01:59,"","",1002200,"",FLOW3 1.0.0,"Currently, the JsonView just outputs @Y-m-d H:i:s@ as string when it comes to a DateTime object. This is incorrect since it doesn't care about time zones / offsets.

Error case:
* it's 15:13 GMT, a record is created
* the record is stored in 14:13 UTC
* after Hydration, the DateTime object represents 14:13 UTC
* JsonView's H:i:s makes ""14:13"" of it
* (maybe) the string is directly given to JavaScript's new Date() constructor, resulting (due to GMT local time) in 14:13 GMT which is obviously wrong.

Solution: add a timezone offset as in ISO 8601 which is also directly accepted by JavaScript's Date() constructor and probably any other ""magical"" datetime parser."
45041,TYPO3.Flow,Bug,"",New,Must have,Set file permissions doesnt work,Christian Jul Jensen,"",2013-08-14 09:35,Command,2.0.1,2013-01-31,"","",0,2013-01-31 11:16,"","",1004350,"",Git master,"Installing the Neos demopackage, the set file permission command did not change anything, even though it didn' encounter any errors. see attachment."
45062,TYPO3.Flow,Bug,"",Resolved,Should have,TranslateViewHelper fails if an array with a single number is passed as arguments,Timo Dödtmann,"",2014-02-24 06:36,I18n,"",2013-02-01,"","",100,2013-02-01 04:17,"","",1005350,"",Flow 2.0.0 beta 1,"If the TranslateViewHelper will passed ""arguments"" and this is now an array of a single number [array(0 => 123)], for example to tell that the password is too short, the Translator (_\TYPO3\Flow\I18n\Translator_) try's to find the plural form of this number (take a look in _\TYPO3\Flow\I18n\Translator->translateById()_ which is called _\TYPO3\Flow\I18n\Translator->getPluralForm()_).
Normally this fails and the ViewHelper returns the passed ""id"" or ""value"".

The following line returns _""Password must have x characters.""_, even if _""myMessageId""_ is set correctly.
<pre>
{f:translate(id:'myMessageId', arguments:{0:123}, value:'Password must have x characters.')}
</pre>

If _""myMessageId""_ use the placeholder _{1}_ and
<pre>
{f:translate(id:'myMessageId', arguments:{0:1, 1:123}, value:'Password must have x characters.')}
</pre>
is called, then _""myMessageId""_ wil be returned with _""123""_ for the placeholder. "
45071,TYPO3.Fluid,Bug,"",Closed,Won't have this time,Fluid tries to parse inside an in-HTML Javascript code,Thiago Colares,"",2013-08-14 09:39,View,1.1.1,2013-02-01,"","",0,2013-02-01 08:08,"","",1005800,"",FLOW3 1.1.0,"Example. When I try this:
<pre>
<script type=""text/javascript"">
	$(function(){
		var id = '#{id}';
		$(id).datepicker({
			dateFormat: ""dd/mm/yy"",
			changeMonth: true,
			changeYear: true
		});


	});
</script>
</pre>

I got this HTML as result:

<pre>
<script type=""text/javascript"">
	$(function(){
		var id = '#dummy-id-01';
		$(id).datepicker(Array);
</script>
</pre>


To overcome this issue, we inserted a dummy comment. :)
<pre>
<script type=""text/javascript"">
	$(function(){
		var id = '#{id}';
		$(id).datepicker({
			dateFormat: ""dd/mm/yy"", // DO NOT EVER REMOVE THIS COMMENT!
			changeMonth: true,
			changeYear: true
		});


	});
</script>
</pre>

So, The HTML results is as expected:
<pre>
<script type=""text/javascript"">
	$(function(){
		var id = '#dummy-id-01';
		$(id).datepicker({
			dateFormat: ""dd/mm/yy"", // DO NOT EVER REMOVE THIS COMMENT!
			changeMonth: true,
			changeYear: true
		});
</script>
</pre>
"
45100,TYPO3.Flow,Feature,"",Under Review,Should have,RequestDispatchingAspect should check if entry point can handle current request,Christopher Hlubek,Christopher Hlubek,2013-02-08 09:32,"","",2013-02-03,"","",0,2013-02-03 05:36,"","",1007200,"","","For AJAX, REST and other requests the default behavior of intercepting the request and choosing e.g. the WebRedirect entry point is not desirable.

There should be a ""canHandleRequest"" method in the entry point to check if the current request can be handled. For example an AJAX request with @X-Requested-With:XMLHttpRequest@ should not get a redirect but a proper status code and header that links to a login service."
45103,TYPO3.Flow,Feature,"",New,Should have,Make static resource URI generation available outside of Fluid,Christopher Hlubek,"",2013-02-03 07:16,Resource,"",2013-02-03,"","",0,2013-02-03 07:16,"","",1007300,"","","The @ResourcePublisher@ does only have a method to get the static resources web base URI (@getStaticResourcesWebBaseUri@). To resolve @resource://...@ URIs outside of Fluid the functionality of the @ResourceViewHelper@ has to be duplicated.

The @ResourcePublisher@ should get a method @getStaticResourceWebUri(...)@ to resolve the URI inside the resource publisher."
45153,TYPO3.Fluid,Feature,"",New,Should have,f:be.menus.actionMenuItem - Detection of the current select option is insufficient,Stefan Galinski,"",2013-02-04 17:17,"","",2013-02-04,"","",0,2013-02-04 17:17,"","",1009800,"","",Currently the action menu preselects an option if the current controller/action pair matches the arguments from the menu item. Unfortunatly you have no option to force another menu item to be preselected that would make sense if you execute other action/controller pairs inside your backend module that are not shown in the menu. For example this could be a preview dialog after a form submission.
45164,TYPO3 Flow Base Distribution,Feature,"",Accepted,Should have,Define syntax for validation rules in YAML,Karsten Dambekalns,Karsten Dambekalns,2013-02-05 04:52,"","",2013-02-05,"","",0,2013-02-05 04:52,"","",1010350,"","","To be able to define validation rules in YAML will be helpful in a number of cases, like for node types, validation of free-form documents (think about NoSQL), ?

Here is a suggestion for defining validation rules:

<pre>validation:
  -
    type: 'NotEmpty'
  -
    type: 'RegularExpression'
    options:
      regularExpression: '(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}'
  -
    preset: 'MakeLifeEasierForBram'</pre>

@validation@ can have any number of elements, @type@ follows the same rules as with the @Validate@ annotation and @options@ can hold any options that a validator accepts.

One new thing is @preset@, which is pointing to a predefined set of rules. Such a preset can be defined like this:

<pre>validationPreset:
  'MakeLifeEasierForBram':
    -
      type: 'NotEmpty'
    -
      type: 'StringLength'
      options:
        maximum: 7
    -
      type: 'RegularExpression'
      options:
        regularExpression: '[a-f56-]+'</pre>
"
45167,TYPO3.Flow,Feature,"",Resolved,Should have,"Allow ""custom generic"" object validators",Karsten Dambekalns,Karsten Dambekalns,2013-08-02 05:19,Validation,"",2013-02-05,"","",100,2013-02-05 05:56,"","",1010500,"","","Right now a @GenericObjectValidator@ will be built for objects and then a custom validator will be used. But that custom validator is looked up following a strict rule, so a ""custom generic"" validator is not possible currently."
45178,TYPO3.Flow,Bug,"",Resolved,Must have,Reconsider passed-by ini file on subprocess command execution,Adrian Föder,"",2013-04-12 08:39,"",2.0,2013-02-05,"","",100,2013-02-05 11:08,"","",1011050,"",(any),"currently, the subprocess is executed with the currently loaded ini, 

<pre>
Core\Booting\Scripts #541
<code class=""php"">
$command .= sprintf('%s -c %s %s %s', $phpBinaryPathAndFilename, escapeshellarg(php_ini_loaded_file()), ...
</code>
</pre>

This results into, for example,

<pre>
FLOW_ROOTPATH='/var/www/vhosts/acme.com/' FLOW_CONTEXT='Development' XDEBUG_CONFIG='idekey=FLOW_SUBREQUEST remote_port=9001' ""/usr/bin/php"" -c '/etc/php5/apache2/php.ini' '/var/www/vhosts/acme.com/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/../../../../Scripts/flow.php' 'typo3.flow:core:compile'
</pre>

see, @apache2/php.ini@ is included and used as ini for the subprocess.
In default cases, especially in apache's ini config a memory_limit is set; which therefore also engages CLI with a memory limit; which is surely not intended.

I think we should make this ini file configurable. Any ideas where and with what naming?"
45184,TYPO3.Fluid,Bug,"",Closed,Should have,"Additional identity filed are not rendered, after validation error",Dominique Feyer,Bastian Waidelich,2013-03-26 12:29,ViewHelpers,"",2013-02-05,"","",0,2013-02-05 13:43,"","",1011350,"",Git master,"Found a strange bug this afternoon. I have a form with children object, when the form is rendered I have 3 hidden fields with the different __identity value, but after a validation error I only see on hidden field with the identity of the main object.

I my case, this cause a big trouble, has Flow build a new object, and doctrine is configured to cascade persist on a one to one relation. This cause the child object data to be ""replaced"" by the new object data, and I loose all the property of the object that are not in the form.

Patch if coming"
45219,TYPO3.Flow,Bug,"",Resolved,Should have,Malformed DocBlock causes fatal error in ProxyClassBuilder,Robert Lemke,Robert Lemke,2013-02-08 06:39,Object,2.0,2013-02-06,"","",100,2013-02-06 15:16,"","",1013050,"",Flow 2.0.0 beta 1,"If code contains a malformed DocBlock like the following, the Dependency Injection Proxy Class Builder
results in a fatal error:
<pre>
/**

  @Flow\Inject
  @var \TYPO3\Flow\I18n\Service
 */
protected $i18nService;
</pre>
"
45249,TYPO3.Flow,Bug,"",New,Must have,Update composer project-create command listing,Martin Brüggemann,"",2013-02-07 09:17,- Documentation -,"",2013-02-07,"","",0,2013-02-07 09:16,"","",1014550,"",Flow 2.0.0 beta 1,"The composer create-project command like described at http://docs.typo3.org/flow/TYPO3FlowDocumentation/Quickstart/Index.html doesn't work for me (Mac OS X, zsh). It seems that the --dev option isn't recognized. Maybe it's better to define it by using the longer notation:

h2. OLD
<pre>
composer create-project --dev --keep-vcs typo3/flow-base-distribution Quickstart 2.0.0
</pre>

h2. NEW
<pre>
composer create-project -s dev --keep-vcs typo3/flow-base-distribution Quickstart 2.0.0
</pre>"
45253,TYPO3.Flow,Task,"",Accepted,Must have,Throw exception in PointcutMethodNameFilter if given method's argument does not match the actual method signature,Adrian Föder,Christian Müller,2013-03-07 10:33,Security,"",2013-02-07,"","",0,2013-02-07 12:07,"","",1014750,"","","Consider a TYPO3.Comment CommentRepository. I have set the following security resource:

<pre>
[...]
'method(TYPO3\Comments\Domain\Repository\CommentRepository->remove(comment.author === current.securityContext.party))'
</pre>

The CommentRepository itself does not carry an own remove() method, it inherits from TYPO3\Flow\Persistence\Repository as common.

In that mentioned case, NO proxy method is generated, hence no security applied.

When leaving the runtime constraint away,
<pre>
[...]
'method(TYPO3\Comments\Domain\Repository\CommentRepository->remove())'
</pre>
and still having not a concrete remove() method, but the inherited, it *works*, a proxy method is generated.

Third example: putting the runtime constraint back in,
<pre>
[...]
'method(TYPO3\Comments\Domain\Repository\CommentRepository->remove(comment.author === current.securityContext.party))'
</pre>
and putting a ""dummy"" remove() method into the concrete CommentRepository itself,
<pre><code class=""php"">
/**
 * @param \TYPO3\Comments\Domain\Model\Comment $comment
 */
public function remove($comment) {
	parent::remove($comment);
}
</code></pre>

it again works, too!


If you want to test and fiddle, I prepared a repository at https://github.com/afoeder/TYPO3.Comments, just see the (only) Functional Test there and the Policy.yaml configuration. Maybe you want to checkout HEAD^1 there."
45264,TYPO3.Flow,Feature,"",Resolved,Should have,Add Flow caching for Doctrine metadata and query caches,Marc Neuhaus,Karsten Dambekalns,2013-04-05 06:37,Persistence,2.0,2013-02-08,"","",100,2013-02-07 18:08,"","",1015300,"","","During a little investigation i found FlowAnnotationDriver::loadMetadataForClass to produce up to 60% of execution time in Production context.

Since this method only loads 'static' metadata (correct me if i'm wrong) this seems to be perfect to be cached."
45272,TYPO3.Flow,Bug,"",New,Should have,Related Value Objects get deleted by default cascading,Peter Rauber,"",2013-02-08 07:50,"","",2013-02-08,"","",0,2013-02-08 07:50,"","",1015700,"",(any),"Description by example:

An entity that relates to a value object:
<pre>
/**
 * A Building
 *
 * @FLOW3\Entity
 */
class Building {
  /**
   * @ORM\ManyToOne
   * @var \MyNamespace\Domain\Model\BuildingType
   */
  protected $buildingType;
}
</pre>

Two entities point to the same BuildingType:
<pre>
$building1 = new \MyNamespace\Domain\Model\Building();
$building1->setBuildingType(new \MyNamespace\Domain\Model\BuildingType('Type 1'));
$this->buildingRepository->add($building1);

$building2 = new \MyNamespace\Domain\Model\Building();
$building2->setBuildingType(new \MyNamespace\Domain\Model\BuildingType('Type 1'));
$this->buildingRepository->add($building2);
</pre>

When you try to delete building1, FLOW/doctrine will cascade the removal to the value object and that will cause an exception, because building2 still needs the value object, as it points to it's identifier.

I solved that by adding an empty cascade-attribute to that relations: @ORM\ManyToOne(cascade={""""}).

Suggestion:
The cascading was added by Flow3AnnotationDriver as this driver adds $mapping['cascade'] = array('all') to all properties that are not aggregate roots. I suggest that in the case of value objects $mapping['cascade'] = array('persist') will be added istead of 'all'."
45279,TYPO3.Flow,Task,"",Resolved,Could have,Add new translations for bundled validator error messages,Laurent Cherpit,"",2013-05-15 16:38,I18n,2.0,2013-02-08,"","",100,2013-02-08 08:47,"","",1016050,"","","Add new trans-unit id and new target-language fr translation for ValidationErrors.xlf
Add new file and new target-language fr for translation for Main.xlf
"
45282,TYPO3.Flow,Feature,Work Package #45088: Improved REST support,Resolved,Should have,"Support for ""sessionless authentication""",Bastian Waidelich,Bastian Waidelich,2013-06-07 11:32,Security,2.1,2013-02-08,2013-04-13,108.00,100,2013-02-08 09:41,"","",1016200,"","","Currently Flow relies on a session to be active in at least three places:

# @\TYPO3\Flow\Security\Aspect\RequestDispatchingAspect::blockIllegalRequestsAndForwardToAuthenticationEntryPoints()@ calls @\TYPO3\Flow\Security\Context::setInterceptedRequest()@ if an *entryPoint* is defined. Setting the intercepted request starts a session. This can be worked around by avoiding entryPoint or using requestPatterns to limit them only to certain parts of an application that allow sessions. #45100 might also be a solution for that
# @\TYPO3\Flow\Security\Authentication\AuthenticationProviderManager::authenticate()@ emits the @authenticatedToken@ signal after successful authentication which is configured to call @\TYPO3\Flow\Session\SessionInterface::renewId()@
# @\TYPO3\Flow\Security\Authentication\AuthenticationProviderManager::isAuthenticated()@ returns FALSE if no session was started/can be resumed"
45290,TYPO3.Flow,Bug,Work Package #45088: Improved REST support,Closed,Should have,Body arguments should not be merged before property mapping takes place,Bastian Waidelich,Bastian Waidelich,2013-09-23 08:01,Http,"",2013-02-08,2013-04-13,"",100,2013-02-08 11:05,"","",1016600,"",Git master,"Currently *body* and *POST* arguments are merged with *GET* arguments in @Http\Request::__construct()@.
Instead the merging should happen after routing took place in order to know more about the affected arguments.

Now, if you invoke a PUT request to http://localhost/products/product-1 with a body of
<pre>
<code class=""json"">
{
  ""product"": {
    ""title"": ""new title""
  }
}
</code>
</pre>

*GET* arguments:
<pre>
<code class=""php"">
array('product' => '<uuid of product-1>')
</code>
</pre>

*Body* arguments:
<pre>
<code class=""php"">
array('product' => array('title' => 'new title'));
</code>
</pre>

Obviously @\Http\Request::buildUnifiedArguments()@ can't properly merge those and - as a result - ignores the body arguments.

Instead the property mapper should probably fetch body arguments separately before calling the action (probably in @ActionController::mapRequestArgumentsToControllerArguments()@)"
45293,TYPO3.Flow,Feature,Work Package #45088: Improved REST support,Resolved,Should have,More flexible parsing of body arguments,Bastian Waidelich,Bastian Waidelich,2014-08-05 06:00,Http,"",2013-02-08,2013-04-13,"",100,2013-02-08 11:21,"","",1016750,"","","Parsing of body arguments (e.g. xml, json) currently takes place in Http\Request and is hard-coded there.
Besides from being a bit buggy (e.g. you currently have to specify two root nodes like <root><product><title>changed title</title></product></root> where a common REST request would expected to be just <title>changed title</title>) the behavior can't be influenced easily because it happens so early in the request handling."
45345,TYPO3.Fluid,Feature,"",Needs Feedback,Should have,Easy to use comments for fluid that won't show in output,Stefan Neufeind,"",2013-03-26 15:40,"","",2013-02-10,"","",0,2013-02-10 17:49,"","",1019300,"","","Proposal from Michael Knoll:
Use <!--- ... ---> (three minus instead of the usual two).

http://mimi.kaktusteam.de/blog-posts/2012/02/fluid-comments/"
45384,TYPO3.Fluid,Bug,"",New,Must have,Persisted entity object in widget-configuration cannot be deserialized (after reload),Benno Weinzierl,"",2013-08-14 09:35,Widgets,2.0.1,2013-02-11,"","",0,2013-02-11 12:36,"","",1021250,"",Git master,"I have a widget with a persisted entity object (e.g. MyNamespace\SpecialProduct derived from MyNamespace\Product) in its widget-configuration.

The object gets serialized in the session and is accessable in a ajax-request (everything works).

BUT:
When i reload the page with the widget, the ajax calls fail with the following error:

*Fatal error*: ... The script tried to execute a method or access a property of an incomplete object. Please ensure that the class definition ""MyEntity"" of the object you are trying to operate on was loaded _before_ unserialize() gets called or provide a __autoload() function to load the class definition  in ""my widget ajax action controller"" on line 65

I noticed that in Data/Temporary/Development/SubContextMyContext/Cache/Data/Flow_Session_Storage the entity is serialized. After reload the file contains the serialized entity two times. That seemes strange."
45386,TYPO3.Flow,Bug,"",New,Could have,Package::buildArrayOfClassFiles tries to determine class names from file paths,Christian Müller,"",2013-02-11 13:54,"","",2013-02-11,"","",0,2013-02-11 13:48,"","",1021350,"",(any),"This is a problem if you try to include composer packages that are not namespaced (probably for everything that is not PSR-0 compatible). Because with that a possibly existing folder structure cannot be mapped to namespaces for classes.

If we want to support it (not sure if needed in the long run) we would need a setting per package that switches in a ""Extbase"" style of determining class names, so instead of converting folders to namespace parts it would create a single class name from the folders separated by underscores. That would work for the simplepie package that I currently try to get working..."
45394,TYPO3.Fluid,Task,"",New,Should have,Forwardport Unit test for standalone view,Tymoteusz Motylewski,"",2013-02-11 16:39,View,"",2013-02-11,"","",0,2013-02-11 16:39,"","",1021750,"","","In TYPO3 CMS Fluid there is a StandaloneView unit test, which is missing in Flow Fluid.
see 
http://git.typo3.org/TYPO3v4/CoreProjects/MVC/fluid.git/tree/HEAD:/Tests/Unit/View
 and 
http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git/tree/HEAD:/Tests/Unit/View"
45401,TYPO3.Flow,Bug,"",Closed,Should have,Make Zend Framework 2 packages out-of-the-box compatible with TYPO3 Flow,Martin Brüggemann,Bastian Waidelich,2013-03-05 06:19,Object,"",2013-02-12,"","",0,2013-02-12 03:35,"","",1022100,"",Git master,"At the moment it's not possible to just use a composer dependency to get a ZF2 package running within Flow (Zend Mail f.e. https://packagist.org/packages/zendframework/zend-mail ). Flow seems to do some ""reflecting magic"" that results in some nice errors. 

Maybe you can copy the packages, create a Package.php and set ""$objectManagementEnabled = FALSE"" but this is really dirty. There should be a comfortable way to integrate ZF2 packages via composer and just use it like in the followingn example (maybe be disabling object management functions for some Packages in Settings.yaml:

@ $mail = new \Zend\Mail\Storage\Mbox(array('filename' => 'catcontent.mbox'));@

The well known Settings.yaml-option ""TYPO3:Flow:object:excludeClasses:"" unfortunately does not work here.

@ PHP Fatal error:  Class 'Zend\ServiceManager\AbstractPluginManager' not found in /Users/bernd/Sites/Testproject/Packages/Libraries/zendframework/zend-mail/Zend/Mail/Protocol/SmtpPluginManager.php on line 21
Uncaught Exception
  Execution of subprocess failed with exit code 255 and output:
  Fatal error: Class 'Zend\ServiceManager\AbstractPluginManager' not found
  in
  /Users/bernd/Sites/Testproject/Packages/Libraries/zendframework/zend-mail/Zend/Mail/Protocol/SmtpPluginManager.php
  on line 21
  The erroneous command was:
  FLOW_ROOTPATH='/Users/bernd/Sites/Testproject/' FLOW_CONTEXT='Development'
  XDEBUG_CONFIG='idekey=FLOW_SUBREQUEST remote_port=9001'
  ""/opt/local/bin/php"" -c '/opt/local/etc/php54/php.ini'
  '/Users/bernd/Sites/Testproject/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/../../../../Scripts/flow.php'
  'typo3.flow:core:compile'
More Information
  Exception code      #1355480641
  File                /Users/bernd/Sites/Testproject/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Booting/Scripts.php line 552
  Exception reference #201302120924552d1193@"
45405,TYPO3.Flow,Bug,"",Accepted,Should have,Uncaught Exception in DynamicRoutePart,Marco Falkenberg,Bastian Waidelich,2014-03-05 05:19,MVC - Routing,"",2013-02-12,"","",0,2013-02-12 05:57,"","",1022300,"",Git master,In line 184 of the DynamicRoutePart a notice is thrown if the incoming value is an array. This happens for PHP Versions > 5.4.0 (see http://php.net/ChangeLog-5.php).
45407,TYPO3.Flow,Bug,"",Closed,Must have,charset option for mysql connection is ignored with PHP < 5.3.6,Benjamin Albrecht,Karsten Dambekalns,2013-09-26 04:49,Persistence,"",2013-02-12,"","",0,2013-02-12 06:36,"","",1022400,"",Flow 2.0.0 beta 1,"Hi,

the configurable charset option for the backed (default ""utf8"") is ignored with PHP Version < 5.3.6
But the systems requirements of Flow 2.0 are PHP 5.3.2
(Here is the link to the PHP documentation: http://php.net/manual/de/ref.pdo-mysql.connection.php)

There are several implications with this Bug:
- Upgrade of PHP Version to 5.3.6 is not possible
We are using Debian 6.0 with the latest PHP 5.3 Debian package. This is PHP 5.3.3-7+squeeze14, wich contains 5.3.3 plus Bugfixes and Securityfixes, but not new features, like the pdo_mysql charset support.
- If we ignore this bug and writing content into the db only with Flow, there are no wrong character at the frontend / website. But the db contains broken characters. After an update to an new php version or another server, the broken characters are shown at the frontend... (same after upgrading from FLOW3 1.1)

The mysql driver of doctrine supports ""driverOptions"" to set something like ""SET NAMES utf8"", but after this commit and using the native doctrine sources, this is no longer useful... http://git.typo3.org/FLOW3/Packages/Doctrine.DBAL.git/commitdiff/b231de400af149a7e6a980939b067c6177707e3d

Another useful solution could be the ""SessionInitialization"" of doctrine, but after this commit a great configure option of Flow is removed :-/ http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git/commit/0636682f3b304c6a63e7b1558d7d32c153c1940f
Why?"
45409,TYPO3.Flow,Feature,"",New,Should have,Support validation of abstract nested properties,Aske Ertmann,"",2013-05-21 07:28,Validation,"",2013-02-12,"","",0,2013-02-12 07:26,"","",1022500,"","","Currently the validation of properties in action controllers does not take the property mapping configuration into account causing missing validation of nested abstract properties.

If you have an entity which has a collection of or is an abstract entity, it is possible to use the property mapping configuration to set which kind of abstract entity you'd want to convert/typehint to. But that is not respected in the validator resolver meaning that the validator resolver only returns a conjunction validator for the properties in the abstract entity and not the typehintet one.

There are two reasons for implementing this, which are 1) the missing validation leads to exceptions when the nested properties are persisted in the entity manager, 2) the validation is missing in the form.

Example:
Account (Security) has a party property which is of type \TYPO3\Party\Domain\Model\AbstractParty.

Then we have a \TYPO3\Party\Domain\Model\Person which extends the AbstractParty which has some more properties than the abstract party does. In the property mapping configuration I get configure it to use Person instead of  a AbstractParty, but the validation resolves with AbstractParty meaning that the extra properties and their validation doesn't get taken into account.

Solution:
I think the solution should be to tie the property mapping configuration to the validator resolver so when it's actually resolving validators for a property of an action controller it can check if any special converters where used to change the type of the property."
45413,TYPO3 Flow Base Distribution,Bug,"",Under Review,Should have,Overriding boolean properties using Objects.yaml is broken,Rens Admiraal,Rens Admiraal,2013-12-10 07:26,"","",2013-02-12,"","",100,2013-02-12 10:58,"","",1022700,"",Git master,"When a boolean property is overriden like for example:

<pre>
TYPO3\Flow\Mvc\Routing\UriBuilder:
  properties:
    linkProtectionEnabled:
      value: FALSE
</pre>

the generated code is incorrect. The TRUE value becomes a call like:

<pre>
$this->setLinkProtectionEnabled(1);
</pre>

and the FALSE value becomes:

<pre>
$this->setLinkProtectionEnabled();
</pre>

The 1 being used as TRUE will still work in PHP of course, the FALSE value will break if the argument is required."
45430,TYPO3.Flow,Task,"",Closed,Should have,Throw Exception when controller for routing configuration does not exists,Sören Rohweder,Bastian Waidelich,2013-09-04 05:12,MVC - Routing,"",2013-02-13,"","",0,2013-02-13 04:43,"","",1023550,"","","When developing Flow applications and creating the routing configuration it´s a problem to find errors in the configuration when a simple typo in the controller is hidden by ignoring the absence of the named contoller in the Routing.yaml.

It would be nice to receive an exception in case the mentioned controller  in the Routing.yaml does not exists."
45463,TYPO3.Flow,Bug,"",Resolved,Should have,Routing includes object arguments even though it should not,Karsten Dambekalns,Bastian Waidelich,2013-03-20 11:37,MVC - Routing,"",2013-02-13,"","",100,2013-02-13 11:09,"","",1025100,"",Git master,"Given this route as the only active route:

<pre>-
  name: 'foo'
  uriPattern: 'foo(/{@action})'
  defaults:
    '@package': 'Acme.Demo'
    '@controller': 'Foo'
    '@action': 'index'
</pre>

and a controller with this action:

<pre>
/**
 * @param \Acme\Demo\Domain\Model\Foo $foo
 * @param string $bar
 */
public function removeBarAction(Foo $foo, $bar) {}</pre>

The following all works fine and results in a link being built (foo is an object):

<pre><f:link.action action=""removeBar"" arguments=""{foo: foo}"">
<f:link.action action=""removeBar"" arguments=""{xyz: foo}"">
<f:link.action action=""removeBar"" arguments=""{foo: foo, bar: foo}"">
</pre>

But this does not work (bar is a string):

<pre><f:link.action action=""removeBar"" arguments=""{foo: foo, bar: bar}""></pre>

The following happens inside the router:

!https://www.evernote.com/shard/s55/sh/f3c49923-52d3-463e-848c-d68af1dbb17b/0e0c1426437d6808ba8f129a752760b6/res/6d01dfce-dae0-49f1-b42e-02f641c8832f/skitch.png!
!https://www.evernote.com/shard/s55/sh/77505b48-94fb-4f1e-8334-7e6d8ac32e5a/b84536fc44919f417b5c4aaf4fef2e0e/res/9baba34f-c2ed-4474-86fe-49c59c6431f7/skitch.png!

So the arguments that are _objects_ are considered internal, because there @__@ is involved?"
45553,TYPO3.Flow,Feature,"",Resolved,Should have,Missing TRUE Validator for mandatory checkboxes,Benno Weinzierl,Benno Weinzierl,2014-07-11 14:19,Validation,2.0.1,2013-02-17,"","",100,2013-02-17 12:50,"","",1029550,"","","I added a Validator which validates boolean TRUE values. So only the value TRUE is accepted.
I needed this for a form where i have a mandatory ""terms and conditions"" checkbox which is a boolean property.
I think this is a quite common usecase and should be included into the core.


"
45609,TYPO3.Flow,Bug,"",Resolved,Must have,If authenticated initializeObject() in every session-scope object is called twice,Benno Weinzierl,"",2013-05-02 11:37,Session,2.0,2013-02-19,"","",100,2013-02-19 10:06,"","",1032300,"",Git master,"After a account is authenticated the initializeObject Method of every session-scope object is called two times instead of one.

"
45611,TYPO3.Flow,Bug,"",New,Could have,Destruction of session after logout should be configurable,Benno Weinzierl,"",2013-02-19 10:41,Security,"",2013-02-19,"","",0,2013-02-19 10:41,"","",1032400,"",Git master,"After logout the session is destroyed.

In the AuthenticationProviderManager:
<pre>
if ($this->session->isStarted()) {
	$this->session->destroy('Logout through AuthenticationProviderManager');
}
</pre>

There should be a way to deactivate this by configuration because in some cases one want to keep information in the session regardles of the login-state."
45623,TYPO3.Flow,Bug,"",New,Should have,SQL error when calling TYPO3.Blog Setup controller,Peter Beernink,Rens Admiraal,2013-02-21 06:16,- Documentation -,"",2013-02-19,"","",0,2013-02-19 16:16,"","",1033000,"",Flow 2.0.0 beta 1,"When following the steps in the documentation, an SQL error is raised when calling the Setup controller at TheDefinitiveGuide/PartII/Controller.
This is caused by the linkTitle not being allowed to be NULL.
So either the check in the @setTitle()@ / @getLinkTitle()@ should be changed to @if (empty($this->linkTitle))@ or the link title should be set to an empty string by default."
45629,TYPO3.Flow,Bug,"",Resolved,Should have,expirationDate of Account cannot be set to NULL after a \DateTime has been set,Christian Müller,"",2013-03-20 05:36,Security,"",2013-02-20,"","",100,2013-02-20 02:28,"","",1033300,"",(any),After setting an expirationDate you cannot unset it anymore.
45640,TYPO3.Flow,Bug,"",New,Could have,Every relation is set to cascade=all if the related entity is no aggregate root,Benno Weinzierl,"",2013-02-20 09:31,Persistence,"",2013-02-20,"","",0,2013-02-20 06:18,"","",1033850,"",Git master,"Example structure:

Product => OneToMany => Variant
BasketItem => ManyToOne => Variant

If Variant is no aggregate root it is deleted when BasketItem is deleted because cascade=all is automatically set in 
TYPO3\Flow\Persistence\Doctrine\Mapping\Driver\FlowAnnotationDriver per default.
Around line 540.

This (IMHO not very helpful) default behavior cannot be overwritten by the annotation because cascade={} throws errors.
"
45647,TYPO3.Kickstart,Bug,"",Resolved,Must have,Controllers must not be of scope singleton,Bastian Waidelich,Bastian Waidelich,2013-06-24 12:36,"",2.0,2013-02-20,"","",100,2013-02-20 08:14,"","",1034200,"",Git master,"Currently all the controllers of Flow (and the ones that you create via the kickstarter) are of scope singleton (e.g. contain the @Flow\Scope(""singleton"") annotation).
Usually that doesn't really make a difference, because controllers are only instantiated once.
But if we start using the same controller multiple times (say two plugin instances on one page) we'll get really weird effects..

BTW: For command controllers it's obviously OK to be singletons, but there is no advantage in doing so"
45669,TYPO3.Flow,Bug,"",New,Should have,PersistentObjectConverter does not convert ValueObjects by __identity,Carsten Bleicker,"",2013-02-20 11:59,"","",2013-02-20,"","",0,2013-02-20 11:59,"","",1035200,"",Flow 2.0.0 beta 1,"if you have valueObjects and want to show them in an action controller with
showAction($myValueObject) and get param comes in with &myObject[__identity]=123123-123123-231231
the converting fails because __identity will allways be unset and no other property left after this.
i solved this by simply adding 3 lines in the convertFrom method:

// if there is just only the identity we convert the source to string
if (is_array($source) && count($source) === 1 && array_key_exists('__identity', $source)) {
	$source = $source['__identity'];
}


see also attached extended class with higher priority

do you agree with it?
thank you
carsten"
45675,TYPO3.Flow,Feature,"",Resolved,Should have,Improve Error-Message when @var annotation in entity object is omitted,Benno Weinzierl,Benno Weinzierl,2013-04-23 04:45,Validation,2.0,2013-02-20,"","",0,2013-02-20 15:02,"","",1035500,"","","When the @var annotation is missing in an entity object the ValidationResolver throws a notice:

<pre>
Notice: Undefined index: var in .../TYPO3_Flow_Validation_ValidatorResolver_Original.php line 251
</pre>

This tells nothing about the actual problem (that the @var in the comment of a property was forgotten).

Improve this errormessage to make the search for the error more FLOWing :-)"
45735,TYPO3.Fluid,Bug,"",Resolved,Must have,Error when using If-Condition in Layout-Tag,Alex no-lastname-given,Bastian Waidelich,2015-06-30 05:39,Core,"",2013-02-22,"","",100,2013-02-21 19:06,"","",1038450,"",Flow 2.0.0 beta 1,"I use a condition for evaluating which layout to load:
<pre>
<f:layout name=""{f:if(condition: checkCondition, then: 'Layout1', else: 'Layout2')}""/>
</pre>

On the first request (template is not cached) it works fine, but on the second requets (template is loaded from cache) following error is thrown:

<pre>
#1: Notice: Undefined variable: self in /Data/Temporary/Development/Cache/Code/Fluid_TemplateCache/PACKAGE_CONTROLLER_action_ACTION_20bd4ce9d92ee470c3edcf16e49b6ebec6252766.php line 16 
</pre>

This error can be fixed by adding a single line in store() of class TemplateCompiler (TYPO3.Fluid\Classes\TYPO3\Fluid\Core\Compiler\TemplateCompiler.php). The template code ($templateCode) have to be enhanced in the first line of getLayoutName() by
<pre>
\$self = \$this;
</pre>

To clarify, the final template code:
<pre>
$templateCode = <<<EOD
%s {

public function getVariableContainer() {
	// TODO
	return new \TYPO3\Fluid\Core\ViewHelper\TemplateVariableContainer();
}
public function getLayoutName(\TYPO3\Fluid\Core\Rendering\RenderingContextInterface \$renderingContext) {
\$self = \$this;
%s
return %s;
}
public function hasLayout() {
return %s;
}

%s

}
EOD;
</pre>"
45851,TYPO3.Flow,Feature,"",Needs Feedback,Could have,Allow referencing environment variables in Settings.yaml,Adrian Föder,Adrian Föder,2013-04-30 08:12,"","",2013-02-26,"","",0,2013-02-26 03:36,"","",1044050,"","","Actual use case is Amazon AWS, where stuff like database credentials are present as environment variables.
It should be possible to use these environment variables directly in the YAML files, just like it's already possible with PHP constants.
The question is a useful syntax; I found in Rails there is an analogy that would look like the following:

<pre><code class=""yaml"">
  TYPO3:
    Flow:
      persistence:
        backendOptions:
          password: <% ENV['RDS_PASSWORD'] %>
</code></pre>

What do you think?"
45864,TYPO3.Flow,Bug,"",Resolved,Should have,PHP constants used in YAML loose their type,Karsten Dambekalns,Adrian Föder,2013-03-20 11:37,Configuration,2.0,2013-02-26,"","",100,2013-02-26 12:30,"","",1044700,"",Flow 2.0.0 beta 1,""
45876,TYPO3.Flow,Bug,"",Resolved,Must have,Exception in TypeHandling with PHP < 5.3.7,Mattias Nilsson,Karsten Dambekalns,2013-03-27 08:37,Utility,"",2013-02-27,"","",100,2013-02-27 02:27,"","",1045300,"",(any),"When adding new content in Neos an exception is thrown. Refrencing to the file: TYPO3.Flow/Classes/TYPO3/Flow/Utility/TypeHandling.php

ExtDirect error: Uncaught exception #1 (ref 2013022708244558d7f1) - Warning: Unknown class passed as parameter in /Applications/MAMP/htdocs/phoenix.dev/Base/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Utility/TypeHandling.php line 118"
45917,TYPO3.Flow,Bug,"",New,Should have,RoutePartHandler transliteration must be improved,Dominique Feyer,"",2014-02-17 03:13,MVC - Routing,"",2013-02-28,"","",0,2013-02-28 09:05,"","",1047300,"",Git master,"It's related to #8736, I know that the transliteration is currently not in the l18n part of Flow, but the current pseudo transliteration currently in RoutePartHandler is really german friendly ;)

I propose a path to use iconv to offer better transliteration, when the l18n transliteration is ready we can switch to it."
45923,TYPO3.Fluid,Feature,"",Rejected,Won't have this time,adjustable number of decimal points for f:format.currency,Josef Florian Glatz,"",2013-09-05 03:34,ViewHelpers,"",2013-02-28,"","",0,2013-02-28 14:33,"","",1047600,"","","From time to time it's useful to have an extra attribute to set the number of decimal points. Because of the fact that especially for large amounts of money (e.g. realty objects, luxury) no decimals are required, this should be configurable."
45936,TYPO3.Flow,Bug,"",Resolved,Should have,Respect open basedir during uploading of files,Aske Ertmann,"",2013-05-02 11:37,Resource,2.0,2013-03-01,"","",100,2013-03-01 06:12,"","",1048250,"",Git 2.0,"Currently when uploading files and using ""open_basedir"", you either have to change the ""upload_tmp_dir"" value or add the temporary folder to ""open_basedir"". Since the latter is not recommended for security reasons and for shared hosting environments the former can be impossible, it should work without having to do so since PHP allows for that."
45953,TYPO3.Flow,Bug,"",Resolved,Should have,Sessionless auth broke TestingProvider,Dominique Feyer,"",2013-04-05 05:38,"","",2013-03-01,"","",100,2013-03-01 16:28,"","",1049100,"",Git master,"This problem is caused by the following lines in Settings.yaml (under Testing directory)

<pre>
            requestPatterns:
              controllerObjectName: 'TYPO3\Flow\Tests\.*'
</pre>

Other package need to be hable to use the TestingProvider in their own tests. 

The problem is caused by this commit: 7d79b800d4237a359d3876a69538078dc2298d18 (#45282)
"
45976,TYPO3.Flow,Feature,"",Resolved,Could have,Boolean Validator,Anja Leichsenring,"",2014-07-11 14:19,"",2.0.1,2013-03-03,"","",0,2013-03-03 03:24,"","",1050200,"","",Extbase Fluid got a Boolean ViewHelper. Your are invited to port it: #45880
45987,TYPO3.Fluid,Task,"",Resolved,Should have,filemtime is namespaced in TemplateView.php,Wouter Wolters,Wouter Wolters,2013-04-05 06:37,View,"",2013-03-03,"","",100,2013-03-03 11:26,"","",1050750,"","","filemtime is namespaced in TemplateView.php

$templateModifiedTimestamp = \filemtime($pathAndFilename);"
46008,TYPO3.Flow,Bug,"",Resolved,Should have,Reflection should resolve relative namespaces,Christopher Hlubek,Sebastian Kurfuerst,2013-07-16 05:37,Reflection,"",2013-03-04,"","",100,2013-03-04 06:22,"","",1051800,"",Git master,"Annotations (e.g. @@var@) with relative class names are not resolved correctly under the namespace of the given class.
To have a correct handling of namespaces in PHP we should support the usage of relative class names in these places.

<pre><code class=""php"">
namespace MyVendor\MyPackage\Domain\Model;

class Foo {

    /**
     * @var Bar
     */
    protected $bar;

}
</code></pre>

<pre><code class=""php"">
namespace MyVendor\MyPackage\Domain\Model;

class Bar {

}
</code></pre>

Since this is a problem for some people (e.g. also PhpStorm uses relative class names when auto-completing) I consider this a bug we should solve in the framework.
"
46009,TYPO3.Flow,Task,"",New,Should have,Improve error message for missing class in Flow annotation driver ,Christopher Hlubek,"",2013-03-04 06:25,Persistence,"",2013-03-04,"","",0,2013-03-04 06:25,"","",1051850,"","","The Flow annotation driver will throw an error if a class is not found in the class schema. The error could be more helpful for missing classes or wrongly named classes if it would check if the class exists at all.

<pre>
Uncaught Exception
    No class schema found for
   
  ""MyVendor\MyProject\Domain\Model\Bar"".
    The class should probably marked as entity or value object! This
  happened
    while examining
    ""MyVendor\MyProject\Domain\Model\Foo""
</pre>
"
46010,TYPO3.Flow,Bug,"",New,Should have,Generating a DiscriminatorMap with base class in different namespace does not work,Christopher Hlubek,"",2013-03-04 06:30,Persistence,"",2013-03-04,"","",0,2013-03-04 06:30,"","",1051900,"",Git master,The automatic generation of a DiscriminatorMap for single table inheritance does not work across class in different namespaces. In these cases a manual DiscriminatorMap has to be written.
46011,TYPO3.Flow,Task,"",New,Should have,Validate annotation with missing type should throw useful error,Christopher Hlubek,"",2013-03-04 06:42,Validation,"",2013-03-04,"","",0,2013-03-04 06:42,"","",1051950,"","",The Validate annotation with a missing type should throw a useful error message. Besides that we could think about allowing the type option as the annotation value so we can specify validators without configuration with less typing.
46036,TYPO3.Flow,Bug,"",Resolved,Should have,AuthenticationRequired should not be thrown in PolicyEnforcement if resource is available to Everybody,Christian Müller,Christian Müller,2013-10-03 13:35,Security,2.0.1,2013-03-05,"","",100,2013-03-05 05:34,"","",1053200,"",(any),"In case you define a (method) resource (in my case with runtime argument condition) and you GRANT access to this resource for the ""Everybody"" role you will still end up with an AuthenticationRequiredException (or if defined a redirect to the WebRedirect) because the AuthenticationManager will throw that on not logged in BEFORE the AccessDecisionManager checks the actual permissions for the resource.

To fix this we need to temporarily catch the exception when there were no tokens to be authenticated and check permissions on the AccessDecisionManager. If this then throws an AccessDeniedException we know the resource was inaccessible for not logged in user (at least with the current runtime evaluation) and we should probably trigger a redirect to the WebRedirect. In case the AccessDecisionManager granted access to the resource we can proceed as obviously the resource was meant to be available without login."
46038,TYPO3.Fluid,Bug,"",Closed,Should have,Subproperty with Radio fields doesn't render hidden identity property,Christian Müller,Bastian Waidelich,2013-03-26 12:29,ViewHelpers,"",2013-03-05,"","",0,2013-03-05 07:55,"","",1053300,"",(any),If you render a form and access a property in a subpobject in your forms bound object via radio input field there are no hidden identity fields rendered as the radio input expects a value to be set in addition to the property which in turn prevents the addAdditionalIdentityPropertiesIfNeeded() to be called ever.
46046,TYPO3.Flow,Bug,"",Resolved,Should have,JsonView discards array indexes when using _descendAll,Karsten Dambekalns,Karsten Dambekalns,2013-04-12 09:41,MVC,2.0,2013-03-05,"","",100,2013-03-05 11:45,"","",1053700,"",(any),"When configuring JsonView like

<pre>$this->view->setConfiguration(array(
	'value' => array(
		'_descendAll' => array(
			'_descendAll' => array()
		)
	)
));</pre>

the result will be stripped of any array keys."
46048,TYPO3.Flow,Feature,"",Resolved,Should have,Allow unknown / disallowed properties to be skipped,Karsten Dambekalns,Karsten Dambekalns,2013-04-14 05:08,Property,2.1,2013-03-05,"","",100,2013-03-05 14:59,"","",1053800,"","","When using the PropertyMapper, it is useful to allow for partial mapping of sources to a target. This way one can skip certain values in the source. Right now this is not possible, one can only map all source properties.

I suggest to add @skipProperties($name [, $name])@ like the existing @allowProperties()@ and @skipUnknownProperties()@ like the existing @mapUnknownProperties()@"
46050,TYPO3.Flow,Feature,"",New,Could have,To decouple log file writing at Logger->logException,Thiago Colares,"",2013-03-05 15:43,Log,"",2013-03-05,"","",0,2013-03-05 15:43,"","",1053900,"","","The TYPO3\Flow\Log\Logger->logException() method perform itself the file log writing. As in log(), it could be decoupled to facilitate any override to this writing.

For example, in log(), is easily possible to set the backend as follow:

File: /project_path/Configuration/Settings.yaml

<pre>
TYPO3:
  Flow:
    log:
      # Settings for Flow's default loggers
      # see more at Framework/TYPO3.Flow/Configuration/Settings
      systemLogger:
        backend: MyPackage\Log\Backend\MyFileBackend
</pre>

So far, I guess the only way is to set up the Objects.yaml, am I right?"
46053,TYPO3.Flow,Bug,"",Resolved,Must have,"Booting->initializeSystemLogger() uses a fixed $loggerObjectName, rather than fetch it from Settings.yaml",Thiago Colares,Karsten Dambekalns,2013-03-21 12:37,Log,"",2013-03-05,"","",0,2013-03-05 16:27,"","",1054050,"",Flow 2.0.0 beta 1,"It should be set by Settings.yaml instead. So...

File: \TYPO3\Flow\Core\Booting

<pre>
/**
 * Initializes the System Logger
 *
 * @param \TYPO3\Flow\Core\Bootstrap $bootstrap
 * @return void
 */
static public function initializeSystemLogger(Bootstrap $bootstrap) {
    ...
    $systemLogger = \TYPO3\Flow\Log\LoggerFactory::create('SystemLogger', 'TYPO3\Flow\Log\Logger', $settings['log']['systemLogger']['backend'], $settings['log']['systemLogger']['backendOptions']);
    ...
}

</pre>

Should something like

<pre>
/**
 * Initializes the System Logger
 *
 * @param \TYPO3\Flow\Core\Bootstrap $bootstrap
 * @return void
 */
static public function initializeSystemLogger(Bootstrap $bootstrap) {
    ...
    $systemLogger = \TYPO3\Flow\Log\LoggerFactory::create('SystemLogger', $settings['log']['logger']['backend'], $settings['log']['systemLogger']['backend'], $settings['log']['systemLogger']['backendOptions']);
    ...
}

</pre>

Note: I'm using @$settings['log']['logger']@ rather than @'TYPO3\Flow\Log\Logger'@. Consequently, the Settings.yaml should be updated:

<pre>
TYPO3:
  Flow:
    log:
	  ...
      systemLogger:
		...
		logger: 'TYPO3\Flow\Log\Logger'

</pre>"
46061,TYPO3.Flow,Feature,"",Resolved,Should have,Allow use of ArrayConverter to partially map arrays to arrays,Karsten Dambekalns,Karsten Dambekalns,2013-08-02 05:19,Property,"",2013-03-06,"","",100,2013-03-06 05:17,"","",1054450,"","","Settings allowed properties on the configuration of the property mapper does not allow to partially map arrays to arrays, because the ArrayConverter always returns the unchanged array."
46063,TYPO3.Flow,Feature,"",New,Should have,"Implement username password provider with ""remember me"" persistent cookie",Christopher Hlubek,Christopher Hlubek,2014-09-22 18:26,Security,"",2013-03-06,"","",0,2013-03-06 06:11,"","",1054550,"","","* Extend PersistedUsernamePasswordProvider with remember me feature
* Store random token in cookie
* Use cache backend for random token to account mapping
* Authenticate user from random token in persistent cookie if no credentials given
* Remove cookie on logout?"
46066,TYPO3.Flow,Bug,"",New,Should have,Currency formatter uses wrong format for ISO 4217 currency codes,Sebastian Düvel,"",2013-03-06 10:29,I18n,"",2013-03-06,"","",0,2013-03-06 10:29,"","",1054700,"",Git master,"Currently the currency formatter is optimized for currency symbols like '?'.
If you format something using EN locale, ?23 is correct.
With ISO 4217 code 'EUR' it should be: EUR 23, but today it's EUR23. (mind the space, see: http://publications.europa.eu/code/en/en-370303.htm#position)

So it should support these ISO codes as well."
46072,TYPO3.Flow,Bug,"",Resolved,Should have,Scripts::executeCommand must support command arguments,Dominique Feyer,"",2013-04-12 08:39,"","",2013-03-06,"","",100,2013-03-06 12:32,"","",1055000,"",(any),"Currently it's not supported to have command arguments in a CLI subcommand, this patch propose to solve this with this API, and it's not a breaking change:

Scripts::executeCommand('namespace.vendor:command:action', $this->settings, TRUE, array('--arg1', $value1, '--arg2', $value2));

Everything is correctly escaped, patch is coming"
46073,TYPO3.Flow,Bug,"",Under Review,Should have,Scripts::executeCommand must be usable outsite of TYPO3.Flow,Dominique Feyer,"",2013-03-06 13:14,"","",2013-03-06,"","",0,2013-03-06 12:45,"","",1055050,"",Git master,"On line 546:

<pre>
		$subRequestEnvironmentVariables = array(
			'FLOW_ROOTPATH' => FLOW_PATH_ROOT,
			'FLOW_CONTEXT' => $settings['core']['context']
		);

</pre>

$settings['core']['context'] can be non existant in the context of other package (other than TYPO3.Flow)

Those line solve the issue:
<pre>
		if (!isset($settings['core']['context']) && isset($settings['TYPO3']['Flow']) && is_array($settings['TYPO3']['Flow'])) {
			$settings = $settings['TYPO3']['Flow'];
		}
</pre>

Patch is coming"
46076,TYPO3.Flow,Bug,"",Resolved,Should have,PersistentQueryRewriteAspect doesn't work with Collections when doing IN / CONTAINS / MATCHES comparisons,Christian Müller,Adrian Föder,2014-06-18 16:37,"","",2013-03-06,"","",100,2013-03-06 13:44,"","",1055200,"",(any),""
46081,TYPO3.Fluid,Feature,"",Closed,Should have,Suggested addition to SelectViewHelper - allowing prepend of child content to rendered option tag list,Christoph Gross,"",2013-03-07 02:31,ViewHelpers,2.0,2013-03-07,"","",0,2013-03-06 18:59,"","",1055450,"","","This Feature is already commited to Typo3v4, see here [[http://forge.typo3.org/issues/26595]].

I think it's a valuable feature and ""adapted"" it to TYPO3.Fluid."
46091,TYPO3.Fluid,Task,"",Needs Feedback,Should have,Show source file name and position on exceptions during parsing,Christopher Hlubek,"",2013-03-07 05:26,"","",2013-03-07,"","",0,2013-03-07 05:14,"","",1055950,"","",It would be really helpful to spot errors if the Fluid TemplateParser would show the current source file and line number on errors. Right now there's absolutely no clue in the exception handler where to look for the error.
46092,TYPO3.Fluid,Bug,"",Resolved,Should have,The f:translate ViewHelper does nothing if a integer is provided as argument,Benno Weinzierl,"",2014-02-24 06:36,ViewHelpers,2.0.1,2013-03-07,"","",0,2013-03-07 05:15,"","",1056000,"",Git master,"Here is an Example...

in Translation:
<pre>
<trans-unit id=""mylabel"">
	<source>A test list with {0} results</source>
</trans-unit>
</pre>

In Template:
<pre>
{f:translate(id: 'mylabel', arguments: {0: ""{dynamic.integer}""} )}
</pre>

This returns ""mylabel"" in the template because an integer is provided as argument.
This works:
<pre>
{f:translate(id: 'mylabel', arguments: {0: ""{dynamic.integer} ""} )}
</pre>
(Notice the blank an the end of the dynamic argument... the argument is a string and the translation works as expected)"
46097,TYPO3.Flow,Bug,"",New,Must have,Logged in user gets session of an other logged in user ,Stephan Herold,Robert Lemke,2013-03-07 06:52,Session,"",2013-03-07,"","",0,2013-03-07 06:13,"","",1056250,"",Git master,"We (lets say our coustomer) discovered a strange behavior with the session handling.

An logged in user updated an object, was redirected to the 'index' and had the session of an other also logged in user.
It seems like some sort of session hijacking. 

Due to the fact, that we work in 'production' mode we could not cover the bug throug logs. 
But the projectmanager, wich was informed by the user, confirmed this behavior.

Affacted version typo3/flow-base-distribution dev-master (last updated 15.01.2013)."
46120,TYPO3.Flow,Bug,"",New,Must have,Important step missing in the installation chapter,RBergheggger ,"",2013-03-08 04:23,- Documentation -,"",2013-03-08,"","",0,2013-03-08 04:23,"","",1057400,"",(any),"On http://docs.typo3.org/flow/TYPO3FlowDocumentation/Quickstart/Index.html
it is cleary described how you get the composer and how you create all required packages of FLOW with it. But one important step is missing inbetween: First you have to clone the current master branch of FLOW from git with ""git clone [...]"".
This can be very missleading and frustrating for beginners or people who never got to know git."
46135,TYPO3.Fluid,Bug,"",Closed,Must have,Undefined index: useParentRequest in AbstractViewHelper,Karsten Dambekalns,Karsten Dambekalns,2013-08-02 05:24,ViewHelpers,2.1,2013-03-08,"","",0,2013-03-08 10:05,"","",1058150,"",Git master,#1: Notice: Undefined index: useParentRequest in /?/Fluid/Core/ViewHelper/AbstractViewHelper.php line 255
46210,TYPO3.Flow,Bug,"",Needs Feedback,Should have,securityContext->getParty() in the initializeObject() method of a session-Scope object throws exception on second request,Benno Weinzierl,"",2013-03-27 05:44,Session,"",2013-03-12,"","",0,2013-03-12 11:23,"","",1061700,"",Git master,"	
When i put the following code in a session-scope object and am logged in it works on the first request. But after reloading the same page this code throws an exception.
<pre>
        /**
	 * @Flow\Inject
	 * @var \TYPO3\Flow\Security\Context
	 */
	protected $securityContext;

	public function initializeObject() {
		$loginUser = $this->securityContext->getParty();
	}
</pre>

The exceoption thrown:
<pre>
#1358513802: The security Context cannot be initialized yet. Please check if it can be initialized with $securityContext->canBeInitialized() before trying to do so.
</pre>"
46216,TYPO3.Flow,Feature,"",New,Should have,Add wincache cache backend,Christian Kuhn,"",2013-03-12 15:55,Cache,"",2013-03-12,"","",0,2013-03-12 14:05,"","",1062000,"","","wincache is a memory key-value cache similar to the user cache of apc and xcache. It was integrated as cache backend for TYPO3 CMS 6.0 already, so the code could be transferred from CMS easily. Some words in the documenation were added with issue #44716"
46244,TYPO3 Flow Base Distribution,Bug,"",Under Review,Should have,Remove call to PHP_BINDIR in CoreCommandController,Rens Admiraal,"",2013-03-19 06:39,"","",2013-03-13,"","",0,2013-03-13 14:08,"","",1063400,"",Git master,The CoreCommandController still has a call to PHP_BINDIR. This should be removed
46257,TYPO3.Fluid,Feature,"",Under Review,Should have,Add escape sequence support for Fluid,Rafael Kähm,"",2015-01-26 03:00,Core,"",2013-03-14,"","",0,2013-03-14 04:01,"","",1064050,"","","In some cases you need to print some characters to rendered view, which Fluid uses.
f.e.:
{{object}} should output {value} but Fluid renders this to {{object}}

i have patch for this, which make it possible following possible:
\{{object}\} renders to {value}
\\\{{object}\\\} renders to \{value\}

please make gerrit from following gist:
https://gist.github.com/RafaelKa/5159642

there are 54,55,56 , 119-123 and 455,456 lines interesting "
46289,TYPO3.Fluid,Bug,"",Needs Feedback,Should have,Enable Escaping Interceptor in XML request format,Tim Kandel,"",2013-08-14 09:35,View,2.0.1,2013-03-14,"","",0,2013-03-14 12:20,"","",1065650,"",Git master,The Escaping Interceptor should be enabled if the request format is XML. As of now this is only done in HTML.
46290,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Remove unnecessary checks for file_exists and is_dir in FileMonitor,Rens Admiraal,Rens Admiraal,2013-04-05 06:37,"","",2013-03-14,"","",100,2013-03-14 12:21,"","",1065700,"",Git master,"The FileMonitor is massively slow on Windows, this is just because file access on windows from PHP is slow. Therefor unnecessary calls to the filesystem should be prevented."
46318,TYPO3.Flow,Feature,"",New,Should have,[caching framework] Extend cache interface to handle multiple entries,Norbert Sendetzky,"",2013-03-15 07:19,Cache,"",2013-03-15,"","",0,2013-03-15 07:05,"","",1067100,"","","The current BackendInterface and FrontendInterface is not suitable for retrieving or storing several entries at once because the interfaces are limited to hand over cache entries one by one. Especially for the Redis and the database backend, being able to retrieve several entries at once speeds up the operation drastically.

One option would be to extend the get(), set() and remove() methods to also allow arrays of identifiers. The advantage would be that the interfaces don't have to be changed but on the other side, all cache backends have to be adapted to be able to accept arrays. Another disadvantage is that the returned values for single entries and lists of entries must be different.

The other option is to add new methods to the interface:
- getList( array $entryIdentifiers )
- setList( array $entryIdData, array $tags = array(), $lifetime = NULL )
- setList( array $entry ) // alternative way: data, tags and lifetime in associative array
- removeList( array $entryIdentifiers )

Then, we can provide default implementations in AbstractBackend that call the get(), set() or remove() methods in a loop for all backends that are not able to fetch, store or delete a bunch of entries. The Redis and PDO backend can overwrite these methods to provide their own optimized implementations.
There are two alternatives for setList(): Either the tags and the lifetime is the same for all entries (easier to understand and less error prone) or data, tags and lifetime is stored in an associative array per entry. The last option would be much more flexible and this might be a better solution for different use cases.

Can the caching interfaces extended in on of these ways and are you willing to integrate a patch for this?
"
46337,TYPO3.Flow,Bug,"",Resolved,Should have,Remove (costly) file_exists calls in class loading,Christian Müller,Christian Müller,2013-03-27 08:37,"","",2013-03-15,"","",100,2013-03-15 13:14,"","",1068050,"",(any),""
46338,TYPO3.Flow,Bug,"",Resolved,Should have,Original and Proxy class can be compiled into one file,Christian Müller,Christian Müller,2013-04-05 06:37,"","",2013-03-15,"","",100,2013-03-15 13:20,"","",1068100,"",(any),""
46340,TYPO3.Flow,Task,"",Resolved,Should have,Improve validation to speed up Flow,Karsten Dambekalns,"",2013-03-27 08:37,Validation,2.0,2013-03-15,"","",100,2013-03-15 14:15,"","",1068200,"","",""
46343,TYPO3.Flow,Bug,"",Resolved,Could have,Remove duplicate file_get_contents calls in FileBackend,Christian Müller,Christian Müller,2013-08-14 09:57,Cache,2.0,2013-03-15,"","",100,2013-03-15 15:26,"","",1068350,"",(any),""
46352,TYPO3.Flow,Task,"",Resolved,Should have,Roles in SecurityContext should be kept until tokens change,Christian Müller,Christian Müller,2013-04-29 13:03,Security,"",2013-03-16,"","",100,2013-03-16 07:58,"","",1068800,"","","GetRoles inside SecurityContext rebuilds the array of roles on every call which is costly and leads to a lots of created objects if roles (for example in fluid) are used a lot.

As for the building only two things are responsible, a) all available roles and b) tokens we can for now safely keep the roles until tokens change. 

As soon as roles are objects that could be modified during runtime you might need to clear the array if you change the existing roles.
"
46371,TYPO3.Flow,Feature,"",New,Should have,Support compilation of static information in proxy classes,Christopher Hlubek,Christopher Hlubek,2013-03-16 16:26,"","",2013-03-16,"","",0,2013-03-16 16:26,"","",1069750,"","","We use the ReflectionService during runtime to get information about interface implementations, method parameters or other reflection data that will never change after compilation. If we can manage to store that information inside the classes that need that specific information we can save the initialization of the ReflectionService and cache accesses for some invocations.

An annotation @CompileStatic@ should be used to mark static methods inside proxyable classes as compilable. The object manager is passed to the method as the only context beside the current class (which can be accessed with @get_called_class@ with late static bind) and allows access to the ReflectionService. During compilation the proxy builder will call these methods and override the method with the computed return value in the generated proxy class.

Besides reflection data anything that doesn't change after the compile run can be pre-computed with this approach."
46424,TYPO3.Flow,Bug,"",Resolved,Must have,Infinite recursive call in DependencyProxy,Adrian Föder,Robert Lemke,2013-04-26 06:35,Object,"",2013-03-19,"","",100,2013-03-19 05:19,"","",1072400,"",Git master,"I have the following situation,

<pre>
[19-Mar-2013 09:02:22 UTC] PHP Fatal error:  Maximum function nesting level of '500' reached, aborting! in ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\ObjectManager.php on line 160
[19-Mar-2013 09:02:22 UTC] PHP Stack trace:
[19-Mar-2013 09:02:22 UTC] PHP   1. {main}() C:\Users\afoeder\PhpstormProjects\acme\Distribution\Web\index.php:0
[19-Mar-2013 09:02:22 UTC] PHP   2. TYPO3\Flow\Core\Bootstrap->run() C:\Users\afoeder\PhpstormProjects\acme\Distribution\Web\index.php:27
[19-Mar-2013 09:02:22 UTC] PHP   3. TYPO3\Flow\Http\RequestHandler->handleRequest() ...\TYPO3.Flow\Classes\TYPO3\Flow\Core\Bootstrap.php:113
[19-Mar-2013 09:02:22 UTC] PHP   4. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->setRequest() ...\TYPO3.Flow\Classes\TYPO3\Flow\Http\RequestHandler.php:122
[19-Mar-2013 09:02:22 UTC] PHP   5. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Http\RequestHandler.php:122
[19-Mar-2013 09:02:22 UTC] PHP   6. call_user_func_array() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:96
[19-Mar-2013 09:02:22 UTC] PHP   7. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:0
[19-Mar-2013 09:02:22 UTC] PHP   8. call_user_func_array() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:96
[19-Mar-2013 09:02:22 UTC] PHP   9. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:0
[19-Mar-2013 09:02:22 UTC] PHP  10. call_user_func_array() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:96
[19-Mar-2013 09:02:22 UTC] PHP  11. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:0
.
.
.
.
[19-Mar-2013 09:02:23 UTC] PHP 492. call_user_func_array() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:96
[19-Mar-2013 09:02:23 UTC] PHP 493. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:0
[19-Mar-2013 09:02:23 UTC] PHP 494. call_user_func_array() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:96
[19-Mar-2013 09:02:23 UTC] PHP 495. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->__call() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:0
[19-Mar-2013 09:02:23 UTC] PHP 496. TYPO3\Flow\Object\DependencyInjection\DependencyProxy->_activateDependency() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:95
[19-Mar-2013 09:02:23 UTC] PHP 497. Closure->__invoke() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:58
[19-Mar-2013 09:02:23 UTC] PHP 498. TYPO3\Flow\Security\Aspect\PersistenceQueryRewritingAspect->TYPO3\Flow\Security\Aspect\{closure}() ...\TYPO3.Flow\Classes\TYPO3\Flow\Object\DependencyInjection\DependencyProxy.php:58
[19-Mar-2013 09:02:23 UTC] PHP 499. TYPO3\Flow\Object\ObjectManager->get() C:\Users\afoeder\PhpstormProjects\acme\Distribution\Data\Temporary\Development\Cache\Code\Flow_Object_Classes\TYPO3_Flow_Security_Aspect_PersistenceQueryRewritingAspect.php:603
</pre>

When debugging the DependencyProxy's __call() method, it turns out that it happens on @TYPO3\Flow\Security\Context@'s @setRequest@ method.

It looks like this especially happens when I become logged out on a ""protected"" page, maybe because of session timeout or such."
46425,TYPO3.Flow,Task,"",Under Review,Should have,DI proxy classes use raw reflection instead of RelfectionService,Karsten Dambekalns,Christian Müller,2013-08-14 09:35,Core,2.0.1,2013-03-19,"","",0,2013-03-19 05:23,"","",1072450,"","",The DI proxy class builder uses raw reflection instead of the ReflectionService to fetch property names from classes in @buildSerializeRelatedEntitiesCode()@. Using the ReflectionService should be faster.
46428,TYPO3.Flow,Bug,"",Resolved,Should have,Session is started on every request,Karsten Dambekalns,Bastian Waidelich,2013-04-05 14:37,Session,2.0,2013-03-19,"","",100,2013-03-19 06:06,"","",1072600,"",Git 2.0,""
46449,TYPO3.Flow,Bug,"",Resolved,Should have,Routes should urldecode their parts,Adrian Föder,Bastian Waidelich,2014-01-06 04:23,MVC - Routing,2.0.1,2013-03-20,"","",100,2013-03-20 05:43,"","",1073650,"",Git master,"requesting the following Flow project URI, for example,

<pre>
http://example.org/acme.package/foo%62ar/create
</pre>

results in a resolved *controllerName* of @foo%62ar@ while it should of course be @foobar@.

This is incorrect by reading; and especially problematic in sub-namespaced controllers like even in nativ Neos' Backend\BackendController (however in this case it's circumvented by a custom route).
Such a controller would be

<pre>
http://example.org/acme.package/accouting%5Caccount/create
</pre>

intended to result in an *controllerName* of @accounting\account@."
46465,TYPO3.Flow,Bug,"",Resolved,Must have,ObjectAccess::getProperty() breaks on \stdClass due to accessor cache,Karsten Dambekalns,Karsten Dambekalns,2013-03-27 08:37,Reflection,2.1,2013-03-20,"","",100,2013-03-20 11:00,"","",1074450,"",Git master,"When using getProperty() on \stdClass instances, the accessor cache leads to false results - because the class name alone in this case does not tell anything about the availability of a property."
46485,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,The exceptionhandler handles exceptions too strict,Rens Admiraal,Rens Admiraal,2013-03-27 08:37,"","",2013-03-21,"","",100,2013-03-21 04:16,"","",1075450,"",Git master,"The ExceptionHandler should check if error_reporting is enabled. This is because we set the execptionhandler in testing context (for example).
In http://ca2.php.net/manual/en/language.operators.errorcontrol.php it's stated that even though the @ is used the exceptionhandler will be called if set_error_handler is used.

For this reason we should check in the exception handler if errors are ignored by using error_reporting() === 0"
46491,TYPO3.Flow,Bug,"",Resolved,Must have,ObjectAccess::getProperty() does not work for getters in ArrayAccess,Bastian Waidelich,Bastian Waidelich,2013-03-27 08:37,Reflection,"",2013-03-21,"","",100,2013-03-21 08:34,"","",1075750,"",Git master,"#42723 introduced a regression that prevents custom getters in ArrayAccess objects to be called via *ObjectAccess::getProperty()*

Code to reproduce the issue:
<pre>
<code class=""php"">
$arrayObject = new \ArrayObject();
var_dump($arrayObject->getIteratorClass());
var_dump(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($arrayObject, 'iteratorClass'));
</code>
</pre>

Should output ""ArrayIterator"" twice, but the second time an exception *#1263391473: The property ""iteratorClass"" on the subject was not accessible* is thrown."
46536,TYPO3.Flow,Bug,"",Resolved,Must have,Resource file upload does not allow files without extension,Christopher Hlubek,Christopher Hlubek,2013-04-05 06:37,Resource,"",2013-03-22,"","",100,2013-03-22 06:29,"","",1077900,"",Git master,The ResourceManager does not allow to create Resources or upload Resources from a filename without extension. This is not consistent inside the ResourceManager and should generally be allowed.
46545,TYPO3.Fluid,Feature,"",New,Should have,Better support for arrays in options of SelectViewHelper,Marco Falkenberg,"",2013-03-22 08:35,"","",2013-03-22,"","",0,2013-03-22 08:35,"","",1078350,"","","The arguments 'optionValueField' and 'optionLabelField' will be (unnecessary?!) ignored, if you pass an array to the 'options'-argument of a SelectViewHelper."
46636,TYPO3.Flow,Bug,"",Resolved,Must have,Authentication does not work any longer without redirects,Marco Falkenberg,Bastian Waidelich,2013-05-07 12:35,Security,2.0,2013-03-25,"","",100,2013-03-25 04:58,"","",1082800,"",Flow 2.0.0 beta 1,"After applying the patch #46352 authentication via HTTP-Basic (PersistedUsernamePasswordProvider & UsernamePasswordHttpBasic-Token) throws

#1222268609: Access denied (0 denied, 0 granted, 1 abstained)"
46689,TYPO3.Flow,Bug,"",New,Must have,The new ClassLoader swallows Fatal Errors,Marc Neuhaus,Marc Neuhaus,2013-05-14 03:21,"","",2013-03-26,"","",0,2013-03-26 10:11,"","",1085450,"",Git master,"Since the new ClassLoader uses <notextile>'@include'</notextile> to load classes E_COMPILE_ERROR errors are completely 
ignored. The aren't shown (display_errors), logged to the php log (log_errors) or logged
anywhere through Flow. The main issue seems, that the combination of the <notextile>@</notextile> error control character
and set_error_handler let those E_COMPILE_ERROR slip through.


The only way around this was to register a shutdown function to catch those errors."
46703,TYPO3.Flow,Bug,"",Resolved,Should have,Session has side effects in functional tests,Robert Lemke,Robert Lemke,2013-04-05 14:37,Session,2.0,2013-03-27,"","",100,2013-03-27 03:10,"","",1086150,"",Flow 2.0.0 beta 1,"Consider the following code in a functional test:

<pre>
	$response = $this->browser->request('http://localhost/test/session');
	$this->assertTrue($response->hasCookie('TYPO3_Flow_Session'));

	$response = $this->browser->request('http://localhost/test/session');
	$this->assertTrue($response->hasCookie('TYPO3_Flow_Session'));
</pre>

The first assertion will succeed because the new session sends a session cookie in its response.
The second assertion will fail because the session object seems to be reused and not fully cleared before it is used again in the second browser request."
46715,TYPO3.Flow,Bug,"",Resolved,Should have,Validation is not reset in functional tests,Bastian Waidelich,Bastian Waidelich,2013-06-25 10:35,Http,2.0.1,2013-03-27,"","",100,2013-03-27 06:44,"","",1086700,"",Git master,If using the internal request engine (= in functional tests) the validation resolver that contains a 1st level cache for validated objects is not properly reset.
46716,TYPO3.Flow,Bug,"",New,Must have,Empty class names in DependencyInjection proxy code when using Caches / Factory-created dependencies,Adrian Föder,"",2013-05-21 07:22,Object,2.0.1,2013-03-19,"","",0,2013-03-27 07:23,"","",1086750,"",Git master,"I noticed a few cases where the $className argument of @\TYPO3\Flow\Object\ObjectManager::createLazyDependency@ was an empty string; that is the case, for example, in 

@\TYPO3\Flow\Resource\ResourceManager::Flow_Proxy_injectProperties@:
<pre><code class=""php"">
	/**
	 * Autogenerated Proxy Method
	 */
	 private function Flow_Proxy_injectProperties() {
		$statusCache_reference = &$this->statusCache;
		$this->statusCache = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getLazyDependencyByHash('b3ca84fd627a5045e163e999a38877bf', $statusCache_reference);
		if ($this->statusCache === NULL) {
			$this->statusCache = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->createLazyDependency('b3ca84fd627a5045e163e999a38877bf',  $statusCache_reference, '', function() { return \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Cache\CacheManager')->getCache('Flow_Resource_Status'); });
		}
		// etc...
</code></pre>

The complete generated class file can be seen here: https://gist.github.com/afoeder/18b878d29c418b313773#file-typo3_flow_resource_resourcemanager-php-L480


h2. Possible reason

So, looks like the reason is at @\TYPO3\Flow\Object\DependencyInjection\ProxyClassBuilder::buildPropertyInjectionCodeByConfiguration@. There is a check for 
<pre>
if ($propertyClassName === NULL) {
</pre> 
but at the end of the method, the $propertyClassName is still used without having been modified, hence still NULL:

<pre><code class=""php"">
	protected function buildPropertyInjectionCodeByConfiguration(Configuration $objectConfiguration, $propertyName, Configuration $propertyConfiguration) {
		$className = $objectConfiguration->getClassName();
		$propertyClassName = $propertyConfiguration->getClassName();
		if ($propertyClassName === NULL) {
			$preparedSetterArgument = $this->buildCustomFactoryCall($propertyConfiguration->getFactoryObjectName(), $propertyConfiguration->getFactoryMethodName(), $propertyConfiguration->getArguments());
		} else {
			// ...
		}
		// ...
		return $this->buildLazyPropertyInjectionCode($propertyClassName, $propertyName, $preparedSetterArgument);
	}
</code></pre>

See, obviously the last line *can* be invoked if $propertyClassName is NULL; which is quite often the case when using configured factories."
46816,TYPO3.Flow,Feature,"",New,Should have,Add xcache cache backend,Christian Kuhn,"",2013-05-21 07:28,Cache,"",2013-03-31,"","",0,2013-03-31 09:16,"","",1091500,"","","xcache is a memory key-value cache similar to the user cache of apc. It was integrated as cache backend for TYPO3 CMS 6.1, so the code could be transferred from CMS easily. "
46823,TYPO3.Flow,Task,"",Accepted,Should have,Detect APC and APCu correctly,Stefan Neufeind,"",2013-09-18 03:28,Cache,"",2013-03-31,"","",0,2013-03-31 14:06,"","",1091850,"","","APCu is just the user-data part of APC,
providing the same API.

If installed it currently identifies itself
as both ""apcu"" and ""apc"" (for compatibility).
Thus if ""apcu"" shows up, we actually have an APC
without opcache-support.


Added in TYPO3 CMS 6.1, so it would be great if you could adopt something similar as well."
46862,TYPO3.Flow,Bug,"",Resolved,Should have,generateUUID can be broken by seeding mt_rand,Christian Jul Jensen,Christian Jul Jensen,2013-04-23 05:36,Utility,"",2013-04-02,"","",100,2013-04-02 09:12,"","",1093750,"",Git master,"If any code seeds mt_rand, the generated uuids will no longer be random, and can result in collisions on subsequent runs"
46872,TYPO3.Fluid,Task,"",Resolved,Should have,Drop incomplete tests,Anja Leichsenring,Bastian Waidelich,2013-08-23 04:58,"","",2013-04-02,"","",100,2013-04-02 15:59,"","",1094250,"","",After some discussion with Sebastian Kurfuerst we decided to drop the incomplete marked tests in both CMS and Flow Fluid.
46883,TYPO3.Flow,Bug,"",Resolved,Must have,Custom identifiers are not working anymore,Bastian Waidelich,Bastian Waidelich,2013-04-09 09:36,Persistence,2.0,2013-04-03,"","",100,2013-04-03 05:00,"","",1094800,"",Git 2.0,"https://review.typo3.org/#/c/18954/ introduced a regression that prevents entities with custom identifier columns to be working correctly.
The actual issue is probably, that the ""PersistenceMagicAspect"" introduces the ""Persistence_Object_Identifier"" even if the entity contains a custom identifier. By checking for that property first, *PersistenceManager::getIdentifierByObject()* will always return a UUID regardless of the actual identifier ? breaking links and such."
46910,TYPO3.Flow,Feature,"",New,Should have,Composer integration - PackageStates.php,Patrick Pussar,"",2013-05-21 07:28,"","",2013-04-04,"","",0,2013-04-04 07:15,"","",1096150,"","","It seems that composer packages without autoload.psr-0 definition in its composer.json are not integrated correctly in Configuration/PackageStates.php which results in class not found exceptions.

E.g. using https://github.com/leafo/lessphp
composer.json: 
<pre>
   ""autoload"": {
        ""classmap"": [""lessc.inc.php""]
    },
</pre>

result in PackageStates.php:
<pre>
 'leafo.lessphp' =>
    array (
      'manifestPath' => '',
      'composerName' => 'leafo/lessphp',
      'state' => 'active',
      'packagePath' => 'Libraries/leafo/lessphp/',
      'classesPath' => 'Classes/',
    ),
</pre>
The classpath is wrong in that case. Correct would be 'classPath'=>'',"
46974,TYPO3.Flow,Bug,"",Accepted,Should have,Original and Proxy class in one file makes it difficult to reach 100% code coverage for functional tests,Christian Müller,Christian Müller,2013-05-21 07:28,Object,"",2013-04-06,"","",0,2013-04-06 06:23,"","",1099350,"",Git master,If we decide to fix it we could compile two files as before in Testing context(s) and keep the new behavior for Development and Production.
47006,TYPO3.Fluid,Bug,"",New,Should have,widget identifier are not unique,Christoph Bauer,"",2014-11-25 07:18,"","",2013-04-06,"","",0,2013-04-06 17:58,"","",1100950,"",(any),"currently widget identifiers are unique only within the scope of a single plugin, but not the whole called page. 
I tried using multiple instances of the same plugin - all using the paginate widget - on the same page, but since all paginate widgets get the same identifier, this has some unwanted side-effects (switching the shown page of one paginate widget affects all other widgets too etc.)
"
47052,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Clear doctrine caches after migration applied,Christian Müller,"",2013-04-08 12:30,"","",2013-04-08,"","",0,2013-04-08 12:30,"","",1103250,"",Git master,After applying a migration we should delete doctrine caches to not run cached queries that are using no longer existing fields (or don't select new fields).
47054,TYPO3.Flow,Bug,"",Resolved,Should have,IntegerConverter not found for properties annotated with @var int,Philipp Maier,Philipp Maier,2013-04-30 11:36,Property,"",2013-04-08,"","",100,2013-04-08 14:59,"","",1103350,"",Git master,"Attached you can find an working example package. The properties (and setter methods) in the DTO are annotated as 'int'.
On submitting the form, no suitable converter can be found. If the property is annotated with 'integer' it works as expected.

This should (imo) also work for 'int'.

The exact error message is:
<pre>#1297759968: Exception while property mapping for target type ""TypeConverter\Test\Domain\Model\DTO\IntegerConverter"", at property path ""someProperty"": No converter found which can be used to convert from ""string"" to ""int"".</pre>"
47058,TYPO3.Flow,Bug,"",Resolved,Should have,Error 500 when using f:translate with source attribute when translation catalog empty,piotr ,Adrian Föder,2013-07-16 09:37,I18n,2.0.1,2013-04-09,"","",100,2013-04-09 04:01,"","",1103550,"",Flow 2.0.0 beta 1,"Got an error:
PHP Fatal error:  Allowed memory size of 536870912 bytes exhausted (tried to allocate 146 bytes) in (...)/Packages/Libraries/doctrine/common/lib/Doctrine/Common/Util/Debug.php on line 111

When using:
<f:translate id=""translation.id"" package=""some.package"" source=""CatalogName"">some text</f:translate> and there is no translation units in catalog file:

<?xml version=""1.0""?>
<xliff version=""1.2"" xmlns=""urn:oasis:names:tc:xliff:document:1.2"">
        <file original="""" source-language=""en"" target-language=""de"" datatype=""plaintext"">
                <body>
				
                </body>
        </file>
</xliff>

Exception file gives:
80 TYPO3\Flow\Error\ErrorHandler::handleError(8, ""Undefined index: translationUnits"", ""(...)Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_I18n_Xliff_XliffModel_Original.php"", 123, array|2|)

"
47073,TYPO3.Flow,Bug,"",New,Must have,Cookie causes Error after Update,Bernd Helbig,"",2014-12-16 05:59,Http,"",2013-04-09,"","",0,2013-04-09 09:06,"","",1104300,"",(any),"<pre>
Notice: Undefined offset: 1 in /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Headers.php on line 433 
Fatal error: Uncaught exception 'InvalidArgumentException' with message 'The parameter ""name"" passed to the Cookie constructor must be a valid token as per RFC 2616, Section 2.2.' in /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Cookie.php:105 
Stack trace: #0 /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Headers.php(434): TYPO3\Flow\Http\Cookie->__construct('', '') 
#1 /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Headers.php(128): TYPO3\Flow\Http\Headers->setCookiesFromRawHeader('') 
#2 /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Headers.php(54): TYPO3\Flow\Http\Headers->set('Cookie', '') 
#3 /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Headers.php(81): TYPO3\Flow\Http\Headers->__construct(Array) 
#4 /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Request.php(75): TYPO3\Flow\Http\He in /.../_flow/FLOW-2.0/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Cookie.php on line 105
</pre>

Occurance: after updating application on test-server (ftp, sql-dump) and running flow:cache:flush
Direct cause: unknown

Related Infos: Apart from the session-id, the application saves one extra cookie with a lifetime of +1 year. Manually deleting this cookie in the browser lets the application to run without error again."
47075,TYPO3.Flow,Feature,"",New,Should have,Make Exception more meaningful,Sören Rohweder,"",2013-05-21 07:28,Resource,"",2013-04-09,"","",0,2013-04-09 09:58,"","",1104400,"","","When requiring a resource with the @resource://@ protocol and the Resource Folder appears in the Path the Exception should mention that the Resource folder should be removed from path or the path should be resolved without ""Resource"" in it again.

Now only an exception is thrown stating that the resource could not be found and  for new users this is not really obvious why."
47078,TYPO3.Fluid,Bug,"",Closed,Must have,widget.uri/linkViewHelpers fail with CSRF protection,Adrian Föder,"",2013-04-10 06:07,Widgets,"",2013-04-09,"","",0,2013-04-09 10:43,"","",1104550,"",Git master,"the ViewHelper's getAjaxUri() method lacks the addition of a Csrf protection token, which results into an Access Denied exception when calling the linked action.

To me, the question is if the CsrfToken should be added in that case to the Ajax URI; or rather regard that in the \TYPO3\Flow\Security\RequestPattern\CsrfProtection."
47114,TYPO3.Flow,Bug,"",Resolved,Should have,@var annotations with included variable throw exception,Alexander Berl,Alexander Berl,2014-07-11 14:19,Property,"",2013-04-10,"","",100,2013-04-11 04:53,"","",1106350,"",Git 2.0,"Currently all @var annotations which contain whitespaces are regarded as illformed and throw a InvalidPropertyTypeException.
However, it is common - at least for 3rd party code - to write @var annotations that look as follows:

<pre>
/**
 * @var integer $number
 */
protected $number;
</pre>

A good example for this are the gedmo doctrine extensions.

Hence I suggest to parse out all variable references in the annotation before deciding on being illformed.

See ReflectionService@1231:
<pre>
$declaredType = trim(implode(' ', $this->getPropertyTagValues($className, $propertyName, 'var')), ' \\');
</pre>
instead:
<pre>
const VARIABLE_NAME_REGEX = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/';
...
$declaredType = implode(' ', $this->getPropertyTagValues($className, $propertyName, 'var'));
$declaredType = trim(preg_replace(self::VARIABLE_NAME_REGEX, '', $declaredType), ' \\');
</pre>"
47115,TYPO3.Flow,Bug,"",Resolved,Must have,$roleRepository not initialized correctly,Karsten Dambekalns,Karsten Dambekalns,2013-04-12 08:39,Security,2.0,2013-04-11,"","",100,2013-04-11 05:18,"","",1106400,"",Git 2.0,"The @$roleRepository@ is set ""manually"" in @initializeRolesFromPolicy()@ - only if caches are outdated. But the @$roleRepository@ is needed even if the caches are up to date, so this breaks (one way to see the effect is to try and create a Neos user on the CLI)."
47137,TYPO3.Flow,Feature,"",Resolved,Should have,HTTP method tunneling,Bastian Waidelich,Bastian Waidelich,2013-04-17 11:36,Http,2.0,2013-04-11,"","",100,2013-04-11 13:20,"","",1107500,"","","Due to limited support in browsers or restrictive firewalls, Flow should allow HTTP request methods to be overridden by the client.

For *POST* requests the request method is overridden if

* a post argument *__method* is set OR
* if the header *X-HTTP-Method-Override* is present OR
* if the header *X-HTTP-Method* is present

(first rule applies in the order specified)

Example DELETE form:
<pre>
<code class=""html"">
<form method=""POST"">
  <input type=""hidden"" name=""__method"" value=""DELETE"" />
</form>
</code>
</pre>"
47188,TYPO3.Fluid,Bug,"",Resolved,Should have,Fluid tries to render folders as templates partials and layouts,Marc Bastian Heinrichs,Bastian Waidelich,2014-12-16 04:55,View,"",2013-04-13,"","",100,2013-04-13 09:18,"","",1110050,"",FLOW3 1.0.0,"The file_exists check in TemplateView is true also for folders. This leads to unrendered partials with resorted paths.

Solution: add additional is_dir check
"
47191,TYPO3.Flow,Feature,"",Under Review,Should have,Make (property) Validators aware of parent class and the property they belong to,Alexander Berl,"",2015-02-13 12:25,Validation,"",2013-04-13,"","",0,2013-04-13 10:52,"","",1110200,"","","In my RFC #39788 I proposed a NotExistsValidator, which checks that no object with the same property as the annotated value exists in a specific repository.
This is needed for example when validating that an email or username doesn't yet exist during registration.

Such an validator however is not possible without providing all validators with some kind of reflection/information on their parent class and the property they belong to.

Another possible enhancement would be for Validators that depend on the value of sibling properties - i.e. a validator for ""repeat e-mail/password"" functionality.
For this however, the validators need to be aware of not only the parent class name, but the concrete instance of the parent class. This information however is only available at the invocation of the validate function.

Together, those additions would allow for much more flexible validators to be written, like the named above.


A possible solution for this would be to provide getters/setters for both ValidatedParentObject and ValidatedProperty, which are set before invocation of the GeneralObjectValidator property validators. Likewise, the collection/conjunction/disjunction validators would need to forward their own ValidatedParentObject/ValidatedProperty to the children validator instances.

However, for singleton validators to work reliably with those properties, they need to be *unset* every time after the _validate()_ call, which makes everything look a bit ugly. I'm open for suggestions on a nicer solution for that.
Another open point is which, if any, of those methods should go into the ValidatorInterface."
47220,TYPO3.Flow,Bug,"",Resolved,Must have,Flow fails with new versions of symfony/console and doctrine/annotations,Christopher Hlubek,Christopher Hlubek,2013-04-14 18:02,"","",2013-04-14,"","",0,2013-04-14 18:00,"","",1111650,"",Flow 2.0.0 beta 1,"Following the Quickstart steps the Flow 2.0.0-beta1 does not run anymore due to updated dependencies.

*Steps taken:*

<pre>
composer create-project --dev --keep-vcs typo3/flow-base-distribution Quickstart 2.0.x-dev
cd Quickstart
./flow
</pre>

*Error:*

<pre>
Uncaught Exception
  Execution of subprocess failed with exitcode ""255"" and output:


  Fatal error: Class 'Symfony\Component\EventDispatcher\Event' not found in
  .../Quickstart/Packages/Libraries/symfony/console/Symfony/Component/Console/Event/ConsoleEvent.php
  on line 25
</pre>

This seems to be an issue introduced by a recent @symfony/console@ update. Could be fixed by excluding everything in @Symfony\Component\Console@ or requiring @symfony/event-dispatcher@ explicitly.

*Next error:*

Fixing that brings just another error:

<pre>
  Fatal error:
  Doctrine\Common\Annotations\AnnotationRegistry::registerFile(): Failed
  opening required
  '.../Quickstart/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/Annotation/IgnoreAnnotation.php'
  (include_path='.:/opt/local/lib/php54/pear') in
  .../Quickstart/Packages/Libraries/doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationRegistry.php
  on line 59
</pre>

Only classes from @Doctrine.Common@ are ignored, but that package got split into @doctrine/annotations@ and other packages.  So we should also exclude everything in package @doctrine.annotations@."
47228,TYPO3.Flow,Feature,"",Resolved,Should have,Allow doctrine event listeners to be configured,Alexander Berl,Alexander Berl,2013-07-16 16:36,Persistence,"",2013-04-15,"","",100,2013-04-15 05:48,"","",1112050,"","","The gedmo doctrine behavioral extensions depend on the doctrine event listener system to be configured when setting up the entity manager.
This is currently not possible in Flow, but could easily be handled via configuration.

I therefore suggest adding a new configuration setting TYPO3.Flow.doctrine.eventSubscribers which is a list of classes that extend
\Doctrine\Common\EventSubscriber and are to be registered with the doctrine event manager inside the entityManagerFactory."
47229,TYPO3.Flow,Bug,"",Resolved,Must have,System roles become namespaced in configuration manager,Adrian Föder,Adrian Föder,2013-04-15 09:35,"","",2013-04-15,"","",100,2013-04-15 06:04,"","",1112100,"",Git master,"the system roles, Everybody and Anonymous, get a namespace and become, for example, TYPO3.TYPO3CR:Everybody in the ACLs section. This can easily be seen when calling @./flow configuration:show --type Policy@ on a Neos project.
I'll provide a patch (suggestion)."
47232,TYPO3.Flow,Bug,"",Resolved,Must have,Property mapping fails for Account::roles,Philipp Maier,Philipp Maier,2013-04-16 06:36,Property,2.0,2013-04-15,"","",100,2013-04-15 07:33,"","",1112250,"",Git master,"Hi,

following error is thrown when the PropertyMapper tries to map the roles.

<pre>
#1297759968: Exception while property mapping for target type ""SomeModel"", at property path ""accounts.0"": Catchable Fatal Error: Argument 1 passed to TYPO3\Flow\Persistence\Doctrine\Proxies\__CG__\TYPO3\Flow\Security\Account::setRoles() must be an array, object given.
</pre>

This is mainly because the typehint in the function setRoles is <array> while the property itself is annotated as Doctrine Collection.
Changing the typehint to \Doctrine\Common\Collections\Collection seems to fixes this problem."
47233,TYPO3.Flow,Bug,"",Resolved,Should have,Fatal error caused by use statement in DebugExceptionHandler,Karsten Dambekalns,Karsten Dambekalns,2013-04-16 03:52,Error,2.0,2013-04-15,"","",100,2013-04-15 07:42,"","",1112300,"",Git 2.0,"I see this with 2.0 in Production context:

<pre>Fatal error: Cannot use TYPO3\Flow\Exception as Exception because the name is already in use in ?/Classes/TYPO3/Flow/Error/DebugExceptionHandler.php on line 15</pre>
"
47236,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Error at offset 6279 of 6338,Philipp Maier,"",2014-02-14 03:35,"","",2013-04-15,"","",0,2013-04-15 07:47,"","",1112450,"",Git master,"Hi,

each time I clear the cache with <pre>flow:cache:flush --force</pre> and reload, I'm first redirected to the login page (good) but then following error is thrown.

<code>
#1: Notice: unserialize() [<a href='function.unserialize'>function.unserialize</a>]: Error at offset 6279 of 6338 bytes in /path/to/flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Cache/Frontend/VariableFrontend.php line 84
</code>

After clearing the cache again, the error is gone and I can view the login page and continue.

I've absolutely no clue what causes this."
47249,TYPO3.Flow,Bug,"",Closed,Should have,Uncaught Exception in ActionController,Marco Falkenberg,"",2013-05-21 07:13,MVC,"",2013-04-15,"","",0,2013-04-15 10:59,"","",1113100,"",Git master,"In ActionController::getActionMethodParameters a Warning (@strpos(): Offset not contained in string@) is thrown while stripping out the 'Action' out of method names shorter than 6 characters.

<pre>
	static public function getActionMethodParameters($objectManager) {
...
			if (strpos($methodName, 'Action', strlen($methodName) - 6) !== FALSE) {
...
	}
</pre>"
47252,TYPO3.Flow,Feature,"",Resolved,Must have,"Skip CSRF protection and persistence for ""safe"" request methods",Robert Lemke,Robert Lemke,2013-04-17 10:35,MVC,2.0,2013-04-15,"","",100,2013-04-15 11:53,"","",1113250,"","","By definition, GET / HEAD requests should be considered ""safe"", that is, they should only be used for retrieval and not have any state side effects on the server side (http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).

We should support and enforce this principle by turning off the automatic persistAll() call and skip CSRF protection for GET requests.

In later versions we can further optimize Flow to take advantage of the knowledge that a request is considered to be read-only (possibly speeding up persistence, security etc.)."
47253,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,Flow Exception shouldn't be in use statement,Christian Müller,Christian Müller,2013-04-15 12:35,"","",2013-04-15,"","",100,2013-04-15 12:05,"","",1113300,"",Git master,"Change Ib0d208a0b7750a8a2d15cf5af98b8bd2d20d3c46 introduced a regression due to ""use TYPO3\Flow\Exception"" which clashes with PHPs Exception."
47255,TYPO3.Flow,Bug,"",Resolved,Should have,Cache is not flushed for changes in sub routes,Bastian Waidelich,Bastian Waidelich,2013-06-05 07:36,MVC - Routing,2.0.1,2013-04-15,"","",100,2013-04-15 12:25,"","",1113400,"",(any),"The cache manager only checks changes in ""Routes.yaml"" files but it should also consider all ""Routes.*.yaml"" files."
47271,TYPO3.Flow,Bug,"",Closed,Should have,Advices for parent class' methods throw warning when called in subclass,Andreas Wolf,"",2014-12-15 07:05,AOP,2.0.1,2013-04-16,"","",0,2013-04-16 05:06,"","",1114200,"",Git master,"I have a structure with a parent class and several subclasses. I want a before advice for all set* methods of these classes.

Some methods from the parent class are invoked on objects of the subclass.
When having the advice before the set* methods, the following error occurs:

<code php>
Notice: Undefined property: MyPackage\Domain\Model\MySubclass::$Flow_Aop_Proxy_targetMethodsAndGroupedAdvices in .../Data/Temporary/Development/Cache/Code/Flow_Object_Classes/MyPackage_Domain_Model_MyClass.php line 629
</code>

where @MyClass@ is the parent class of @MySubclass@.

The reason seems to be that the AOP properties of a class are marked as ""private"", which makes them inacessible from parent (and subclass) methods. I don't know if this could/should be solved by changing the type to protected, as this might raise other issues (I'm not too deeply into the AOP code of Flow), but AFAIS this is a possible solution."
47273,TYPO3.Flow,Feature,"",New,Should have,Support mapping properties with differing types for setter and property,Karsten Dambekalns,"",2013-05-21 07:28,Property,"",2013-04-16,"","",0,2013-04-16 06:12,"","",1114300,"","","If a property and it's setter have different ""input"" types, e.g. the property is a Collection but the setter accepts an array, mapping currently fails. It would be nice if the mapping, class schema and related parts would be clever enough to support that?"
47309,TYPO3.Flow,Bug,"",Closed,Should have,Calling this in static context in cached classes,Wouter Wolters,"",2013-04-25 03:36,"",2.0,2013-04-17,"","",0,2013-04-17 05:22,"","",1115950,"",Git 2.0,"When updating TYPO3 Flow 2.0 to the newest commit there is an Fatal error calling $this in static context.
For example the function ""static public function getActionMethodParameters"" is calling $this inside it's function.

After bisecting with git I found out that the problem is in commit:6d56d5f7

Running on the commit before this merge TYPO3 Flow is working."
47325,TYPO3.Flow,Bug,"",Under Review,Should have,ReflectionData and classSchema caches need not be freezable,Alexander Berl,"",2013-05-21 07:08,Reflection,2.0.1,2013-04-17,"","",0,2013-04-17 09:32,"","",1116750,"",Git master,"Currently, ReflectionData and classSchema caches call the backend->freeze() and ->isFrozen() method in production context without checking if the backend is actually a freezable backend. This prevents those caches from being used with better performing backends than FileBackend."
47331,TYPO3.Flow,Bug,"",Accepted,Must have,ObjectManager shutdown with Dependency Injection Proxy causes fatal errors,Christopher Hlubek,"",2013-05-21 07:06,Object,2.0.1,2013-04-17,"","",0,2013-04-17 13:43,"","",1117000,"",Git 2.0,"I observed this when testing an application through Behat as a normal result that returned a 500 status code. Must be introduced between 903271f and f5b5024.

<pre>
Uncaught exception in line 398 of .../FlowRoot/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Object/ObjectManager.php: Object not found - See also: 2013
04171927569fb730.txt

----

Uncaught exception in line 398 of .../FlowRoot/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Object/ObjectManager.php: Object not found

8 SplObjectStorage::offsetGet(TYPO3\Flow\Object\DependencyInjection\DependencyProxy)
7 TYPO3\Flow\Object\ObjectManager::shutdown(""Runtime"", ""TYPO3\Flow\Core\Bootstrap::bootstrapShuttingDown"", ""TYPO3\Flow\Core\Bootstrap::bootstrapShuttingDown"")
6 call_user_func_array(array|2|, array|3|)
5 TYPO3\Flow\SignalSlot\Dispatcher::dispatch(""TYPO3\Flow\Core\Bootstrap"", ""bootstrapShuttingDown"", array|1|)
4 TYPO3\Flow\Core\Bootstrap::emitBootstrapShuttingDown(""Runtime"")
3 TYPO3\Flow\Core\Bootstrap::shutdown(""Runtime"")
2 TYPO3\Flow\Http\RequestHandler::handleRequest()
1 TYPO3\Flow\Core\Bootstrap::run()
</pre>"
47339,TYPO3.Flow,Feature,"",Needs Feedback,Could have,Allow RequestHandlers to get the current Request injected,Alexander Berl,Alexander Berl,2013-05-21 07:28,Http,"",2013-04-18,"","",0,2013-04-18 04:51,"","",1117400,"","","As a proxy service, I want to provide my own eager RequestHandler which might modify the request headers depending on some conditions and then forward that request to the default RequestHandler.

One solution could be to add an optional $request parameter to the handleRequest() function, which is used when given and else a new request is created from the environment."
47346,TYPO3.Flow,Task,"",Resolved,Should have,Configuration schema for doctrine cacheImplementation still exists,Alexander Berl,"",2013-05-22 15:36,Configuration,2.0,2013-04-18,"","",100,2013-04-18 07:36,"","",1117750,"","","In http://forge.typo3.org/projects/package-typo3-flow3/repository/revisions/5e5ebf31970c572b49fc73f87832f351248f899f the setting TYPO3.Flow.persistence.doctrine.cacheImplementation was removed, however the schema still contains it as required option, hence configuration validation fails currently."
47363,TYPO3.Fluid,Bug,"",Closed,Should have,Error Classes are only set for form fields in object context,Sebastian Michaelsen,"",2015-02-25 04:29,"","",2013-04-18,"","",0,2013-04-18 17:05,"","",1118600,"",(any),"Fluid won't set error classes for form fields when they are not in object context (""property"" attribute is not set).
I experienced the issue in v4 and have no FLOW running to verify it, but from looking at the code I'm pretty sure this is not v4 specific.

Here's the workaround I did for my v4 project: https://gist.github.com/smichaelsen/5416046"
47371,TYPO3.Flow,Bug,"",Resolved,Must have,If matched AOP even wraps static methods which will fail on runtime,Steffen Ritter,Steffen Ritter,2013-04-25 03:37,AOP,2.0,2013-04-19,"","",100,2013-04-19 03:50,"","",1119000,"",Git 2.0,"Runtime execution fails if a static method is wrapped with AOP code because it tries to access the instance variable $this.

Static methods have to be skipped when compiling aop proxies."
47404,TYPO3.Flow,Feature,"",New,Could have,Add getters and setters methods for introduced properties,Rafael Kähm,"",2013-05-21 07:28,AOP,"",2013-04-20,"","",0,2013-04-20 11:27,"","",1120650,"","","Currently you must introduce methods over interface introduction and then wrap introduced methods with around advice. 

Like this:
<pre><code class=""php""><?php
namespace Acme\Test\Aspect;
 
use TYPO3\Flow\Annotations as Flow;
 
use TYPO3\Flow\Reflection\ObjectAccess;

/**
 * Inject attribute to every as ""MyOwnTypeOfEntity"" annotated entity
 *
 * @Flow\Scope(""singleton"")
 * @Flow\Aspect
 * @Flow\Introduce(""Acme\Test\Aspect\PropertyIntroductionAspect->isMyOwnTypeOfEntity"", interfaceName=""Acme\Test\Aspect\PropertyIntroductionInterface"")
 */
class PropertyIntroductionAspect {

	/**
	 * @Flow\Inject
	 * @var \TYPO3\Flow\Reflection\ReflectionService
	 */
	protected $reflectionService;

	/**
	 * @Flow\Pointcut(""TYPO3\Flow\Persistence\Aspect\PersistenceMagicAspect->isEntityOrValueObject && classAnnotatedWith(Acme\Test\Annotations\MyOwnTypeOfEntity)"")
	 */
	public function isMyOwnTypeOfEntity() {}

	/**
	 * @var string
	 * @Flow\Introduce(""Acme\Test\Aspect\PropertyIntroductionAspect->isMyOwnTypeOfEntity"")
	 */
	protected $introducedProp;

	/**
	 * Around advice, implements the new method ""newMethod"" of the
	 * ""NewInterface"" interface
	 *
	 * @param  \TYPO3\Flow\AOP\JoinPointInterface $joinPoint The current join point
	 * @return void
	 * @Flow\Around(""Acme\Test\Aspect\PropertyIntroductionAspect->isMyOwnTypeOfEntity && method(.*->setIntroducedProp())"")
	 */
	public function setIntroducedPropImplementation(\TYPO3\Flow\AOP\JoinPointInterface $joinPoint) {
 		$introducedProp = $joinPoint->getMethodArgument('introducedProp');
		$proxy = $joinPoint->getProxy();

		ObjectAccess::setProperty($proxy, 'introducedProp', $introducedProp, TRUE);

		$someResult = $joinPoint->getAdviceChain()->proceed($joinPoint);
	}


}</code></pre>

Acme\Test\Aspect\PropertyIntroductionInterface
<pre><code class=""php""><?php
namespace Acme\Test\Aspect;
 
/**
 * Inject community-attribute to every class
 *
 */
interface PropertyIntroductionInterface {

	/**
	 * @param string $introducedProp some string 
	 * @return void
	 */
	public function setIntroducedProp($introducedProp);

}</code></pre>

then you can see following code in (..)/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/Acme_Test_Domain_Model_Model.php
<pre><code class=""php"">...
	/**
	 * Autogenerated Proxy Method
	 */
	 public function setIntroducedProp($introducedProp) {

				// FIXME this can be removed again once Doctrine is fixed (see fixMethodsAndAdvicesArrayForDoctrineProxiesCode())
			$this->Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setIntroducedProp'])) {
		$result = NULL;

		} else {
			$this->Flow_Aop_Proxy_methodIsInAdviceMode['setIntroducedProp'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['introducedProp'] = $introducedProp;
			
					$adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('setIntroducedProp');
					$adviceChain = $adviceChains['TYPO3\Flow\Aop\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$joinPoint = new \TYPO3\Flow\Aop\JoinPoint($this, 'Acme\Test\Domain\Model\Model', 'setIntroducedProp', $methodArguments, $adviceChain);
					$result = $adviceChain->proceed($joinPoint);

			} catch (\Exception $e) {
				unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setIntroducedProp']);
				throw $e;
			}
			unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setIntroducedProp']);
		}
		return $result;
	}
...</code></pre>

as you can see there are to many steps and to many operations to add a simple getter and setter methods.

my suggestion:
*add options to* _TYPO3\Flow\Annotations\Introduce_ :
*addGetterIntroduction* or *addSetterIntroduction* for manually method introductions
*skipGetterIntroduction* or *skipSetterIntroduction* for automatically method introductions"
47416,TYPO3.Flow,Bug,"",Resolved,Must have,PolicyService needs hasRole(),Christian Müller,Karsten Dambekalns,2013-04-22 04:35,Security,2.0,2013-04-21,"","",100,2013-04-21 17:18,"","",1121250,"",Git 2.0,""
47419,TYPO3 Flow Base Distribution,Bug,"",New,Must have,Composer issues,Rens Admiraal,"",2013-08-14 09:34,"",2.0.1,2013-04-22,"","",0,2013-04-22 02:07,"","",1121400,"",Git master,"It seems like composer has some issues. I've heard multiple projects now where the following happens:

composer --dev update: works ok
composer install: installs framework packages in Packages/Libraries

besides that the command in the quickstart docs (composer create-project --dev --keep-vcs typo3/flow-base-distribution Quickstart 2.0.0) doesn't seem to work anymore (can't find package with version..... )"
47423,TYPO3 Flow Base Distribution,Task,"",Under Review,Could have,Decouple TYPO3.Party from Flow,Christian Müller,Christian Müller,2013-04-22 03:34,"","",2013-04-22,"","",0,2013-04-22 03:21,"","",1121600,"","",In order to make leaner distributions possible TYPO3.Flow should ship with a Party signature Interface so that you can implement your own party based on that. This enables us to remove the requirement on Party in Flow.
47429,TYPO3.Flow,Bug,"",New,Should have,Global policy files no longer allowed,Thomas Hempel,"",2013-07-14 13:20,Security,"",2013-04-22,"","",0,2013-04-22 07:13,"","",1121900,"",Git master,"Since one of the last changes, global policy files are no longer allowed. After a discussion on the IRC channel, this seems to be a bug.

All that should be checked is wether or not a role is defined in that Policy file not if it exists as it makes sense to configure the acls on installation base. 

Other than that, this check should not be executed if the security is disabled at all which it is in my case."
47456,TYPO3.Flow,Feature,"",New,Should have,ManyToOne and OneToOne Relations of Objects passed as Action Argument are loaded automatically,Benno Weinzierl,"",2013-08-28 09:11,Validation,"",2013-04-22,"","",0,2013-04-22 16:34,"","",1123200,"","","All ManyToOne and OneToOne Relations of Objects passed as Action Argument are loaded automatically by the Validator (circumventing the lazy loading).

This results in several querries even if no relations are accessed in the action.

I think robert mentioned that validation will be at some point totally skipped for safe methods which will resolve this to some extend. But even for unsafe methods it may be the case that objects from database which are not modified should not be validated.



"
47469,TYPO3.Flow,Bug,"",Resolved,Must have,ActionController issues PHP warning if it contains methods with short names,Robert Lemke,Robert Lemke,2013-04-23 04:36,MVC,2.0,2013-04-23,"","",100,2013-04-23 03:46,"","",1123850,"",Flow 2.0.0 beta 1,"If an ActionController implementation contains a method which has a name shorter than 7 characters, the new static methods for validation building will issue a warning because they use substr() with out of bounds indexes."
47473,TYPO3.Flow,Bug,"",Resolved,Must have,Role->setParentRoles() fails if array of roles contains duplicates,Robert Lemke,Robert Lemke,2013-04-23 05:36,Security,2.0,2013-04-23,"","",100,2013-04-23 04:59,"","",1124050,"",Flow 2.0.0 beta 2,"If the array of roles contains duplicates, Doctrine may fail while trying to insert the same role multiple times:

<pre>
Uncaught Exception in Flow
An exception occurred while executing 'INSERT INTO typo3_flow_security_policy_role_parentroles_join (flow_policy_role, parent_role) VALUES (?, ?)' with params {""1"":""Acme.Demo:Administrator"",""2"":""Acme.Demo:Base""}: SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry 'Acme.Demo:Administrator-Acme.Demo:Base' for key 'PRIMARY'

Doctrine\DBAL\DBALException thrown in file
Packages/Libraries/doctrine/dbal/lib/Doctrine/DBAL/DBALException.php in line 47.
</pre>"
47487,TYPO3.Flow,Bug,"",New,Should have,Functional test classes in package without classes are not compiled,Christopher Hlubek,"",2013-05-21 06:19,Core,2.0.1,2013-04-23,"","",0,2013-04-23 05:59,"","",1124750,"",Git master,Additionally there is an error if only a Exception class is present in @Classes@.
47500,TYPO3.Flow,Bug,"",Resolved,Should have,createRole: Role is not passed as object to repository,Christopher Hlubek,Christopher Hlubek,2013-04-26 05:37,"","",2013-04-23,"","",100,2013-04-23 11:00,"","",1125400,"",Git master,"This causes an error when adding roles through the PolicyService createRole method:

<pre><code>
Fatal error: Call to a member function getIdentifier() on a non-object in .../TYPO3_Flow_Security_Policy_RoleRepository.php
</code></pre>"
47534,TYPO3.Flow,Bug,"",Resolved,Must have,Algorithms::generateUUID() creates uppercase characters in UUIDs,Karsten Dambekalns,Karsten Dambekalns,2013-04-26 06:35,Utility,2.0,2013-04-24,"","",100,2013-04-24 03:36,"","",1127050,"",Flow 2.0.0 beta 2,"The UUIDs generated by that method were always lowercase, now they are uppercase. As soon as you do a case-sensitive comparison on those UUIDs as strings, this will now break, even if the UUIDs are the same semantically."
47551,TYPO3.Flow,Feature,"",Rejected,Should have,Allow usage of links for destructive actions again,Alexander Berl,"",2013-05-21 06:19,Http,2.0,2013-04-24,"","",0,2013-04-24 09:33,"","",1127900,"","","With the new changes that prevent unsafe methods to be destructive (no persistence), it is currently impossible to create action links, that execute unsafe methods.

A use case would be a backend of some sort, where you have a list of ""products"" (or other entities), each with a set of icons linking to methods such as ""copy"", ""rename"", ""delete"", etc.
As it is, one would have to create a form for each such action, having to deal with lots of html overhead and bad stylability or use javascript/XHR to work around that. In any way, it's a cumbersome solution to such a common requirement.

I therefore suggest, to:

- allow GET methods to tunnel other request methods
- extend the link.action viewhelper with a method parameter, which allows to override the request method through the request method tunneling feature
- add csrf token to action links automatically, if the overridden method is unsafe

This would allow unsafe action links to be generated explicitly (thus conciously) but still without too much boilerplate work.

Please give feedback."
47601,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Template Path of Submodules contains lowercase Namespace,Carsten Bleicker,"",2013-04-26 08:33,"","",2013-04-26,"","",0,2013-04-26 08:33,"","",1130350,"",Git master,"Having a Submodule My.Shop/Admin the path for templates results in:
resource://My.Shop/Private/Templates/admin/Article/Index.html

Shouldnt the /admin/ be /Admin/?"
47637,TYPO3 Flow Base Distribution,Bug,"",New,Should have,"Property with @ORM\Column(nullable=true,type=""decimal"",scale=2) results as type ""string"" in Collection Objects and not as expected as ""double""",Carsten Bleicker,"",2013-04-27 06:14,"","",2013-04-27,"","",0,2013-04-27 06:14,"","",1132150,"",Git master,"having a value object:
/**
 * A Price Value
 *
 * @Flow\ValueObject
 */
class Price{

	/**
	 * @var float
	 * @FLOW\Validate(type=""NotEmpty"")
	 * @ORM\Column(nullable=true,type=""decimal"",scale=2)
	 */
	protected $value;

	/**
	 * @param float $value
	 */
	public function __construct($value) {
		$this->value = $value;
	}

	/**
	 * @return float
	 */
	public function getValue() {
		return $this->value;
	}
}


anything works fine until this:
in a doctrine collection wich contains prices, the type of property $value is ""string"" and not of type ""double"".
so the following fails: if($this->prices->contains($newPriceWithSameValue)) because property $value of ""newPriceWithSameValue"" is type of ""double"".

"
47638,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Delete a ValueObject by its identity,Carsten Bleicker,"",2013-04-27 07:14,"","",2013-04-27,"","",0,2013-04-27 07:14,"","",1132200,"",Git master,"having a controller action wich receives a valueobject by get arguments:
&myValueObject['__identity']=abcdef
this results in an exception: Creation not allowed?
the arguments are generated by <f:link.action ... arguments=""{myValueObject:myValueObject}"">
if it is an entity anything works as expected."
47669,TYPO3.Fluid,Task,"",New,Should have,FormViewHelper does not define the default request method,Alexander Berl,"",2013-04-28 10:39,"","",2013-04-28,"","",0,2013-04-28 10:39,"","",1133700,"","","Currently, the default value for the FormViewHelper attribute _""method""_ is *NULL*, resulting in the output form attribute value _""post""_. This could possibly lead to strange behaviour in the code when checking for the method attribute value (*NULL* will actually evaluate to *TRUE* for both checking if _method_ !== 'get' and _method_ !== 'post') and also contradicts the HTML specification for forms, which sets the *default method* to *""get""*:

see http://www.w3.org/TR/html401/interact/forms.html#h-17.3 and http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#attr-fs-method

This is a concern especially since the *CSRF* change, which only appends the token on non-GET method and validating the output in the Viewhelpertest package.

I hence suggest setting the *default value* for the method attribute to *'get'* - *or* if a breaking change is to be avoided at least set it do *'post'*."
47674,TYPO3.Fluid,Bug,"",Resolved,Should have,HtmlentitiesViewHelper is scope singleton,Alexander Berl,Alexander Berl,2014-08-26 11:03,ViewHelpers,2.0.1,2013-04-28,"","",100,2013-04-28 14:43,"","",1133950,"",Git master,"The HtmlentitiesViewHelper currently is scoped singleton, why all other format ViewHelpers are of scope prototype. This leads to weird behaviour when using the ViewHelper multiple times within one template and a partial. See the related bug for more information."
47675,TYPO3.Flow,Bug,"",Resolved,Should have,PSR-0 compatible classes using underscore cannot be loaded,Karsten Dambekalns,Karsten Dambekalns,2013-05-01 06:37,Core,2.0,2013-04-28,"","",100,2013-04-28 15:41,"","",1134000,"",Flow 2.0.0 beta 2,"PSR-0 mandates that backslashes *and* underscores be translated to directory separators when loading classes. This is not done in our ClassLoader, thus packages that otherwise are compatible (composer / PSR-0) are not usable."
47725,TYPO3.Flow,Bug,"",Resolved,Could have,BCrypt hashing should support migration of older costs,Christopher Hlubek,Christopher Hlubek,2014-07-11 14:19,Security,2.0.1,2013-04-30,"","",100,2013-04-30 05:24,"","",1136450,"",Git master,"In the current implementation of the @BCryptHashingStrategy@ a password is hashed with @crypt@ and the hash contains the algorithm and parameters with the salt that was used to hash the password.

During validation only the salt is taken from the hashed password, so the cost parameter has to match the original cost. This is very problematic if the cost needs to be changed during the lifetime of a project. A high cost means slow logins but more securely hashed passwords.

The hashing strategy should be able to validate an existing hash with a different cost for migration of password hashes and updates to the cost parameter during the lifetime of a project (with hardware improvements the hashing will always get cheaper during time)."
47776,TYPO3.Flow,Bug,"",Closed,Must have,Configuration is no longer correctly Merged from the various Packages,Benno Weinzierl,"",2013-05-01 06:38,Configuration,2.0,2013-05-01,"","",0,2013-05-01 02:29,"","",1139000,"",Git master,"I Noticed that since some recent change my policy yaml is completely empty. Some other Configuration Parts are missing also.

After some debugging i found out that this is due to a bug in the ConfigurationManager (Around Line 382). The configuration gets merged package by package with Arrays::arrayMergeRecursiveOverrule() which has $emptyValuesOverride = TRUE per default.

<pre>
foreach ($packages as $package) {
					$this->configurations[$configurationType] = Arrays::arrayMergeRecursiveOverrule($this->configurations[$configurationType], $this->loadPolicyConfigurationFile($package->getConfigurationPath() . $configurationType, $package), FALSE, FALSE);
				}
</pre>

The Flag $emptyValuesOverride = TRUE leads to My Policy configuration beeing overwritten by later merged packages."
47808,TYPO3 Flow Base Distribution,Task,"",Resolved,Must have,Tweak package dependencies,Karsten Dambekalns,Karsten Dambekalns,2013-08-02 05:18,"",2.0,2013-05-02,"","",100,2013-05-02 04:10,"","",1140600,"","","The package dependencies need to be tweaked so that

* tagged releases are used where possible
* the beta does no longer need minimum-stability: dev
* useless dependencies are removed"
47809,TYPO3.Flow,Bug,"",Resolved,Should have,Access to undefined index when an inheritance chain member is not an Entity,Adrian Föder,Adrian Föder,2014-07-11 14:19,Reflection,2.0.1,2013-05-02,"","",100,2013-05-02 04:24,"","",1140650,"",Git master,"It comes to an exception like this,

<pre>
#1355480641: Uncaught Exception Notice: Undefined index: TYPO3\Media\Domain\Model\ImageVariant in Packages\Framework\TYPO3.Flow\Classes\TYPO3\Flow\Reflection\ReflectionService.php line 1461
</pre>

This is because of these lines,
<pre><code class=""php"">
	protected function makeChildClassesAggregateRoot(\TYPO3\Flow\Reflection\ClassSchema $classSchema) {
		foreach ($this->getAllSubClassNamesForClass($classSchema->getClassName()) as $childClassName) {
			if ($this->classSchemata[$childClassName]->isAggregateRoot()) {
				continue;
</code></pre>

In the given case, the ImageVariant inheritance looks like the following:

<pre>
Asset (@Entity)
  - SizedAsset (@Entity)
    - ImageVariant (NOT an @Entity!)
</pre>

The above mentioned method searches in ->classSchemata for the ImageVariant, but as of convention, classSchemata is ""Schemata of all classes which can be persisted"", so ImageVariant is not there of course, leading to the exception."
47818,TYPO3.Welcome,Bug,"",New,Must have,Wrong link on Welcome screen,Rafael Kähm,"",2013-05-02 06:01,"","",2013-05-02,"","",0,2013-05-02 06:01,"","",1141100,"",Git master,"There are ""Known issues"" and ""Report a bug"" wrong."
47858,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Remove .htaccess from Composer Installer Essentials,Christopher Hlubek,Christopher Hlubek,2013-08-14 09:35,Package,2.0.1,2013-05-03,"","",0,2013-05-03 03:48,"","",1143100,"",Git master,"It's very hard to tweak @mod_rewrite@ rules if the @.htaccess@ file is not under control of the user. It's a little bit harder to update the file to a new version, but now it's impossible to provide a custom @.htaccess@ with a default deployment without any workarounds.

Also to tweak the @.htaccess@ rules we should stop rewriting if URLs for @/apple-touch-icon-*.png@ are requested, since this will clutter the log and should be treated like the @favicon.ico@ file."
47859,TYPO3.Flow,Task,"",Accepted,Should have,Logging: Do not log all decisions in \TYPO3\Flow\Security\Aspect\LoggingAspect,Christopher Hlubek,Robert Lemke,2013-08-14 10:10,Security,"",2013-05-03,"","",0,2013-05-03 05:38,"","",1143150,"","",Logging all decisions for @decideOnJoinPoint()@ and @decideOnResource()@ is way to much if these decisions are used conditionally (e.g. for the UI). This could end up with a lot of log entries (and of course some overhead).
47948,TYPO3.Flow,Feature,"",Closed,Should have,support for resource references,Alex no-lastname-given,"",2013-05-21 05:54,Resource,"",2013-05-05,"","",0,2013-05-05 10:28,"","",1147600,"","","It is not always suitable to download and import external resources, which are for example accessible over http: Large video collections are normally located on different servers. Another example is the reference of research publications which are already accessible over an persistent uri.

""It is important to completely ignore the fact that resources are stored as files somewhere in TYPO3 Flow's directory structure ? you should only deal with resource objects.""
Following this note of the documentation, i would suggest, to completely ignore the fact where resources are stored (including remote files)."
47950,TYPO3.Flow,Bug,"",New,Should have,import of remote resources,Alex no-lastname-given,"",2013-05-21 05:52,Resource,2.0.1,2013-05-05,"","",0,2013-05-05 10:36,"","",1147700,"",Flow 2.0.0 beta 2,"ResourceManager::importResource($uri) allows the import of resources from a supplied url. The import fails, if an url with get-parameter is supplied, because pathinfo() do not parse this url correctly.

e.g.
works fine: http://forge.typo3.org/images/headerimages/16.jpg
import fails: http://forge.typo3.org/images/headerimages/16.jpg?sampleParameter=sampleValue"
47951,TYPO3.Flow,Feature,"",New,Should have,Warn if persistence stack is not empty at the end of a get-request,Alex no-lastname-given,"",2013-05-21 07:28,Persistence,"",2013-05-05,"","",0,2013-05-05 10:44,"","",1147750,"","","Because the flow framework follows a rfc-standard, persistanceManager::persistAll() is not executed automatically for a get request. The framework should at least throws an exception if the persistance stack is not empty at the end of a get request."
47968,TYPO3.Fluid,Bug,"",Resolved,Could have,Resource Interceptor should declare objectManager that it is using,Christian Müller,Christian Müller,2013-06-24 05:37,"",2.0,2013-05-06,"","",100,2013-05-06 03:05,"","",1148550,"",(any),The Resource Interceptor uses an injected objectManager that it doesn't declare as property.
47975,TYPO3.Flow,Bug,"",Resolved,Must have,initializeObject in a Entity is called at a time where no properties are loaded,Benno Weinzierl,Robert Lemke,2014-07-11 14:19,Object,2.0.1,2013-05-06,"","",0,2013-05-06 05:52,"","",1148900,"",Git master,"I have an Entity which is loaded during validation of a Action Argument. (The Action Argument is another Entity with relations to the Entity in question)

When initializeObject() is called all properties are missing and have not been loaded from persistence.

Here is the Backtrace:
https://gist.github.com/anonymous/5524256



"
47995,TYPO3.Flow,Bug,"",Closed,Should have,The method hasRole() in TYPO3/Flow/Security/Account is currently broken,Dominique Feyer,Dominique Feyer,2013-05-08 06:33,"","",2013-05-06,"","",0,2013-05-06 14:51,"","",1149900,"",Git 2.0,"Currently this code always return FALSE:

<pre>
$account->hasRole(new \TYPO3\Flow\Security\Policy\Role('Your.Package:Role')
</pre>

The hasRole method use the contains method from Doctrine ArrayCollection. Has the two object are different (even is they have the same identifier), the method return FALSE.

I propose to change this method by the same feature found in the SecurityContext hasRole method (who compore the identifer, and the full object)."
48028,TYPO3.Kickstart,Bug,"",Resolved,Should have,"Kickstarter creates ""delete links""",Bastian Waidelich,Bastian Waidelich,2013-06-25 04:36,"",2.0,2013-05-07,"","",100,2013-05-07 13:50,"","",1151500,"",Git master,"The kickstarter still creates a ""nasty delete link"" in the generated Index.html.
Those don't work any longer (see #47252)."
48030,TYPO3.Kickstart,Bug,"",Resolved,Should have,Kickstarter creates superfluous code,Bastian Waidelich,Bastian Waidelich,2013-06-24 07:37,"",2.0,2013-05-07,"","",100,2013-05-07 13:56,"","",1151600,"",Git master,The kickstarter creates a lot of code that is not needed (especially redundant doc comments)
48083,TYPO3 Flow Base Distribution,Bug,"",Closed,Must have,AbstractCompositeValidator validatedInstancesContainer grows continuosly,Tarcisio Fedrizzi,"",2013-05-10 04:27,"","",2013-05-09,"","",0,2013-05-09 05:01,"","",1154200,"",(any),"Hi,
there is a problem in the way AbstractCompositeValidators passes the validatedInstacesContainer to its children.

The code of the addValidator method says:
<pre>
  98         public function addValidator(\TYPO3\Flow\Validation\Validator\ValidatorInterface $validator) {
  99                 if ($validator instanceof ObjectValidatorInterface) {
 100                         $validator->setValidatedInstancesContainer = $this->validatedInstancesContainer;
 101                 }
 102                 $this->validators->attach($validator);
 103         }
</pre>
this is wrong because it overwrites the setValidatedInstancesContainer method of the attached validators. Moreover the code doesn't pass the validatedInstancesContainer down to the validators it contains. This causes the contained validators to create their personal instance of validatedInstancesContainer that keeps growing. This renders impossible to work on big collections of objects due to excessive memory consumption.

In the attached patch I moved the correct version of this code to the validate methods of ConjuntionValidator and DisjunctionValidator. I think that it would be safe to pass the validatedInstancesContainer in the setValidatedInstancesContainer of AbstractCompositeValidators. However given that the resolution of validator could be made more dynamic I preferred calling the setValidatedInstancesContainer just before the validation of CompositeValidators children in the validate method.

Regards,
Tarcisio Fedrizzi."
48093,TYPO3.Flow,Bug,"",New,Must have,AbstractCompositeValidators memory consumption continuously grow,Tarcisio Fedrizzi,"",2013-05-21 05:49,Validation,2.0.1,2013-05-09,"","",0,2013-05-09 11:52,"","",1154700,"",(any),"Hi,
there is a problem in the way AbstractCompositeValidators passes the validatedInstacesContainer to its children.

The code of the addValidator method says:
<pre>
  98         public function addValidator(\TYPO3\Flow\Validation\Validator\ValidatorInterface $validator) {
  99                 if ($validator instanceof ObjectValidatorInterface) {
 100                         $validator->setValidatedInstancesContainer = $this->validatedInstancesContainer;
 101                 }
 102                 $this->validators->attach($validator);
 103         }
</pre>

this is wrong because it overwrites the setValidatedInstancesContainer method of the attached validators. Moreover the code doesn't pass the validatedInstancesContainer down to the validators it contains. This causes the contained validators to create their personal instance of validatedInstancesContainer that keeps growing. This renders impossible to work on big collections of objects due to excessive memory consumption.

In the attached patch I moved the correct version of this code to the validate methods of ConjuntionValidator and DisjunctionValidator. I think that it would be safe to pass the validatedInstancesContainer in the setValidatedInstancesContainer of AbstractCompositeValidators. However given that the resolution of validator could be made more dynamic I preferred calling the setValidatedInstancesContainer just before the validation of CompositeValidators children in the validate method.

Regards,
Tarcisio Fedrizzi."
48121,TYPO3.Fluid,Bug,"",Resolved,Should have,TextareaViewHelper is missing valid html5 argument placeholder ...,Helmut Hummel,"",2013-06-05 06:06,ViewHelpers,2.0,2013-05-12,"","",100,2013-05-12 17:00,"","",1156100,"",Flow 2.0.0 beta 2,"TextareaViewHelper is missing valid html5 argument placeholder ...

Using 

<pre>
			<f:form.textfield id=""powermail_field_{field.marker}"" placeholder=""{field.title -> vh:string.RawAndRemoveXss()}"" name=""field[{field.uid}]"" value=""{vh:Misc.PrefillField(field: '{field}')}"" class=""powermail_field powermail_input {vh:Misc.ValidationClass(field: '{field}')} {vh:Misc.ErrorClass(field: '{field}', class: 'powermail_field_error')}"" required=""{field.mandatory}"" />

</pre>

with the attribute placeholder causes the exception http://typo3.org/go/exception/v4/1237823695 , what means, that the argument placeholder is not allowed."
48133,TYPO3.Flow,Bug,"",Resolved,Should have,Bug in set file permissions script,Berit Hlubek,"",2013-05-27 06:37,Command,2.0,2013-05-13,"","",100,2013-05-13 06:53,"","",1156700,"",Git master,"When I install the TYPO3Neos demo package the set file permission command doesn't work.
On the lines 55-58 the @search@ ACL is missing. After adding those the script works out fine."
48148,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Allow PropertyMapping of strings to arrays,Christian Müller,Christian Müller,2013-09-03 10:35,"","",2013-05-13,"","",100,2013-05-13 09:56,"","",1157450,"","","Primary usecase is empty string to empty array for ajax generated options where ""nothing"" is also possible, but comma delimited strings could also happen with certain UI elements."
48150,TYPO3.Flow,Task,"",Rejected,Should have,removeAll in a doctrine repository should use DQL for speed,Christian Müller,Christian Müller,2013-08-14 11:42,Persistence,"",2013-05-13,"","",0,2013-05-13 11:38,"","",1157550,"","",""
48167,TYPO3.Flow,Feature,Work Package #47905: Perfection the Party and Account Management Module,Accepted,Should have,Command line account and role browsing,Adrian Föder,Adrian Föder,2013-05-21 07:28,Security,"",2013-05-14,"","",0,2013-05-14 03:14,"","",1158400,"","","In order to see what accounts and roles are known to the system, a command line tool should be provided."
48218,TYPO3.Fluid,Feature,"",Resolved,Should have,Make NumberViewHelper regard locale like CurrencyViewHelper does.,Alexander Berl,Alexander Berl,2014-07-11 14:39,ViewHelpers,"",2013-05-15,"","",100,2013-05-15 08:24,"","",1160900,"","","Currently the NumberViewHelper doesn't regard the locale, but the CurrencyViewHelper (and DateViewHelper) does.
Those ViewHelpers should be put in line with each other regarding Locale awareness."
48231,TYPO3.Flow,Bug,"",Resolved,Should have,Ignoring of inheritance type in FlowAnnotationDriver no longer works,Karsten Dambekalns,Karsten Dambekalns,2013-08-14 09:45,Persistence,2.0,2013-05-16,"","",100,2013-05-15 19:09,"","",1161550,"",Flow 2.0.0 beta 2,"Due to weird circumstances the tests for the FlowAnnotationDriver were skipped for a while, and change Ie6e46efa858a651b2f1fe4b08d78039249504dea broke the functionality to disable inheritance of no subclasses exist for a class annotated with an @InheritanceType@ annotation."
48251,TYPO3.Flow,Task,"",Resolved,Could have,Documentation for translated validation messages is missing,Alexander Berl,Alexander Berl,2013-08-05 05:35,- Documentation -,2.0,2013-05-16,"","",100,2013-05-16 05:43,"","",1162550,"","","Currently, there is no documentation available other than the comment in http://forge.typo3.org/issues/33970 on how to properly set up translation for validation messages."
48254,TYPO3.Flow,Task,"",Resolved,Could have,Add german translations for bundled validation error messages,Alexander Berl,"",2013-08-05 05:35,Validation,2.0,2013-05-16,"","",100,2013-05-16 06:39,"","",1162700,"","",Add the german translations for the validation error messages
48290,TYPO3.Flow,Bug,"",Resolved,Could have,Browser must not directly handle cookie,Dominique Feyer,"",2014-03-19 08:38,"",2.0.1,2013-05-16,"","",100,2013-05-16 11:02,"","",1164400,"",Git master,"Currently the Browser class has a property cookies (not used), and use a wrong signature for the method Request::create (line 100). I think this property can be removed."
48296,TYPO3.Flow,Task,"",Needs Feedback,Should have,Missing method in ExceptionHandlerInterface,Marco Falkenberg,"",2013-05-21 05:39,"","",2013-05-16,"","",0,2013-05-16 11:15,"","",1164700,"","",While only implementing the ExceptionHandlerInterface the booting script fails because it tries to inject the system logger in line 177. 
48355,TYPO3.Fluid,Feature,"",New,Could have,Assign output of viewhelper to template variable for further processing.,Dave no-lastname-given,"",2013-07-06 12:05,"","",2013-05-17,"","",0,2013-05-17 11:28,"","",1167600,"","","It would be nice if it was possible to ""assign"" the output of a viewhelper to a template variable with an assign attribute for usage elsewhere in the template. When assign is set the output of the viewhelper is suppressed.

For example the template:
<pre>

<f:format.date format=""d.m.Y - H:i:s"" assign=""myDate"">\@{your_timestamp}</f:format.date>
<p>Here is my date: {myDate}</p>
<p>Here is again my date: {myDate}</p>

</pre>

Would output:
<pre>

Here is my date: 1.1.2013 - 12:00:00
Here is again my date: 1.1.2013 - 12:00:00

</pre>

I know <f:alias> exists but the kind of assignment I am suggesting would by faster to parse by not having to call the viewhelper multiple times to output the same value.

The ""assign"" should be a universal attribute to all Viewhelpers. 

Then you can do things also like this:
<pre>

<f:for each=""{myCollection}"" as=""collectionItem"" assign=""myList"">
  <f:render partial=""Some/Item""  />
</f:for>

<div class=""top list"">{myList}</div>
<div class=""content"">{myOtherContent}</div>
<div class=""bottom list"">{myList}</div>

</pre>

The advantages I think is clear when applied to looped elements. You don't have to process the same content twice or more.

"
48409,TYPO3.Flow,Feature,"",New,Could have,"Introduce new Annotation ""Slot"" for wiring signal and slots",Philipp Maier,"",2013-05-23 13:02,SignalSlot,"",2013-05-21,"","",0,2013-05-21 06:31,"","",1170300,"","","With this, the manual wiring in the Package.php could be left out so instead of doing this:
<pre>
$dispatcher = $bootstrap->getSignalSlotDispatcher();
$dispatcher->connect(
    'Some\Package\Controller\CommentController', 'commentCreated', //signal
    'Some\Package\Service\Notification', 'sendNewCommentNotification' // slot
);
</pre>

one could easily add the Slot configuration to the respective function in the Class:

<pre>
/**
 * @Flow\Slot('Some\Package\Controller\CommentController', 'commentCreated')
 * @param Comment $comment
 * @return void
 */
public function sendNewCommentNotification(Comment $comment) { ...
</pre>

Future implementations could even allow Pointcut Expressions for e. g. Domain Events <code>@Flow\Slot(""class(Some\Package\Domain\Event\SomeEvent)"")</code>

Christian Müller however pointed out that this idea has been dropped in the past for a reason he couldn't remember.
So if anyone knows why this is a bad idea, let me know. If nothing speaks against implementing this: This is more of a ""Flow-like"" API imho."
48419,TYPO3.Flow,Feature,"",Closed,Could have,Create a way to assign roles to a command controller,Henrik Møller Rasmussen,Bastian Waidelich,2014-12-18 11:41,Security,"",2013-05-21,"","",0,2013-05-21 14:04,"","",1170800,"","","Create a way to assign roles to a command controller, so access to some services or methods could be allowed for a command controller, and not anyone else.

"
48429,TYPO3.Flow,Bug,"",New,Should have,Remove- and update-actions on repository are not persisted,Mathis Hoffmann,"",2013-05-24 12:44,"","",2013-05-22,"","",0,2013-05-21 18:32,"","",1171300,"",Git master,"Updating and removing models on/from a repository fail without any error message, when persistenceManager->persistAll() is not explicitly called."
48430,TYPO3.Flow,Bug,"",New,Should have,Default validator-messages are not correctly formatted,Mathis Hoffmann,"",2013-05-21 18:36,"","",2013-05-22,"","",0,2013-05-21 18:36,"","",1171350,"",Git master,"For example I get: ""This text may not exceed %1$d characters."". The validator-annotion in this case has been ""@Flow\Validate (type=""StringLength"", options={""maximum""=15})""."
48532,TYPO3.Flow,Bug,"",Under Review,Should have,JsonView Configuration behaves differently for arrays and objects,Alexander Berl,Alexander Berl,2014-06-11 09:53,MVC,"",2013-05-25,"","",0,2013-05-25 10:09,"","",1176400,"",Git master,"Currently, the behavior for the JsonView configuration is completely different for arrays and objects, which makes configuring anything other than a simple one-level hierarchy output very hard.
See http://lists.typo3.org/pipermail/flow/2013-May/003846.html for more information.

I therefore suggest the following change to the JsonView Configuration:

- arrays and objects should be configured equally apart from the object identifier/class name options
- _only and _exclude should always take precedence and act as a whitelist/blacklist
- _descendAll should also work for objects
- simple type properties/elements should be serialized directly in both cases
- _descend should configure all other array/object properties/elements

If _descend should still act as a second level whitelist, so that all array/object values not configured there are skipped is debatable - it would be more like the current implementation, though from a user POV it is a little bit misleading as to what the difference of _only vs _descend would be.

This would lead to following breaking behaviors:

- arrays are no longer fully evaluated by default (_descend acts as whitelist) or objects are fully evaluated by default (_descend does not whitelist but only sets configuration for subvalues)
- arrays are no longer evaluated deeply by default and need explicit _descendAll configuration for each level


"
48551,TYPO3.Flow,Bug,"",Resolved,Must have,Doctrine semantical error ,Jesper Paardekooper,"",2013-06-24 18:35,Core,2.0,2013-05-26,"","",100,2013-05-26 12:17,"","",1177350,"",Git master,"I have a signal&slots implementation for failed login attempts. A repository adds a new Event model everytime this happens.

In Development context this works fine, in *Production context it doesn't*.

When extending the standard Flow repository, the error is:

<pre>
Uncaught exception #1337934455 in line 79 of Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Persistence/Repository.php: Could not add object of type ""My\App\Domain\Model\Log\Event""
</pre>

When extending the doctrine repository, the following exception is thrown: 

<pre>
Uncaught exception in line 640 of Packages/Libraries/doctrine/annotations/lib/Doctrine/Common/Annotations/DocParser.php: [Semantical Error] The annotation ""@\TYPO3\Flow\Annotations\Entity"" in class My\App\Domain\Model\Log\Event does not exist, or could not be auto-loaded
</pre>

When debugging the exception the Flow repository throws, it eventually throws the same exception as the doctrine one.

I've tested this on both the current Git master and the beta 3 tag. 

Other events that use the same code do work and my model does ofcourse have the correct annotations and use statements."
48557,TYPO3.Flow,Bug,"",Resolved,Should have,Typo in AbstractAuthenticationController::getErrorFlashMessage(),Philipp Maier,Philipp Maier,2013-08-05 05:35,"","",2013-05-27,"","",100,2013-05-27 04:36,"","",1177650,"",Git master,"<pre>
Note: If you implement a nice redirect in the onAuthenticationFailed()
</pre>

should be

<pre>
Note: If you implement a nice redirect in the onAuthenticationFailure()
</pre>"
48596,TYPO3.Flow,Bug,"",Under Review,Should have,IgnoredTags configuration should be easier to configure from packages,Alexander Berl,Alexander Berl,2015-02-14 07:00,Configuration,"",2013-05-28,"","",0,2013-05-28 06:36,"","",1179600,"",Git master,"Currently packages can not easily add new tags to the TYPO3.Flow.reflection.ignoredTags list, as they always need to provide a full list.
Changing the configuration merging behavior is not a good way, hence the configuration type of ignoredTags option should be changed from array to dictionary with the tags as key. This will allow easy adding of ignored tags from packages and un-ignoring tags also.

See discussion in https://review.typo3.org/#/c/20773/ and http://forge.typo3.org/issues/43587 for more information.
"
48615,TYPO3.Flow,Task,"",Resolved,Should have,Extract MediaType handling from HTTP request,Bastian Waidelich,Bastian Waidelich,2013-07-10 06:37,Http,"",2013-05-28,"","",100,2013-05-28 11:06,"","",1180550,"","","Currently the HTTP Request contains several methods interacting with media types (aka MIME types).
We should extract those to the MediaTypes utility class to purge the request class and to make media type handling easier reusable for other components"
48657,TYPO3.Flow,Feature,"",Under Review,Should have,support HTTP_RANGE,Simon Schaufelberger,"",2013-06-20 10:19,"","",2013-05-29,"","",0,2013-05-29 16:08,"","",1182650,"","","Flow has a great HTTP API already but does not yet support HTTP_RANGE which is often/always used on mobile devices. It would be great to serve huge download files with HTTP_RANGE.

See: http://mobiforge.com/developing/story/content-delivery-mobile-devices
""Appendix A: Streaming for Apple iPhone"" but note that there are some little errors in that snippet."
48763,TYPO3.Kickstart,Bug,"",Resolved,Must have,kickstarter creates not valid code,Simon Schaufelberger,"",2014-08-22 04:04,"","",2013-06-02,"","",100,2013-06-01 19:34,"","",1187950,"",(any),"i just wanted to create a class named ""List"" which was possible but then the next action crashed with an exeption since you cannot create a class named ""List"".

I found out that you cannot use those key words:
http://www.php.net/manual/en/reserved.keywords.php
so i would suggest to write a validator, that checks if a keyword is used when creating a new class via the command line."
48856,TYPO3.Fluid,Bug,"",Resolved,Should have,Case ViewHelper usage not correct in example,Wouter Wolters,"",2013-06-05 05:36,"","",2013-06-04,"","",100,2013-06-04 16:19,"","",1192600,"",Git master,Case ViewHelper usage not correct in example
48862,TYPO3.Flow,Feature,"",New,Should have,Possibility to exclude package from file monitoring,Pankaj Lele,"",2013-06-05 04:03,Monitor,"",2013-06-05,"","",0,2013-06-05 04:03,"","",1192900,"","","We wanted to integrate the phpoffice/phpexcel package using composer. https://packagist.org/packages/phpoffice/phpexcel 

After composer requiring it we faced error ""PHPExcel_Shared_PCLZip_pclzip.lib"" is not a valid cache entry identifier. "" when trying to access Flow anyway CLI/Web. 

Then we tried to exclude all classes from this package using the Flow setting TYPO3.Flow.object.excludeClasses but this did not help.

After further digging I came to know that file monitoring is not excluding files from this package so I think exclude from file monitoring can be helpful setting to integrate third party packages and Flow do not care about those packages. 

As a workaround we made the package inactive by *manually* editing the Configuration/PackageStates.php"
48870,TYPO3.Fluid,Task,"",Rejected,Won't have this time,`required` attribute not supported in Textarea- and PasswordViewHelpers,Adrian Föder,Adrian Föder,2013-06-05 06:40,ViewHelpers,2.1,2013-06-05,"","",80,2013-06-05 06:18,"","",1193300,"","",HTML5's @required@ attribute is not immediately supported in the TextareaViewHelper and PasswordViewHelper (see http://www.w3.org/TR/html-markup/textarea.html#textarea.attrs.required and http://www.w3.org/TR/html-markup/input.password.html#input.password.attrs.required)
48873,TYPO3.Flow,Bug,"",New,Should have,Error when calling resourceManager->deleteResource on unpublished Resource,Bernd Helbig,"",2013-06-05 07:46,- Error Handler Report -,"",2013-06-05,"","",0,2013-06-05 07:46,"","",1193450,"",Flow 2.0.0 beta 2,"<pre>
$fileResource = $this->resourceManager->importUploadedResource($fileUpload);
//extracting info here, works fine
$this->resourceManager->deleteResource($fileResource);
</pre>

This currently causes:

Warning: Invalid argument supplied for foreach() in /flow/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Resource_Publishing_FileSystemPublishingTarget.php line 158

No big deal breaker, since one can delete the file manually using the same code as is inside deleteResource(), skipping the whole unpublish part, but should be fixed in any case."
48887,TYPO3.Flow,Bug,"",Resolved,Must have,Support numeric identifiers in IdentityRoutePart,Christopher Hlubek,Bastian Waidelich,2015-04-26 13:30,MVC - Routing,"",2013-06-05,"","",100,2013-06-05 09:55,"","",1194100,"",Git 2.0,In @\TYPO3\Flow\Mvc\Routing\ObjectPathMappingRepository::findOneByObjectTypeUriPatternAndIdentifier@ the identifier of an object is checked to be exactly of type @string@. This should be changed to check for simple types that can be coerced to a string. Basically we need to support numeric values additionally to strings here.
48898,TYPO3.Flow,Bug,"",New,Must have,"configuration for roles fails if one of Policy.yaml files contain empty ""roles array""",Rafael Kähm,Christian Müller,2013-06-05 13:06,Security,2.0.1,2013-06-05,"","",0,2013-06-05 13:06,"","",1194650,"",Git master,"If some package has Policy.yaml with empty _roles:_ 
like this
<pre><code class=""yaml"">
roles:
#  Test: []
#  this is last line of this yaml
</code></pre>then drains this package the array with roles empty.


\TYPO3\Flow\Configuration\ConfigurationManager::loadConfiguration() @row 382 Arrays::arrayMergeRecursiveOverrule() merges all rolles defined in all Policy.yaml files in $configurations['roles'] array.
and
Arrays::arrayMergeRecursiveOverrule() overrides per default full array with empty array.
@param boolean $emptyValuesOverride If set (which is the default), values from $secondArray will overrule if they are empty (according to PHP's empty() function)

"
48951,TYPO3.Flow,Bug,"",Resolved,Should have,Document all needed AllowOverride settings for Apache,Christian Müller,Christian Müller,2013-06-24 17:36,- Documentation -,2.0,2013-06-07,"","",100,2013-06-07 10:37,"","",1197200,"",(any),Misses Options=MultiViews
48977,TYPO3.Fluid,Bug,"",Closed,Must have,f:link.action ignores controller with backslashes,Simon Schaufelberger,Bastian Waidelich,2013-06-10 09:41,ViewHelpers,"",2013-06-10,"","",0,2013-06-09 20:06,"","",1198500,"",(any),"I have a neos backend module and want to link to another controller. The controller is not straight under the controller folder but under Controller/Module/MyModule/.

I tried linking to MyController like that:

<pre>
<f:link.action action=""index"" controller=""Module\Module\MyController"" class=""btn neos-button"">
</pre>

but it just doesnt work.

I found an existing ""example"" for this:

<pre>
<f:link.action package=""TYPO3.Neos"" controller=""Backend\Backend"" action=""index"">Content</f:link.action>
</pre>

under \Packages\Application\TYPO3.Neos\Resources\Private\Templates\Backend\Content\Container.html

but that is also not working.

I don't know if this has ever worked or not so i don't know if its possible to trace it back to a working state."
49007,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Flows doctrine implementation creates too long identifiers for databases with maxIdentifierLengeth < 31,Christian Müller,Christian Müller,2013-06-24 08:38,"","",2013-06-10,"","",100,2013-06-10 12:50,"","",1200000,"",(any),""
49011,TYPO3.Flow,Bug,"",Under Review,Should have,Support executing TYPO3.Flow inside a PHAR,Marc Neuhaus,"",2014-10-03 09:21,"","",2013-06-10,"","",0,2013-06-10 15:05,"","",1200200,"",Git master,"Currently it's not really possible to create an executable phar from a
TYPO3.Flow distribution because of the caches and some failing
path evaluations.

"
49016,TYPO3.Flow,Task,Task #51183: CLI improvements,Resolved,Should have,Use Symfony.Console for Output + Interaction in CommandController,Marc Neuhaus,"",2014-06-12 06:36,"","",2013-06-11,"","",100,2013-06-11 03:28,"","",1200450,"","","I think we should make use of the Smfony.Console component for output and interaction. It offers anything someone writing a command might wish for:

- easy output coloring through ""<error>Warning!</error>""
- TableHelper to render a formatted table
- ProgressHelper to render and advance and progress bar
- DialogHelper with numerous types of questions like: select, ask, confirm, askHidden, etc

I already tested to use it inside an ActionController yesterday, which worked quite easily.

Another thing i testet yesterday was, to ask the user for missing arguments instead of failing with ""Required argument ""foo"" is not set."":

<pre>
./flow kickstart:model              
Please specify the required argument ""packageKey"": My.Package
Please specify the required argument ""modelName"": 
</pre>

This change would add a dependency for Symfony/Console, but in most cases it is there already because Doctrine depends on it. "
49021,TYPO3.Flow,Bug,"",Resolved,Must have,Session garbage collection is non functional,Robert Lemke,Robert Lemke,2013-06-11 08:35,Session,2.0,2013-06-11,"","",100,2013-06-11 05:28,"","",1200700,"",Flow 2.0.0 beta 2,"In the current state of Flow, expired sessions are not correctly removed from the session storage cache - the Garbage Collection is triggered, but the session info entries remain in the cache directory. This results in hundreds and thousands of cache entries after a while."
49025,TYPO3.Flow,Task,Story #42408: Locale Detection / Selection,Under Review,Could have,Dynamic locale detection / determination,Adrian Föder,Adrian Föder,2013-12-28 04:48,I18n,2.1,2013-06-11,"","",0,2013-06-11 07:31,"","",1200900,"","","This provides a way of detecting an appropriate
Locale to use for each request. Shipped with Flow
are two DetectionStrategies, Cookie and HttpAcceptHeader,
which will try to determine a Locale from these sources.
The Cookie's default name is assumed @locale@, but
can be set to a different one via Object.yaml.

If a DetectionStrategy can not reliably determine a 
Locale, it returns NULL in order to abstain, and the
next Strategy in the configured chain is evaluated.
If eventually none matches, no concrete ``currentLocale``
will be set, hence falling back to the ``defaultLocale``.

Setting a Locale chain would look like::
<pre><code class=""yaml"">
	TYPO3:
	  Flow:
	    i18n:
	      detectionChain: ['Cookie', 'AcceptLanguageHeader']
</code></pre>
The array values can also be set to a full qualified class name
which must implement \TYPO3\Flow\I18n\Detection\DetectionStrategyInterface.

(from the commit message)"
49038,TYPO3.Fluid,Bug,"",New,Must have,form.select does not select the first item if prependOptionValue is used,Axel Brand,"",2013-06-11 16:11,"","",2013-06-11,"","",0,2013-06-11 16:11,"","",1201550,"",FLOW3 1.1.0,"I habe a strange behaviour.

I use the f:form.select viewhelper like this:
<pre><f:form.select property=""myadata"" options=""{mydatas}"" optionLabelField=""name"" optionValueField=""uid"" sortByOptionLabel=""TRUE"" prependOptionLabel="""" /></pre>
Here the action:

# select first item
# save object => everything is fine
# edit object
# first item is NOT selected

If i try this with the second one or if i delete the _prependOptionLabel_ attribute, everything is running fine.

I hacked the view-helper-class @SelectViewHelper.php@ like this:

<pre>
protected function isSelected($value) {
 		$this->getSelectedValue();
		$selectedValue = $this->getSelectedValue();
		if ($value === $selectedValue || (string) $value === $selectedValue) {
			return TRUE;
		}
		if ($this->hasArgument('multiple')) {
			if (is_null($selectedValue) && $this->arguments['selectAllByDefault'] === TRUE) {
				return TRUE;
			} elseif (is_array($selectedValue) && in_array($value, $selectedValue)) {
				return TRUE;
			}
		}
		return FALSE;
	}
</pre>

The line 
<pre>$this->getSelectedValue();</pre>
is the trick.

"
49039,TYPO3.Flow,Feature,"",New,Could have,RFC: Use PSR-3 logger interface in Flow,Christopher Hlubek,"",2013-07-10 09:19,Log,"",2013-06-11,"","",0,2013-06-11 16:45,"","",1201600,"","","*Advantages:*

* Interoperability of Flow loggers with 3rd party libraries
* Usage of 3rd party loggers in Flow (e.g. @monolog@)

*Problems:*

* Signature of @Psr\Log\LoggerInterface->log@ is not compatible with @TYPO3\Flow\Log\LoggerInterface@

*Ideas:*

* 1: Create an Adapter class that decorates a Flow @LoggerInterface@ and implements a Psr @LoggerInterface@ to the outside
** This will ease the usage of 3rd party libraries that depend on @Psr\Log@ in Flow, could be implemented in a separate package
* 2: Create an Adapter class that decorates a Psr @LoggerInterface@ and implements a Flow @LoggerInterface@, deprecate the current Flow logger
** This is the path for a full transition to PSR-3 in Flow, could finally make something like a @TYPO3.Flow.Log@ package an optional dependency of Flow"
49050,TYPO3.Flow,Feature,"",New,Should have,Allow Subqueries in QueryInterface,Bernd Helbig,"",2013-06-12 04:43,Persistence,"",2013-06-12,"","",0,2013-06-12 04:43,"","",1202150,"","","Currently, subqueries are supported by doctrine, but not by flow. Fixing this should be easy.
This is how it should look like in the repository:
<pre>
$q = $this->createQuery();
$constraint = $q->matching('in', $otherQueryInterface);
</pre>

To allow this, simple add __toString() to QueryInterface.
Doctrine/Query can easily implement this with:
<pre>
$this->queryBuilder->__toString();
</pre>"
49128,TYPO3.Fluid,Feature,"",Resolved,Should have,ViewHelper to display file sizes,Bastian Waidelich,Bastian Waidelich,2013-06-14 09:35,ViewHelpers,"",2013-06-14,"","",100,2013-06-14 07:37,"","",1206050,"","",A ViewHelper that converts the size of a file to a human readable string
49143,TYPO3.Fluid,Bug,"",Resolved,Must have,Petabytes missing in VH f:format.bytes(),Stefan Neufeind,Stefan Neufeind,2013-06-21 09:36,ViewHelpers,"",2013-06-15,"","",100,2013-06-14 19:43,"","",1206800,"",Git master,"Peta (PB) is missing newly merged feature.

1000 	k 	kilo
1000^2 	M 	mega
1000^3 	G 	giga
1000^4 	T 	tera
1000^5 	P 	peta
1000^6 	E 	exa
1000^7 	Z 	zetta
1000^8 	Y 	yotta

(thanks go to Philipp Gampe for discovering this)"
49185,TYPO3.Flow,Feature,"",Resolved,Should have,Iterator support for Cache Frontends / Backends,Robert Lemke,Robert Lemke,2013-06-20 03:37,Cache,2.0,2013-06-17,"","",100,2013-06-17 06:16,"","",1208900,"","","In order to ""find all"" cache entries, we'd need some way to iterate over the entries. Thus implementing the Iterator interface in the cache frontends and backends would be quite convenient.

This feature is needed for the Session optimization patches."
49189,TYPO3.Flow,Bug,"",Resolved,Must have,Session storage has poor performance for hundreds of sessions,Robert Lemke,Robert Lemke,2013-06-20 03:37,Session,2.0,2013-06-17,"","",100,2013-06-17 06:55,"","",1209100,"",Git master,"If an application contains hundreds of simultaneous sessions, the garbage collection mechanism performs poorly which can eventually result in an unresponsive application.

The root cause for this is the way session entries are retrieved from the cache (in order to check if they need to be removed): in its current implementation, entries with meta information and those acting as storage entries reside in the same cache. Therefore, in order to iterate over the meta entries only, Flow needs to fetch cache entries by tag. Most cache backends will not be able to deliver cache entries by tags with a reasonable speed, thus the complexity for this operation is quite high.

The solution would be to split up caches into a meta cache and a storage cache. Given this, the session garbage collector would be able to iterate over all entries of the meta cache without having to use the find-by-tag mechanism."
49190,TYPO3.Flow,Feature,"",Resolved,Should have,Cap amount of entries removed by Session Garbage Collector,Robert Lemke,Robert Lemke,2013-06-20 03:37,Session,2.0,2013-06-17,"","",100,2013-06-17 06:59,"","",1209150,"","",The garbage collection for sessions should not try to remove an infinite amount of old entries but rather deal with only a certain amount of entries at a time.
49289,TYPO3.Flow,Bug,"",Resolved,Must have,Serialization error on WebRedirect with PHP 5.3,Christopher Hlubek,Christopher Hlubek,2014-07-11 14:19,"",2.0.1,2013-06-20,"","",100,2013-06-20 10:19,"","",1214050,"",Git 2.0,"With the plain serializer from PHP 5.3 there is a reproducible unserialize error when using a ""WebRedirect"" entry point for authentication.

It seems that recursive objects are not handled correctly in this PHP version (5.3.19) and the error is caused by serializing too much information in the session (the injected uriBuilder property of WebRedirect should never be serialized)."
49305,TYPO3.Fluid,Feature,"",Closed,Should have,Support for Data Attributes in tag-based ViewHelpers ,Marco Falkenberg,Bastian Waidelich,2013-06-21 05:27,ViewHelpers,"",2013-06-21,"","",0,2013-06-21 05:21,"","",1214850,"","","Adding Data Attributes to tag-based ViewHelpers via ""additionalAttributes"" is an exhausting task, because of the escaping and nesting stuff and so on.

<pre>
<f:link action=""doSomething"" data-role-tooltip=""{f:translate(id:'doSomething')}"">Do something!</f:link>
</pre>

vs.

<pre>
<f:link action=""doSomething"" additionlAttributes=""{data-role-tooltip: '{f:translate(id:\'doSomething\')}'}"">Do something!</f:link>
</pre>"
49344,TYPO3.Fluid,Feature,"",Closed,Should have, Allow template paths to use overlays,Anja Leichsenring,Bastian Waidelich,2013-10-14 04:30,View,"",2013-06-22,"","",0,2013-06-22 14:21,"","",1216800,"","","CMS Fluid is about to merge this feature from ext:view, could come in handy for Flow Fluid as well?

Find the patch at https://review.typo3.org/#/c/21580"
49370,TYPO3.Flow,Bug,"",Resolved,Should have,Exception in ProxyClassBuilder cannot be thrown because wrong exception message,Sebastian Kurfuerst,Sebastian Kurfuerst,2013-06-24 04:36,Object,2.0,2013-06-24,"","",100,2013-06-24 03:21,"","",1218100,"",Flow 2.0.0 beta 2,"This leads to weird exceptions such as:   

  Notice: Undefined variable: TYPO3\Flow\Command\ConfigurationCommandController
"
49372,TYPO3.Flow,Bug,"",New,Should have,ObjectConverter ignores implemented interface when mapping subtype,Andreas Wolf,"",2013-06-24 03:24,"","",2013-06-24,"","",0,2013-06-24 03:24,"","",1218200,"",Git 2.0,"When a method has a parameter that is annotated with an interface, the ObjectConverter cannot map classes implementing this interface to the parameter. The error message is 

  The given type ""MyPackage\Domain\Model\MyTerm"" is not a subtype of ""SynSystems\Contracts\Domain\Model\Term""

The reason is that the inheritance chain check in @getTargetTypeForSource()@ is only done for classes, but not for the interface."
49373,TYPO3.Flow,Bug,"",New,Must have,"Methods policy with key ""Controllers"" is ignored",Andreas Wolf,"",2013-06-24 04:03,Security,"",2013-06-24,"","",0,2013-06-24 04:03,"","",1218250,"",Git master,"I'm using the following Policy.yaml file:

<pre><code class=""yaml"">
roles:
  Administrator: [User]
  User: []

resources:
  methods:
    Controllers: 'method(SynSystems\Contracts\Controller\.*Controller->(?<!initialize).*Action())'

acls:
  Administrator:
    methods:
      Controllers: GRANT
</code></pre>

The ""Controllers"" ACL is silently ignored; as soon as I change it to ""ContractControllers"" (or some other name), it is suddenly used. There is no trace in the logs that parts of the Policy.yaml file are ignored.

I think silently ignoring parts of the Policy.yaml file is an absolute no-go; at least Flow should throw a warning if there is a naming clash with some internally used names."
49423,TYPO3.Flow,Bug,"",New,Must have,Role name and packageKey are not accessible,Rafael Kähm,"",2013-09-05 04:26,"","",2013-06-25,"","",0,2013-06-25 15:36,"","",1220750,"",Git master,"Properties name and packageKey for Role are not accessible, because setNameAndPackageKey() is not called.

Calling setNameAndPackageKey() in __construct() solves this. "
49503,TYPO3.Flow,Bug,"",Resolved,Must have,buildSubprocessCommand failed with multiple command arguments,Dominique Feyer,Dominique Feyer,2014-07-11 14:19,Cli,2.0.1,2013-06-28,"","",100,2013-06-28 17:28,"","",1224750,"",Git master,Just a little space is missing between the previous arguments and the next arguments
49522,TYPO3.Flow,Feature,"",Resolved,Should have,Add request patterns for IP and host name,Alexander Berl,Alexander Berl,2015-06-01 07:00,Security,"",2013-06-29,"","",100,2013-06-29 15:58,"","",1225650,"","","A very common scenario for authentication providers and firewall setups is to check for specific IPs/IP ranges or host names.
Hence Flow should ship with RequestPatterns for those cases."
49545,TYPO3.Flow,Bug,"",Closed,Should have,Non-plural translations are not found if arguments are used,Adrian Föder,"",2013-07-15 04:03,I18n,"",2013-07-01,"","",0,2013-07-01 10:12,"","",1226750,"",Git master,"A simple translation which is not meant for handling plurals is not correctly resolved when used with arguements, for example,

<pre>
<f:translate id=""someId"" arguments=""{0: 2500}"" />
</pre>

does not resolve correctly. The error appears in @\TYPO3\Flow\I18n\Translator::translateById@ where the @$pluralForm@ equals to 'other' as soon as arguments are set (that's the distant observation so far, have to dig deeper)."
49566,TYPO3.Flow,Bug,"",New,Should have,NULL source values are not handled correctly,Adrian Föder,Adrian Föder,2013-07-02 02:21,Property,"",2013-07-02,"","",0,2013-07-02 02:04,"","",1227800,"",Git master,"currently, for example

<pre>
$this->propertyMapper->convert(NULL, 'array')
</pre>

results into a message 

> No converter found which can be used to convert from ""string"" to ""array""

which is at least incorrect for the source type, IMO the converter should return NULL then, too (i.e. leave the property untouched).

I found this change here being relevant for this, https://review.typo3.org/#/c/1895/3/Classes/Property/PropertyMapper.php There, the $source is hard-coded set to an empty string if it's NULL; I can't see a proper reason for that, since when deleting these lines all Tests still pass. Additionally, the tests for \TYPO3\Flow\Tests\Unit\Property\PropertyMapperTest::sourceWhichIsNoSimpleTypeThrowsException https://git.typo3.org/Packages/TYPO3.Flow.git/blob/master:/Tests/Unit/Property/PropertyMapperTest.php#l75 won't make any sense then."
49569,TYPO3.Flow,Bug,"",Resolved,Could have,Use deterministic join aliases,Sebastian Kurfuerst,Sebastian Kurfuerst,2013-08-09 11:35,"",2.0.1,2013-07-02,"","",100,2013-07-02 04:32,"","",1227950,"",Flow 2.0.0 beta 2,"By using uniqid(), the DQL queries are not properly cached..."
49571,TYPO3.Flow,Bug,"",Resolved,Should have,Cache Management Exception when files changed but no classes,Sebastian Kurfuerst,Sebastian Kurfuerst,2013-08-05 05:35,"",2.0.1,2013-07-02,"","",100,2013-07-02 04:38,"","",1228050,"",Flow 2.0.0 beta 2,"When classes did not change, but other files did, an exception occurs
because $modifiedClassNamesWithUnderscores does not exist, as it can
be seen when reading the source code."
49600,TYPO3.Fluid,Bug,"",New,Should have,f:form tag shown as a HTML on frontend,Jignesh Prajapati,"",2013-12-04 07:04,ViewHelpers,"",2013-07-02,"","",0,2013-07-02 11:09,"","",1229500,"",(any),"Hello guys,

I have one problem using the f:form tag
I integrated the template using the FLUIDTEMPLATE in Typo3 version 6.1
Now i created one extension that simply show the the form with two input elements. I used the f:form and f:form.textfield to display the form. Now problem is that whole form shown as HTML tags instead of real form. Please see the attached screenshot.

However, when i used the same extension using the templavoila in Typo3 version 6.1 then everything is working fine.

I am using below typoscript for FLUIDTEMPLATE integration.

# Create a Fluid Template
page.10 = FLUIDTEMPLATE
page.10.template = FILE
page.10.template.file = fileadmin/templates/index.html
[globalVar=TSFE:page|layout=1] 
page.10.template.file = fileadmin/templates/home-products.html
[global]
[globalVar=TSFE:page|layout=2] 
page.10.template.file = fileadmin/templates/products.html
[global]
[globalVar=TSFE:page|layout=3] 
page.10.template.file = fileadmin/templates/product-details.html
[global]
[globalVar=TSFE:page|layout=4] 
page.10.template.file = fileadmin/templates/products-img.html
[global]
[globalVar=TSFE:page|layout=5] 
page.10.template.file = fileadmin/templates/settings.html
[global]

page.10 {
  # Set the Template Pathes
  partialRootPath = fileadmin/templates/partials/
  layoutRootPath = fileadmin/templates/layouts/
  variables {
     # Assign the main column with our {content}-destination
    content_main < styles.content.get
    # Assign the left column with our {content_left}-destination
    content_left < styles.content.get
    content_left.select.where = colPos = 1
    # Assign the right column with our {content_right}-destination
    content_right < styles.content.get
    content_right.select.where = colPos = 2
    left < styles.content.get
    left.select.where = colPos=1
  }
}



Not getting what happens with FLUIDTEMPLATE. Please help me as it is very urgent for me. Any help will be appriciated.



Thanks,
Jignesh"
49624,TYPO3.Flow,Bug,"",Resolved,Must have,Domain Model validators are executed twice,Adrian Föder,Bastian Waidelich,2014-08-27 12:30,Validation,"",2013-07-03,"","",100,2013-07-03 02:45,"","",1230700,"",Flow 2.0.0,"when having, for example, a 
<pre>
/**
 * @param SampleDto $sampleDto {fq class name abridged}
 */
public function sampleAction(SampleDto $sampleDto);
</pre>

and an appropriate Validator for that model placed in Domain\Model\Validator\SampleDtoValidator (i.e. a _Domain Model Validator_ in the sense of [?]), the validation for it is fired twice on action invocation.

The argument's validator stack looks like the following then:

<pre>
ConjunctionValidator:
	SampleDtoValidator
	ConjunctionValidator
		GenericObjectValidator
		SampleDtoValidator
</pre>

as you can see, the SampleDtoValidator is there twice, that's why it's executed twice.


If, however, the Validator is *not* a Domain Model Validator, means, it's not placed in Domain\Model\Validator; and annotated manually like
<pre>
/**
 * @param SampleDto $sampleDto {fq class name abridged}
 * @Flow\Validate(""$sampleDto"", type=""Acme\Foobar\Somewhere\SampleDtoValidator"")
 */
public function sampleAction(SampleDto $sampleDto);
</pre>

...it's validated correctly only once.
The validator stack then looks like
<pre>
ConjunctionValidator:
	SampleDtoValidator
	ConjunctionValidator
		GenericObjectValidator
</pre>

as you can see, the ""inner"" conjunction validator only has a GenericObjectValidator now.

[?] http://docs.typo3.org/flow/TYPO3FlowDocumentation/TheDefinitiveGuide/PartIII/Validation.html#validating-domain-models"
49671,TYPO3.Eel,Bug,"",Resolved,-- undefined --,Undefined property: TYPO3\Eel\CompilingEelParser::$tmpId,Alexander Schnitzler,"",2013-07-06 07:54,"","",2013-07-04,"","",100,2013-07-04 15:36,"","",1233050,"","","I just checked out the current master of NEOS (da9d621) and I get this Exception.

The setup went fine but when I tried to access frontend or backend afterwards this error is shown:

<pre>
Notice: Undefined property: TYPO3\Eel\CompilingEelParser::$tmpId in /vagrant/src/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Eel_CompilingEelParser.php line 164
34 TYPO3\Flow\Error\ErrorHandler::handleError(8, ""Undefined property: TYPO3\Eel\CompilingEelParser::$tmpId"", ""/vagrant/src/Data/Temporary/Development/Cache/Code?ow_Object_Classes/TYPO3_Eel_CompilingEelParser.php"", 164, array|1|)

33 TYPO3\Eel\CompilingEelParser_Original::unwrapExpression(""$context-&gt;getAndWrap('request')-&gt;getAndWrap('format')"")

32 TYPO3\Eel\CompilingEelParser_Original::Comparison_rgt(array|5|, array|4|)

31 call_user_func_array(array|2|, array|2|)

30 PhpPeg\Parser::store(array|5|, array|4|, ""rgt"")

29 TYPO3\Eel\EelParser_Original::match_Comparison(array|4|)

28 TYPO3\Eel\EelParser_Original::match_Conjunction(array|3|)

27 TYPO3\Eel\EelParser_Original::match_Disjunction(array|2|)

26 TYPO3\Eel\EelParser_Original::match_ConditionalExpression(array|1|)

25 TYPO3\Eel\EelParser_Original::match_Expression()

24 TYPO3\Eel\CompilingEvaluator_Original::generateEvaluatorCode(""request.format != 'html'"")

23 TYPO3\Eel\CompilingEvaluator_Original::evaluate(""request.format != 'html'"", TYPO3\Eel\Context)

22 TYPO3\TypoScript\Core\Runtime_Original::evaluateProcessor(""condition"", TYPO3\TypoScript\TypoScriptObjects\MatcherImplementation, array|1|)

21 TYPO3\TypoScript\TypoScriptObjects\AbstractTypoScriptObject::tsValue(""condition"")

20 TYPO3\TypoScript\TypoScriptObjects\MatcherImplementation_Original::evaluate()

19 TYPO3\TypoScript\Core\Runtime_Original::evaluateInternal(""root&lt;TYPO3.TypoScript:Case&gt;/format&lt;TYPO3.TypoScript:Matcher&gt;"", ""Exception"")

18 TYPO3\TypoScript\Core\Runtime_Original::render(""root&lt;TYPO3.TypoScript:Case&gt;/format&lt;TYPO3.TypoScript:Matcher&gt;"")

17 TYPO3\TypoScript\TypoScriptObjects\CaseImplementation_Original::evaluate()

16 TYPO3\TypoScript\Core\Runtime_Original::evaluateInternal(""root"", ""Exception"")

15 TYPO3\TypoScript\Core\Runtime_Original::render(""root"")

14 TYPO3\Neos\View\TypoScriptView_Original::render()

13 TYPO3\Flow\Mvc\Controller\ActionController_Original::callActionMethod()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Flow\Http\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()

</pre>"
49726,TYPO3.Fluid,Feature,"",Resolved,Should have,f:form autofocus attribute is missing in f:form.textfield and f:form.textarea,Tim Spiekerkötter,"",2014-07-11 14:39,"","",2013-07-06,"","",100,2013-07-06 07:11,"","",1235700,"","","As in f:form.button there should be an attribute ""autofocus"" as well for f:form.textfield and f:form.textarea to be consistent in autofocus behaviour.

This is a copy from the issue #48689 from TYPO3 CMS."
49737,TYPO3.Flow,Bug,"",Closed,Must have,TYPO3.session.inactivityTimeout not working,Simon Schaufelberger,"",2014-01-29 10:01,Session,"",2013-07-06,"","",0,2013-07-06 10:38,"","",1236250,"",Git master,"I'm logged in into the neos backend. After some idle time of doing nothing (don't know how much but like half an hour or so?), and realoading the page, i get redirected to the login page again.

I set the following in Configuration/Settings.yaml:

<pre>
TYPO3:
  session:
    inactivityTimeout: 0
</pre>

what i expect is that i can be logged in ""forever"". My session cookie has a lifetime of 1 year so that should not be the problem :D"
49756,TYPO3.Fluid,Feature,"",Under Review,Should have,Select values by array key in checkbox viewhelper,Simon Schaufelberger,"",2014-03-24 21:40,"","",2013-07-07,"","",0,2013-07-06 19:52,"","",1237200,"","","my model:

<pre>
class Model {
	protected $groups;

	public function getGroups() {
		$groups = array();
		foreach ($this->groups as $group) {
			$groups[\TYPO3\Flow\Reflection\ObjectAccess::getProperty($group, 'Persistence_Object_Identifier', TRUE)] = $group;
		}
		return $groups;
	}
}
</pre>

my controller:

<pre>
public function viewAction(\My\Package\Domain\Model\Member $member) {
	$groups = $this->groupRepository->findAll();
	$this->view->assign('member', $member);
	$this->view->assign('groupList', $groups);
}
</pre>

my view:

<pre>
<f:form action=""editGroups"" name=""member"" object=""{member}"">
	<f:for each=""{groupList}"" as=""groupItem"">
		<label class=""checkbox inline"">
			<f:form.checkbox property=""groups"" value=""{groupItem -> f:format.identifier()}""/> {groupItem.name}
		</label>
	</f:for>
</f:form>
</pre>

now what's not possible is to just assign the groups (a m:n-relation) to the checkbox because in the checkbox viewhelper the *value* is compared instead of the *array key* with in_array.

This patch also compares the array keys."
49780,TYPO3.Flow,Bug,"",New,Should have,Roles are not synchronized,Soren Malling,"",2013-07-08 04:11,Security,"",2013-07-08,"","",0,2013-07-08 04:06,"","",1238400,"",Git master,"Issue occured trying to install TYPO3 Neos Alpha4

Installing with the instructions from neos.typo3.org/download.html, and following this command pattern

<pre>
composer command + doctrine:migrate + site:import + user:create
</pre>

I get the following error

<pre>
?  Neos git:(cd5105e) ./flow user:create --username sorenmalling --password YOURPASSWORD --first-name YOURFIRSTNAME --last-name YOURLASTNAME --roles ""TYPO3.Neos:Administrator""
The role with identifier ""TYPO3.Neos:Administrator"" is unknown
?  Neos git:(cd5105e) ./flow user:create --username sorenmalling --password YOURPASSWORD --first-name YOURFIRSTNAME --last-name YOURLASTNAME                                  
The role with identifier ""TYPO3.Neos:Editor"" is unknown
</pre>

After chatting with Rens we came to the conclusion that TYPO3.Neos Roles aren't synchornized with the rest of the Flow roles."
49801,TYPO3.Flow,Bug,"",New,-- undefined --,TYPO3\Flow\Security\Exception\AccessDeniedException thrown in file TYPO3_Flow_Security_Authorization_AccessDecisionVoterManager.php,Oliver Tempel,"",2013-07-08 22:53,- Error Handler Report -,"",2013-07-09,"","",0,2013-07-08 22:53,"","",1239400,"",FLOW3 1.1.0,"Access denied (0 denied, 0 granted, 1 abstained)
22 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager_Original::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

21 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

20 call_user_func_array(array|2|, array|1|)

19 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

18 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

17 TYPO3\Flow\Security\Authorization\Interceptor\PolicyEnforcement_Original::invoke()

16 TYPO3\Flow\Security\Aspect\PolicyEnforcementAspect_Original::enforcePolicy(TYPO3\Flow\Aop\JoinPoint)

15 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

14 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

13 TYPO3\Setup\Controller\SetupController::initializeAction()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Setup\Core\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


==================================================================
Flow3 Version unknown, comes with neos alpha 4"
49806,TYPO3.Flow,Task,"",Accepted,Should have,Date formatting should care about the time zone,Adrian Föder,Adrian Föder,2013-07-09 04:16,I18n,"",2013-07-09,"","",0,2013-07-09 04:16,"","",1239650,"","",the @TYPO3\Flow\I18n\Formatter\DatetimeFormatter@'s @format()@ method should care and adjust a Locale's intrinsic time zone.
49815,TYPO3.Flow,Bug,"",Resolved,Should have,PersistentObjectConverter does not allow to set arbitrary setters,Christopher Hlubek,"",2014-05-11 06:54,"","",2013-07-09,"","",0,2013-07-09 05:57,"","",1240050,"",Git master,"For a better abstraction of domain logic it is quite important to use ""virtual"" properties by implementing additional getters or setters that will set internal properties. For example calculated properties, where a form should set a value that will be stored in some other format or value.

The @PersistentObjectConverter@ uses only the class schema which is built from all non-transient properties of a class. The @ObjectConverter@ instead uses only setters or constructor arguments to get the type of child properties during type conversion."
49847,TYPO3.Flow,Bug,"",Resolved,Should have,PSR-0 compatible namespace with underscores is not loaded,Sören Rohweder,Sören Rohweder,2014-07-11 14:19,"","",2013-07-10,"","",100,2013-07-10 06:01,"","",1241650,"",Flow 2.0.0 beta 2,"When using Faker (fzaninotto/faker)  the ClassLoader fails to load classes with underscores in the namespace like Faker\Provider\en_US\Person. 

PSR-0 States that only underscores in the classname should be replaced by a \ while leaving underscores in the namespace untouched."
49923,TYPO3.Flow,Bug,"",Resolved,Should have,ControllerContext constructor has no flashMessageContainer arguments,Dominique Feyer,Dominique Feyer,2013-08-05 05:35,"","",2013-07-11,"","",100,2013-07-11 12:31,"","",1245200,"",Git master,The title is clear enough
49982,TYPO3.Eel,Feature,"",Resolved,Should have,Implement a protected context for public usage in TypoScript,Christopher Hlubek,Christopher Hlubek,2013-07-16 06:38,"","",2013-07-12,"","",100,2013-07-12 09:38,"","",1248100,"","",""
50080,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Broken concept for CLI/Web separation,Philipp Gampe,Karsten Dambekalns,2013-08-13 02:42,Core,"",2013-07-16,"","",0,2013-07-16 09:52,"","",1252850,"",(any),"Currently Flow tries to detect a CLI request by looking into the @PHP_SAPI@ constant. This is a wrong approach and completely breaks on host that use CGI for both web and console requests.

The German hoster Domainfactory is such a hoster. The @PHP_SAPI@ in both web and console is @cgi-fcgi@, thus there is no way to distinguish a web from a cli request.

I tried to fix it myself in the code, but got lost in the various bootstrap methods (and their orders) and the sub-request cycles: https://notes.typo3.org/p/neos-domainfactory

@see http://www.php.net/manual/en/function.php-sapi-name.php#89858

IMHO Flow should take advantage of the different entry scripts and set a constant very early in the entry point that distinguishes the request types. Then it could also separate cli from cli-sub and web requests.
It would be cheaper in terms of processing time and less error prone."
50088,TYPO3.Flow,Bug,"",Resolved,Must have,Loading order of packages does in some cases not respect depenencies,Benno Weinzierl,"",2014-02-13 03:55,Package,"",2013-07-16,"","",100,2013-07-16 16:43,"","",1253200,"",Git master,"Since over half a year i have strange problems with the loading order of packages (and as a result of that the configuration merging). For example: I install a package (with no dependencies to all other packages) and suddenly i get the problem.

Now i took the time and tracked it down to this method:
PackageManager->sortAvailablePackagesByDependencies()

I think the algorithm used to sort the packages is somehow flawed.

There are two different ""logics"" used to compare two packages. One by its dependencies (which should work fine) and one with strcmp() used when no info regarding the dependencies between those two packages is present. I think the problem lies in this two different ""logics"". But i dont know what the solution is."
50115,TYPO3.Flow,Feature,"",Under Review,Must have,"During the policy loading, we need to take care if class exist",Dominique Feyer,Dominique Feyer,2013-10-04 04:23,Security,"",2013-07-17,"","",0,2013-07-17 08:06,"","",1254550,"","",In the Configuration Manager the method loadPolicyConfigurationFile must take care if all entities classes exists.
50118,TYPO3.Flow,Bug,"",Resolved,Should have,Add a method in the PackageManager to get package of class name,Dominique Feyer,Dominique Feyer,2014-06-18 16:37,Package,"",2013-07-17,"","",100,2013-07-17 09:22,"","",1254700,"",Git master,Currently we have only getPackageOfObject and sometimes it's useful the get the package of the class name
50130,TYPO3 Flow Base Distribution,Bug,"",Needs Feedback,Should have,Different fallback for php.exe on windows,Christian Müller,"",2013-07-21 15:43,"","",2013-07-17,"","",0,2013-07-17 14:03,"","",1255300,"",(any),It could make sense on windows (as a fallback) to try to find the php.exe in the same path as the php.ini file. Seems usual setups on windows are like that (binary download from php.net and XAMPP). Should be checked with Windows users. Could reduce entry hurdle for windows users.
50150,TYPO3.Eel,Bug,"",Resolved,Should have,Hyphens are not allowed in Eel selectors,Pankaj Lele,Robert Lemke,2013-10-01 04:29,"","","","","",100,2013-07-18 07:06,"","",1256250,"","","For example with Eel ${q(site).children('my-page')} following error is thrown ""The Selector ""my-page"" could not be parsed. Error at character 3."""
50181,TYPO3.Flow,Bug,"",Resolved,Should have,[DOC] wrong number regarding multiple upload fields,Cedric Ziel,"",2013-07-21 14:37,- Documentation -,"",2013-07-19,"","",100,2013-07-19 04:40,"","",1257800,"",Git master,"Though this is small, the docs state that 
<pre>
<f:form.upload property=""attachments.0.originalResource"" />
<f:form.upload property=""attachments.1.originalResource"" />
</pre>
translates to
<pre>
<input type=""file"" name=""formObject[attachments][0][originalResource]"">
<input type=""file"" name=""formObject[attachments][0][originalResource]"">
</pre>

Obviously, this is not the case. Second index is 1."
50255,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Different collations runnig migrate/update,Carsten Bleicker,"",2013-11-16 17:05,"","",2013-07-21,"","",0,2013-07-21 15:06,"","",1261450,"",Flow 2.0.0 beta 2,"Hi,
i am runnig flow doctrine:migrate and this results in a collation on the abstractparty f.e. with utf8_general_ci.
this was confusing me because my mysql settings has default utf8_unicode_ci.
i deleted the whole db and runnig flow doctrine:update. now the collation of any field is utf8_unicode_ci.
deleting it again, runnig migrate ... results in utf8_general_ci.
i have no idea where these different collations comes from, any idea?

what helps is setting some settins in mysql config ""my.cnf"":
init-connect            = 'SET NAMES utf8'
init-connect            = 'SET collation_connection = utf8_unicode_ci'

after this change migrate and update results in utf8_unicode_ci.

kind regards
carsten bleicker
"
50262,TYPO3.Flow,Feature,"",New,Could have,Add Keywords to composer Json,Christian Wolff,"",2013-07-21 16:49,Package,"",2013-07-21,"","",0,2013-07-21 16:48,"","",1261800,"","","I think we should add keywords to the composer.json
so it shows up if somebody is looking for a framework or MVC on packagist.org

Suggested Keywords:

kewords: [""Web Application framework"", ""MVC"", ""Model View Controller""]




"
50342,TYPO3.Flow,Bug,"",New,Could have,PropertyMapper: Use of interface method before implementation check,Mathias Brodala,"",2013-07-23 10:42,"","",2013-07-23,"","",0,2013-07-23 10:42,"","",1265750,"",(any),"On the following line the PropertyMapper uses a method of the @TypeConverterInterface@ but performs the actual check for it afterwards:

http://forge.typo3.org/projects/package-typo3-flow/repository/revisions/e0f7cfdcfed54e326ac4b5852f81cfe2e2fce032/entry/Classes/TYPO3/Flow/Property/PropertyMapper.php#L153

<pre>
$targetType = $typeConverter->getTargetTypeForSource($source, $targetType, $configuration);

if (!is_object($typeConverter) || !($typeConverter instanceof \TYPO3\Flow\Property\TypeConverterInterface)) {
  throw new Exception\TypeConverterException('Type converter for ""' . $source . '"" -> ""' . $targetType . '"" not found.');
}
</pre>

Shouldn't the check be performed first and output the original @$targetType@ on failure?"
50382,TYPO3.Flow,Task,Task #51183: CLI improvements,New,Should have,Impossible to use arguments in CLI that are added by overriding initializeCommandMethodArguments(),Karsten Dambekalns,"",2013-08-19 08:32,Command,"",2013-07-24,"","",0,2013-07-24 08:47,"","",1267650,"","","Having something like

<pre>	/**
	 * @return void
	 * @throws \TYPO3\Flow\Mvc\Exception\InvalidArgumentTypeException
	 */
	protected function initializeCommandMethodArguments() {
		parent::initializeCommandMethodArguments();
		$this->arguments->addNewArgument('porcelain', 'boolean', FALSE, FALSE);
	}</pre>

should provide the @porcelain@ option to all command methods. But since the CLI request never returns true for @hasArgument()@, since @parseRawCommandLineArguments()@ uses the ReflectionService and thus will never consider the @--porcelain@ flag if given on the command line."
50395,TYPO3.Flow,Bug,"",Accepted,Should have,Route cache caches routes for non dispatchable requests ,Marco Falkenberg,Bastian Waidelich,2013-10-14 06:00,MVC - Routing,"",2013-07-24,"","",0,2013-07-24 10:47,"","",1268300,"",Git master,"The route cache caches all routes, even if the dispatchers cannot find the proper controller or action. On the one hand, that leads to a messy caching directory, if someone calls unavailable routes repeatedly. On the other the cached routes ""block"" potential identity routes, which occurs in my case.

Assume the the following routes configuration:

<pre>
-
  uriPattern: 'users/{user}'
  defaults:
    '@controller':   'User'
    '@action':       'index'
  routeParts:
    'user':
      objectType: 'MyPackage\Model\User'
      uriPattern: '{name}'

# Fallback route
-
  uriPattern: '{@controller}/{@action}(.{@format})'
  defaults:
    '@format':  'html'
</pre>

If you now call @/users/horst@ and the user @horst@ is not present for now, the fallback routes resolves the request with controller @users@ and action @horst@ and a caching entry is made. The dispatcher then throws the appropriate exception and a 404 shows up. 

If you then create @horst@ and call the url again, the 404 shows up (again), because the cached fallback route is used."
50474,TYPO3.Flow,Task,"",Resolved,Should have,PhpFrontend should return original string in get,Christian Müller,Christian Müller,2013-10-01 04:35,Cache,"",2013-07-26,"","",100,2013-07-26 13:04,"","",1272250,"","","The PhpFrontend automatically wraps the given string of code before setting it in the backend:

<pre>
$sourceCode = '<?php' . chr(10) . $sourceCode . chr(10) . '#';
</pre>

On get() the wrapped first and last line should be removed so you can retrieve the original piece of code that was stored in the cache."
50555,TYPO3.Fluid,Bug,"",Closed,Should have,Can't get an empty array in if condition,Thomas Christiansen,Bastian Waidelich,2013-07-31 09:21,"","",2013-07-30,"","",0,2013-07-30 06:32,"","",1276300,"",(any),"Hi all,
i am having trouble to get an empty array in a shorthand if condition.

The situation is the following:
I have an Input field which can be required or optional, depending on a checkbox in Backend.

In my Template i tried this;

@additionalAttributes=""{f:if(condition: '{field.mandatory}', then: '{required: 1}', else: '{}')}""@

The ""then""-case works fine, i am getting the attribute required=""1"" as expected.

The problem is, that the '{}' in the else-case returns an empty string, not an empty array. Then i get an exception, because additionalAttributes expects an array.
I tried a couple of things to get this to work like {0: null}, {\'\'} or {null} but i always get either an empty string or an non-empty array like array(0 => null).
The last one is not an option because it would result in an attribute ""0"" in the html tag.

Me and my colleagues came up with a view workarrounds:

1) Assign an empty array to a variable in the controller and use this variable in the template.
 - This is in my case not an option because i am extending an TER extension and dont want to override its controller.

2) Add an ""Empty-Array-Getter"" to the Model like getEmptyArray which returns an empty array.
 - This is a possibility, because i am extending the model as well, but... urghs ;)

3) Write a viewhelper that adds an empty array to the templateVariableContainer.
 - This is probably the best workaround and i am using this for now.

The viewhelper looks simply like this:

@class EmptyArrayViewHelper extends \TYPO3\CMS\Fluid\Core\ViewHelper\AbstractViewHelper {
  public function render() {
    $this->templateVariableContainer->add('emptyArray', array());
    return NULL;
  }
}@

So i use can {emptyArray} in my template now after calling the viewhelper:
@<fx:EmptyArray />
...
additionalAttributes=""{f:if(condition: '{field.mandatory}', then: '{required: 1}', else: '{emptyArray}')}""@

Did we miss anything here or is there no other way to solve this scenario?

Thanks and regards,
Thomas"
50585,TYPO3.Flow,Bug,"",Resolved,Must have,Validation fails if nested properties of same type are present,Martin Lipp,Bastian Waidelich,2014-07-11 14:19,Validation,"",2013-07-31,"","",100,2013-07-31 05:40,"","",1277800,"",Flow 2.0.0,"The GenericObjectValidator dumps all prior calculated validation results, when validating a nested property which has the same class name as the validated object.

Quick example:
<pre>
class Office {
	/**
	 * @var string
	 * @Flow\Validate(type=""StringLength"", options={ ""minimum""=3, ""maximum""=100 })
	 * @Flow\Validate(type=""NotEmpty"")
	 * @ORM\Column(length=100)
	 */
	protected $title;

	/**
	 * @var \Doctrine\Common\Collections\Collection<\Company\Project\Domain\Model\OpeningHours>
	 * @ORM\OneToMany(mappedBy=""office"")
	 */
	protected $openingHours;

	...



class OpeningHours {
	/**
	 * @var \Company\Project\Domain\Model\Office
	 * @ORM\ManyToOne(inversedBy=""openingHours"")
	 */
	protected $office;


	...
</pre>

When creating a new Office with a form including one ore more openingHours, all validation errors of properties defined prior to $openingHours are dumped and therefore not displayed as errors. If no other validation error after the $openingHours property occurs, the createAction is executed with no error messages (but not persisted, seems that the validation here works). In the above example an empty $title would pass the validation.

I've tracked it down to the GenericObjectValidator and the ValidatorResolver:
The ValidatorResolver only creates a new baseValidatorConjunction, if none exists for this class name. Otherwise it uses the existing one. Since the GenericObjectValidator's validate() method resets its member $this->result on every call, all results of prior Office properties are deleted as soon as it comes to the validation of the openingHours' $office property.
This does not happen in one of my older projects (with FLOW3 1.1), because there the GenericObjectValidator does not store its results in a member variable, but only calculates it inside the method.
Also it only seems to happen inside collections."
50589,TYPO3 Flow Base Distribution,Bug,"",Closed,Should have,Settings.yaml.example is not useable as is,Matthias Kipshoven,Bastian Waidelich,2013-08-06 11:01,"","",2013-07-31,"","",0,2013-07-31 07:07,"","",1277950,"",Flow 2.0.0,"Setting.yaml causes unexepted Errors. The errors appear when ""Doctrine: "" isn't commented out. Also you get an error, when ""Doctrine:"" didn't appears in it.

It's the same Problem like in the ""Bug #33410"""
50636,TYPO3.Flow,Bug,"",Resolved,Should have,CurlEngine tries to rewind stream,Robert Lemke,Robert Lemke,2013-08-27 07:37,Http,2.x,2013-08-01,"","",100,2013-08-01 08:16,"","",1280250,"",Git master,CurlEngine which executes a rewind() on spec if the given request content is a stream resource. This is not necessary and is especially harmful if a stream resource is provided which does not support seek operations.
50637,TYPO3.Flow,Feature,"",Resolved,Should have,Allow arbitrary HTTP request methods,Robert Lemke,Robert Lemke,2013-09-03 06:35,Http,2.x,2013-08-01,"","",100,2013-08-01 08:18,"","",1280300,"","","Currently HTTP\Request checks if the provided method is in a list of standard-compliant request methods (""GET"", ""POST"", ""PUT"" etc.).

There are, however, web services which require their own, custom request methods, like for example ""COPY"". Therefore remove this check in Http\Request.

"
50801,TYPO3.Fluid,Feature,"",Closed,Could have,"Arguments ""path"" and ""package"" for f:layout View Helper",Rafael Kähm,Bastian Waidelich,2013-08-08 07:20,View,"",2013-08-05,"","",0,2013-08-05 15:03,"","",1288400,"","","This is usefull if you use multiple packages for the same application.

Make sure you use ""package"" argument for each VH that needs this argument inside used layout, because Fluid does not know ""origin"" (also where layout come from) and tries to fetch controller and action from package, which uses this layout. 

Also next step is to implement Node-""origin"" functionality and after that Arguments ""path"" and ""package"" for f:render View Helper (for Partials).

gerrit review comes tomorrow."
50826,TYPO3.Fluid,Feature,"",Closed,Could have,"add resource as parameter for <f:render partial=""resource://MyVendor.Package/Private/Partials/SomePartial"" /> ",Rafael Kähm,Bastian Waidelich,2013-08-08 07:21,"","",2013-08-06,"","",0,2013-08-06 08:57,"","",1289650,"","",This is usefull if you use multiple packages for the same application.
50869,TYPO3.Flow,Bug,"",New,Could have,key() invoked on object,Jordy de Jong,"",2013-08-07 07:18,"","",2013-08-07,"","",0,2013-08-07 07:18,"","",1291800,"",Flow 2.0.0,"TYPO3\Flow\Package\Package:

<pre>
....
$namespaces = $manifest->autoload->{'psr-0'};
				
if (count($namespaces) === 1) {
    $namespace = key($namespaces);
}
....
</pre>

key() should be called using an array as its parameter, $namespaces is a stdclass
http://www.php.net/key

I propose casting the result of the autoload method to an array before calling key()
"
50888,TYPO3.Fluid,Bug,"",Under Review,Should have,WSOD by changing name of section and if Fluid caches are generated,Rafael Kähm,"",2014-08-26 09:52,"","",2013-08-07,"","",0,2013-08-07 12:45,"","",1292750,"",Git master,"If you change the name of some section in your Layout and caches were generated before this change, then you get WSOD with following message in php log file:

PHP Fatal error:  Call to undefined method FluidCache_Vendor_PackageName_Standard_action_index_bb47a7064d2c509f0bd5f35af56ae64023f35f04::section_3065c96e28893f22b707315d76eb3c0794993450() in ...../Packages/Framework/TYPO3.Fluid/Classes/TYPO3/Fluid/View/AbstractTemplateView.php on line 247

as you can see Fluid tries to call section_3065c96e28893f22b707315d76eb3c0794993450() [also 'section_' . sha1($sectionName)]

Fluid makes no checking if layout file was changed and no check if method exists.

Fluid should throw an exception on this place instead of WSOD."
50901,TYPO3.Flow,Feature,"",New,Should have,@IgnoreValidation also for class fields,Adrian Föder,"",2014-02-21 04:01,Validation,"",2013-08-08,"","",0,2013-08-08 02:44,"","",1293300,"","","the IgnoreValidation annotation should be able to be set on class fields, too.
That might especially make sense to ""stop"" the iteration through an object network if that is unwanted, for example when there are multiple possible paths to a same object, and the developer wants to affect the path to get a reliable propertyPath result."
50909,TYPO3.Flow,Bug,"",Resolved,Should have,Dependency injection for imported namespaces fails for abstract classes,Philipp Maier,Bastian Waidelich,2013-09-20 10:36,Reflection,"",2013-08-08,"","",100,2013-08-08 05:33,"","",1293700,"",Git master,"Within abstract classes, the @var annotation still must be fully qualified.

Working:
<pre>
abstract class SomeClass {

        ...

	/**
	 * @var \TYPO3\Flow\Security\Context
	 * @Flow\Inject
	 */
	protected $securityContext;
</pre>

Not working:
<pre>
use TYPO3\Flow\Security\Context;

abstract class SomeClass {

        ...

	/**
	 * @var Context
	 * @Flow\Inject
	 */
	protected $securityContext;
</pre>"
51082,TYPO3.Flow,Bug,"",Resolved,Should have,Object Route Parts should take persistence_object_identifier into account,Christian Müller,Bastian Waidelich,2014-02-21 16:36,MVC - Routing,"",2013-08-15,"","",100,2013-08-15 04:44,"","",1302300,"",(any),If no uriPattern is set for a Object Route Part it defaults to the identity properties of the entity. It should also work to fallback to the persistence_object_identifier instead which doesn't happen atm but results in an exception.
51100,TYPO3.Fluid,Feature,"",New,Must have,Links with absolute URI should have the option of URI Scheme,Patrick Kroog,"",2013-08-16 06:06,ViewHelpers,"",2013-08-16,"","",0,2013-08-16 05:14,"","",1303200,"","","At the moment it's not possible to build absolute URIs with https scheme.

Only the ExternalViewHelper allows configuring the URI scheme.


Describing example of the problem:

<f:uri.action pageUid=""1"" arguments=""{client:client}"" absolute=""1"" />

builds a full link like:
- http://example.com/index.php?id=1&tx_myplugin[client]=10


But there's no option to set the URI scheme to https, alghough the 

uriBuilder would allow setting the URI scheme:
$uriBuilder->setAbsoluteUriScheme(""https"");

(Referring to: fluid/Classes/ViewHelpers/Uri/ActionViewHelper.php)


--

So there should be another option for this in the render method in the  Action/Page Viewhelpers!"
51120,TYPO3.Flow,Bug,"",New,Must have,\TYPO3\Flow\Core\Booting::buildSubprocessCommand - wrong command if passed more than one parameters,Pavlina Drosos,"",2013-12-11 10:33,Core,"",2013-08-16,"","",0,2013-08-16 10:53,"","",1304150,"",Flow 2.0.0,"*Method \TYPO3\Flow\Core\Booting::buildSubprocessCommand does not generate a correct command name when more that one command arguments are passed*.

The error look like this:

Uncaught exception #1309971820 in line 123 of /Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Cli_RequestBuilder.php: Unexpected unnamed argument ""param2"". If you use named arguments, all required arguments must be passed named.

The generated command looks like this:
/path/to/flow.php my.package:controller:command '--paramname1' *'param1''--paramname2'* 'param2'

*A space is missing between 'param1' and '--paramname2'*"
51183,TYPO3 Flow Base Distribution,Task,"",New,Should have,CLI improvements,Bastian Waidelich,"",2015-02-25 11:45,"","",2012-01-09,"",0.00,50,2013-08-19 08:30,"","",1307300,0.00,"",Master ticket for miscellaneous improvements to the command controller implementation
51187,TYPO3 Flow Base Distribution,Task,Task #51183: CLI improvements,Closed,Should have,Add generic help switch for all commands,Christopher Hlubek,"",2013-08-19 09:35,"","",2013-08-19,"","",0,2013-08-19 09:33,"","",1307500,"","","Right now the help for a command can be displayed with @./flow help routing:list@

It would be convenient to get the help of a command also with a switch ""--help"" after specifying the command:

<pre>
./flow routing:list --help
</pre>

If the command declares a help argument the help should be handled by the command (this will be backwards compatible for most commands)."
51188,TYPO3.Flow,Bug,"",New,Should have,Doctrine does not respect AOP-injected properties,Andreas Wolf,"",2013-12-07 05:13,Persistence,"",2013-08-19,"","",0,2013-08-19 10:07,"","",1307550,"",Git master,"When I add a property to a model via an aspect, this property is not taken into account by the automagic Doctrine schema generation. Therefore, the database field is not created and the property is also not persisted if I manually add the field via a hand-written migration.

Doctrine does not respect the properties because the reflection components do not return the property that was woven in by the ProxyClassBuilder. This can be reproduced by examining the output of @ReflectionService::getClassPropertyNames()@ - the properties are missing there.

I think the root cause for this is that the reflection information is cached during compile-time before the proxy class files are built. Therefore, the injected properties are not available in the reflected (original) classes.

One potential caveat when fixing this is that both properties from MyClass and MyClass_Original have to be taken into account - I don't know how hard this will get using the PHP reflection mechanisms."
51236,TYPO3.Flow,Bug,Task #55953: Repair and streamline ValueObject support,Resolved,Must have,ValueObject Identity generation broken in some cases,Philipp Maier,Philipp Maier,2015-02-15 18:30,"","",2013-08-21,"","",100,2013-08-21 10:24,"","",1309900,"",(any),"Consider this example ValueObject with two attributes.

<pre>
<?php
namespace Vendor\Package\Domain\Model;
 
use TYPO3\Flow\Annotations as Flow;
 
/**
 * @Flow\ValueObject
 */
class Test {

  /**
   * @var string
   */
  protected $prop1;
 
  /**
   * @var string
   */
  protected $prop2;
 
  /**
   * @param string $prop1
   * @param string $prop2
   */
  public function __construct($prop1, $prop2) {
    $this->prop1 = $prop1;
    $this->prop2 = $prop2;
  }

  // ...
}
</pre>

$test1 = new Test('Name', '');
$test2 = new Test('', 'Name');

$test1 and $test2 will have the same <code>Identity</code> generated by the <code>PersistenceMagicAspect::generateValueHash</code> because the names of the attributes are not included in the hash.
Fixing this will probably break some stuff.

--
Please also regard https://review.typo3.org/#/c/11368/4 in that matter"
51239,TYPO3.Fluid,Bug,"",Under Review,Must have,"AbstractViewHelper use incorrect method signature for ""$this->systemLogger->log()""",Timo Dödtmann,Adrian Föder,2014-04-11 05:17,Core,"",2013-08-21,"","",0,2013-08-21 11:20,"","",1310050,"",Flow 2.0.0,"Within the `AbstractViewHelper::callRenderMethod()` a log entry will be created if en exception is thrown.
But the method signature of the systemLogger (\TYPO3\Flow\Log\LoggerInterface) looks slightly different to the method call.

TYPO3\Flow\Log\LoggerInterface
<pre>
public function log($message, $severity = LOG_INFO, $additionalData = NULL, $packageKey = NULL, $className = NULL, $methodName = NULL);
</pre>

vs.

TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper
<pre>
$this->systemLogger->log('An Exception was captured: '. $exception->getMessage() . '(' . $exception->getCode() . ')', LOG_ERR, 'TYPO3.Fluid', get_class($this));
</pre>

The `$additionalData` is missing."
51255,TYPO3.Flow,Bug,"",Resolved,Should have,CommandController: Fix parsing of boolean values,Timo Dödtmann,Bastian Waidelich,2014-05-11 06:54,Command,"",2013-08-22,"","",0,2013-08-22 06:40,"","",1310850,"",Flow 2.0.0,"I have the following (awesome) command:
<pre>
<?php
namespace Acme\Demo\Command;

use TYPO3\Flow\Annotations as Flow;

/**
 * TestCommand
 *
 * @Flow\Scope(""singleton"")
 */
class MyCommandController extends \TYPO3\Flow\Cli\CommandController {

	/**
	 * @param boolean $myParam A boolean value
	 * @return void
	 */
	public function commandCommand($myParam) {
		echo sprintf(""Result: %s\n\n"", var_export($myParam, 1));
	}

}
</pre>

Now, it will be called in the terminal as followed:

<pre>
$ ./flow my:command --myParam FALSE
Result: bool (false)

$ ./flow my:command --myParam=FALSE
Result: bool (true)
</pre>

The last command returns `TRUE` but `FALSE` is passed, because the passed value is interpreted as a string (probably because of the prefix `=`).

I'm not quite sure if it is really a bug, but it would be nice if it is interpreted as ""bool (false)""."
51257,TYPO3.Flow,Bug,"",Resolved,Should have,Command routing:routepath never shows Format name,Philipp Maier,Philipp Maier,2013-08-27 06:10,"","",2013-08-22,"","",100,2013-08-22 07:14,"","",1310950,"",Git master,"If format is defined:
<pre>
  Controller: standard
  Action: index
  Format: 1
</pre>

If format is not defined:
<pre>
  Controller: standard
  Action: index
  Format: -
</pre>"
51277,TYPO3.Fluid,Feature,"",New,Should have,ViewHelper context should be aware of actual file occurrence,Adrian Föder,"",2013-08-23 02:43,"","",2013-08-23,"","",0,2013-08-23 02:43,"","",1311950,"","","Especially when it comes to errors, or the need of determining a package, ViewHelpers need to know in what file they are noted.

Currently I know of the following cases:

* Every kind of error like ""argument foo needs to be supplied"", or exceptions thrown in ViewHelpers
* ViewHelpers that need to find out a package name, like f:translate and the .action VHs

The last case currently attempts to get this information (the current controller, hence package) from the Request, but there are cases where the Request is not available (starting with StandaloneView). So when using a ViewHelper and skipping any ""package"" argument, I as the integrator would expect the package where the current file resides as the default.

I don't know that much about the parsing internals, but I think it would get really tough since Fluid works on strings rather soon, right?
Maybe Layouts, Templates and Partials can be Objects with a ""sourceFile"", a ""sourceCode"" and a __toString method, and ViewHelpers have access to these objects... just an idea... No clue if that's possible in any way."
51286,TYPO3.Flow,Task,"",New,Should have,Custom error views should introduce a controller context somehow,Adrian Föder,"",2013-08-23 05:24,"","",2013-08-23,"","",0,2013-08-23 05:24,"","",1312400,"","","The error views use Fluid's standalone view, resulting in many possibilities to crash, because most Fluid features depend on a controller context to be set.

Just to mention:

* f:form's @referrer... fields are empty, resulting in consequential errors when using for a login for example [1]
* any uri/action related stuff with omitted package argument won't work because no package information is present
* same for f:translate for example

So, as far as I see it, that standalone view should get a (pseudo-) controller context set...


[1]: for the record, such a consequential error could be using @$this->request->getReferringRequest()@ in the @onAuthenticationSuccess()@ method, this again calls @$referringRequest->setArguments()@ with empty, but set values, eventually ending up with @TYPO3\Flow\Mvc\Exception\InvalidActionNameException('The action name must not be an empty string.', 1289472991)@."
51312,TYPO3.Flow,Bug,"",New,Should have,Default php error handler generates warning (when loading TYPO3\Flow\Error\Exception class),Claudio Kressibucher,"",2013-08-24 10:07,Core,2.0,2013-08-24,"","",0,2013-08-24 09:49,"","",1313700,"",Flow 2.0.0,"Warning is generated when trying to load TYPO3\Flow\Error\Exception from Cache.
Tested in Version 2.0.0 (Flow)
PHP-Version 5.4.9

Steps to reproduce:
- configure server to show warnings
- Install Quickstart via composer (as in the Quickstart tutorial)
- The welcome page shows Warning on include_once(path/to/cached/TYPO3_Flow_Error_Exception.php)
  (only if this file does not exist in the Cache-Directory, which was
   the default setup as I followed the Quickstart tutorial)

Problem is in TYPO3\Flow\Error\ErrorHandler:
- try to load class TYPO3_Flow_Object_ObjectManager from cache
  (via include_once in SimpleFileBackend::requireOnce)
- The error handler (ErrorHandler::handleError) is executed.
  To prevent infinite recursive loops, php resets error handler
  to default while executing the custom error handler.
  (See http://php.net/manual/de/function.set-error-handler.php#48933)
- In line 79 class_exists('TYPO3\Flow\Error\Exception') gets executed.
  This will also generate the error when failing to include the file
  TYPO3_Flow_Error_Exeption.php from cache. But now php's default
  error handler is executed and therefor a warning is generated and
  send to the browser.
- The Exception-Class is loaded from Package-File, so everything is
  working fine. The only problem is the warning that should not be
  generated.
"
51385,TYPO3.Flow,Bug,"",Resolved,Should have,"BooleanConverter considers ""false"" TRUE",Bastian Waidelich,Bastian Waidelich,2014-05-11 06:54,Property,"",2013-08-27,"","",100,2013-08-27 06:37,"","",1317300,"",Git master,"The BooleanConverter provided by Flow simply casts the $source to a boolean using boxing:
<pre>
<code class=""php"">
return (boolean)$source;
</code>
</pre>

This leads to some weird inconsistencies, e.g. the string ""false"" returning TRUE."
51405,TYPO3.Flow,Feature,Task #55953: Repair and streamline ValueObject support,Rejected,Could have,Fix OneTo* associations from ValueObjects,Adrian Föder,Adrian Föder,2015-02-12 08:26,Persistence,"",2013-08-27,"","",0,2013-08-27 10:55,"","",1318300,"","","ValueObjects are reusable (or reused) from a relational database point of view, i.e. they have a unique constraint. Having a ValueObject referencing other entities with a OneTo* association will fail if another instance of the valueobject intends to reference the same object: there will be a unique constraint error because the object occurrs twice then.

Maybe the Driver should make a ManyTo* out of these."
51459,TYPO3.Flow,Feature,"",New,Should have,Allow catching of particular exceptions on property mapping,Adrian Föder,"",2013-10-22 07:44,MVC,"",2013-08-28,"","",0,2013-08-28 09:24,"","",1321000,"","","I stumbled upon this requirement since I got a @TYPO3\Flow\Property\Exception\TargetNotFoundException@ in the @\TYPO3\Flow\Property\TypeConverter\PersistentObjectConverter::fetchObjectFromPersistence@ method: this one leads to an @TYPO3\Flow\Property\Exception@ exception, hence the custom error view handling is not able to catch the actual exception and result into a 404, for example.

My idea would be to allow one to catch particular property mapping exceptions and call user defined code, this could look, for example, like

<pre><code class=""php"">
public function initializeShowAction() {
    $productPropertyMappingConfiguration = $this->arguments->getArgument('product')->get.....;
    $productPropertyMappingConfiguration
    //  ->forProperty('datasheetResource')
      ->catchTypeConverterException(
          'TYPO3\Flow\Property\Exception\TargetNotFoundException',
          1297933823,
          function(\Exception $exception) use ($controller) {
              $controller->getResponse->setHeader(404);
              // ok this is becoming pseudo code now ;)
          })
}
</code></pre>

"
51489,TYPO3.Flow,Bug,"",New,-- undefined --,Doctrine\Common\Annotations\AnnotationException thrown in file AnnotationException.php,Christian Loock,"",2014-02-06 04:20,Annotations,"",2013-08-29,"","",0,2013-08-29 04:01,"","",1322500,"",Flow 2.0.0,"For some reason, the Annotation Parser does not recognize My Class being annotated as being an Annotation.

I tracked the issue down to the DocParser Class. Which uses PHPs \ReflectionClass->getDocComment and looks for @Annotation.

Now, the fun thing is, that the getDocComment method, only returns the actual comment, but strips all Annotations:

Here is what my DocBlock looks like:

...

/**
 * This annotations describes wether an action is part of a Tab Group,
 * which then will be displayed together with other
 * Actions of other controllers in a tabbed view in the admin backend
 * 
 * @Annotation
 * @author Christian Loock <chl@vkf-renzel.de>
 * @Target({""METHOD""})
 */
class TabGroup {


..

And here is, what getDocComment returns:

string '/**
 * This annotations describes wether an action is part of a Tab Group,
 * which then will be displayed together with other
 * Actions of other controllers in a tabbed view in the admin backend
 */' (length=200)

Since this seems to be a Bug in a PHP function, you might consider not using it at this point, and use your own parser, to retrieve docblocks.


[Semantical Error] The class ""VKF\Admin\Annotations\TabGroup"" is not annotated with @Annotation. Are you sure this class can be used as annotation? If so, then you need to add @Annotation to the _class_ doc comment of ""VKF\Admin\Annotations\TabGroup"". If it is indeed no annotation, then you need to add @IgnoreAnnotation(""Admin\TabGroup"") to the _class_ doc comment of method VKF\Admin\Controller\CustomerController_Original::editAction().
21 Doctrine\Common\Annotations\AnnotationException::semanticalError(""The class &quot;VKF\Admin\Annotations\TabGroup&quot; is not ?troller\CustomerController_Original::editAction()."")

20 Doctrine\Common\Annotations\DocParser::Annotation()

19 Doctrine\Common\Annotations\DocParser::Annotations()

18 Doctrine\Common\Annotations\DocParser::parse(""/**?     * @Admin\TabGroup(&quot;customerEdit&quot;)?     * ?\VKF\Admin\Domain\Model\Customer $customer?     */"", ""method VKF\Admin\Controller\CustomerController_Original::editAction()"")

17 Doctrine\Common\Annotations\AnnotationReader::getMethodAnnotations(TYPO3\Flow\Reflection\MethodReflection)

16 TYPO3\Flow\Reflection\ReflectionService::getMethodAnnotations(""VKF\Admin\Controller\CustomerController"", ""editAction"", ""TYPO3\Flow\Annotations\ValidationGroups"")

15 TYPO3\Flow\Reflection\ReflectionService::getMethodAnnotation(""VKF\Admin\Controller\CustomerController"", ""editAction"", ""TYPO3\Flow\Annotations\ValidationGroups"")

14 TYPO3\Flow\Mvc\Controller\ActionController_Original::getActionValidationGroups(TYPO3\Flow\Object\ObjectManager)

13 TYPO3\Flow\Mvc\Controller\ActionController_Original::initializeActionMethodValidators()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Flow\Http\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


Please include more helpful information!"
51530,TYPO3.Flow,Task,"",New,Should have,Improve speed of Files::readDirectoryRecursively using RecursiveDirectoryIterator?,Jacob Floyd,"",2013-08-29 13:49,"","",2013-08-29,"","",0,2013-08-29 10:23,"","",1324550,"","","h2. Basics (TL;DR)

@TYPO3/Flow/Utility/Files::readDirectoryRecursively@ uses @\DirectoryIterator@ instead of @\RecursiveDirectoryIterator@. I suspect that an implementation using @\RecursiveDirectoryIterator@ would be faster.

Let's write a version of @readDirectoryRecursively@ that uses @\RecursiveDirectoryIterator@ and profile the two versions to see which one is faster.

h2. Background

When I asked about it in IRC, ChristianM said this:

> ChristianM: if I remember right there was some oddness to the RecursiveDirectoryIterator
> that we wanted to avoid but I don't remember the specifics

Consider this a selection of ""PHP Release dates"":http://php.net/releases/index.php
<pre>
01 May 2008 - PHP 5.2.6
10 May 2008 - Flow's Files::readDirectoryRecursively introduced
30 Jun 2009 - PHP 5.3.0
17 Sep 2009 - PHP 5.2.11
19 Nov 2009 - PHP 5.3.1
</pre>

According to the ""Changelog for @\RecursiveDirectoryIterator@"":http://php.net/manual/en/class.recursivedirectoryiterator.php
<pre>
5.2.11 - Introduced RecursiveDirectoryIterator::FOLLOW_SYMLINKS
5.3.0  - Extends FilesystemIterator (which extends DirectoryIterator) instead of DirectoryIterator
5.3.0  - Implements SeekableIterator
5.3.1  - Introduced RecursiveDirectoryIterator::FOLLOW_SYMLINKS
</pre>

We don't even support 5.2 anymore, and haven't for a long time. I suspect that the oddness with @\RecursiveDirectoryIterator@ has been fixed already, so I think that using @\RecursiveDirectoryIterator@ is probably feasible now.

h2. Stub Method

This is the same function only it doesn't filter hidden directories, just hidden files.
<pre>
	static public function readDirectoryRecursively($path, $suffix = NULL, $returnRealPath = FALSE, $returnDotFiles = FALSE, &$filenames = array()) {
		if (!is_dir($path)) {
			throw new Exception('""' . $path . '"" is no directory.', 1207253462);
		}

		$directoryIterator = new \RecursiveIteratorIterator(
			new \RecursiveDirectoryIterator(
				$path,
				\FilesystemIterator::UNIX_PATHS|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::FOLLOW_SYMLINKS
			)//,
			//\RecursiveIteratorIterator::SELF_FIRST //returns directories as well.
		);
		$suffixLength = strlen($suffix);

		foreach ($directoryIterator as $pathname => $fileInfo) {
			$filename = $fileInfo->getFilename();
			if ($returnDotFiles === FALSE && $filename[0] === '.') {
				continue;
			}
			//This is needed if directories are included (see SELF_FIRST above)
			//if ($fileInfo->isFile() && ($suffix === NULL || substr($filename, -$suffixLength) === $suffix)) {
			if ($suffix === NULL || substr($filename, -$suffixLength) === $suffix) {
				$filenames[] = self::getUnixStylePath(($returnRealPath === TRUE ? realpath($pathname) : $pathname));
			}
		}
		return $filenames;
	}
</pre>"
51570,TYPO3.Flow,Feature,"",Resolved,Should have,Unpersisted changes in Safe Requests should throw an Exception,Marc Neuhaus,"",2014-04-10 04:18,"","",2013-08-30,"","",100,2013-08-30 06:03,"","",1326550,"","","With the recent change to not trigger persistAll in safe request methods (GET/HEAD) some users
stumble over not getting their entities saved because of this. Altough it's written to the log
and mentioned in the docs i think we should also throw an exception telling the developer about this
if the following conditions are met:

* the current request method is a safe request method (GET/HEAD)
* the current context is the development context
* the user added/updated/removed an entity using a Repository or PeristenceManager
* the user *did not* trigger persistAll using the PersistenceManager on it's own"
51652,TYPO3.Flow,Task,"",Resolved,Should have,cache:warmup should cache every possible configuration,Adrian Föder,Adrian Föder,2013-09-10 11:35,Configuration,"",2013-09-02,"","",100,2013-09-02 09:45,"","",1330650,"","","currently, flow:cache:warmup only caches configuration on a random base; however, every possible configuration source should be touched and cached in order to prepare the Production environment, for example."
51676,TYPO3.Flow,Feature,"",Under Review,Should have,Support of symlinks for Resources,Patrick Pussar,"",2015-06-13 06:51,Resource,"",2013-09-03,"","",100,2013-09-03 08:07,"","",1331850,"","","We are using Typo3.Surf as deployment tool. Surf creates a folder structure with symlinks during the deployment. When creating a resource (e.g. uploading a file), flow will not use the symlink name (sites/foobar.com/releases/current/Web/...) but the real path (sites/foobar.com/releases/201309021405/Web/...).

Surf keeps by default 5 releases, so in our case the resources are lost after 5 deployments.

To solve this behavior we need to keep the symlink path instead of the real one in resource entities."
51704,TYPO3.Flow,Bug,"",New,-- undefined --,TYPO3\Flow\Error\Exception thrown in file ErrorHandler.php,trigger happy,"",2013-09-17 02:42,- Error Handler Report -,"",2013-09-04,"","",0,2013-09-03 19:59,"","",1333250,"",(any),"Warning: file_exists() [<a href='function.file-exists'>function.file-exists</a>]: Unable to find the wrapper &quot;resource&quot; - did you forget to enable it when you configured PHP? in /var/www/neos/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Fluid_View_TemplateView.php line 273
18 TYPO3\Flow\Error\ErrorHandler::handleError(2, ""file_exists() [&lt;a href='function.file-exists'&gt;func?d you forget to enable it when you configured PHP?"", ""/var/www/neos/Data/Temporary/Development/Cache/Cod?w_Object_Classes/TYPO3_Fluid_View_TemplateView.php"", 273, array|4|)

17 file_exists(""resource://TYPO3.Setup/Private/Templates/Login/Login.html"")

16 TYPO3\Fluid\View\TemplateView_Original::getTemplatePathAndFilename(NULL)

15 TYPO3\Fluid\View\TemplateView_Original::getTemplateIdentifier(NULL)

14 TYPO3\Fluid\View\AbstractTemplateView::render()

13 TYPO3\Flow\Mvc\Controller\ActionController_Original::callActionMethod()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Setup\Core\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


Installed under Ubuntu with the latest PHP and MySQL.
I get this error during the setup progress.

Registered Stream Filters are: zlib.*, bzip2.*, convert.iconv.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, mcrypt.*, mdecrypt.*

System: Linux ubuntuWServer 3.8.0-29-generic #42~precise1-Ubuntu SMP Wed Aug 14 16:19:23 UTC 2013 x86_64
"
51713,TYPO3.Flow,Feature,"",Resolved,Should have,Improve rendering of large exceptions,Bastian Waidelich,Bastian Waidelich,2013-09-24 09:18,Error,"",2013-09-04,"","",100,2013-09-04 05:15,"","",1333650,"","","Exceptions with a long message are hard to read when rendered with the DebugExceptionHandler currently:
!http://dl.dropbox.com/u/314491/Screenshots/2k_jvcqhvlbl.png!

Things could be improved by running the message through @nl2br()@ and reducing the font weight"
51763,TYPO3.Flow,Bug,"",New,Should have,HttpRequest always returns content of the current request,Bastian Waidelich,"",2015-02-20 06:53,Http,"",2013-09-05,"","",0,2013-09-05 05:30,"","",1336150,"",Flow 2.0.0,"This is a bit hard to describe and I'm not 100% sure whether this is a bug in the Http\Request or in the calling code:


When using The *\TYPO3\Flow\Http\Client\Browser* like this:
<pre>
<code class=""php"">
$request = \TYPO3\Flow\Http\Request::create(new \TYPO3\Flow\Http\Uri($uri), $method, $arguments);
$response = $this->browser->sendRequest($request);
</code>
</pre>

The default request engine (= CurlEngine) ignores *$arguments* and instead sends the content of the *current* request!

The reason for this is following code in CurlEngine:
<pre>
<code class=""php"">
$content = $request->getContent();
// ...
$body = $content !== '' ? $content : http_build_query($request->getArguments());
curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $body);
</code>
</pre>

So the engine prefers the request body over its arguments (which I think is correct) ? the issue seems to be that Http\Request::getContent() returns the *current* input stream:
<pre>
<code class=""php"">
if ($this->content === NULL) {
    $this->content = file_get_contents($this->inputStreamUri);
}
</code>
</pre>

A nasty work around is to call $request->setContent('') after creating the request object in the client code.."
51809,TYPO3.Flow,Bug,"",Under Review,Must have,"Commit ""[BUGFIX] Published resources don't support symlinks"" produces an fatal error on Windows",Thomas Allmer,Adrian Föder,2015-06-13 06:51,Core,2.0.1,2013-09-06,"","",100,2013-09-06 06:48,"","",1338400,"",Git master,"hey 
the following change 
https://review.typo3.org/#/c/23555/
https://git.typo3.org/Packages/TYPO3.Flow.git/commit/64480cd47066458bfd9a15a9a10f1760e5a0a3b4

produces a fatal error on my System:
Windows 8
PHP 5.4.3

Detailed Error Message:
https://gist.github.com/daKmoR/6461532"
51811,TYPO3.Flow,Bug,"",New,Should have,Improve session handle when the authenticated account is removed from persitance,Dominique Feyer,Dominique Feyer,2014-03-27 07:21,"","",2013-09-06,"","",0,2013-09-06 07:56,"","",1338500,"",(any),"Currently Flow throw an exception when the current authenticated account is removed from the persistence. This exception can be catched and the session destroyed, sound like a more natural handling of this kind of event."
51847,TYPO3.Flow,Bug,"",New,Should have,Overiding controller actions with other required parameter sets results in fatal error.,Frans Saris,"",2013-09-09 04:54,Reflection,2.x,2013-09-09,"","",0,2013-09-09 04:54,"","",1340250,"",Flow 2.0.0,"We have a own abstract controller with some actions without parameters.
When we extend this controller and override an action with a action that expects parameters we get the following Fatal error.
<pre>
Fatal error: Call to a member function get() on a non-object in Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Mvc_Controller_ActionController.php on line 223
</pre> 

When we add default values for the properties it works.

Here a snippet to reproduce the problem:

<pre>
class TestMyAbstractController extends \TYPO3\Flow\Mvc\Controller\ActionController {

	public function listAction() {
		return 'abstractList';
	}
}

class TestController extends TestMyAbstractController {

	/**
	 * @param \TYPO3\Party\Domain\Model\AbstractParty $party
	 */
	public function listAction(\TYPO3\Party\Domain\Model\AbstractParty $party) {
		return 'list';
	}

	/**
	 * @param \TYPO3\Party\Domain\Model\AbstractParty $party
	 */
	public function newAction(\TYPO3\Party\Domain\Model\AbstractParty $party) {
		return 'new';
	}

}
</pre>


When we now call package/test/new we get the error: Fatal error: Call to a member function get() on a non-object in ....

Then we change:
<pre>
	/**
	 * @param \TYPO3\Party\Domain\Model\AbstractParty $party
	 */
	public function listAction(\TYPO3\Party\Domain\Model\AbstractParty $party = NULL) {
		return 'list';
	}
</pre>

Then when we call package/test/new we get the right error: Required argument ""party"" is not set.


tested in 2.0 beta 3, 2.0 and master"
51972,TYPO3.Flow,Bug,"",New,Should have,Joins for every deep property constraint make cartesian selection,Adrian Föder,Adrian Föder,2013-09-13 04:04,"","",2013-09-13,"","",0,2013-09-13 04:04,"","",1346450,"",Git 2.0,"When it comes to property lookups as in
<pre>
$query->logicalAnd(
	$query->contains('categories.posts', $firstPost),
	$query->equals('categories.approved', TRUE)
)
</pre>

there are LEFT JOINs for both constraints each, resulting in something like 
<pre>
SELECT e FROM Acme\Post e
LEFT JOIN e.categories categories0
LEFT JOIN e.categories categories1
WHERE ?1 MEMBER OF categories0.posts
AND categories1.approved = ?2
</pre>

This, at the end, likely resulted into unpredicted
matches because it would match those Posts where
a category having approved = false is involved in
the post in question, as long as this category belongs
to an (arbitrary) Post having any category approved = true.

Consider the following testing code:
<pre><code class=""php"">
<?php
public function complexQueryWithJoinsMakesCorrectConjunctions() {
	$postEntityRepository = new PostRepository;

	$notApprovedCategory = new Category();
	$approvedCategory = new Category();
	$approvedCategory->setApproved(TRUE);

	$firstPost = new Post;
	$firstPost->setTitle('First Post');
	$firstPost->addCategory($notApprovedCategory);
	$postEntityRepository->add($firstPost);

	$secondPost = new Post;
	$secondPost->setTitle('Second Post');
	$secondPost->addCategory($notApprovedCategory);
	$secondPost->addCategory($approvedCategory);
	$postEntityRepository->add($secondPost);

	$thirdPost = new Post;
	$thirdPost->setTitle('Third Post');
	$thirdPost->addCategory($approvedCategory);
	$postEntityRepository->add($thirdPost);

	$this->persistenceManager->persistAll();

	$query = new Query('TYPO3\Flow\Tests\Functional\Persistence\Fixtures\Post');
	$query->matching(
		$query->logicalAnd(
			$query->contains('categories.posts', $firstPost),
			$query->logicalNot($query->equals('Persistence_Object_Identifier', $this->persistenceManager->getIdentifierByObject($firstPost))),
			$query->equals('categories.approved', TRUE)
		)
	);
	$this->assertEquals(0, $query->count());
}
</code></pre>

The intention is to find all Posts which have the same
*approved* category as the _First Post_. In the shown example,
the _First Post_ shares an *unapproved* category with the
_Second Post_, and the _Second Post_ shares an *approved* category
with the _Third Post_.
The query gives a single result which is the _Second Post_, but
this is not correct since the _Second Post_ does only share an
*unapproved* category with the _First Post_ which was asked for.
The _Second_ only ""coincidentally"" also is involved in an
*approved* category with the _Third Post_.

A fix is under review at https://review.typo3.org/#/c/23751/"
52005,TYPO3.Flow,Bug,"",New,Could have,TYPO3\Flow\Error\Exception thrown in file ErrorHandler.php,Christian Eßl,"",2013-09-14 08:22,- Error Handler Report -,"",2013-09-14,"","",0,2013-09-14 08:22,"","",1348100,"",Flow 2.0.0,"The following exception is thrown if I try to call the tearDown()-method of the PersistenceManager:

<pre>
Notice: Undefined index: path in /path_to_flow/Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Persistence_Doctrine_PersistenceManager.php line 309
17 TYPO3\Flow\Error\ErrorHandler::handleError(8, ""Undefined index: path"", ""/hpath_to_flow/?3_Flow_Persistence_Doctrine_PersistenceManager.php"", 309, array|0|)

16 TYPO3\Flow\Persistence\Doctrine\PersistenceManager_Original::tearDown()
</pre>

It appears that the setting ""$this->settings['backendOptions']['path']"" does not exist and has been replaced by $this->settings['backendOptions']['host']."
52014,TYPO3.Flow,Bug,"",New,Should have,Migration makes fields NOT NULL even though not true,Soren Malling,"",2013-10-15 12:27,Persistence,"",2013-09-15,"","",0,2013-09-15 01:48,"","",1348550,"",Git master,"Hi,

Shitty description, so I hope this example explains it further:

Running latest composer update

Model
<pre>

/**
 * @Flow\Entity
 */
class Product {

	/**
	 * Title
	 *
	 * @var string
	 * @Flow\Validate(type=""NotEmpty"")
	 */
	protected $title;

	/**
	 * Description
	 *
	 * @var string
	 */
	protected $description;

	/**
	 * Price
	 *
	 * @var boolea
	 */
	protected $price;

</pre>

Migration:

<pre>
$this->addSql(""CREATE TABLE vendor_project_domain_model_product (persistence_object_identifier VARCHAR(40) NOT NULL, title VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, price DOUBLE PRECISION NOT NULL, PRIMARY KEY(persistence_object_identifier)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB"");
</pre>

Issue:

Submitting a form with the ""title"" and ""description"" field, only filling out the ""title"" field throws the following error

<pre>
An exception occurred while executing 'INSERT INTO vendor_project_domain_model_product (persistence_object_identifier, title, description, price) VALUES (?, ?, ?, ?)' with params [""f758bfb0-8270-4e13-f2b0-606739355187"", ""Produkt navn"", """", null]: SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'price' cannot be null 
</pre>

Price field is required (on database (See migration) level) even though not marked as validate(type=""NotEmpty"") in my model.

Migration generated with ./flow doctrine:migrationgenerate"
52064,TYPO3.Flow,Feature,"",Resolved,Should have,HTTP components for handling requests,Bastian Waidelich,Bastian Waidelich,2014-08-05 06:00,Http,"",2013-09-17,"","",100,2013-09-17 04:49,"","",1351050,"","","Currently the only way to hook into the request handling process one has to use a custom RequestHandler (e.g. for CLI requests) or AOP (e.g. to capture Fluid AJAX-Widget requests).
With ""HTTP components"" request handling in Flow will be much more modular and flexible.

The default component chain would be something like this: 
<pre>
<code class=""yaml"">
TYPO3:
  Flow:
    http:
      chain:
        'routing':
          position: 'start'
          component: TYPO3\Flow\Mvc\Routing\RoutingComponent
          componentOptions:
            'defaultDispatchComponent': 'TYPO3\Flow\Mvc\DispatchComponent'
        'standardCompliancy':
          position: 'end'
          component: TYPO3\Flow\Http\Component\MakeStandardsCompliantComponent
</code>
</pre>

As you can see from the example above the component chain can be nested. So it will be possible to use the Flow Routing Framework to dispatch a 3rd party code directly for example.
For handling Fluid AJAX widget requests we no longer need AOP-hacks, but a simple HTTP component, configured like this:
<pre>
<code class=""yaml"">
TYPO3:
  Flow:
    http:
      chain:
        'ajaxWidget':
          position: 'before routing'
          component: TYPO3\Fluid\Core\Widget\AjaxWidgetComponent
</code>
</pre>"
52068,TYPO3.Flow,Bug,"",Closed,Should have,ArrayConverter should accept empty strings,Christian Eßl,"",2013-09-26 12:31,Property,"",2013-09-17,"","",0,2013-09-17 05:50,"","",1351250,"",Flow 2.0.0,"Imagine a select-box like this:

<pre>
<label for=""categories"">Categories:</label> 
<select name=""content[categories][]"" multiple=""TRUE"" id=""categories"">
  <option value=""0"">Category 1</option>
  <option value=""1"">Category 2</option>
  <option value=""2"">Category 3</option>
</select>
</pre>

with this array-property:

<pre>
/**
 * @var array 
 */ 
protected $categories;
</pre>

The select box allows multiple selected categories and none is selected by default.

If you submit the form without selecting any category, the PropertyMapper throws the exception:
<pre>
No converter found which can be used to convert from"" ""string"" to ""array"".
</pre>

The property mapper treats the empty values of the categories-select as string. 
Shouldn't in this case the ArrayConverter accept empty strings and convert them to an empty *array()*?"
52074,TYPO3.Flow,Feature,"",Resolved,Should have,Flexible ArraySorter,Bastian Waidelich,Bastian Waidelich,2013-09-23 07:35,Utility,"",2013-09-17,"","",100,2013-09-17 08:35,"","",1351500,"","","The *ArrayImplementation* of the *TYPO3.TypoScript* package contains a clever mechanism to sort arrays depending on a ""position string"".
This functionality should be moved to the TYPO3.Flow package to allow this kind of flexible sorting in other places.

Supported position strings are:

*start (<weight>)*:
<pre>
start
start 123
</pre>

*end (<weight>)*:
<pre>
end
end 123
</pre>

*before <key> (<weight>)*:
<pre>
before foo
before foo 123
</pre>

*after <key> (<weight>)*:
<pre>
after foo
after foo 123
</pre>

*<numerical-order>*:
<pre>
123
</pre>

This feature is especially useful for sorting configuration options with multiple sources.
Example:

<pre>
<code class=""yaml"">
SomeSetting:
  'key1':
    foo: 'bar'
    position: 'start'
  'key2':
    foo: 'baz'
    position: 'after key1'
  'key3':
    foo: 'quux'
    position: 'end'
</code>
</pre>"
52182,TYPO3.Fluid,Bug,"",Rejected,Should have,& vs. &amp;,mario chiari,Bastian Waidelich,2013-09-24 09:16,ViewHelpers,"",2013-09-23,"","",0,2013-09-23 05:38,"","",1356900,"",Flow 2.0.0,"see http://www.htmlhelp.com/tools/validator/problems.html#amp
It seems that Fluid renders 
<pre>
<f:uri.action ... arguments=""{obj1:value1, obj2:value2}""></f:uri.action>
</pre>
as 
<pre>
obj1=value1&obj2=value2
</pre>
instead of 
<pre>
obj1=value1&amp;obj2=value2
</pre>
"
52185,TYPO3.Flow,Bug,"",New,Could have,PositionalArraySorter should detect recursive dependencies,Bastian Waidelich,"",2013-09-23 07:02,Utility,"",2013-09-23,"","",0,2013-09-23 07:02,"","",1357050,"",Git master,"The PositionalArraySorter currently doesn't detect endless loops triggered by a configuration like
<pre>
<code class=""yaml""
'foo':
  position: 'before bar'
'bar'
  position: 'before foo'
</code>
</pre>

I consider this a minor bug because PHP detects the recursion and issues a warning:
<pre>
PHP Warning:  array_walk_recursive(): recursion detected...
</pre>"
52216,TYPO3.Flow,Bug,"",Closed,-- undefined --,TYPO3\Flow\Error\Exception thrown in file ErrorHandler.php,Tansel Cubuk,Tansel Cubuk,2013-09-24 08:01,- Error Handler Report -,"",2013-09-24,"","",0,2013-09-24 05:38,"","",1358600,"",Flow 2.0.0,"<pre>
Warning: symlink(): Cannot create symlink, error code(1314) in E:\weblocal\flow1\Quickstart\Data\Temporary\Development\Cache\Code\Flow_Object_Classes\TYPO3_Flow_Resource_Publishing_FileSystemPublishingTarget.php line 116
21 TYPO3\Flow\Error\ErrorHandler::handleError(2, ""symlink(): Cannot create symlink, error code(1314)"", ""E:\weblocal\flow1\Quickstart\Data\Temporary\Develo?Resource_Publishing_FileSystemPublishingTarget.php"", 116, array|3|)

20 symlink(""E:/weblocal/flow1/Quickstart/Packages/Framework/TYPO3.Flow/Resources/Public"", ""E:/weblocal/flow1/Quickstart/Web/_Resources/Static/Packages/TYPO3.Flow"")

19 TYPO3\Flow\Resource\Publishing\FileSystemPublishingTarget_Original::publishStaticResources(""E:/weblocal/flow1/Quickstart/Packages/Framework/TYPO3.Flow/Resources/Public/"", ""Packages/TYPO3.Flow/"")

18 TYPO3\Flow\Resource\Publishing\ResourcePublisher_Original::publishStaticResources(""E:/weblocal/flow1/Quickstart/Packages/Framework/TYPO3.Flow/Resources/Public/"", ""Packages/TYPO3.Flow/"")

17 TYPO3\Flow\Resource\ResourceManager_Original::publishPublicPackageResources(array|19|)

16 TYPO3\Flow\Core\Booting\Scripts::initializeResources(TYPO3\Flow\Core\Bootstrap)

15 call_user_func(array|2|, TYPO3\Flow\Core\Bootstrap)

14 TYPO3\Flow\Core\Booting\Step::__invoke(TYPO3\Flow\Core\Bootstrap)

13 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

12 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

11 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

10 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

9 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

8 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

7 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

6 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

5 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

4 TYPO3\Flow\Core\Booting\Sequence::invoke(TYPO3\Flow\Core\Bootstrap)

3 TYPO3\Flow\Http\RequestHandler::boot()

2 TYPO3\Flow\Http\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()
</pre>

Please include more helpful information!"
52280,TYPO3.Flow,Task,"",Under Review,Should have,Throw Exception if there is an array in PSR-0 autoload,Michael Gerdemann,"",2013-10-05 05:30,"","",2013-09-26,"","",0,2013-09-26 01:46,"","",1361750,"","","It would be nice if TYPO3 Flow throws an Exception if there is an array in PSR-0 autoload in composer.json.

Example:
<pre>
""autoload"": { ""psr-0"":{ ""placeholder"": [""src/"", ""src2/""] } },
</pre>

Patch:
<pre>
if (is_array($this->getComposerManifest()->autoload->{'psr-0'}->{$this->getNamespace()})) {
	throw new \TYPO3\Flow\Package\Exception\InvalidPackageManifestException(sprintf('The autoload for package ""%s"" is an array. Please change it to string at ""%scomposer.json"".', $packageKey, $this->packagePath.$manifestPath), 1380172921);
}

</pre>"
52311,TYPO3.Flow,Bug,"",Resolved,Must have,Uuid validator doesn't have string boundaries,Adrian Föder,Adrian Föder,2014-07-11 14:19,Validation,"",2013-09-26,"","",100,2013-09-26 12:34,"","",1363300,"",Git 2.0,"\TYPO3\Flow\Validation\Validator\UuidValidator::$PATTERN_MATCH_UUID is '/([a-f0-9]){8}-([a-f0-9]){4}-([a-f0-9]){4}-([a-f0-9]){4}-([a-f0-9]){12}/' and therefore a UUID like 9e6e8e93-36b7-4158-9893-257632bc7a37sdsdflkjsdflkj is considered valid, incorrectly ofc"
52419,TYPO3.Fluid,Bug,"",New,Should have,Wrong PHPDocs notation for default value inline f:translate viewhelper,Frans Saris,"",2013-10-01 03:10,"",2.0,2013-10-01,"","",0,2013-10-01 03:03,"","",1368550,"",Git master,"The inline documentation in TYPO3\Fluid\ViewHelpers\TranslateViewHelper states:
<pre>
<code title=""Inline notation"">
{f:translate(id: 'some.label.id', default: 'fallback result')}
</code>
</pre>

But this has to be:

<pre>
<code title=""Inline notation"">
{f:translate(id: 'some.label.id', value: 'fallback result')}
</code>
</pre>"
52424,TYPO3.Eel,Feature,"",Resolved,Should have,Implement Cache for generated EEL Expression Code,Christian Müller,"",2013-10-01 05:36,"","",2013-10-01,"","",100,2013-10-01 04:48,"","",1368800,"","",Cache the evaluated methods that represent EEL expressions into a file cache to save the parsing step.
52425,TYPO3.Flow,Bug,"",Resolved,Should have,"""Required option"" flag in AbstractValidatior does not work correct",Michael Gerdemann,"",2013-10-04 10:35,"","",2013-10-01,"","",100,2013-10-01 05:52,"","",1368850,"",Flow 2.0.0,"The ""required"" flag for the options in source:/Classes/TYPO3/Flow/Validation/Validator/AbstractValidator.php does not work correct.
If the flag is set to *FALSE*, the option is nevertheless *TRUE*.

Example (does not work):
<pre>
protected $supportedOptions = array(
	'optionName'   => array('default, 'Description', 'mixed', FALSE)
);
</pre>"
52430,TYPO3.Flow,Bug,"",New,Should have,Cannot convert from UUID to auto-increment ID,Vladimir B,"",2013-10-01 09:48,"","",2013-10-01,"","",0,2013-10-01 09:48,"","",1369100,"",Flow 2.0.0,"Hi all

I think I found a bug - when I tried to convert a model to use an auto-increment ID instead of the UUID, the doctrine:update failed with message:

Uncaught Exception
  An exception occurred while executing 'ALTER TABLE
  mytable DROP persistence_object_identifier, CHANGE
  id id INT AUTO_INCREMENT NOT NULL':
  
  SQLSTATE[42000]: Syntax error or access violation: 1075 Incorrect table
  definition; there can be only one auto column and it must be defined as a
  key

More Information
  Exception code      #0
  File                /flow/Packages/Libraries/doctrine/dbal/lib/Doctrine/DBAL/DBALException.php line 47

"
52448,TYPO3.Flow,Bug,"",Resolved,Should have,Serialization of objects should exclude transient properties,Christian Müller,Christian Müller,2013-10-02 13:35,Object,"",2013-10-02,"","",100,2013-10-02 02:17,"","",1370000,"",Git master,"We still check for a ""tag"" annotation to exclude transient properties from serialization. That is wrong and transient properties are always serialized."
52450,TYPO3.Eel,Bug,"",Resolved,Should have,Children operation should work for properties that cotain collections,Christian Müller,Christian Müller,2015-02-02 10:51,"","",2013-10-02,"","",100,2013-10-02 03:53,"","",1370100,"","",children operation works fine for regular properties but not at all for collection properties which are one of the main use cases for children operation.
52452,TYPO3.Flow,Task,"",Resolved,Should have,Refactor router caching logic into a service,Tim Kandel,Tim Kandel,2013-10-03 13:35,MVC - Routing,2.1,2013-10-02,"","",100,2013-10-02 04:05,"","",1370200,"","","Currently the logic for fetching the routing cache and creating it resides solely in the RouterCachingAspect. This makes it hard for us and for userland code to work with this cache without having to repeat the code. Instead of using the Aspect, there should be a Service that implements all neccessary methods."
52509,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Child-Object's Identifier get's lost on Form-Submission with Validation Error,Mario Rimann,"",2013-10-03 10:18,"","",2013-10-03,"","",0,2013-10-03 10:12,"","",1373000,"",Flow 2.0.0,"Given the situation with the following Domain Model:

* Registration (the parent-object)
** has property ""patientData"" to store an object of the type ""PatientData"" (the child-object)
** has other properties of different types, some Strings, some other child-objects

In the *first step* of the form
# the Registration object is instantiated
# the PatientData object is instantiated and attached with $registration->setPatientData($patientData)
# the registration is added to the RegistrationRepository
# everything is explicitely persisted with a call to persistAll()

Then the *second step* of the form is displayed and contains some hidden fields with the Identity of the child-object. The UUID is the one I can also see directly in the database. So far everything is OK.

Now the second step of the form is submitted while missing out one of the mandatory fields to trigger a validation error.

The form of the second step is now shown again - but the hidden fields in the form header (generated by fluid) are not the same anymore -> *the identifier for the child-object is missing*! It looks like they get stripped off somehow.

Tested on Flow 2.0.0 and Fluid 2.0.0"
52526,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Unfinished programming of DateTime converter,Stefan Froemken,"",2013-10-04 04:36,"",2.0.1,2013-10-04,"","",0,2013-10-04 04:36,"","",1373800,"",Flow 2.0.0,"Hello Flow-Team,

it seems that there is an unfinished programming in TYPO3 Flow and fluid form handling.

My HTML for f:form:

<pre>
<div class=""extdiv"">
    <label for=""eventBegin""><f:translate key=""tx_events2_domain_model_event.event_begin"" /></label>
    <f:form.textfield id=""eventBegin"" property=""eventBegin.date"" />
    <f:form.hidden property=""eventBegin.dateFormat"" value=""d.m.Y"" />
    <f:form.hidden property=""eventBegin.hour"" value=""0"" />
    <f:form.hidden property=""eventBegin.minute"" value=""0"" />
    <f:form.hidden property=""eventBegin.second"" value=""0"" />
</div>
</pre>

There is NO problem to create NEW entries with this form. This eventBegin-Array goes into DateTimeConverter and I get a valid DateTime-Object back.

BUT: When I edit this record, in my eventBegin-field stands: 2013-01-17 00:00:00+2

I don't have any possibility to format this date to d.m.Y

In ObjectAccess->getPropertyPath it gets the path ""eventBegin.date"". It executes getEventDate() and will then try to execute getDate() which isn't there if I return a string in my getEventBegin()-Method. If I return the original DateTimeValue it will return an unformattable Datestring as described above.

Stefan"
52536,TYPO3.Fluid,Bug,"",Under Review,Should have,Errorclass not set if no property-attribute set,Stefan Froemken,"",2015-07-16 05:26,"","",2013-10-04,"","",0,2013-10-04 09:17,"","",1374300,"","","Hello Extbase-Team,

in some special cases we can't use attribute ""property"" but ""name"" and ""value"". But in that case the errorclass (red background) was never displayed.

Stefan"
52590,TYPO3.Flow,Feature,"",New,Should have,Provide a way to get the Doctrine QueryBuilder,Philipp Maier,"",2013-10-11 04:39,"","",2013-10-07,"","",0,2013-10-07 11:45,"","",1377000,"","","Currently it is not possible to paginate object collections that require a join to be reconstructed.

<code>
If your query contains a fetch-joined collection specifying the result limit methods are not working as you would expect. Set Max Results restricts the number of database result rows, however in the case of fetch-joined collections one root entity might appear in many rows, effectively hydrating less than the specified number of results.
</code>

The solution is to use the Paginator that Doctrine provides. Unfortunately this one requires the QueryBuilder as constructor argument.
http://stackoverflow.com/questions/5620771/limiting-a-doctrine-query-with-a-fetch-joined-collection

Once available, the Pagination Widget from Fluid must/should use the Paginator."
52591,TYPO3.Fluid,Bug,"",New,Should have,The Pagination Widget broken for joined objects,Philipp Maier,"",2013-10-07 15:59,"","",2013-10-07,"","",0,2013-10-07 11:50,"","",1377050,"",Git master,"In cases where objects are reconstructed through joins, setting the LIMIT leads to an incomplete result set.

Doctrine provides an Paginator for these purposes. The widget should use this paginator as soon as it is available in Flow (see: http://forge.typo3.org/issues/52590)."
52635,TYPO3.Flow,Bug,"",Resolved,Should have,Incorrect merging of Views.yaml files from multiple Packages,Marc Neuhaus,Bastian Waidelich,2013-10-11 06:36,"","",2013-10-09,"","",100,2013-10-09 08:37,"","",1379250,"",Git master,"There is an issue with the way the Views.yaml files are merged in the ConfigurationManager because of the unnamed, indexed way the Views.yaml files are meant to be.

Example:

Given these two Views.yaml files form different packages:

Package1/Views.yaml
<pre>
-
  requestFilter: 'isPackage(""Package1.Features"")'
  options:
    layoutRootPathPattern: resource://Famelo.ADU/Private/Layouts/
    templatePathAndFilename: resource://Famelo.ADU/Private/Templates/Features/Index.html
</pre>

Package2/Views.yaml
<pre>
-
  requestFilter: 'isPackage(""TYPO3.Expose"")'
  options:
    typoScriptPathPatterns:
      - 'resource://TYPO3.Expose/Private/TypoScripts/'
      - 'resource://Famelo.ADU/Private/TypoScripts/'
-
  requestFilter: 'isPackage(""Package2.Foo"")'
  options:
    layoutRootPathPattern: resource://Famelo.ADU/Private/Layouts/
</pre>

will result in this merged configuration:
<pre>
-
  requestFilter: 'isPackage(""TYPO3.Expose"")'
  options:
    typoScriptPathPatterns:
      - 'resource://TYPO3.Expose/Private/TypoScripts/'
      - 'resource://Famelo.ADU/Private/TypoScripts/'
    layoutRootPathPattern: resource://Famelo.ADU/Private/Layouts/
    templatePathAndFilename: resource://Famelo.ADU/Private/Templates/Features/Index.html
-
  requestFilter: 'isPackage(""Package2.Foo"")'
  options:
    layoutRootPathPattern: resource://Famelo.ADU/Private/Layouts/
</pre>

Which in turn throw an exception, because it will try to set a templatePathAndFilename on a TypoScriptView which hasn't that option.


*Possible Solution*
We already discussed this briefly in IRC and agreed to create a new ConfigurationProcessingType which will append instead of merge
indexed arrays."
52640,TYPO3.Fluid,Feature,"",Under Review,Should have,Create an UnlessViewHelper as opposite to the IfViewHelper,Marc Neuhaus,Marc Neuhaus,2014-08-01 03:02,"","",2013-10-09,"","",0,2013-10-09 09:55,"","",1379500,"","","Sometimes the IfViewHelper syntax is quite verbose if you only want to do something on ""else"":

<pre>
<f:if condition=""..."">
    <f:else>...</f:else>
</f:if>
</pre>

As an alternative we discussed a new ""UnlessViewHelper"" in IRC to shorten this:

<pre>
<f:unless condition=""..."">...</f:unless>
</pre>

The only difference to the IfViewHelper is the negation of the condition.

This helps for example shortening the syntax for a ForLoop with condition for no objects from:

<pre>
<f:if condition=""{objects}"">
    <f:then>
        <f:for each=""{objects}"" as=""object"">
            ...
        </f:for>
    </f:then>
    <f:else>No objects found</f:else>
</f:if>
</pre>

to:


<pre>
<f:for each=""{objects}"" as=""object"">
    ...
</f:for>
<f:unless condition=""{objects}"">No objects found</f:unless>
</pre>"
52704,TYPO3.Flow,Task,"",Resolved,Should have,Get rid of RouterCachingAspect,Bastian Waidelich,Bastian Waidelich,2013-10-21 08:36,MVC - Routing,"",2013-10-11,"","",100,2013-10-11 10:28,"","",1382700,"","",Caching of the Routing Framework has been extracted to an AOP aspect in order to keep the Router code simple. Since the introduction of the RouterCachingService (#52452) this is no longer required
52846,TYPO3 Flow Base Distribution,Suggestion,"",Resolved,Could have,Add isConnected() to Persistence interface,Rens Admiraal,"",2014-07-11 14:19,"","",2013-10-15,"","",100,2013-10-15 08:46,"","",1389750,"","","Change https://review.typo3.org/#/c/24609 introduced and isConnected() method to the roleRepository to verify if the repository can actually be used for fetching and storing data. In the comments of the change it was suggested to move this method up in the class hierarchy and make it api. As this is still not fully decided and the bugfix has to be merged we will push this later on based on this ticket.

Basically the following should be decided:
* Should it be api
* Should it be added to an interface
* To which interface

When this method is moved up it should of course be removed from the roleRepository"
52879,TYPO3.Eel,Feature,"",Resolved,Should have,Implement Slice operation,Dominique Feyer,Dominique Feyer,2013-10-30 07:35,"","",2013-10-16,"","",100,2013-10-16 03:46,"","",1391400,"","","As discussed on IRC with Christian EEL should support natively Slice opertation. A basic use case will be to display a list the the two last node type for a teaser.

API should look like, and work like the JS slide method:

<pre>
${q(site).find('fr/blog').children('[instanceof Namespace.Plugin.Blog:Post]').slice()}
${q(site).find('fr/blog').children('[instanceof Namespace.Plugin.Blog:Post]').slice(2)}
${q(site).find('fr/blog').children('[instanceof Namespace.Plugin.Blog:Post]').slice(0, 2)}
</pre>"
52907,TYPO3.Flow,Bug,"",Resolved,Should have,#1355480641: Uncaught Exception,Kay Strobach,Bastian Waidelich,2014-03-20 15:37,Persistence,"",2013-10-17,"","",100,2013-10-17 03:44,"","",1392800,"",Flow 2.0.0,"<pre>
OneToMany mapping on field 'measurementDataRecords' requires the
'mappedBy' attribute.

More Information
Exception code #0
File /project/Packages/Libraries/doctrine/orm/lib/Doctrine/ORM/Mapping/MappingException.php line 150
</pre>

The Exception message should name the declaring class for the not interpretable property ..."
52909,TYPO3.Flow,Bug,"",New,Should have,Class Loader fallback to non-proxy hides fatal errors,Stephan Schuler,"",2013-10-17 05:24,Core,"",2013-10-17,"","",0,2013-10-17 05:24,"","",1392900,"",Flow 2.0.0,"Hey there.

This commit is slightly related to #46689. But since #46689 has drifted to focusing doc parsing and annotation, I will explain this here instead of #46689.


The current strategy is:
* ClassLoader uses a PhpFrontend which uses a SimpleFileBackend to cache proxy class files.
* The SimpleFileBackend catches exceptions and returns FALSE if any exception or notice is thrown inside of an included file.

This leads to falling back to the very orignial file inside of the package directory whenever a notice accures inside of a proxy class file.

Having a non proxied original file when you expect the proxied one leads to kind of unexplainable misbeavior.

h3. Real world example:

Think about a class having a method that has a type hint, e.g. _RsaWalletServicePhp::decryptWithPrivateKey($cipher, \TYPO3\Flow\Security\Cryptography\OpenSslRsaKey $privateKey)_.

Now extend this class and overwrite it without the type hint: _ExtendedRsaWalletServicePhp::decryptWithPrivateKey($cipher, $privateKey)_.

The proxy class file gets created and exists in the proxy class files directory.
The class loader tries to include it through te SimpleFileBackend and runs into the following exception:
<pre>Runtime Notice: Declaration of ExtendedRsaWalletServicePhp::decryptWithPrivateKey() should be compatible with that of TYPO3\Flow\Security\Cryptography\RsaWalletServicePhp_Original::decryptWithPrivateKey() [...]</pre>

Now the fallback strategy of the ClassLoader kicks in and includes the original file that exists in the package directory.

This obviously results in confusing behavior, since the class itself exists in the PHP process environment, but it's not the proxied one so it's not initialized by the AOP stuff. The example here has no settings, which means it doesn't know where the RSA key file can be found, which means no keys available.

h3. How to notice this and how it confuses

The thing is: There is no exception, so there is no log file in the Logs/Exceptions directory. And there is no log line in the Logs/System_*.log file.

Thinking about the above example, there are two relevant proxy class files. One holds the ExtendedRsaWalletServicePhp and ExtendedRsaWalletServicePhp_Original classes, the other one holds the RsaWalletServicePhp and RsaWalletServicePhp_Original classes.

You would expect to have a valid ExtendedRsaWalletServicePhp object that is fully loaded by AOP, but it isn't.

I added breakpoints to both, the proxied ExtendedRsaWalletServicePhp:__construct and the proxied RsaWalletServicePhp:__construct.

The very confusing thing:
* The proxied ExtendedRsaWalletServicePhp:__construct isn't executed (obviously, because it's not the proxy class which gets included but the original package file.
* The proxied RsaWalletServicePhp:__construct is executed, but get_class($this) shows that it's a ExtendedRsaWalletServicePhp object.
* Now you start to thing: Why is the __construct of the class skipped in this situation? Points to a PHP bug (which it isn't, of course).

h3. Fix:

The ClassLoder should know if there has to be a proxy class file or not. Now the ClassLoader should throw an exception if the Reflection knows about proxy class files but the PhpBackend returned FALSE and indicates the ""did not load"" situation.

It's related to this commit:
https://git.typo3.org/Packages/TYPO3.Flow.git/commitdiff/f04343e10cef18e3e76bb302b840c1313225b57e

The real problem is: The class loader doesn't take care of the result, it simply falls back to the package file.

I tried PHP versions 5.3.8, 5.3.10, 5.3.24 and a 5.4.x I don't remember exactly.

Regards,
Stephan."
52938,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Resource stream wrapper doesn't work with foreign package,Lorenz Ulrich,"",2013-10-18 04:31,"","",2013-10-18,"","",0,2013-10-18 04:31,"","",1394350,"",Flow 2.0.0,"Using the resource stream wrapper (tested from Fluid) always generates links pointing to the origin package.

Example: An inline CSS in the Fluid template of package *Acme.Test*:

<pre>
background-image: url(resource://Acme.Demo/Public/Images/pdf.png);
</pre>

This will generate the following output:

<pre>
background-image: url(http://mydomain.tld/_Resources/Static/Packages/Acme.Test/Images/pdf.png);
</pre>

instead of

<pre>
background-image: url(http://mydomain.tld/_Resources/Static/Packages/Acme.Demo/Images/pdf.png);
</pre>"
52944,TYPO3.Flow,Bug,"",Resolved,Should have,Generating correct proxy classes for classes without a namespace,Hendrik Frahmann,"",2014-07-11 14:19,"","",2013-10-18,"","",100,2013-10-18 05:29,"","",1394650,"",Git master,"When packages (that are loaded with composer to Libraries) containing classes without a namespace, Flow generates a corrupt proxy class.

<pre>
class FooClass_Original {
}

namespace ; // empty namespace causing error
// Parse error: syntax error, unexpected ';', expecting T_STRING or T_NS_SEPARATOR or '{' in [filename]

class FooClass {
  // proxy class
}

</pre>"
52945,TYPO3.Flow,Bug,"",New,Should have,Excluded classes should only be excluded from reflection but still autoloaded,Hendrik Frahmann,"",2013-10-19 06:52,"","",2013-10-18,"","",0,2013-10-18 05:42,"","",1394700,"",Git master,"Classes that are excluded in the settings.yaml (Flow > object > excludeClasses) should still be able to autoload.
"
53010,TYPO3.Flow,Bug,"",Resolved,Must have,"UsernamePasswordHttpBasic disabled since .htaccess strips ""Basic""",Stephan Schuler,"",2014-08-26 09:30,Security,"",2013-10-21,"","",100,2013-10-21 11:15,"","",1397950,"",Git master,"Hey there.

The Token\UsernamePasswordHttpBasic requires the ""Authentication"" header to begin with ""Basic"". That's fine since this very token is only meant to deal with basic auth requests.

Unfortunately the .htaccess file which gets installed contains the following line:
<pre>SetEnvIfNoCase Authorization ""Basic ([a-zA-Z0-9\+/=]+)"" REMOTE_AUTHORIZATION=$1</pre>

This means: Whenever the ""Authorization Basic"" header is set, it gets passed to the REMOTE_AUTHORIZATION environment variable by stripping the ""Basic"" string."
53059,TYPO3.Fluid,Feature,"",Closed,Should have,Throw exception for unresolved namespaces,Bastian Waidelich,Bastian Waidelich,2014-12-08 13:24,Core,"",2013-10-23,"","",0,2013-10-23 05:30,"","",1400400,"","","One major source of errors when working with Fluid is the missing error handling when referring to a ViewHelper namespace that hasn't been declared.
Especially when one extracts parts of the template to a partial the namespace declaration is easily forgotten.

The issue with this is that namespace prefixes are allowed in xml so Fluid can't determine whether @<unknown-namespace:foo />@ is a mistyped ViewHelper or a (possibly valid) XML/XHTML tag that has been registered otherwise.
Given the importance of this we should solve this even though it would be a breaking change. We came up with following solution:

<pre>
<code class=""html"">
{namespace x=Some\Package\ViewHelpers}
{namespace xs}

<f:foo />  <!-- as before: this would be a valid fluid tag as ""f"" is always registered (even though it would throw an exception because there is no VH ""FooViewHelper"" in the Fluid package -->

<x:some.viewHelper />    <!-- as before: would resolve to \Some\Package\ViewHelpers\Some\ViewHelperViewHelper -->

<xs:element />     <!-- as before but explicit: would be ignored, because the namespace is registered but does not point to a PHP namespace -->

<unknown:foo />     <!-- new: would throw an exception in Dev context, ignore the tag in Production context because the namespace ""unknown"" is not defined -->

</code>
</pre>

When working with complex XML based files with a lot of namespaces (like XML Schema or LaTeX) it would be tedious to register all the namespaces so we should also support some kind of placeholder syntax like:
<pre>
<code class=""html"">
{namespace *} <!-- ignores all unknown namespaces (old behavior) -->
{namespace xs*} <!-- ignores all unknown namespaces that start with ""xs"" -->
</code>
</pre>

Note: a different approach to this would be to configure namespaces not in the Fluid template but in the configuration. See #35766 and the related issues for reasons why we *shouldn't* do this"
53080,TYPO3.Flow,Feature,"",Accepted,Should have,Support for multiple domains,Bastian Waidelich,"",2014-11-18 04:34,MVC - Routing,"",2013-10-23,"","",0,2013-10-23 11:50,"","",1401450,"","","Currently the Flow does not support multi-domain setups out of the box:

* There is no concept of ""domains"" in Flow yet
* The Routing Framework only uses a combination of the (hashed) Request path and method as cache identifier for incoming routes
* How should linking to other domains than the current work? Probably the UriBuilder (and thus all uri/link-ViewHelpers need some ""domain"" argument)

h2. Approaches

Like done with the filterable request methods (#27117) we could add a new routing configuration:
<pre>
<code class=""yaml"">
-
  uriPattern: 'some/uri/pattern'
  defaults:
    '@package': 'TYPO3.Flow'
  domain:        'somedomain.tld'
</code>
</pre>

But I wonder: Should this support multiple domains? or some regex-/placeholder-syntax?
Besides I'm struggling a bit with adding to many configuration options.. We'll soon need yet another one for the protocol (#44891).

A more generic approach (like I started with https://review.typo3.org/#/c/19742/) would be very flexible. But it has a bad impact on performance because all ""filters"" can change the caching identifier..

h2. Get basic multi-domain support today

You can get multi-domain Routing working by creating a custom RoutePartHandler that only matches/resolves when the domain is one of the configured. But then you have to disable the Routing Cache in Caches.yaml::
<pre>
<code class=""yaml"">
Flow_Mvc_Routing_FindMatchResults:
  backend: TYPO3\Flow\Cache\Backend\NullBackend
Flow_Mvc_Routing_Resolve:
  backend: TYPO3\Flow\Cache\Backend\NullBackend
</code>
</pre>

*NOTE:* You should only do so if you *absolutely* know what you're doing. Disabling the Routing Cache can have a really bad impact on the performance.

Another way to get basic support for multiple domains is to use a (sub)context for each domain (Configuration/Production/Domain1/Routes.yaml, Configuration/Production/Domain2/Routes.yaml). But this won't solve the cross-domain-linking issue."
53134,TYPO3.Flow,Bug,"",Closed,Should have,"Regex Character class ""alnum"" not working correct in AlphanumericValidator",Michael Gerdemann,Karsten Dambekalns,2014-02-24 02:44,Validation,"",2013-10-25,"","",0,2013-10-25 08:19,"","",1404150,"",Flow 2.0.0,"The Regex Character class ""alnum"" not working correct in AlphanumericValidator.
A better regular expression would be:

<pre>
/^[[:alnum:]\pL]*$/u
</pre>"
53177,TYPO3.Flow,Feature,"",New,Should have,entity resource policy value support for `this`,Benjamin Heek,"",2014-05-20 03:22,Security,"",2013-10-28,"","",0,2013-10-28 09:39,"","",1406300,"","","It would be great if a resource policy for an entity could be defined like:

resources:
  entities:
    \Some\Domain\Model\Entity:
       SomeEntity: 'current.securitycontext.party != this'

"
53180,TYPO3 Flow Base Distribution,Bug,"",New,Must have,InjectSettings doesnt work on inheritance (Level 2),Carsten no-lastname-given,"",2013-11-26 15:46,Build Process,"",2013-10-28,"","",0,2013-10-28 14:31,"","",1406450,"",Flow 2.0.0,"abstract foo{
  public function injectSettings($settings)...
}

bar extends foo{}

baz extends bar{}


Creating a new Instance with ObjectManager:
Result: baz::settings is NULL.

This is caused by the Proxy Classes.
InjectSettings is skipped on class inheritances over more then 2 levels



"
53189,TYPO3.Flow,Bug,"",New,Should have,Blog tutorial no longer works,Philipp Maier,Philipp Maier,2013-10-29 04:50,"","",2013-10-29,"","",0,2013-10-29 04:46,"","",1406900,"",Git master,"People seem to have problems with the blog example here: http://docs.typo3.org/flow/TYPO3FlowDocumentation/TheDefinitiveGuide/PartII/ModelAndRepository.html due to safe requests. I'll find out what the kickstarter generates and adjust that, or the tutorial."
53224,TYPO3.Flow,Bug,"",New,Should have,Constructor in subclass breaks call chain leading to missing identifier / uuid,Christian Jul Jensen,"",2013-10-30 07:06,Object,"",2013-10-30,"","",0,2013-10-30 07:04,"","",1408650,"",Git master,"If a subclass in a class hierachy has constrcutor, the call chain of proxies constructors will be broken which will lead to problems in the persistance layer.

Example
<pre>
class Parent - no constructor
\_ class Child - constructor 
</pre>

will lead to 

<pre>
class Parent_Original - no constructor
\_ class Parent - constructor introduced by proxy
 \_ class Child_Original - constructor
  \_ class Child - constructor introduced by proxy
</pre>

In this case the constructor call chain will stop at the Child_Original constructor.

The bug in the persistence layer, might only oocur in the case of single table inheritence.

A workaround for this is to add a parent::_construct() call at the end of the Child domain class' constructor method."
53238,TYPO3.Flow,Bug,"",Resolved,Should have,Throw exception if PackageStates.php is not writeable,Steffen Müller,"",2014-03-06 16:36,"","",2013-10-30,"","",100,2013-10-30 18:45,"","",1409300,"",Flow 2.0.0,"The Package Manager writes package states to PackageStates.php file using
""file_put_contents()"":http://forge.typo3.org/projects/package-typo3-flow/repository/revisions/master/entry/Classes/TYPO3/Flow/Package/PackageManager.php#L930
together with the error control operator @ to suppress errors.

This leads to unpredictable behavior when PackageStates.php file is not writeable.

I suggest to verify if the file is writable and otherwise throw an exception. 

TYPO3 CMS team has already a draft at https://review.typo3.org/#/c/24975/ - would you please comment there or here, since we aim to streamline with upstream Flow."
53262,TYPO3.Flow,Bug,"",New,Should have,FileBakend have some race condition,Dominique Feyer,Dominique Feyer,2013-11-01 05:48,Cache,"",2013-11-01,"","",0,2013-11-01 05:48,"","",1410400,"",(any),"One of the problem is that get() can be called before the file is available, so we need multiple try of file_get_contents like we have in set() for the rename. In the patch, I add a usleep, really short, to increase the wait time a bit between each try."
53350,TYPO3.Flow,Bug,"",Accepted,Should have,Trying to create a Link in an Template in CLI Context should provide a helpful exception,Marc Neuhaus,Bastian Waidelich,2013-11-05 09:00,MVC - Routing,"",2013-11-05,"","",0,2013-11-05 09:00,"","",1414800,"",Git master,"If you try to render a FluidTemplate with a link in it through a
CommandController it fails currently with this error:

<pre>
Uncaught Exception
  Could not resolve a route and its corresponding URI for the given
  parameters. This may be due to referring to a not existing package /
  controller / action while building a link or URI. Refer to log and check
  the backtrace for more details.
</pre>

This happens, because the router isn't configured by default in the
cli context and needs to be configured manually.

We should provide a more helpful exception here to tell the dev what
he needs to do"
53533,TYPO3.Flow,Bug,"",New,Should have,"Class reflection assumes reverse PSR-0, can lead to fail in autoloader",Christian Jul Jensen,"",2013-11-11 15:05,Reflection,"",2013-11-11,"","",0,2013-11-11 15:05,"","",1423900,"",Git master,"When gathering info about a package Flow currently assumes PSR-0 as bijective which is not the case.

Ie.

The file Pheanstalk/PheanstalkInterface.php does not necessarily hold the class \Pheanstalk\PheanstalkInterface, this situation has already been handled for files containing sideeffects rather than classes fx. autoload.php

The problem is that according to PSR-0 the file can hold the class \Pheanstalk_PheanstalkInterface, and thus the following can happen;

1. Flow analyzes filesystem and adds Pheanstalk/PheanstalkInterface.php to files to be reflected, expecting \Pheanstalk\PheanstalkInterface.
2. During the reflection some other class implements \Pheanstalk_PheanstalkInterface and the autoloader correctly loads this from Pheanstalk/PheanstalkInterface.php
3. The autoloader reaches Pheanstalk/PheanstalkInterface.php for inclusion and fails with 'Fatal error: Cannot redeclare class Pheanstalk_PheanstalkInterface'

This is not trivial to handle since the file could actually hold the expected namespaced class.

Possible ways to fix it:
* During compiletime let ClassLoader notify ReflectionService on included files so it can be removed from further reflection
* Let ReflectionService pre-analyze files for expected classes."
53620,TYPO3.Flow,Bug,"",New,Should have,Move Classes/TYPO3/Flow/Composer to own Package,Rafael Kähm,"",2014-01-01 10:02,Package,"",2013-11-13,"","",0,2013-11-13 12:26,"","",1428250,"",Git master,"By installing TYPO3 Flow or neos you get warnings on each dependency package ""Class TYPO3\Flow\Composer\InstallerScripts is not autoloadable, can not call post-package-install script"".

Composer tries to call a script for ""post-package-install""-event before TYPO3.Flow is installed and prints warnings (see https://github.com/composer/composer/blob/2b36106168e89fa185dfa604a1666fd1b188384e/src/Composer/EventDispatcher/EventDispatcher.php#L128-L131 ).  

InstallerScripts must be available earlier.

Possible solution:
1 moving Classes/TYPO3/Flow/Composer to TYPO3.InstallerScripts 
2 in ""Classes/TYPO3/InstallerScripts/Package""  postPackageUpdateAndInstall() and check if TYPO3.Flow package is available first and then proceed ... 
3 add ""TYPO3.InstallerScripts"" to dependencies at second place(after ""php"": "">=5.3.2"",) in Packages/Framework/TYPO3.Flow/composer.json 

 
"
53790,TYPO3 Flow Base Distribution,Bug,"",New,Must have,Translation handling in Flashmessages is inconsistent to Validation errors,Kay Strobach,"",2013-11-20 04:46,"","",2013-11-20,"","",0,2013-11-20 04:46,"","",1436600,"",Git master,"Example code:

Current of generating a flashmessage with an argument:
<pre>
  $this->addFlashMessage('This id %1s is already present in the Translation file', '', Message::SEVERITY_NOTICE, array($translationLabel->getLabelId()));
</pre>

Problem is that the translation handler queried for e.g.:
<pre>
This id oierjgu9her9gheru is already present in the Translation file
</pre>

This makes translation of dynamic flashmessages impossible.

The better way would be to translate flashmessages similar to Validation errors:

<pre>
  $this->addFlashMessage('This id {0} is already present in the Translation file', '', Message::SEVERITY_NOTICE, array($translationLabel->getLabelId()));
</pre>

Would result in querying the translation handler with
<pre>
This id {0} is already present in the Translation file
</pre>

This can be easily translated and i would be satisfied ;)"
53800,TYPO3.Fluid,Task,"",Resolved,Must have,Regard handling of AuthenticatedUser system role in IfHasRole VH,Adrian Föder,Adrian Föder,2013-11-20 10:37,ViewHelpers,"",2013-11-20,"","",100,2013-11-20 10:01,"","",1437100,"","","With Ia00bea27e81b2e4a172ad4f998dfa30581dd71dd, a new system role AuthenticatedUser was introduced, however, that is not backed in the mentioned VH."
53805,TYPO3.Fluid,Task,"",Resolved,Should have,Optimization in AbstractViewHelper,Wouter Wolters,"",2014-11-26 10:13,"","",2013-11-20,"","",100,2013-11-20 12:56,"","",1437350,"","",Optimization in AbstractViewHelper
53806,TYPO3.Fluid,Bug,"",Under Review,Should have,Paginate widget maximumNumberOfLinks rendering wrong number of links,Wouter Wolters,Bastian Waidelich,2014-06-18 06:13,Widgets,"",2013-11-20,"","",0,2013-11-20 13:11,"","",1437400,"",(any),"When setting maximumNumberOfLinks configuration option to 8, 10 links will be rendered."
53827,TYPO3.Flow,Feature,"",Resolved,Should have,Deprecate base tag,Bastian Waidelich,Bastian Waidelich,2013-12-03 16:35,MVC - Routing,"",2013-11-21,"","",100,2013-11-21 04:46,"","",1438450,"","","Currently the UriBuilder creates relative URLs in the form *landing-page/sub-page.html* by default.
This requires the presence of a <base /> tag in the HTML head in order to be resolved correctly when the browser is currently on a page other than the homepage.

By prefixing relative URLs with the *script request path* the base tag would no longer be required.

In general we should think about creating absolute URLs by default (see http://yoast.com/relative-urls-issues/)"
53851,TYPO3.Flow,Bug,"",New,-- undefined --,TYPO3\Flow\Core\Booting\Exception\SubProcessException thrown in file Scripts.php,Sylvain COTINEAU,"",2013-12-31 18:00,- Error Handler Report -,"",2013-11-21,"","",0,2013-11-21 17:08,"","",1439650,"",FLOW3 1.1.0,"Hi!

It's with typo3 neos on /setup/index?step=0
under Debian wheezy

damned :( i can't wait ;)


Uncaught Exception
  An exception occurred while executing 'CREATE TABLE
  flow3_resource_resourcepointer (hash VARCHAR(255) NOT NULL, PRIMARY
  KEY(hash)) ENGINE = InnoDB':

  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was
  too long; max key length is 767 bytes

More Information
  Exception code      #0
  File                /var/www/xorne/neos/TYPO3-Neos-1.0-beta1/Packages/Libraries/doctrine/dbal/lib/Doctrine/DBAL/DBALException.php line 47

31 TYPO3\Flow\Core\Booting\Scripts::executeCommand(""typo3.flow:doctrine:migrate"", array|15|, FALSE)

30 TYPO3\Setup\Step\DatabaseStep_Original::postProcessFormValues(array|7|)

29 TYPO3\Setup\Controller\SetupController_Original::postProcessStep(array|7|, TYPO3\Setup\Step\DatabaseStep)

28 TYPO3\Setup\Controller\SetupController_Original::TYPO3\Setup\Controller\{closure}(TYPO3\Form\Core\Model\FinisherContext)

27 TYPO3\Form\Finishers\ClosureFinisher_Original::executeInternal()

26 TYPO3\Form\Core\Model\AbstractFinisher::execute(TYPO3\Form\Core\Model\FinisherContext)

25 TYPO3\Form\Core\Runtime\FormRuntime_Original::invokeFinishers()

24 TYPO3\Form\Core\Runtime\FormRuntime_Original::render()

23 TYPO3\Setup\Controller\SetupController_Original::indexAction(0)

22 TYPO3\Setup\Controller\SetupController::indexAction(0)

21 call_user_func_array(array|2|, array|1|)

20 TYPO3\Setup\Controller\SetupController::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

19 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

18 TYPO3\Flow\Security\Aspect\PolicyEnforcementAspect_Original::enforcePolicy(TYPO3\Flow\Aop\JoinPoint)

17 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

16 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

15 TYPO3\Setup\Controller\SetupController::indexAction(0)

14 call_user_func_array(array|2|, array|1|)

13 TYPO3\Flow\Mvc\Controller\ActionController_Original::callActionMethod()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Setup\Core\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


Please include more helpful information!"
53931,TYPO3.Flow,Bug,"",Resolved,Should have,ActionRequest should not serialize parent HTTP request,Sebastian Kurfuerst,Sebastian Kurfuerst,2014-07-11 14:19,MVC,2.0.1,2013-11-25,"","",100,2013-11-25 08:02,"","",1443650,"",Flow 2.0.0,"When working with WebRedirects and authentication, the intercepted
request is serialized with the security context. While it makes sense
to do so, we should *not* include the reference to the base HTTP request
in this case, as this includes lots of cruft like $_SERVER etc."
53961,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Composer installer scripts create a .Packages folder,Rens Admiraal,"",2013-11-28 07:06,"","",2013-11-25,"","",0,2013-11-25 16:11,"","",1445150,"",Git master,"Since the last changes to the composer installer scripts a .Packages folder is created if for example TYPO3.Neos is installed. This happens because a folder is copied to folder '.' passed to Files::copyDirectoryRecursively() as target folder.

copyDirectoryRecursively() then prepends this to the source folder, resulting in the .Packages.

Question is if the copyDirectoryRecursively should append the / to prevent issues like this."
53971,TYPO3.Kickstart,Feature,"",New,Should have,Login functionality,Mario Rimann,"",2013-12-16 04:39,"","",2013-11-26,"","",0,2013-11-26 05:03,"","",1445650,"","","Almost every time I start a small project and want to base it on Flow, I need authentication and login functionality to be able to render user-based content. So I thought of the following scenarios on how to improve this:

- build a generic package that provides a login form, a user model and the controller to login/logout the user
- just document the needed steps, copy-paste the needed code templates in case one needs it
- add this to the Kickstarter-Package

At the moment I prefer the last of the ideas as it would just help to quickly set-up the needed stuff in a new package - which then can easily be extended or modified for the specific use-case of that application.

Any veto on adding this to the Kickstarter? Any better ideas? Any inputs from the maintainer(s) on how to prepare that feature, stuff that shouldn't be forgotten?"
54037,TYPO3.Flow,Feature,"",Under Review,Should have,JsonView accepts encoding options,Carsten Bleicker,"",2014-12-14 05:46,MVC,"",2013-11-28,"","",0,2013-11-28 10:17,"","",1448900,"","","json_encode should support multiple bitmask options
see: http://www.php.net/manual/en/json.constants.php"
54046,TYPO3.Flow,Bug,Task #55953: Repair and streamline ValueObject support,New,Must have,Removal of ValueObjects from a ManyToMany relationship is not possible,Philipp Maier,"",2015-02-05 05:01,Persistence,2.1,2013-11-28,"","",0,2013-11-28 15:08,"","",1449350,"",Git master,"Once value objects have been added to a PersistentCollection they can no longer be removed by Collection::removeElement.
Attached you can find a working example package that demonstrates the bug.

While Collection::add(ValueObject) works, the same ValueObject can no longer be removed with Collection::removeElement. To reproduce this, navigate to the packages index action, click the ""Click me!"" button to create a test Entity which holds a collection of ValueObjects.

Afterwards, add a new ValueObject by entering a value into the first input field. You will have this ValueObject listed below after the redirect.

To remove the ValueObject again, enter the same value into the second input field. It will not be removed.

Why this behaves like this is beyond me, I'd expect it to be similar to Entities, where this obviously works."
54092,TYPO3.Flow,Feature,"",Resolved,Should have,Respect implementation of JsonSerializable Interface,Carsten Bleicker,"",2014-11-26 04:42,MVC,2.x,2013-11-29,"","",0,2013-11-29 11:12,"","",1451600,"","",If an object implements JsonSerializable interface it should be respected in JsonView.
54135,TYPO3.Fluid,Bug,"",Resolved,Should have,Cached templates are not flushed when ViewHelpers are changed,Christopher Hlubek,Christopher Hlubek,2014-02-19 05:36,"","",2013-12-02,"","",100,2013-12-02 09:15,"","",1453700,"",Git master,"ViewHelper updates can lead to exceptions in cached templates, since changes of the @render@ method signature are not reflected correctly. The template cache should be flushed whenever ViewHelper classes are changed."
54146,TYPO3.Flow,Bug,"",New,Should have,Different sorting of arguments in ACL Patterns doesnt work,Carsten Bleicker,Christian Müller,2013-12-02 13:23,Security,"",2013-12-02,"","",0,2013-12-02 13:23,"","",1454250,"",Flow 2.0.0,"This one works:
resources:
  methods:
    DeleteLot: 'method(BLEICKER\Sale\Controller\Rest\LotController->deleteAction(lot.owner == current.securityContext.party))'
    
This wone doesnt work:
resources:
  methods:
    DeleteLot: 'method(BLEICKER\Sale\Controller\Rest\LotController->deleteAction(current.securityContext.party == lot.owner))'"
54151,TYPO3.Flow,Feature,"",Resolved,Should have,Implement proper package dependency handling,Markus Klein,"",2014-02-13 05:39,"","",2013-12-02,"","",100,2013-12-02 15:06,"","",1454500,"","","Hi!

For TYPO3.CMS I reimplemented the dependency handling of the PackageManager. #52828

These two concepts were used in the patch:

* http://en.wikipedia.org/wiki/Dependency_graph
* http://en.wikipedia.org/wiki/Topological_sorting (Algo by Kahn (1962))

Besides that the CMS patch contains some extra logic to include system extension always first. This specific part will not be necessary for Flow.

Please judge on your own, if you'd like to have this implementation in Flow as well."
54155,TYPO3.Fluid,Feature,"",Rejected,Could have,"f:render partial="""" package=""""",Kay Strobach,Bastian Waidelich,2013-12-06 07:57,ViewHelpers,"",2013-12-03,"","",0,2013-12-03 02:11,"","",1454700,"","","Hi guys,

especially when developing Applications, which rely on an AbstractController, which sets the layout it would be nice to have a way to use the centralized defined partials and the one from each package.
Therefore it would be nice to have a package attribute for finding the related partial.
"
54161,TYPO3.Flow,Bug,"",Closed,Should have,Properties of type \DateInterval should be supported,Carsten Bleicker,Bastian Waidelich,2015-03-31 09:58,"","",2013-12-03,"","",0,2013-12-03 05:25,"","",1455000,"",Flow 2.0.0,Doctrine supports the time type. This should be used if a property is of type \DateInterval.
54181,TYPO3.Flow,Bug,"",New,Could have,Use date_default_timezone_get() instead of ini_get('date.timezone'),David Lundgren,"",2015-06-01 12:54,Core,"",2013-12-04,"","",0,2013-12-03 21:13,"","",1456000,"",Git master,Using date_default_timezone_get() instead of ini_get('date.timezone') in TYPO3\Flow\Core\Bootstrap would allow developers to set the timezone in code instead of modifying the php.ini.
54195,TYPO3.Fluid,Task,"",New,Should have,"Rename and move FormViewHelper's errorClass value, currently 'f3-form-error'",Adrian Föder,Adrian Föder,2014-02-15 06:19,ViewHelpers,"",2013-12-04,"","",0,2013-12-04 07:08,"","",1456700,"","","This should be renamed to @flow-form-error@ IMO, and the 
<pre>
$this->registerArgument('errorClass', 'string', 'CSS class to set if there are errors for this view helper', FALSE, 'f3-form-error');
</pre>
is currently spread manually in every concrete ViewHelper's @initializeArguments@ method, better place would be \TYPO3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper IMO"
54196,TYPO3.Fluid,Feature,"",Resolved,Could have,IfHasValidationError ViewHelper,Adrian Föder,Adrian Föder,2013-12-07 06:36,ViewHelpers,"",2013-12-04,"","",100,2013-12-04 07:30,"","",1456750,"","","to cope with the practice done by common CSS frameworks where a specific form field's parent element must/should have a particular error CSS class, I suggest introducing a ViewHelper which then will be used like 

<pre><code class=""html"">
<div class=""row {f:form.ifHasValidationError(property: 'some.emailAddress', then: 'has-error')}""><input...></div>
</code></pre>

"
54208,TYPO3.Flow,Bug,"",Resolved,Should have,Migrations not complete,Philipp Maier,Bastian Waidelich,2014-02-10 04:22,- Migrations -,"",2013-12-05,"","",100,2013-12-05 03:57,"","",1457350,"",Git master,"Currently, when performing <code>./flow doctrine:migrate</code> on an empty database the following migrations will be generated by doctrine when executing <code>./flow doctrine:migrationgenerate</code>:

<pre>
$this->addSql(""ALTER TABLE typo3_flow_resource_publishing_abstractpublishingconfiguration ADD dtype VARCHAR(255) NOT NULL"");
$this->addSql(""ALTER TABLE typo3_flow_security_authorization_resource_securitypublis_861cb ADD CONSTRAINT FK_2DAD2A8A47A46B0A FOREIGN KEY (persistence_object_identifier) REFERENCES typo3_flow_resource_publishing_abstractpublishingconfiguration (persistence_object_identifier) ON DELETE CASCADE"");
</pre>"
54284,TYPO3.Fluid,Bug,"",New,Should have,Default Option for Switch/Case VH,Anja Leichsenring,"",2013-12-08 08:28,ViewHelpers,"",2013-12-08,"","",0,2013-12-08 08:28,"","",1460750,"",Flow 2.0.0,"In CMS Fluid the Switch/Case VH gets a default option. Wanna port?

http://forge.typo3.org/issues/49371"
54285,TYPO3.Flow,Bug,"",Closed,-- undefined --,TYPO3\Flow\Security\Exception\AccessDeniedException thrown in file TYPO3_Flow_Security_Authorization_AccessDecisionVoterManager.php,Riccardo De Contardi,"",2014-03-05 04:54,- Error Handler Report -,2.x,2013-12-08,"","",0,2013-12-08 10:43,"","",1460800,"",Flow 2.0.0,"Access denied (0 denied, 0 granted, 1 abstained)
38 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager_Original::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

37 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

36 call_user_func_array(array|2|, array|1|)

35 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

34 TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager::decideOnJoinPoint(TYPO3\Flow\Aop\JoinPoint)

33 TYPO3\Flow\Security\Authorization\Interceptor\PolicyEnforcement_Original::invoke()

32 TYPO3\Flow\Security\Aspect\PolicyEnforcementAspect_Original::enforcePolicy(TYPO3\Flow\Aop\JoinPoint)

31 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

30 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

29 TYPO3\Neos\Controller\Module\Management\WorkspacesController::publishWorkspaceAction(TYPO3\TYPO3CR\Domain\Model\Workspace)

28 call_user_func_array(array|2|, array|1|)

27 TYPO3\Flow\Mvc\Controller\ActionController_Original::callActionMethod()

26 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

25 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

24 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

23 TYPO3\Neos\Controller\Backend\ModuleController_Original::indexAction(array|3|)

22 TYPO3\Neos\Controller\Backend\ModuleController::indexAction(array|3|)

21 call_user_func_array(array|2|, array|1|)

20 TYPO3\Neos\Controller\Backend\ModuleController::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

19 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

18 TYPO3\Flow\Security\Aspect\PolicyEnforcementAspect_Original::enforcePolicy(TYPO3\Flow\Aop\JoinPoint)

17 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

16 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

15 TYPO3\Neos\Controller\Backend\ModuleController::indexAction(array|3|)

14 call_user_func_array(array|2|, array|1|)

13 TYPO3\Flow\Mvc\Controller\ActionController_Original::callActionMethod()

12 TYPO3\Flow\Mvc\Controller\ActionController_Original::processRequest(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

11 TYPO3\Flow\Mvc\Dispatcher_Original::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

10 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

9 call_user_func_array(array|2|, array|2|)

8 TYPO3\Flow\Mvc\Dispatcher::Flow_Aop_Proxy_invokeJoinPoint(TYPO3\Flow\Aop\JoinPoint)

7 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

6 TYPO3\Flow\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\Flow\Aop\JoinPoint)

5 TYPO3\Flow\Aop\Advice\AroundAdvice::invoke(TYPO3\Flow\Aop\JoinPoint)

4 TYPO3\Flow\Aop\Advice\AdviceChain::proceed(TYPO3\Flow\Aop\JoinPoint)

3 TYPO3\Flow\Mvc\Dispatcher::dispatch(TYPO3\Flow\Mvc\ActionRequest, TYPO3\Flow\Http\Response)

2 TYPO3\Flow\Http\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


Please include more helpful information!"
54373,TYPO3 Flow Base Distribution,Task,"",New,Should have,Rename Arrays::removeEmptyElementsRecursively to removeNullElementsRecursively,Lorenz Ulrich,"",2013-12-13 03:35,"","",2013-12-13,"","",0,2013-12-13 03:35,"","",1465200,"","","The method Arrays::removeEmptyElementsRecursively only checks for NULL values, but not for empty values. Therefore the naming needs to be changed to reflect the behaviour."
54381,TYPO3.Flow,Bug,"",New,-- undefined --,TYPO3\Flow\Core\Booting\Exception\SubProcessException thrown in file Scripts.php,John Doe,"",2014-02-06 05:14,- Error Handler Report -,"",2013-12-13,"","",0,2013-12-13 05:34,"","",1465600,"",FLOW3 1.0.0,"#1355480641:
Flow: The compile run failed. Please check the error output or system log for more information.

More information

TYPO3\Flow\Core\Booting\Exception\SubProcessException thrown in file
Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Booting/Scripts.php in line 531.
Reference code: 20131213102250bd4c8e

Flow: The compile run failed. Please check the error output or system log for more information.
13 TYPO3\Flow\Core\Booting\Scripts::executeCommand(""typo3.flow:doctrine:compileproxies"", array|16|)

12 TYPO3\Flow\Core\Booting\Scripts::compileDoctrineProxies(TYPO3\Flow\Core\Bootstrap)

11 TYPO3\Flow\Core\Booting\Scripts::initializeProxyClasses(TYPO3\Flow\Core\Bootstrap)

10 call_user_func(array|2|, TYPO3\Flow\Core\Bootstrap)

9 TYPO3\Flow\Core\Booting\Step::__invoke(TYPO3\Flow\Core\Bootstrap)

8 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

7 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

6 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

5 TYPO3\Flow\Core\Booting\Sequence::invokeStep(TYPO3\Flow\Core\Booting\Step, TYPO3\Flow\Core\Bootstrap)

4 TYPO3\Flow\Core\Booting\Sequence::invoke(TYPO3\Flow\Core\Bootstrap)

3 TYPO3\Flow\Http\RequestHandler::boot()

2 TYPO3\Flow\Http\RequestHandler::handleRequest()

1 TYPO3\Flow\Core\Bootstrap::run()


cat /etc/debian_version
6.0.8

mysql -V
mysql  Ver 14.14 Distrib 5.1.72, for debian-linux-gnu (x86_64) using readline 6.1

php -v
PHP 5.3.3-7+squeeze18 with Suhosin-Patch (cli) (built: Dec 12 2013 09:20:04)
Copyright (c) 1997-2009 The PHP Group
Zend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies
    with Suhosin v0.9.32.1, Copyright (c) 2007-2010, by SektionEins GmbH

apache2 -v
Server version: Apache/2.2.16 (Debian)
Server built:   Mar  3 2013 12:09:44

cat functions.php
<?php
$info = array('system', 'shell_exec', 'escapeshellcmd', 'escapeshellarg');
foreach ($info as &$value) {
        if(function_exists($value)) {
                echo ""$value function is enabled"";
        }
        else {
                echo ""$value function is not enabled"";
        }
        echo ""\n"";
}
?>
root@gs-typo3:/var/www# php functions.php
system function is enabled
shell_exec function is enabled
escapeshellcmd function is enabled
escapeshellarg function is enabled

tail -f /var/log/syslog (following comes up when trying to access the setup via http or if I try to run ./flow core:compile)
suhosin[27793]: ALERT - Include filename ('/var/www/TYPO3-Neos/Packages/Application/TYPO3.Neos/Classes/TYPO3/Neos/Domain/Service/array in the format array('resources://MyVendor.MyPackageKey/Private/TypoScript/Root.ts2', 'resources://SomeVendor.OtherPackage/Private/TypoScript/Root.ts2').php') is an URL that is not allowed (attacker 'REMOTE_ADDR not set', file '/var/www/TYPO3-Neos/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/ClassLoader.php', line 132)
Dec 13 11:18:39 gs-typo3 suhosin[27796]: ALERT - Include filename ('/var/www/TYPO3-Neos/Packages/Application/TYPO3.Neos/Classes/TYPO3/Neos/Domain/Service/array in the format array('resources://MyVendor.MyPackageKey/Private/TypoScript/Root.ts2', 'resources://SomeVendor.OtherPackage/Private/TypoScript/Root.ts2').php') is an URL that is not allowed (attacker 'REMOTE_ADDR not set', file '/var/www/TYPO3-Neos/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/ClassLoader.php', line 132)



"
54403,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Resources remade when parent record updated,Stephen Bungert,"",2013-12-13 16:39,"","",2013-12-13,"","",0,2013-12-13 16:39,"","",1466700,"",Flow 2.0.0,"I have a book record, the book has an image record and this has a resource record.

Everytime I update my book the image's resource is re-made, a new resource record is created.

Here is the fluid template for the image fields

https://gist.github.com/riscos/7949892


in TYPO3\Flow\Resource\ResourceTypeConverter, a new Resource object is created using the submitted $source['submittedFile']['filename'] and $source['submittedFile']['resourcePointer']

These properties are created by the fluid file VH. If the actual file upload field is empty but these properties are there, shouldn't the resource object be returned from the resource repository instead of just creating a new resource?

The problem is gone if the resource file input is not in my form. I would like to keep the file input so that users can change the image. Surely if this file input is empty the resource should not be remade? The only alternative I see is, if there is a resource, don't show an upload input and make people delete the old file and save the book before letting them upload a new file."
54446,TYPO3.Flow,Bug,"",New,Should have,Cache filebackend 'include_once',Arjen Hoekema,"",2014-01-29 09:22,Cache,"",2013-12-16,"","",0,2013-12-16 05:55,"","",1468850,"",Flow 2.0.0,"The 'SimpleFileBackend' in the caching framework is used by the autoloader to check whether a file can be included. It uses 'include_once' to check if the file can be loaded. 

I'm now running in some troubles related to issue #46689, the autoloader tries to load classes like 'Annotation', or 'api' which fail the first time. But the autoloader seems to be called twice due to multiple calls to 'AnnotationRegistry::registerLoader' in bootstrap/ReflectionService registering the autoloader multiple times.

According to the documentation a second call to 'include_once' always returns TRUE, so the autoloader simply returns TRUE when trying to load the file the second time even if it does not exist.

Suggestions:
- Check if the file exists before doing an 'include_once'
- Move the 'ignoredClassNames' check above 'classesCache->requireOnce' in 'loadClass' method (making sure that files like 'api.php', 'param.php' are not loaded)
- Prevent the Flow class loader from being registered twice using 'AnnotationRegistry::registerLoader' (performance, see Bootstrap and ReflectionService->initialize)"
54451,TYPO3.Flow,Bug,"",New,Must have,No functionality at Apache environments with suexec,bitloft GmbH,"",2014-01-01 12:22,"","",2013-12-16,"","",0,2013-12-16 08:13,"","",1469100,"",(any),"We've figured out that TYPO3 Flow/Neos can't be used out of the box in Apache environments which are using suexec. Suexec only accepts ""whitelisted"" environment variables like variables with ""HTTP_"" prefix. That means that TYPO3 Flow can't access the main environment variable FLOW_REWRITEURL (setted in Web/.htaccess), which means that ""index.php"" is prepending at each URL (Package/Controller/Action) and the right functionality is not given. We've found a way to avoid the problem and added ""putenv('FLOW_REWRITEURLS=1');"" to line 1 in Web/index.php, its kindly but not clean.

There is a bug report (status: new, since 4 years) at the apache bugzilla site which describes the same thing: https://issues.apache.org/bugzilla/show_bug.cgi?id=46644"
54453,TYPO3.Flow,Bug,"",Resolved,Should have,Http request does not handle X-Forwarded-Proto headers consistently,Bastian Waidelich,Bastian Waidelich,2014-07-11 14:19,Http,"",2013-12-16,"","",100,2013-12-16 08:23,"","",1469200,"",(any),"The @Http\Request@ currently only checks the *X-Forwarded-Proto* header in isSecure(). But it fails to verify it correctly and it ignores the header when fetching the URI from the current request:
Given:
<pre>
GET http://acme.com:8080 HTTP/1.1
X-Forwarded-Proto: https
X-Forwarded-Port: 443
</pre>
<pre>
<code class=""php"">
(string)$currentHttpRequest->getUri();
</code>
</pre>

*EXPECTED:* https://acme.com
*ACTUAL:* http://acme.com:8080"
54458,TYPO3.Flow,Bug,"",New,Should have,Missing Version Number in packages,Thomas Hempel,"",2013-12-28 12:13,Package,"",2013-12-16,"","",0,2013-12-16 11:03,"","",1469450,"",Flow 2.0.0,"There is no information about the version number of a package if installed. 

This is bad because I can't check what version is actually installed. This is especially bad when you install Neos with all it's dependencies via composer. (I have that problem right now, that my composer file says 1.0.1 but it looks like v 1.0.0 is actually installed)

It also prevents me from remotely checking version numbers via systems like caretaker as I have no way of getting the version of all installed packages.

Can you please add the version number to the composer.json for example?


Best wishes,
Thomas Hempel"
54487,TYPO3.Eel,Bug,"",Resolved,Should have,Prevent race conditions in EEL Expression cache,Christian Müller,Christian Müller,2013-12-18 06:40,"","",2013-12-18,"","",100,2013-12-18 04:42,"","",1470800,"","",Currently the cached code is loaded early which is unnecessary in case there are no new expressions to cache and can also lead to race conditions.
54549,TYPO3.Flow,Bug,"",New,Must have,PackageManager::createPackage is incompatible to PackageManagerInterface,Philipp Gampe,"",2013-12-21 08:42,"","",2013-12-21,"","",0,2013-12-21 08:42,"","",1473900,"",Git master,"The last parameter must be of type NULL, but is of type string. Either change the interface or set the default value inside the method instead of inside the signature.

As the parameter is supposed to be of type string, I suggest to just change the interface signature to an empty string instead of NULL - at least this is what is to be expected from the phpdoc comment.

Please note that this also fatals in PHP 5.5.7 (Fedora 19) for the CMS Core unit tests which also use this implementation.

#hhvm also chokes about this"
54553,TYPO3.Flow,Bug,"",Resolved,Should have,Web/.htaccess will be overridden on every composer update/install,Alexander Schnitzler,"",2014-03-05 09:36,"","",2013-12-21,"","",100,2013-12-21 13:37,"","",1474100,"",Git master,"As the title says, on every composer update/install Web/.htaccess will be copied from somewhere inside the Flow package and overrides the local file.

It's good to have this copy the first time one installs Flow, but after one has added own stuff like RedirectRules e.g. the override is really annoying."
54570,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Indentation in Settings.yaml.example is confusing,Rens Admiraal,"",2014-07-11 14:19,"","",2013-12-22,"","",100,2013-12-22 05:49,"","",1474900,"",Git master,"The following indentation was found to be confusing by people in #typo3-neos:

<pre>
  # You might need to uncomment the following lines and specify
  # the location of the PHP binary manually.
  #  core:
  #    phpBinaryPathAndFilename: 'C:/path/to/php.exe'
</pre>

During the removal of the indentation the mistake was made to remove the full '  #' before the line which lead to having the settings on the wrong level. The following was found to be more clear:

<pre>
  # You might need to uncomment the following lines and specify
  # the location of the PHP binary manually.
#    core:
#      phpBinaryPathAndFilename: 'C:/path/to/php.exe'
</pre>"
54589,TYPO3.Flow,Bug,"",New,Should have,Role parent is not removed from roles MM table,Andreas Wolf,"",2013-12-24 09:32,Security,"",2013-12-24,"","",0,2013-12-24 09:32,"","",1475850,"",(any),"When removing a parent role from Policy.yaml, this change is not reflected in the table typo3_flow_security_policy_role_parentroles_join if there are no parent roles for this role anymore.

How to test:

# Add a role with two parent roles to the table, run some action
# check typo3_flow_security_policy_role_parentroles_join for the inheritance: there should be two entries in it
# remove one of the parent roles, run some action
# check typo3_flow_security_policy_role_parentroles_join: one entry should have gone
# remove the other parent role, run some action
# check typo3_flow_security_policy_role_parentroles_join: the entry is still there, but should be gone.

Note: the affected Flow version is 2.1, but I cannot select this because the entry is missing."
54593,TYPO3 Flow Base Distribution,Bug,"",New,Must have,ini_get return value has changed for PHP >=5.3.0 -> changed check-implementation needed!,Chr is,"",2013-12-24 20:48,"","",2013-12-25,"","",0,2013-12-24 20:48,"","",1476050,"",(any),"There is a function ini_get(...) used in

<pre>
  TYPO3-Neos/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Bootstrap.php
</pre>


The return value is checked to the presence of an empty string like this:

<pre>
  if (ini_get('date.timezone') === '') {
  // payload
  }
</pre>


*The return value has changed for PHP Versions >=5.3.0*


See PHP Changelog[1] for function ini_get(...):

> 5.3.0	Previously, the empty string was returned if the configuration option didn't exist. +*now, FALSE is returned instead*+.



[1] http://www.php.net/manual/en/function.ini-get.php"
54600,TYPO3.Flow,Feature,"",Resolved,Could have,Request arguments not available in all HTTP methods,Jesper Paardekooper,Bastian Waidelich,2014-12-16 04:14,Http,"",2013-12-26,"","",100,2013-12-26 06:48,"","",1476400,"","","When building a REST service that uses the PATCH method, arguments are not available because of the following restriction:

*Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Http/Request.php*
<pre>
	protected function buildUnifiedArguments(array $getArguments, array $postArguments, array $uploadArguments) {
		$arguments = $getArguments;
		$contentArguments = NULL;

		if ($this->method === 'POST') {
			$contentArguments = ($postArguments !== array()) ? $postArguments : $this->decodeBodyArguments($this->getContent(), $this->headers->get('Content-Type'));
		} elseif ($this->method === 'PUT') {
			$contentArguments = $this->decodeBodyArguments($this->getContent(), $this->headers->get('Content-Type'));
		}

</pre>

For proper REST support, shouldn't this also allow PATCH and perhaps some more methods that may contain arguments?"
54618,TYPO3.Flow,Task,"",Resolved,Should have,Split up ActionController::errorAction(),Andreas Wolf,"",2014-04-15 11:37,MVC,"",2013-12-28,"","",100,2013-12-28 04:41,"","",1477300,"","","The method @errorAction()@ in @ActionController@ contains code that does three jobs:

* adding the error flash messages
* redirecting back to the original request
* outputting a _flattened_ validation error messages

As one might wish to override one or more of these aspects, but not c&p the whole code, these concerns should be moved to separate methods that are called from @errorAction()@."
54632,TYPO3.Flow,Bug,"",Resolved,Must have,route caching should take hostnames into account,Kerstin Huppenbauer,Kerstin Huppenbauer,2014-02-24 05:35,MVC - Routing,"",2013-12-29,"","",100,2013-12-29 12:05,"","",1478000,"",Git master,"Having 2 Sites in Neos the following Exception occurs for Nodes which have the same title in both Domains:

Exception while rendering
page<TYPO3.Neos:Page>/
body<TYPO3.TypoScript:Template>/
parts/
mainMenu:
Invalid paths: path of starting point must first part of end point path. 

To avoid this the hostnames should be included in the RouterCacheIdentifier "
