#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Has patch,Affected Flow version,Description
1794,TYPO3.Fluid,Task,"",Resolved,Should have,"Rename ""DynamicNode""",Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-10-23,"","",100,2008-10-23 09:39,"","",9400,"","","","Right now we have four kinds of ""nodes"":
* ObjectAccessorNode
* TextNode
* RootNode
* DynamicNode

(There will be another node for array arguments).

""DynamicNode"" isn't an appropriate name, as all nodes are kind of dynamic (except for the TextNode).

Todo: find a better name ;)"
1795,TYPO3.Fluid,Task,"",Resolved,Should have,Restructure Node Architecture,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-10-23,"","",0,2008-10-23 09:53,"","",9450,"","","","Currently we have:
* AbstractNode [implements NodeInterface]
* * ObjectAccessorNode
* * TextNode
* * DynamicNode
* * RootNode

NodeInterface contains four methods renderSubtree(), evaluateSubtree(), addToContext(), removeFromContext(). They are actually only supported by DynamicNode. So we rather need something like:

* AbstractNode
* * ObjectAccessorNode
* * TextNode
* * DynamicNode [implements TreeInterface, ContextNodeInterface]
* * RootNode [implements TreeInterface]

(""TreeInterface"" and ""ContextNodeInterface"" are no adequate names at all, I just can't think of better ones at the moment).


"
1796,TYPO3.Fluid,Task,"",Resolved,Should have,ubiquitous naming,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-10-23,"","",100,2008-10-23 09:58,"","",9500,"","","","To avoid introducing a lot of new designators and methods we should unify the naming.
That is (for example):
* renderSubtree() -> renderChildNodes()
* evaluateSubtree() -> evaluateChildNodes()
* $subnodes -> $childNodes
* addSubNode() -> addChildNode()"
1907,TYPO3.Fluid,Feature,"",New,Could have,Default values for view helpers based on context,Sebastian Kurfuerst,"",2014-03-10 12:53,Core,"",2008-10-29,"","",0,2008-10-29 11:34,"","",2602550,"","","","We should supply a mechanism in the ""ViewHelperNode"" which will merge the given parameters with certain default parameters.

The default parameters should be context dependent (However, we don't know yet how this might look like).

This would be helpful for numerous cases:

* <f3:uri.linkTo> -> ""action"", ""controller"", and ""package"" arguments could be supplied if no other parameter given
* Link parameters - we could realize something like ""keepPIVars"" with this feature
* <f3:image> tag - supplying default parameters for maxWidth, maxHeight, ..."
1927,TYPO3.Fluid,Bug,"",Resolved,Should have,Rename context to VariableContainer,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-10-31,"","",0,2008-10-31 08:32,"","",2602500,"","","","We just decided, that we should rename the ""Context"" to ""VariableContainer"", as this is more appropriate on what it does.

""Context"" might be used differently - let's see."
1928,TYPO3.Fluid,Bug,"",Rejected,Should have,Fail silently in production mode,Sebastian Kurfuerst,"",2011-05-05 12:27,"","",2008-10-31,"","",0,2008-10-31 08:33,"","",2602450,"","","",All runtime exceptions should be caught in production mode and outputted somewhere else.
1929,TYPO3.Fluid,Bug,"",Resolved,Must have,HTMLSPECIALCHAR OUTPUT,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0.0 alpha 1,2008-10-31,"","",100,2008-10-31 08:35,"","",2603150,"","","","HTMLSpecialChar has to be switched on somewhere (where?), and then each view helper will automatically htmlspecialchar the output coming from ObjectAccessors. (""render""-method in ObjectAccessor)"
1930,TYPO3.Fluid,Bug,"",Resolved,Should have,Use class-based view helpers,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-10-31,"","",100,2008-10-31 08:35,"","",2602400,"","","","after some really long long discussions with bastian, we decided that view helpers should be class-based. Finally ;-)"
1985,TYPO3.Fluid,Feature,"",Resolved,Should have,"Rename core classes to ""Core""",Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-07,"","",100,2008-11-07 16:41,"","",2602350,"","","",Rename standard classes to core package
1986,TYPO3.Fluid,Bug,"",Resolved,Should have,changes in TemplateView,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-07,"","",100,2008-11-07 16:45,"","",2602300,"","","",rename templatePath to templatePattern inside templateview
1987,TYPO3.Fluid,Feature,"",Resolved,Should have,TemplateView,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-07,"","",100,2008-11-07 16:47,"","",2602250,"","","","TemplateView should add ""view"" (itself) to context"
1988,TYPO3.Fluid,Feature,"",Resolved,Should have,create multiple facets(=Interfaces) for ViewHelpers,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-07,"","",100,2008-11-07 16:48,"","",2602200,"","","","- ""onParse"" facet
- ""useChildNodes"" facet"
1992,TYPO3.Fluid,Bug,"",Resolved,Should have,test scope prototype,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-08,"","",100,2008-11-08 04:34,"","",2602150,"","","",in viewhelpernode
2209,TYPO3.Fluid,Feature,"",Resolved,Should have,"Improve ""select"" view helper",Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-26,"","",100,2008-11-26 09:26,"","",2602100,"","","","The select view helper needs to handle domain objects as well. 
See http://grails.org/doc/1.0.x/ref/Tags/select.html"
2210,TYPO3.Fluid,Task,"",Resolved,Should have,eclipse integration,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-26,"","",100,2008-11-26 09:28,"","",11100,"","","",autocompletion for view helpers
2228,TYPO3.Fluid,Major Feature,"",Rejected,Won't have this time,Default namespaces,Niels Fröhling,"",2010-10-20 05:44,"","",2008-11-27,"","",0,2008-11-27 05:17,"","",2602050,"","","","It would very powerfull to turn on a default namespace:
A viewhelper-method like:

<f3::textarea />

Could be used to implement self-correcting and output sensitive templates:

{namespace f3=F3::Beer3::XHTML default}
<textarea />

Immediatly textarea becomes a method, can add default-attributes, like rows/cols and may even be used for complete transformation (into another language: XHTML -> PDF).

--------------------------------------------------------
As reminder of the ongoing discussion here a little log:

Ich verstehe, dass die Logik ist, dass im Falle des XML<->BEER mixes, BEER-tags immer namespace haben? Ist das nicht zu restriktiv. Wäre es nicht besser overlayed default-namespaces zu machen? Ein Beispiel:

<xform type=""text"" >

Im Falle, des wenn die Applikation erkennt, dass mein Browser XForms kann, wird <xform> nicht verändert (default namespace: null). Im anderen Fall wird der default namespace auf xform::iecrap gesetzt und der Tag ist als ViewHelper in iecrap implementiert, und spuckt schön HTML3 aus.

Dies impliziert natürlich sozusagen special handling für XML-basierte templates, da dieselbe Logik nicht für XYZ reicht:

\{xform type,text}

Nun kann man selbstverständlich nichts mit einem namespace-overlay und default-namespace anfangen. Allerdings halte ich die default-namespace Geschichte für sehr wichtig um switchende und overloaded ViewHelpers

Ein weiterer Aspekt ist, dass Du vielleicht Deine ViewHelper in Klassen Kategorisieren möchtest. Sagen wir mal Du erzeugst ein XHTML+XML mit embedded SVG:

{namespace xhtml=F3::Beer3::XHTML default}
{namespace xft=F3::Beer3::XHTML::FireFox::Tools default overlay}
<blabla XHTML-code>
<svg>
   {namespace sft=F3::Beer3::SVG::FireFox::Tools default}
   <blabla SVG-code>
</svg>
<blabla XHTML-code>

So, geht natürlich nicht anders als im Firefox. Deshalb switchend:

{namespace xhtml=F3::Beer3::XHTML default}
{namespaceswitch
    xft=F3::Beer3::XHTML::FireFox::Tools
    xft=F3::Beer3::XHTML::IEcrap::Tools
default overlay}
<blabla XHTML-code der im Falle des IE in HTML verwandelt wird>
<svg>
   {namespaceswitch
       xft=F3::Beer3::SVG::FireFox::Tools 
       xft=F3::Beer3::SVG::IEcrap::Tools 
    default}
   <blabla SVG-code der im Falle des IE in VML verwandelt wird>
</svg>
<blabla XHTML-code der im Falle des IE in HTML verwandelt wird>

Das heisst ViewHelpers würden TagLibraries implementieren können.
Und damit wäreen Beer-Templates Tranformation-Fähig. Allerdings nur für XML-dialekte. Oder für Total-Transformationen.

In einfachen Worten nochmal, wenn Du default-NS hättest, und die namespace-definition weglassen könntest, könntest Du ViewHelper über HTML-Tags definieren.

Evtl. sollte man ganz einfach den Switch in den ViewHelper-constructor legen, und der liefert eine null-Klasse, oder eine korrigierende Klasse.
"
2230,TYPO3.Fluid,Feature,"",Rejected,Should have,Overlay named and default namespaces,Niels Fröhling,"",2010-10-20 05:44,"","",2008-11-27,"","",0,2008-11-27 05:28,"","",2602000,"","","","Implement overloading on namespaces:

{namespace f3=F3::Beer3::HTML overlay}
{namespace f3=F3::Beer3::XHTML1 overlay}
{namespace f3=F3::Beer3::XHTML2 overlay}
{namespace f3=F3::Beer3::XHTML2::XFORMS overlay}

Then a tag:

<f3::xform type=""text"" />

is called/searched in cascade:

$in = ...
foreach (all namespaces f3::) {
    if (viewhelper in current namespace has method xform)
       $in = viewhelper->xform(params)
}

It's important to keep the Cascade in mind in repect to default-namespaces, as this enables almost complete OOP behaviour for ViewHelpers as Transformers:

initial
F3::Beer3::XHTML2::XFORMS->xform              $in = <xform type=""text"" />
F3::Beer3::XHTML2->xform                      $in = <input type=""text"" style=""color: red"" />
F3::Beer3::XHTML1->input                      $in = <input type=""text"" style=""color: red"" />
F3::Beer3::HTML->input                        $in = <input type=""text"" color=""red"">
"
2246,TYPO3.Fluid,Bug,"",Resolved,Should have,Tag which disables parsing,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2008-11-29,"","",100,2008-11-29 12:40,"","",2601950,"","","","We need some tag between which every string is being taken as literal - else, we get problems because {} in JavaScript is replaced..."
2359,TYPO3.Fluid,Bug,"",Resolved,Could have,Update Documentation [has patch],Irene Höppner,"",2010-10-20 05:44,"","",2008-12-22,"","",0,2008-12-22 04:17,"","",2601900,"","","","Fluid:
* updated documentation to new namespace syntax
* replaced BEER3 with Fluid in documentation"
2486,TYPO3.Fluid,Bug,"",Resolved,Must have,Template names not resolved correctly (file name case issue),Karsten Dambekalns,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-01-20,"","",0,2009-01-20 07:52,"","",2601850,"","","","In r1769 I tried to fix a bug which I experienced, in r1773 I reverted the case-change to the template file names. Now, here is what the problem is:

When you call the XSD generation helper, you simply call http://.../fluid

# Since no controller and action is given, ""Default"" and ""index"" are used
# The template is resolved as "".../Default/index.html"", fine.

Now you fill in the form and press proceed.

# Controller and action are given, ""default"" and ""generatexsd"" are used
# The template is resolved as "".../default/generatexsd.html""
# The file lies in "".../Default/generateXSD.html"" and cannot be found, leading to Exception 1225709595

The FLOW3 MVC part circumvents the problem by using getCaseSensitiveObjectName() when looking for controller or view objects. Since the template is not registered with the object manager, this is of no help here, but a similar mechanism is needed.

*Note:* The problem can only be reproduced on a case-sensitive filesystem."
2669,TYPO3.Fluid,Feature,"",Closed,Could have,PDF version of the documentation,Fabien Udriot,"",2012-02-17 06:55,"","",2009-02-20,"","",0,2009-02-20 08:04,"","",2601800,"","","","In the attachment, there is the PDF version of the documentation.

If you are interested by the script that makes the conversion DocBook -> PDF, let me know.

Cheers."
2815,TYPO3.Fluid,Feature,"",Resolved,Must have,Support for objects as values in hidden fields,Robert Lemke,Robert Lemke,2010-10-20 05:44,"",1.0.0 alpha 1,2009-03-10,"","",100,2009-03-10 11:12,"","",2603100,"","","","Currently only types which can be casted to string are support as values in hidden form fields. However, it should be possible to use (domain) objects as values:

<pre>
	<f3:form method=""post"" action=""create"" object=""invoice"">
		<f3:form.textbox name=""properties[title]"" property=""title"" />
		<f3:form.textarea name=""properties[description]"" property=""description"" />
		<f3:form.hidden name=""properties[customer]"" value=""{customer}"" />
		<f3:form.submit>Create Invoice</f3:form.submit>
	</f3:form>
</pre>

Internally Fluid would convert the object into an identity array (not clear yet, if / when it becomes array('__uuid' => '1234...') or array('__identity' => array('title' => 'the title', 'number' => 234)) which then is converted back to an object by FLOW3's MVC framework on processing the request after the form has been submitted."
2824,TYPO3.Fluid,Bug,"",Resolved,Must have,TemplateView can't be easily extended,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-03-11,"","",0,2009-03-11 18:41,"","",2601750,"","","","When using custom views that extend F3\Fluid\View\TemplateView the required cache backend is not properly initialized because FLOW3s dependency injection is active only for configured classes, not their subclasses.
First I thought this was a bug in the DI mechanism. Meanwhile I'm not sure anymore and I don't know, how other DI-frameworks handle this issue.

A solution would be to extract cache handling into an AOP aspect which is active for subclasses too. Patch follows."
2983,TYPO3.Fluid,Bug,"",Resolved,Should have,Create a LinkViewHelper for TYPO3 v4 Fluid,Sebastian Kurfuerst,Bastian Waidelich,2010-10-20 05:44,"","",2009-03-26,"","",100,2009-03-26 13:19,"","",2601700,"","","","Currently, Fluid for TYPO3 v4 does not have the possibility to create links to other pages in TYPO3.
This needs to be fixed urgently..

Something like <f3:link action=""..."" controller=""...""></f3:link> should be possible.

Additionally, the functionality of TYPOLINK needs to be accessed as well (links to a given UID, PID; ...)"
3065,TYPO3.Fluid,Bug,"",Resolved,Should have,ObjectFactory is unable to call t3lib_div::makeInstance.,Jochen Rau,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-04-09,"","",100,2009-04-09 15:36,"","",2601650,"","","",ObjectFactory is unable to call t3lib_div::makeInstance. See attached image. 
3068,TYPO3.Fluid,Bug,"",Resolved,Must have,Fluid: TranslateViewHelper does only work once,Niels Pardon,Niels Pardon,2010-10-20 05:44,"","",2009-04-10,"","",100,2009-04-10 05:52,"","",2601600,"","","","The TranslateViewHelper does only work once. If you put more than one translate tag in your template only the first gets translated.

By looking at the code I think that it gets even worse. The TranslateViewHelper will only work once per HTTP request. That means that only the first translate tag of the first loaded extension will get translated and the following translate tags won't.

The problem seems to be the initialization check. The TranslateViewHelper will not get initialized after the first instance and therefore the member variable $this->LOCAL_LANG which holds the locallang information is empty.

I would suggest to create a LanguageRegistry (a Singleton) which holds the locallang information once per extension. Where should something like this be put? extbase or fluid?"
3071,TYPO3.Fluid,Bug,"",Resolved,Should have,Allow objects implementing Iterator interface in each attribute of for view helper,Niels Pardon,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-04-10,"","",0,2009-04-10 13:16,"","",2601550,"","","",I am currently plaing a bit around with porting the extension seminars to extbase and fluid. We already have our own Mappers and Models based on oelib. We are using a class tx_oelib_List which implements PHP's Iterator interface for e.g. M:M relations. Would be great if we could use an object implementing the Iterator interface with Fluid's for view helper.
3075,TYPO3.Fluid,Bug,"",Resolved,Must have,TranslateViewHelper: TypoScript override does not work,Niels Pardon,Jochen Rau,2010-10-20 05:44,"","",2009-04-11,"","",0,2009-04-11 09:11,"","",2601500,"","","","The problem is that the configuration manager that is requested in the TranslateViewHelper has an empty array in $this->settings. So somehow the Singleton stuff is not working correctly as the confuiguration manager created in the dispatcher has the right configuration in $this->settings.

I couldn't find out the cause of the problem. Any help is appreciated."
3122,TYPO3.Fluid,Bug,"",Resolved,Must have,ViewHelper arguments are not properly passed to render() method,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-04-17,"","",0,2009-04-17 11:36,"","",2601450,"","","","If a ViewHelper registers different arguments than it accepts in the render()-method, arguments are not properly injected:
<pre>
class MyViewHelper extends \F3\Fluid\Core\TagBasedViewHelper {
	@param string $someArgument
	public function render($someArgument) {...}
}
</pre>

In this example $someArgument will have the value of the ""additionalAttributes""-argument that was registered in the parent ViewHelper."
3287,TYPO3.Fluid,Bug,"",Resolved,Must have,add @internal annotations,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",100,2009-05-14 06:22,"","",2603050,"","","",add @internal annotations
3288,TYPO3.Fluid,Bug,"",Resolved,Should have,ViewHelper fine tuning,Sebastian Kurfuerst,Bastian Waidelich,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",100,2009-05-14 06:25,"","",2603000,"","","","- add correct documentation
- rename and move LinkViewHelpers
  link.*
  uri.*
  link -> link.action
  uri -> uri.action 
- *Do we want shortcuts?*
"
3289,TYPO3.Fluid,Feature,"",Resolved,Must have,view context,Sebastian Kurfuerst,"",2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",100,2009-05-14 06:27,"","",2602950,"","","","we need a view context to pass information from controller to view
TODO: Naming!"
3290,TYPO3.Fluid,Bug,"",Resolved,Must have,add ViewHelperContext,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",100,2009-05-14 06:27,"","",2602900,"","","","add ViewHelperContext
- getView
- getRequest
- addVariables, ..."
3291,TYPO3.Fluid,Feature,"",Needs Feedback,Should have,Cacheable viewhelpers,Sebastian Kurfuerst,"",2012-11-29 11:00,"","",2009-05-14,"","",0,2009-05-14 06:27,"","",2601350,"",No,"",we need a concept for cacheable viewhelpers
3292,TYPO3.Fluid,Bug,"",Resolved,Should have,viewhelper backend support,Sebastian Kurfuerst,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-05-14,"","",100,2009-05-14 06:28,"","",2601300,"","","",we need support for using viewhelpers in BE
3293,TYPO3.Fluid,Feature,"",Resolved,Should have,support for legacy TypoScript (with . at end),Sebastian Kurfuerst,"",2010-10-20 05:44,"",1.0.0 alpha 3,2009-05-14,"","",100,2009-05-14 06:37,"","",2603900,"","","","I HATE IT!!! I just entered 20 lines, but now I will just solve the bug..."
3294,TYPO3.Fluid,Bug,"",Resolved,Should have,Introduce reflection cache,Sebastian Kurfuerst,"",2010-10-20 05:44,Core,1.0,2009-05-14,"","",100,2009-05-14 06:38,"","",2603550,"","","",Introduce reflection cache
3295,TYPO3.Fluid,Bug,"",Resolved,Should have,implement shorthand syntax,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",100,2009-05-14 06:40,"","",2602850,"","","",example: {f:date()} - the () are mandatory
3296,TYPO3.Fluid,Bug,"",Resolved,Must have,override templatePath,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-05-14,"","",100,2009-05-14 06:46,"","",2601250,"","","",override templatePath with TypoScript
3297,TYPO3.Fluid,Feature,"",Closed,Should have,flash message,Sebastian Kurfuerst,"",2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-14,"","",0,2009-05-14 06:47,"","",2602800,"","","",implement flash message
3298,TYPO3.Fluid,Bug,"",Resolved,Should have,"""if"" expression language",Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 2,2009-05-14,"","",100,2009-05-14 07:04,"","",2603500,"","","","""if"" expression language - we need some expression language for IF"
3311,TYPO3.Fluid,Task,"",Closed,Should have,Refactor Unit tests,Bastian Waidelich,"",2011-05-05 12:28,"","",2009-05-15,"","",0,2009-05-15 05:24,"","",15750,"","","",One unit test should only depend on *one* concrete class. All dependencies must be mocked or put in fixtures to avoid sideeffects and to reduce the adaption work that is needed when changing class/method signatures.
3317,TYPO3.Fluid,Feature,"",Resolved,Must have,AbstractFormViewHelper must be adjusted to be able to namespace arguments,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-05-15,"","",100,2009-05-15 10:33,"","",2601200,"","","",see http://forge.typo3.org/issues/show/3316
3339,TYPO3.Fluid,Bug,"",Resolved,Must have,TagBuilder->setContent should not escape HTML,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-05-16,"","",100,2009-05-16 06:18,"","",2601150,"","","",TagBuilder->setContent should not escape HTML
3359,TYPO3.Fluid,Bug,"",Resolved,Should have,Restructure Class structure in Fluid Core,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-18,"","",100,2009-05-18 03:29,"","",2602750,"","","","I propose to change the Fluid Core classes like that:

Core/
	ViewHelper/
		Facets/
		AbstractViewHelper
		TagBasedViewHelper
		TagBuilder
		ViewHelperContext
		ViewHelperException?
		ViewHelperInterface
		ViewHelperArguments -> Arguments?
	Parser/
		SyntaxTree/
		ParsedTemplateInterface
		ParsingException?
		ParsingState
		TemplateParser

This changes the following public API classes:
Core\TemplateParser -> Core\Parser\TemplateParser.

"
3385,TYPO3.Fluid,Feature,"",Resolved,Must have,Add method to check for template availability,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,"",1.0.0 alpha 1,2009-05-19,"","",100,2009-05-19 10:42,"","",2602700,"","","",It must be possible to ask Fluid\TemplateView if it could resolve a template file for the current controller context.
3394,TYPO3.Fluid,Task,"",Resolved,Should have,Adjust PHPDoc Comment of ImageViewHelper,Susanne Moog,Bastian Waidelich,2010-10-20 05:44,"","",2009-05-20,"","",0,2009-05-20 09:09,"","",16450,"","","","At a first glance it's not logical that the width and height are expected to be strings whereas maxWidth etc. are expected to be integer values. The PHPDoc comment should better explain, that you can enter image manipulating values into width and height. I'm not really sure about the exact text, but I attached a patch that in my opinion makes it a bit clearer."
3412,TYPO3.Fluid,Bug,"",Resolved,Should have,ViewHelperNode.php -> convertArgumentValue() -- wrong handling of integers and booleans,Susanne Moog,Bastian Waidelich,2010-10-20 05:44,Core,"",2009-05-22,"","",100,2009-05-22 02:51,"","",2601050,"","","","If you enter in some fluid if condition a parameter that is a true boolean like TRUE it gets converted to FALSE by the convertArgumentValue(). Same happens if the value is an integer != 0, it's still evaluated to false. Attached patch fixes it for me."
3413,TYPO3.Fluid,Feature,"",Resolved,Could have,Handing the settings over to the view,Susanne Moog,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 2,2009-05-22,"","",100,2009-05-22 02:53,"","",2603450,"","","",Hand over $this->settings to the view so it is accessible by {settings} in the template.
3443,TYPO3.Fluid,Bug,"",Resolved,Should have,Unreachable code in TemplateView,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 3,2009-05-25,"","",100,2009-05-25 06:04,"","",2603850,"","","","line 246 in F3\Fluid\View\TemplateView can never be reached as there is a return before that:

<pre>
		return $parsedTemplate->render($renderingContext);
		
		
		// TODO -> Never executed???
		if ($sectionToRender !== NULL) {
			$sections = $partial->getVariableContainer()->get('sections');
			if(!array_key_exists($sectionToRender, $sections)) {
				throw new \F3\Fluid\Core\RuntimeException('The given section does not exist!', 1227108983);
			}
			$syntaxTree = $sections[$sectionToRender];
		} else {
			$syntaxTree = $partial->getRootNode();
		}
		$syntaxTree->setRenderingContext($renderingContext);
		return $syntaxTree->evaluate();
</pre>"
3479,TYPO3.Fluid,Feature,"",Resolved,Should have,Implement ViewHelperVariableContainer,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 1,2009-05-27,"","",100,2009-05-27 05:54,"","",2602650,"","","",Implement ViewHelperVariableContainer
3480,TYPO3.Fluid,Bug,"",Resolved,Must have,SelectViewHelper creates multiple select field by default,Robert Lemke,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 1,2009-05-27,"","",100,2009-05-27 05:59,"","",2602600,"","","","This Fluid HTML

<pre>
<f:form.select property=""versionNumber"" options=""{nextPossibleVersions}"" />
</pre>

is rendered as 

<pre>
<select name=""newRelease[versionNumber][]"">
<option value=""0"">1.0.0-alpha1</option>
<option value=""1"">1.0.0-beta1</option>
</select>
</pre>

even though I didn't specify a ""multiple"" argument. This is not what I'd expect."
3481,TYPO3.Fluid,Bug,"",New,Should have,Use ViewHelperVariableContainer in PostParseFacet,Sebastian Kurfuerst,"",2011-10-21 07:37,Core,"",2009-05-27,"","",0,2009-05-27 06:05,"","",2601000,"",No,FLOW3 1.0.0,Currently TemplateVariableContainer is used
3525,TYPO3.Fluid,Feature,"",Resolved,Should have,"translateViewHelper and key=""LLL:EXT:lang/locallang_core.xml:show_item.php.table"" ",Susanne Moog,Bastian Waidelich,2010-10-20 05:44,"","",2009-06-01,"","",100,2009-06-01 10:35,"","",2600950,"","","","The translateViewHelper should be able to resolve referenced paths to external lang files given in the form key=""LLL:EXT:lang/locallang_core.xml:show_item.php.table"". "
3551,TYPO3.Fluid,Bug,"",Resolved,Should have,HtmlViewHelper outputs htmlspecialchared code,Joerg Schoppet,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 2,2009-06-03,"","",100,2009-06-03 13:51,"","",2603400,"","","","Hi,

using the HtmlViewHelper at least in typo3 4.3 the output is always htmlspecialchared.

Adding:
@$value = htmlspecialchars_decode($value);@

after line 71 of Tx_Fluid_ViewHelpers_Format_HtmlViewHelper

solve this problem. But I don't know if this is the wanted way."
3592,TYPO3.Fluid,Feature,"",Resolved,Should have,Alias view helper for setting template variables,Christopher Hlubek,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 2,2009-06-05,"","",100,2009-06-05 09:56,"","",2603350,"","","","There should be an alias view helper that can set variables in the template.

The following use cases should be supported:

<pre>
<f:alias value=""{foo.bar.baz}"" as=""x"">
{x.name}
</f:alias>
<f:alias map=""{x: foo.bar.baz, y: foo.bar.baz.name}"">
{x.name} or {y}
</f:alias>
</pre>
"
3595,TYPO3.Fluid,Feature,"",Closed,Should have,Convert integer types to boolean for if viewhelper,Balisky Christophe,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 2,2009-06-06,"","",0,2009-06-06 03:13,"","",2603300,"","","","Hello, after wndeirng why certain if conditions didn't work in my flow templates, i figures out it was because it didn't convert interger values to boolean correctely. I suggest modifiying the convertArgumentValue method in the Tx_Fluid_Core_SyntaxTree_ViewHelperNode accordingly. Positive integer values superior to 0 are considered true all others are false.

	/**
	 * Convert argument strings to their equivalents. Needed to handle strings with a boolean meaning.
	 * 
	 * @param mixed $value Value to be converted
	 * @param string $type Target type
	 * @return mixed New value
	 * @author Sebastian Kurfürst <sebastian@typo3.org>
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @todo re-check boolean conditions
	 */
	protected function convertArgumentValue($value, $type) {
		//echo ""<br>$value - $type"";
		if ($type === 'boolean') {
			if (is_string($value)) {
				//echo ""string"";
				return (strtolower($value) !== 'false' && !empty($value));
			}
			if (is_array($value) || (is_object($value) && $value instanceof Countable)) {
				//echo ""array"";
				return count($value) > 0;
			}
			if (is_object($value)) {
					//echo ""object"";
				return TRUE;
			}

			//----> NEW CODE
			if (is_integer($value)) {
				//echo ""integer"";
				return $value > 0;
			}
			// END NEW CODE ---->

			return FALSE;
		}
		return $value;
	}"
3635,TYPO3.Fluid,Bug,"",Closed,Must have,Fluid: SelectViewHelper always appends the select-field's name with [],Marcel Rosenberger,Bastian Waidelich,2010-10-20 05:44,"","",2009-06-09,"",0.00,0,2009-06-09 13:14,"","",2600900,"","","","The name for a select-field will always be appended by [] whether the field is multiple or not.

<pre>
<f:form.select name=""mySelectField"" options=""{0: 'no', 1: 'yes'}"" value=""0"" />
</pre>

will result to

<pre>
<select name=""mySelectField[]"">
    <option value=""0"" selected=""selected"">no</option>
    <option value=""1"">yes</option>
</select>
</pre>

Note: mySelectField[] instead of mySelectField

The included file is a suggestion to fix the bug."
3651,TYPO3.Fluid,Bug,"",Resolved,Should have,Call to a member function getBackend() on a non-object,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,"","",2009-06-12,"","",100,2009-06-12 14:37,"","",2600850,"","","","When setting an object as value in View Helpers extending Tx_Fluid_ViewHelpers_Form_AbstractFormViewHelper, a fatal error is thrown.
<pre>
<f:form.textbox value=""{someObject}"" />
</pre>
->
<pre>
Fatal error: Call to a member function getBackend() on a non-object in [TYPO3ROOT]\typo3conf\ext\fluid\Classes\ViewHelpers\Form\AbstractFormViewHelper.php on line 84
</pre>

Reason:
Some left overs from the Fluid backport:
<pre>
if (is_object($this->arguments['value']) && NULL !== $this->persistenceManager->getBackend()->getUUIDByObject($this->arguments['value'])) {
	$name .= '[__identity]';
}
</pre>

This should rather be something like:
<pre>
if (is_object($this->arguments['value']) && is_callable(array($this->arguments['value'], 'getUid'))) {
	$name .= '[uid]';
}
</pre>
as in renderHiddenIdentityField() of the FormViewHelper.
"
3657,TYPO3.Fluid,Bug,"",Resolved,Should have,<f:form.select does not allow to specify selectedValue,Marcel Rosenberger,Bastian Waidelich,2010-10-20 05:44,"","",2009-06-14,"","",0,2009-06-13 18:19,"","",2600800,"","","","The following code from documentation does not work:
<pre>
<f:form.select name=""paymentOptions"" options=""{payPal: 'PayPal International Services', visa: 'VISA Card'}"" selectedValue=""visa"" />
</pre>

Error:
<pre>
PHP Fatal error:  Uncaught exception 'Tx_Fluid_Core_Parser_Exception' with message 'Argument ""selectedValue"" 
was not registered.' in typo3\sysext\fluid\Classes\Core\Parser\TemplateParser.php:402
</pre>"
3661,TYPO3.Fluid,Feature,"",Resolved,Should have,<f:form.checkbox   and    <f:form.radio  missing?!,Marcel Rosenberger,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-06-14,"","",100,2009-06-13 18:56,"","",2600750,"","","","It would be nice to have <f:form.checkbox and <f:form.radio available in a Fluid-Template.
<input type=""radio"" name=...> is possible but one can't take advantage of arguments like options=""{myarray}"" and property=""..."" as possible with the <f:form.select ViewHelper."
3676,TYPO3.Fluid,Bug,"",Resolved,Must have,SelectViewHelper should automatically use the persistence manager to determine the UID of an object,Sebastian Kurfuerst,Karsten Dambekalns,2010-10-20 05:44,Core,1.0.0 alpha 3,2009-06-15,"","",100,2009-06-15 17:00,"","",2603800,"","","","It'd be very nice if the SelectViewHelper would work together with the persistence manager, so lists of objects are correctly added."
3702,TYPO3.Fluid,Feature,"",Resolved,Should have,Inline notation should expect object-parameters by default,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,Core,"",2009-06-18,"","",100,2009-06-18 11:00,"","",2600700,"","","","Currently the syntax
<pre>
{f:debug(settings)}
</pre>
will cast the argument to a string.
To use objects as parameters in inline syntax, you'll have to write:
<pre>
{f:debug('{settings}')}
</pre>

It would be nice if it worked like this:
'foo'/""foo"" => 'foo'
foo => {foo}
123 => 123


Question: What happens with named parameters?
I think, the following would be consistent:
<pre>
{f:debug(settings, title='string')}
{f:debug(settings, title=123)}
{f:debug(settings, title=settings.title)}
</pre>"
3714,TYPO3.Fluid,Story,"",Rejected,Could have,Add advanced validation of ViewHelper arguments,Sebastian Kurfuerst,Christian Müller,2011-05-05 12:29,Core,"",2009-06-21,"","",100,2009-06-21 05:03,"","",2600650,"","","","We should add a feature to support the @validate annotation inside the ViewHelper render() method comment.

See the ActionController for the code which needs to be included in AbstractViewHelper, and make sure to refactor it to a central place."
3717,TYPO3.Fluid,Feature,"",Resolved,Should have,"""Designators"" for Form view helper",Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-06-22,"","",90,2009-06-22 05:51,"","",2600600,"","","","* FormViewHelper needs a new argument ""designator"" / ""namespace""
* Extbase will set the default value for this argument to ""tx_extensionname_pluginname""
* All Form view helpers inside a form will inherit this namespace

so:
<pre>
<f:form>
	<f:form.textbox name=""firstName"" />
</f:form>
</pre>
gets
<pre>
<form action=""..."">
	<input type=""text"" name=""tx_extensionname_pluginname[firstName]"" value="""" />
</form>
</pre>
and
<pre>
<f:form object=""{customer}"">
	<f:form.textbox property=""firstName"" />
	<f:form.textbox name=""foo"" />
</f:form>
</pre>
gets
<pre>
<form action=""..."">
	<input type=""hidden"" name=""tx_extensionname_pluginname[customer][uid]"" value=""123"" />
	<input type=""text"" name=""tx_extensionname_pluginname[customer][firstName]"" value=""Kasper"" />
	<input type=""text"" name=""tx_extensionname_pluginname[foo]"" value="""" />
</form>
</pre>
and finally
<pre>
<f:form object=""{customer}"" namespace=""tx_ttnews"">
	<f:form.textbox property=""firstName"" />
	<f:form.textbox name=""foo"" />
</f:form>
</pre>
gets
<pre>
<form action=""..."">
	<input type=""hidden"" name=""tx_ttnews[customer][uid]"" value=""123"" />
	<input type=""text"" name=""tx_ttnews[customer][firstName]"" value=""Kasper"" />
	<input type=""text"" name=""tx_ttnews[foo]"" value="""" />
</form>
</pre>

Problem: namespace/designator can't be set to """" because then the default value would be used.. So it wouldn't be possible to output:
<pre>
<input type=""text"" name=""id"" value=""123"" />
</pre>"
3725,TYPO3.Fluid,Feature,"",New,Could have,CSS Engine,Sebastian Kurfuerst,Christian Müller,2014-04-03 07:24,ViewHelpers,"",2009-06-22,"","",0,2009-06-22 15:09,"","",2600550,"",No,"","It would be great to have a CSS engine like lesscss, or integrate css cacheer.

http://lesscss.org/index.html
http://www.shauninman.com/archive/2008/05/30/check_out_css_cacheer

This idea was originally proposed by Jens Hoffmann, and I think it can be fully realized as ViewHelpers.

Greets,
Sebastian"
3791,TYPO3.Fluid,Feature,"",Resolved,Should have,View helper for resource URIs,Christopher Hlubek,Christopher Hlubek,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 2,2009-06-28,"","",100,2009-06-28 13:08,"","",2603250,"","","","The public resources in a project should be easier accessible with the help of a new view helper. The view helper should simply take a filename and an optional package key. The current package key should be taken as a default.

So including an image from the public resources could look like:

<pre>
<img src=""{f:uri.resource 'images/flow3-logo.gif'}"" alt=""FLOW3 logo"" />
</pre>"
3792,TYPO3.Fluid,Bug,"",Closed,Should have,Special tag attributes for form view helpers are missing (e.g. size),Christopher Hlubek,Christopher Hlubek,2010-10-20 05:44,ViewHelpers,"",2009-06-28,"","",100,2009-06-28 13:13,"","",2600500,"","","","Form input elements can have a lot of HTML attributes e.g. for the size or maxlength. These are missing for the @TextareViewHelper@ and @TextboxViewHelper@. So currently no size can be set for text input fields! Apart from standard attributes, there are also proprietary attribues (e.g. for auto completion), that should be supported."
3793,TYPO3.Fluid,Feature,"",Resolved,Should have,CSS class for errors in form view helpers,Christopher Hlubek,Christopher Hlubek,2010-10-20 05:44,ViewHelpers,"",2009-06-28,"","",100,2009-06-28 13:30,"","",2600450,"","","",Form view helpers should automatically add a CSS class if an error for the property exists. The name of this class should be overridable.
3802,TYPO3.Fluid,Feature,"",Resolved,Should have,View helper for form errors,Christopher Hlubek,Christopher Hlubek,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 2,2009-06-29,"","",100,2009-06-29 16:39,"","",2603200,"","","",There should be a view helper to display errors for a form or for the whole action. It should iterate over all error messages just like a special for view helper. Additionally it should be possible to specifiy a property for which errors should be displayed.
3814,TYPO3.Fluid,Bug,"",Resolved,Must have,whitespaces at the end of FormViewHelper.php,Benno Weinzierl,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-07-01,"","",100,2009-07-01 11:22,"","",2600400,"","","","In file:
root  / fluid  / trunk  / Classes  / ViewHelpers  / FormViewHelper.php 

please remove whitespaces after closing php-tag"
3861,TYPO3.Fluid,Feature,"",Resolved,Should have,Backport fluids f:form:errors feature,Nikolas Hagelstein,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-07-09,"","",100,2009-07-09 12:13,"","",2600350,"","","",nothing more to say :).
3969,TYPO3.Fluid,Bug,"",Closed,Won't have this time," ""Fatal error: Objects used as arrays.."" with PHP 5.2.0",Thomas Waggershauser,Jochen Rau,2010-10-20 05:44,"","",2009-07-23,"","",0,2009-07-23 11:39,"","",2600300,"","","","I spend some time now, to understand this error:

Fatal error: Objects used as arrays in post/pre increment/decrement  
must return values by reference in /Users/air/Sites/ 
typo3_src-4.3.0alpha3/typo3/sysext/fluid/Classes/ViewHelpers/Form/ 
SelectViewHelper.php on line 148

It seems to be a php-problem, but I don't really understand, what this  
has to do with references :(

This issue occured using php 5.2.0, after update to 5.2.9, it worked.

-

This is not supposed to be like this, cause TYPO3 only requires 5.2.0 IIRC.

It's something that can be fixed quite easily, e.g. from
foreach ($this->arguments['options'] as $domainObject) {

to

$options = $this->arguments['options']
foreach ($options as $domainObject) {"
3985,TYPO3.Fluid,Bug,"",Resolved,Must have,f:form.textbox is not usable anymore without wrapping an f:form element ,Steffen Ritter,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-07-27,"","",100,2009-07-27 04:40,"","",2600250,"","","","Hi,
you have been able to use ViewHelper form.textbox as standalone to create an input field.
Since some time (cannot say revision) this is not possible anymore. The ViewHelper tries to access something of the parent Object (formName).

If there is no form wrapped a Fatal error will be raised.

"
3987,TYPO3.Fluid,Task,"",Resolved,Must have,Inconsistent attribute naming in Form view helper,Robert Lemke,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,1.0,2009-09-05,2009-09-05,"",100,2009-07-27 05:27,"","",18900,"","","","The action link view helper uses the following attributes for specifying the action:
<pre>
   <f:link.action action=""show"" controller=""Post"" package=""Blog"" ...
</pre>
The form view helper, however, uses other attribute names:
<pre>
   <f:form action=""create"" controllerName=""Comment"" packageName=""Blog"" subpackageName=""Foo"">
</pre>
That is not only incosistent with the link view helper but also in general (we never use ""packageName"" but only ""packageKey"").

Please rename the attributes as follows:

controllerName -> controller
packageName -> package
subpackageName -> subpackage

Note that names like ""controller"", ""package"" etc. should only be used for attributes in Fluid templates. We make the exception there to provide shorter names for the users. Generally in PHP code we'd rather use ""controllerName"", ""packageKey"" etc.
"
3994,TYPO3.Fluid,Bug,"",Resolved,Must have,Viewhelpers are instanciated multiple times in ViewHelperNode,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,Core,"",2009-07-27,"","",100,2009-07-27 06:36,"","",2600200,"","","","In the evaluate() method of \F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode there is
<pre>
$viewHelper = $objectFactory->create($this->viewHelperClassName);
</pre>

The viewhelper should be stored in a private/protected field to be able to do
<pre>
if ($this->viewHelper === NULL) {
	$this->viewHelper = $objectFactory->create($this->viewHelperClassName);
}
</pre>

This will increase performance and make it possible to store private values in view helpers."
3997,TYPO3.Fluid,Feature,"",Resolved,Should have,Enable bulk assignment of template variables,Robert Lemke,Bastian Waidelich,2010-10-20 05:44,Core,1.0.0 alpha 3,2009-07-27,"","",100,2009-07-27 08:54,"","",2603750,"","","","Currenly TemplateView::assign() expects two arguments: the key and the value of the variable to assign. When lots of variables are assigned this is not convenient - a signature for bulk assignments would help.

Enhance assign() so that if the first argument is an array, the function assumes that it is an array of keys and values which will be assigned. In that case the second argument must not be set (and if so, results in an exception).

<pre>

$this->view->assign('foo', 'bar');
$this->view->assign('baz', 'quux');

// same as:

$this->view->assign(array('foo' => 'bar', 'baz' => 'quux');

</pre>"
4027,TYPO3.Fluid,Bug,"",Resolved,Should have,options-argument of the SelectViewHelper should not be optional,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 3,2009-07-28,"","",100,2009-07-28 14:05,"","",2603700,"","","",The SelectViewHelper expects $this->arguments['options'] to be an array. A Select field without options wouldn't make sense anyways. So the options-argument should be required.
4028,TYPO3.Fluid,Bug,"",Resolved,Must have,Email Uri Helper creates a link tag instead of an URI,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 3,2009-07-28,"","",100,2009-07-28 14:17,"","",2603650,"","","","\F3\Fluid\ViewHelpers\Uri\EmailViewHelper actually does the same as \F3\Fluid\ViewHelpers\Link\EmailViewHelper - creating a link tag.. Funny, that no one complained about it yet. A classical copy & paste bug."
4051,TYPO3.Fluid,Bug,"",Resolved,Must have,TagBuilder is not resetted when a view helper is initialized multiple times,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,Core,1.0.0 alpha 4,2009-07-29,"","",100,2009-07-29 07:46,"","",2603950,"","","","Since r2895 ViewHelpers that belong to the same ViewHelperNode (inside loops) are only instantiated once. This leads to the side-effect, that $this->tag points to the same reference.
If a tag attribute is set it won't be resetted when initialize() is called.

Example:
<pre>
<f:for each=""{0:1, 1:2, 2:3, 3:4}"" as=""foo"">
	<f:link.action class=""{f:if('odd' condition='{foo} % 2')}"">{foo}</f:link.action>
</f:for>
</pre>

Expected result:
<pre>
<a class=""odd"" href=""viewhelpertest/standard"">1</a>
<a href=""viewhelpertest/standard"">2</a>
<a class=""odd"" href=""viewhelpertest/standard"">3</a>
<a href=""viewhelpertest/standard"">4</a>
</pre>

Actual result:
<pre>
<a class=""odd"" href=""viewhelpertest/standard"">1</a>
<a class=""odd"" href=""viewhelpertest/standard"">2</a>
<a class=""odd"" href=""viewhelpertest/standard"">3</a>
<a class=""odd"" href=""viewhelpertest/standard"">4</a>
</pre>

Solution:
Reset TagBuilder instance in initialize()

And we should check, whether there are more side-effects!"
4063,TYPO3.Fluid,Bug,"",Resolved,Must have,CObjectViewHelper erases field data in TypoScript,Christian Zenker,Bastian Waidelich,2010-10-20 05:44,"","",2009-07-29,"","",100,2009-07-29 13:37,"","",2600150,"","","","If no cObj is handed, CObjectViewHelper uses cObj from the GLOBALS-array. But this way it erases all data in this cObj that might be used later on in TypoScript.

Example

<pre>
page {
    10 < plugin.tx_myext
    headerData = TEXT
    headerData {
        # will be empty
        field = title
        wrap = <title>|</title>
    }
}

</pre>


The appended bugfix creates a new cObj if none is supported, but I'm not sure, if this is the best solution.
Maybe the parser could support one, or maybe it already does...?"
4170,TYPO3.Fluid,Bug,"",Resolved,Must have,Form Viewhelper creates hidden identity field even for new objects,Robert Lemke,Robert Lemke,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 3,2009-08-06,"","",100,2009-08-06 08:05,"","",2603600,"","","","Every entity has a uuid, no matter if it's new, reconstituted or clone of a reconstituted object.

Earlier the form view helper only rendered the hidden identity field for objects which were not new. However that stood in the way for implementing the new edit mechanism which should expects that the identity of a clone is also render, although a clone is ""new"".

We need a check which assures that the identity field is render for objects being new and clone but nor for object being new and not a clone."
4202,TYPO3.Fluid,Feature,"",Resolved,Should have,"Add ""absolute"" argument to action link viewhelpers",Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,"","",2009-08-09,"","",100,2009-08-09 14:36,"","",2600100,"","","","Since r2914 Fluid supports to generate absolute links/URIs by setting the argument $absolute. This is useful for news feeds or email templates for example.
This feature needs to be backported."
4207,TYPO3.Fluid,Feature,"",Resolved,Should have,Make action argument optional in ActionViewHelpers,Jeff Segars,Bastian Waidelich,2010-10-20 05:44,"","",2009-08-10,"","",100,2009-08-09 19:36,"","",2600050,"","","","The action view helpers for links and URIs both require the action argument. These view helpers may be used to generate links within the same action and templates may be shared across actions via partials. Thus, it would be helpful for the action to be an option argument like the controller and other arguments."
4218,TYPO3.Fluid,Feature,"",Resolved,Should have,"Support for properties of nested objects using ""property""-argument",Marcel Rosenberger,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-08-10,"","",100,2009-08-10 11:06,"","",2600000,"","","","Hi all,

it would be great to be able to use the ""property""-argument to specify values for nested objects. Here is an example:

Given a class ?Club? and a class ?User?. The Club has a property ?user? that references a User-Object.

Club->user = User-Object

With Fluid I want to provide a formular for editing the Club-Object AND User-Object (inside the Club-Object) simultaneously. What I am trying to do is something like:

<pre>
<f:form
	method=""post""
	controller=""Club""
	action=""mailChanges""
	name=""updatedClub""
	object=""{club}""
	arguments=""{club : club}"">

<p>Clubname: <f:form.textbox property=""name"" /></p>
<p>Responsible for Club: <f:form.textbox property=""user.name"" /></p>

[...submit...]

</form>
</pre>

When the formular is submitted the club's name and the name for the responsible should be changed."
4230,TYPO3.Fluid,Feature,"",Resolved,Should have,Create ViewHelpers for Backend Modules,Steffen Kamper,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-08-12,"","",100,2009-08-12 05:08,"","",2599950,"","","","Creating backend modules should be very simple. I started with creating these viewhelpers and grouped them by category.
This grouping needs a patch in fluid as the directory level resolved by fluid is limited to one level.

To show you the way i used them here is my template (now all used in blog_example)
<pre>
{namespace blog=Tx_BlogExample_ViewHelpers}<blog:be.startPage pageTitle=""{title}"" jumpToUrl=""true"" extJs=""true"" />    
<form action="""" method=""post"" enctype=""multipart/form-data"">
<div class=""typo3-fullDoc"">
	<!-- Page header with buttons, path details and csh -->
	<div id=""typo3-docheader"">
		<div id=""typo3-docheader-row1"">
			<div class=""buttonsleft"">
				<div class=""buttongroup"">
					<blog:be.buttons.csh table=""_MOD_web_func"" />
					<blog:be.buttons.save />
				</div>
			</div>
			<div class=""buttonsright"">
				<div class=""buttongroup"">
					<blog:be.buttons.shortcut setList=""{setKeys}"" />
				</div>
			</div>
		</div>
		<div id=""typo3-docheader-row2"">
			<div class=""docheader-row2-left"">
				<div class=""docheader-funcmenu"">
					<blog:be.menus.functionMenu modMenu=""{modMenu}"" key=""{modMenuKey}"" />
					<blog:be.menus.functionMenu modMenu=""{submodMenu}"" key=""{submodMenuKey}"" />
				</div>
			</div>
			<div class=""docheader-row2-right"">
				<blog:be.status.pagePath />
				<blog:be.status.pageInfo />
			</div>
		</div>
	</div>
	<!-- Content of module, for instance listing, info or editing -->
	<div id=""typo3-docbody"">
		<div id=""typo3-inner-docbody"">
		 	<h1>{title}</h1>
			<p>Welcome in the OldStyle backend module!<br />Looks like Standard, but is an Extbase driven module :)</p>	
			
		</div>
	</div>
</div>
</form>
<blog:be.endPage />  
</pre>

attached is a patch for blog_example to show you how they will work"
4231,TYPO3.Fluid,Bug,"",Resolved,Must have,[Fluid] Only one level is possible for directories in ViewHelpers,Steffen Kamper,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-08-12,"","",100,2009-08-12 05:09,"","",2599900,"","","","Fluid only resolves one level in Tx_Fluid_Core_Parser_TemplateParser::resolveViewHelperName

Change it to infinetive does the attached patch "
4277,TYPO3.Fluid,Feature,"",Resolved,Must have,Putting form fields in a partial causes error,Irene Höppner,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2010-06-18,2010-06-18,"",100,2009-08-20 04:15,"","",2599850,"","","","You often have the same form-fields in a new-template like in an edit-template. So I would like to put them into a partial which is used in the new-form and in the edit-form.
The form-tag itself would stay in the different templates.

So a partial could look like this:

<pre>
<label for=""titel"">Titel/Tätigkeit:</label><br />
<f:form.textbox property=""titel"" size=""70"" id=""titel"" /><br />
<label for=""personentage"">Personentage:</label><br />
<f:form.textbox property=""personentage"" size=""5"" id=""personentage"" /><br />
</pre>

Being included like this:
<pre>
<f:form method=""post"" action=""createOhneProjekt"" object=""{newAuftrag}"" name=""newAuftrag"">
	<f:form.hidden name=""kunde"" value=""{kunde}"" />
		<f:render partial=""auftragNewEditFormPart"" arguments=""{newAuftrag: newAuftrag}""/>	
	<f:form.submit value=""Auftrag Anlegen"" />
</f:form>
</pre>

This results to the exception: *#1243325768: No value found for key ""F3\Fluid\ViewHelpers\FormViewHelper->formName""* "
4287,TYPO3.Fluid,Bug,"",Resolved,Must have,Missing reference in ext_autoload.php,Xavier Perseguers,"",2010-10-20 05:44,"","",2009-08-21,"",0.00,100,2009-08-21 02:45,"","",2599800,"","","","Index: ext_autoload.php
===================================================================
--- ext_autoload.php    (revision 1123)
+++ ext_autoload.php    (working copy)
@@ -38,6 +38,7 @@
     'tx_fluid_core_viewhelper_facets_postparseinterface' => $extensionClassesPath . 'Core/ViewHelper/Facets/PostParseInterface.php',
     'tx_fluid_service_docbookgenerator' => $extensionClassesPath . 'Service/DocbookGenerator.php',
     'tx_fluid_view_templateview' => $extensionClassesPath . 'View/TemplateView.php',
+    'tx_fluid_view_templateviewinterface' => $extensionClassesPath . 'View/TemplateViewInterface.php',
     'tx_fluid_viewhelpers_aliasviewhelper' => $extensionClassesPath . 'ViewHelpers/AliasViewHelper.php',
     'tx_fluid_viewhelpers_baseviewhelper' => $extensionClassesPath . 'ViewHelpers/BaseViewHelper.php',
     'tx_fluid_viewhelpers_cobjectviewhelper' => $extensionClassesPath . 'ViewHelpers/CObjectViewHelper.php', "
4357,TYPO3.Fluid,Bug,"",Resolved,Must have,A selected object in a form could not be persisted,Jochen Rau,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-08-27,"","",100,2009-08-27 06:08,"","",2599750,"","","","Adding a new Blog results in a fatal error:

<pre>
Catchable fatal error:
Argument 1 passed to Tx_BlogExample_Domain_Model_Blog::setAdministrator() must be an instance of
Tx_BlogExample_Domain_Model_Administrator, string given in 
/Users/jocrau/Documents/typoplanet/htdocs/dev/typo3conf/ext/blog_example/Classes/Domain/Model/Blog.php on line 169
</pre>"
4380,TYPO3.Fluid,Feature,"",Resolved,Should have,Implement an ifRole view helper,Andreas Förthner,Andreas Förthner,2010-10-20 05:44,ViewHelpers,"",2009-08-28,"","",0,2009-08-28 10:39,"","",2599700,"","","",Analog to the ifAccess view helper the ifRole view helper should render it's contents only if the current user has the specified role(s).
4442,TYPO3.Fluid,Task,"",Resolved,Should have,Rename TagBuilder->render() to TagBuilder->build(),Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,Core,"",2009-09-03,"","",100,2009-09-03 15:36,"","",21150,"","","",The render() method might be a bit misleading. The default name for the main method of a Builder is... build().
4458,TYPO3.Fluid,Feature,"",Resolved,Could have,Add CycleViewHelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-09-04,"","",100,2009-09-04 14:08,"","",2599650,"","","","A cycle view helper is useful for iterating through a predefined set of values in loops. E.g.:
<pre>
<f:cycle values=""{0: 'odd', 1: 'even'}"" as=""zebraClass"">
	<li class=""{zebraClass}"">{foo}</li>
</f:cycle>
</pre>

Patch follows."
4459,TYPO3.Fluid,Feature,"",Resolved,Could have,Add PaddingViewHelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-09-04,"","",100,2009-09-04 14:10,"","",2599600,"","","","A PaddingViewHelper can be useful to format strings, especially in text/xml templates. It is a wrapper for PHPs str_pad function and can be used like this:
<pre>
<f:format.padding padLength=""10"" padString=""-="">TYPO3</f:format.padding>
</pre>
->
<pre>
TYPO3-=-=-
</pre>

Patch follows."
4460,TYPO3.Fluid,Feature,"",Resolved,Should have,Add GroupedForViewHelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-09-04,"","",100,2009-09-04 14:27,"","",2599550,"","","","Provide a view helper that allows to iterate through values and group the result by a given key.
This might look like:
<pre>
<f:groupedFor each=""{fruits}"" as=""fruitsOfThisColor"" groupBy=""color"" groupKey=""theColor"">
	<h3>{theColor}:</h3>
	<f:for each=""{fruitsOfThisColor}"" as=""fruit"">
		{fruit.name}<br />
	</f:for>
</f:groupedFor>
</pre>

Patch follows."
4472,TYPO3.Fluid,Feature,"",Closed,Won't have this time,View helper namespaces should be configurable,Bastian Waidelich,"",2010-10-20 05:44,Core,"",2009-09-07,"","",0,2009-09-07 05:29,"","",2599500,"","","","Currently custom view helper namespaces can be defined _in_ the templates like
@{namespace ns=\New\Namespace}@

IMO it would be great to be able to configure the namespace in your package/extension configurations. That way you could easily replace custom or even fluid view helpers with your own implementation without touching the original package/extension.

Maybe we could even implement a fallback mechanism:
<pre>
MyPackage:
  fluid:
    namespaces:
      f:
        F3\MyOtherPackage\ViewHelpers
        F3\Fluid\ViewHelpers
      blog:
        F3\MyOtherPackage\ViewHelpers
</pre>

Now @<f:link.action />@ would try to instantiate @\F3\MyOtherPackage\ViewHelpers\Link\ActionViewHelper.php@ and if nout found use @\F3\Fluid\ViewHelpers\Link\ActionViewHelper.php@

If that fallback mechanism is too complex, it might be a possibility to override only single view helpers..
AFAIK, in FLOW3 this is already possible by adding something like
<pre>
F3\Fluid\ViewHelpers\Link\ActionViewHelper:
  className: F3\MyOtherPackage\ViewHelpers\Link\ActionViewHelper
</pre>

to @Objects.yaml@. But I'm not sure if that would be the right approach here..


"
4488,TYPO3.Fluid,Bug,"",Resolved,Must have,SubmitViewHelper ignores name/value attributes,Morton Jonuschat,Bastian Waidelich,2010-10-20 05:44,"","",2009-09-08,"","",100,2009-09-08 08:05,"","",2599450,"","","","The Fluid / Form SubmitViewHelper ignores name and/or value attributes given in the tag.

Attached patch fixes this bug.
"
4492,TYPO3.Fluid,Bug,"",Resolved,Must have,ViewHelper render method arguments not initialized/passed correctly,Frans van der Veen,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-09-08,"","",100,2009-09-08 10:04,"","",2599400,"","","","Hi,

Tx_Fluid_Core_ViewHelper_AbstractViewHelper::prepareArguments initializes arguments in the wrong order, or so it appears. This causes the arguments passed to the render() method not having any value.

First registerRenderMethodArguments is called (which set the flag isMethodParameter for the arguments), then initializeArguments is called, which if it has arguments with the same name will overwrite the arguments created by registerRenderMethodArguments.

You can test by changing the 'value' or 'name' parameter in a form.submit tag:
<f:form.submit value=""Gogogo!"" />

Solution: change the order in which initializeArguments and registerRenderMethodArguments() are called in Tx_Fluid_Core_ViewHelper_AbstractViewHelper::prepareArguments. 
(It appears to be working for the form.submit ViewHelper when I do so)

Regards,

Frans"
4648,TYPO3.Fluid,Feature,"",Resolved,Should have,Enhance the textbox viewhelpter to be capable of type=password,Nikolas Hagelstein,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-09-16,"","",100,2009-09-16 05:39,"","",2599350,"","","","Currently it's not possible to use the textbox viewhelper to render a password (i.e. <input type=""password""...) textfield.
Due to possible changes of namespaces during develepment specifying it by ""hand"" is very error-prone thing.
"
4667,TYPO3.Fluid,Bug,"",Resolved,Should have,Error class magic only works for object properties....,Nikolas Hagelstein,"",2011-05-05 12:30,ViewHelpers,"",2009-09-17,"","",0,2009-09-17 04:56,"","",2599300,"","","","Like:
<pre>
<f:form.textbox property=""whatever"" errorClass=""iFail"" />
</pre>
Should work for:
<pre>
<f:form.textbox name=""whatever"" errorClass=""iFail"" />
</pre>
as well."
4704,TYPO3.Fluid,Feature,"",New,Should have,Improve parsing exception messages,Bastian Waidelich,"",2012-07-11 13:00,Core,"",2009-09-20,"","",0,2009-09-20 10:30,"","",2599250,"","","",Fluid Parsing Exceptions should contain the path and linenumber of the affected template for easier bug fixing.
4794,TYPO3.Fluid,Bug,"",Resolved,Must have,Translator view helper does not work when no BE user is logged in,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-09-28,"","",100,2009-09-28 16:54,"","",2599200,"","","",Tx_Fluid_ViewHelpers_TranslateViewHelper depends on $GLOBALS['LANG'] which is only available in BE mode (or in FE mode with logged in BE user)
4967,TYPO3.Fluid,Bug,"",Closed,Must have,Missing Event type onchange,Markus Dreyer,Jochen Rau,2010-10-20 05:44,"","",2009-10-11,"","",0,2009-10-11 06:39,"","",2599150,"","","",After Jochen added the event Handler tags in TagBasedViewHelper I noticed that the onchange Event is missing.
4968,TYPO3.Fluid,Feature,"",Resolved,Should have,Sorting by OptionLabel for Selectbox,Markus Dreyer,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-10-11,"","",100,2009-10-11 06:50,"","",2599100,"","","","I would like to have a sorting option for selectboxes.

sometihng like:

@$this->registerArgument('sortByOptionLabel', 'boolean', 'If true, List will be sorted by label.');@

and in getOptions

@if ($this->arguments->hasArgument('sortByOptionLabel') && $this->arguments['sortByOptionLabel'] === true) {@
@      asort($options);@
@}@
"
4972,TYPO3.Fluid,Bug,"",Closed,Should have,f:format.date does not respect locale.,Nikolas Hagelstein,"",2011-05-06 04:19,"","",2009-10-12,"","",0,2009-10-12 04:04,"","",2599050,"","","","The fluid date helper does not respect the locale date format set by e.g. setlocale.
This issue is causef by the fact that the viewhelper makes use of PHP's DateTime object internally which isn't capable of locale time formats. Currently only ""strftime"" seems respect locales."
4984,TYPO3.Fluid,Feature,"",Resolved,Must have,"Add option ""selectAll"" to Select View Helper",Jochen Rau,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-10-13,"","",100,2009-10-13 12:15,"","",2599000,"","","","Add an option ""selectAll"" to the Select View Helper. If it is set, all options of a multiple selector are preselected by default."
5003,TYPO3.Fluid,Feature,"",Resolved,Should have,Parse output of view helper 'translate',Thomas Deinhamer,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2009-10-15,"","",100,2009-10-15 18:00,"","",2598950,"","","","Expecting you have this html/template source...

@<f:translate key=""any"">The quick brown {dog} jumps over the lazy {fox}.</f:translate>@

... the 'variables' in the brackets won't get replaced anymore.
Therefor it's very complicated to print text with inline variables,
which should then get translated.

Or is there any better approach?

Thanks!"
5020,TYPO3.Fluid,Bug,"",Resolved,Must have,SelectViewHelper produces invalid code,Jochen Rau,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-10-17,"","",100,2009-10-17 07:48,"","",2598900,"","","","The Select View Helper produces invalid code with strange output, if the value of the attribute ""options"" is empty. This is caused by the lack of at least one OPTION element.

""A SELECT element must contain at least one OPTION element.""
http://www.w3.org/TR/html4/interact/forms.html#h-17.6 "
5033,TYPO3.Fluid,Feature,"",Resolved,Must have,Improve Shorthand Syntax of ViewHelpers,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-10-19,"","",100,2009-10-19 04:29,"","",2598850,"","","","h1. Proposal for shorthand syntax

The goal of this RFC is to propose a re-done shorthand syntax for fluid after some real-world usage.

h2. Current situation

Currently, we refer to ""shorthand syntax"" as another way to call a ViewHelper.

Here, there is a basic example for this:
<pre>{f:bla.blubb(""unnamed argument"" a=""b"" c=""42"" d=""{object}"")}</pre>
This is equivalent to the following:
<pre><f:bla.blubb a=""b"" c=""42"" d=""{object}"">unnamed argument</f:bla.blubb></pre>

* Every argument needs to be quoted
* The first argument is the data inside the tag body, in case it is unnamed.
* Nesting of ViewHelpers is arbitrarily possible:
 <pre>{f:outer("" first VH: {f:bla()} second VH: {f:blubb()}"")}</pre>
 (also inside arguments of ViewHelpers, other VHs can be called)
* ViewHelpers can *not* be called inside arrays

Note: Right now, the shorthand syntax is functionally equivalent like the Tag-based ViewHelper syntax.

h2. Problems with current syntax

In the most common use-case, we write things like
<pre>{f:bla(argument=""{blubb}"" argument2=""{bla}"")}</pre>
There, two things feel strange:

* The ""{?}"" syntax feels weird
* It feels strange that the argument needs to be quoted
* There is no comma between the arguments, which feels strange to programmers
* Named arguments in many languages are delimited by :, and not by =. The a=""b"" syntax feels strange.

h2. Draft for new syntax

We remove the ""Shorthand Syntax"" as it has been described above, and instead extend the ""Object Access"" syntax.

The basic object access syntax looks like this:
<pre>{object} {object.bla.blubb}</pre>

Now, we start to *post-process* this value with a ViewHelper:
<pre>{object.bla->f:postProcess()}</pre>

This could also be chained
<pre>{object.bla->f:postProcess()->f:anotherPostProcess()}</pre>

Additionally, if the ViewHelper does NOT work on any object, the first part can be omitted:
<pre>{f:process()->f:postProcess()}</pre>

h3. Arguments

Arguments look like this:
<pre>{f:bla.blubb(arg1: 'literal string', arg2: 42, arg3: object1.bla, arg4:{a1: ""string""})}</pre>

* All arguments have a name
* The syntax is the same as in JSON arrays, just without the outer brackets
* All string arguments are NOT evaluated, but taken as *literal* strings.
* arg1 is a string (which will not be post-processed)
* arg2 is a number
* arg3 is an object accessor
* arg4 is an array

h2. Comparison

The new syntax has the following limitations:
* There is no equivalent of the following: {f:process(""bla"")}, i.e. there is no {""bla""->f:process()} and I would not introduce it.
* Is is NOT possible anymore to use ViewHelpers as arguments in other shorthand ViewHelpers (but I think this is not a problem, as you could use the XML-based syntax where this works)
* It is currently NOT possible to call ViewHelpers in arrays (but this has not been possible before either)

*Please discuss this with us in the TYPO3 5.0 General Mailing list on lists.typo3.org!*"
5056,TYPO3.Fluid,Bug,"",Closed,-- undefined --,F3\Fluid\Core\RuntimeException thrown in file TemplateVariableContainer.php,Martin Eisengardt,"",2011-05-06 04:14,"","",2009-10-20,"","",0,2009-10-21 01:59,"","",2598800,"","","","I tried to build some kind of tree by invoking a section/for recurse.

Template:
<f:section name=""children"">
	<f:for each=""{parent.children}"" as=""child"">
		{indent}
		Child: {child.name}
		- #{child.objectUuid}
		- <a href=""<f:uri.action action='deletenode' arguments=""{parent:parent,child:child}"" />"">Delete</a>
		- <a href=""<f:uri.action action='createnode' arguments=""{parent:child}"" />"">Create new child</a><br />
		<f:render partial=""admin_index_nodelist"" section=""children"" arguments=""{parent:child, indent:indent}"" />
	</f:for>
</f:section>

Tried to remove a variable ""child"" which is not stored in the context!
37 F3\Fluid\Core\ViewHelper\TemplateVariableContainer::remove(""child"")
36 F3\Fluid\ViewHelpers\ForViewHelper::render(array, ""child"", """", boolean)
35 call_user_func_array(array, array)
34 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
33 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
32 F3\Fluid\Core\ViewHelper\AbstractViewHelper::renderChildren()
31 F3\Fluid\ViewHelpers\SectionViewHelper::render()
30 call_user_func_array(array, array)
29 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
28 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
27 F3\Fluid\Core\Parser\SyntaxTree\RootNode::evaluate()
26 F3\Fluid\Core\Parser\ParsingState::render(F3\Fluid\Core\Rendering\RenderingContext)
25 F3\Fluid\View\TemplateView::renderPartial(""admin_index_nodelist"", ""children"", array)
24 F3\Fluid\ViewHelpers\RenderViewHelper::render(""children"", ""admin_index_nodelist"", array)
23 call_user_func_array(array, array)
22 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
21 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
20 F3\Fluid\Core\Parser\SyntaxTree\RootNode::evaluate()
19 F3\Fluid\Core\Parser\ParsingState::render(F3\Fluid\Core\Rendering\RenderingContext)
18 F3\Fluid\View\TemplateView::render()
17 F3\FLOW3\MVC\Controller\ActionController::callActionMethod()
16 F3\FLOW3\MVC\Controller\ActionController::processRequest(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
15 F3\FLOW3\MVC\Dispatcher::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
14 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
13 call_user_func_array(array, array)
12 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
11 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
10 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::blockIllegalRequests(F3\FLOW3\AOP\JoinPoint)
9 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
8 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
7 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::initializeSecurity(F3\FLOW3\AOP\JoinPoint)
6 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
5 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
4 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
3 F3\FLOW3\MVC\Web\RequestHandler::handleRequest()
2 F3\FLOW3\Core\Bootstrap::run()
1 require(""Z:\ws\bgh-typo3\flow3\Packages\Framework\FLOW3\Scripts\FLOW3.php"")

Please include more helpful information!"
5069,TYPO3.Fluid,Bug,"",Resolved,Must have,Fluid Viewhelper link.email misses universal tag attributes,Morton Jonuschat,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-10-21,"","",100,2009-10-21 08:36,"","",2598750,"","","","The EmailViewHelper misses the initialization of the universal tag attributes. Due to this class and misc other tag attributes doesn't work with this viewhelper and an exception gets thrown instead.

This patch adds a call to initialize the universal tag attributes:

<pre>
--- /var/www/_websites/faa/typo3/sysext/fluid/Classes/ViewHelpers/Link/EmailViewHelper.php	2009-10-01 20:31:08.000000000 +0200
+++ EmailViewHelper.php	2009-10-21 14:33:43.000000000 +0200
@@ -51,6 +51,15 @@
 	 */
 	protected $tagName = 'a';
 
+        /**
+         * Arguments initialization
+         *
+         * @return void
+         */
+        public function initializeArguments() {
+                $this->registerUniversalTagAttributes();
+        }
+
 	/**
 	 * @param string $email The email address to be turned into a link.
 	 * @return string Rendered email link
</pre>"
5075,TYPO3.Fluid,Bug,"",Rejected,Must have,Fluid Viewhelper link.email misses universal tag attributes,Nikolas Hagelstein,"",2010-10-20 05:44,ViewHelpers,"",2009-10-21,"","",0,2009-10-21 11:37,"","",2598700,"","","","see:
http://forge.typo3.org/issues/show/5069"
5107,TYPO3.Fluid,Bug,"",Resolved,Must have,namespaces names cant have more than one letter,Fernando Arconada,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-10-25,"","",100,2009-10-25 13:10,"","",2598650,"","","","namespaces names cant have more than one letter in partials called from the layout

- {namespace z=Tx_foor_ViewHelpers} works
- {namespace za=Tx_Mytube_ViewHelpers} throws exception :#1224254792: 
Namespace could not be resolved. This exception should never be thrown! 
27 Tx_Fluid_Core_Parser_TemplateParser::handler_objectAccessor
(Tx_Fluid_Core_Parser_ParsingState, ""z"", ""a:currentAction()"", """")
"
5108,TYPO3.Fluid,Bug,"",Resolved,Must have,Custom ViewHelper couldnt find validator of its own domain,Fernando Arconada,Sebastian Kurfuerst,2010-10-20 05:44,"","",2009-10-25,"","",100,2009-10-25 13:22,"","",2598600,"","","","I've a model Tx_Mytube_Domain_Model_Video 

I have created a ViewHelper
<?php
class Tx_Mytube_ViewHelpers_VideoViewHelper extends 
Tx_Fluid_Core_ViewHelper_AbstractViewHelper {

        /**
	 * Renders the video player
	 *
	 * @param Tx_Mytube_Domain_Model_Video $video
	 * @return string the content of the rendered TypoScript object
	 */
          public function render(Tx_Mytube_Domain_Model_Video $video) {
                return ""AAAAAA"";
          }
          
}
?>

and a template

{namespace mytube=Tx_Mytube_ViewHelpers}
<mytube:video video=""{video}""/>

But i having an exception

#1237900534: No validator found for argument name ""video"" with type 
""Tx_Mytube_Domain_Model_Video"" in view helper 
""Tx_Mytube_ViewHelpers_VideoViewHelper"". "
5118,TYPO3.Fluid,Feature,"",Resolved,Must have,Allow ViewHelpers to be Cascading in Shorthand-Syntax,Steffen Ritter,Sebastian Kurfuerst,2010-10-20 05:44,Core,"",2009-10-26,"","",100,2009-10-26 08:58,"","",2598550,"","","","If you want to do something like this:
<pre>
<f:if condition=""{h:isactive(current:singleLetter.uid,number:{h:counting(context:'newslettersLatest',increase:'true',show:'true')})}"">
</pre>

it is not possible since nesting of viewHelpers within shorthand syntax is not possible.

The attached patch adapts the regexes for letting this through and additionally parses the subViewHelpers correctly while working on the ""argument-array"" of the outer ViewHelper.

The attached patch ist against v4 fluid."
5135,TYPO3.Fluid,Task,"",Resolved,Should have,Make method names CGL conform in TemplateParser,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,Core,1.0.0 alpha 6,2009-10-27,"","",100,2009-10-27 06:16,"","",23150,"","","",The TemplateParser class has a few methods named @handler_*()@ which violates the CGL.
5136,TYPO3.Fluid,Task,"",Resolved,Should have,"Cleanup in unit tests: class_exists, comments and license",Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,"",1.0.0 alpha 6,2009-10-27,"","",100,2009-10-27 06:19,"","",23200,"","","",A lot of the unit tests contain the TYPO3 4.x license boilerplate and claim to use GPL v2. There are some extra docblocks scattered around and some tests use checks for @class_exists()@ around @require_once()@.
5137,TYPO3.Fluid,Bug,"",Resolved,Must have,ResourceViewHelper not usable with new shorthand syntax,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 6,2009-10-27,"","",100,2009-10-27 06:23,"","",2604050,"","","","Since the resource to be included has no parameter in the view helper, one cannot use shorthand syntax with it."
5138,TYPO3.Fluid,Bug,"",Resolved,Must have,ResourceViewHelper uses hardcoded path to mirrored resources,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 6,2009-10-27,"","",100,2009-10-27 06:26,"","",2604000,"","","","The path to the public resource mirror can be configured in FLOW3, so the ResourceViewHelper must follow suit."
5150,TYPO3.Fluid,Bug,"",Resolved,Should have,Rewrite ViewHelpers to support new inline notation,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,Core,"",2009-10-27,"","",0,2009-10-27 12:14,"","",2598500,"","","","With the new syntax for the Fluid inline notation (aka ""shorthand syntax"") implemented with r3333 we introduced a breaking change:
While
<pre>
{f:format.crop('{blog.title}' maxChars=30)}
</pre>

can be transformed to the new syntax like:
<pre>
{blog.title -> f:format.crop(maxChars: 30)}
</pre>

... there currently is no equivalent for:
<pre>
{f:format.crop('static string' maxChars=30)}
</pre>

because we do not allow the syntax to be applied to static strings.
Obviously you can work around this by using the good old tag syntax, but IMO we should just allow:

<pre>
{'static string' -> f:format.crop(maxChars: 30)}
</pre>

The alternative (as discussed with Karsten) would be to rework all affected view helpers so that you could specify the value like this:
<pre>
{f:format.crop(value: 'static string', maxChars: 30)}
</pre>

Anyways, after thinking about this again, I'm in favor of supporting the above.
There are some exceptions though:
e.g.
<pre>{'css/styles.css' -> f:uri.resource()}</pre>
looks pretty odd and I'd change it to
<pre>{f:uri.resource(path: 'css/styles.css')}</pre>

Affected view helpers:
* format.padding
* format.number
* format.currency
* format.crop
* format.date
* format.nl2br
* format.printf
* cObject (v4 only)
* translate (v4 only)
* html (v4 only)

Affected view helpers that IMO don't need support for inline notation:
* alias
* for / groupedFor
* cycle
* if / then / else
* security.ifGrantedAuthority / security.ifAccess (v5 only)
* be.container (v4 only)
* debug (v4 only)
* errors
* section
* form
* link.*"
5158,TYPO3.Fluid,Feature,"",Closed,Should have,"Add ""true"" and ""false"" to Fluid syntax",Bastian Waidelich,Sebastian Kurfuerst,2013-06-05 04:40,Core,"",2009-10-28,"","",100,2009-10-28 06:58,"","",2598450,"",No,"","Currently
<pre>
{f:uri.resource(path: 'somePath', absolute: true)}
</pre>
throws an exception, because the @true@ is ""translated"" into @{true}@ internally.
<pre>
{f:uri.resource(path: 'somePath', absolute: 'true')}
</pre>
and
<pre>
{f:uri.resource(path: 'somePath', absolute: 1)}
</pre>
is possible, but it would be nicer to add ""true"" and ""false"" as language constructs."
5237,TYPO3.Fluid,Bug,"",Resolved,Should have,fix v4's resource ViewHelper,Sebastian Kurfuerst,"",2010-10-20 05:44,"","",2009-11-05,"","",100,2009-11-05 05:32,"","",2598400,"","","","[!!!][+BUGFIX] Fluid (ViewHelpers): FIxed the Resource ViewHelper to be in sync with FLOW3 again. This means that instead of writing <f:uri.resource>...</f:uri.resource>, you write <f:uri.resource path=""..."" /> or {f:uri.resource(path:'...')}."
5256,TYPO3.Fluid,Bug,"",Resolved,Should have,htmlspecialchars() applied inconsistently and of little use,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,Core,"",2009-11-06,"","",100,2009-11-06 09:25,"","",2598350,"","","","Observations:
* When a value assigned to Fluid is put into a template, it remains untouched (i.e. angle brackets stay as they are and so forth).
* When a value is passed through a ViewHelper, it is by default run through @HtmlSpecialCharsPostProcessor@
** This can be disabled only by using a setting that is not part of the public API and subject to change

So, the processing of values is not consistent. But there is more:

I would expect to be able to use the values assigned as-is, unprocessed. An example are the templates used in the FLOW3 kickstarter, where angle brackets are completely legal and must not be run through @htmlspecialchars()@.

Therefore I propose the following:
* remove the @HtmlSpecialCharsPostProcessor@ (and possible the whole @ObjectAccessorPostProcessorInterface@ and related code)
* add a ViewHelper that can be used with inline syntax to apply escaping for HTML (e.g. like @{value->f:escapeForHtml}@)

That way the user can decide how to make use of the values."
5257,TYPO3.Fluid,Feature,"",Resolved,Should have,Allow generic post-processing of template content,Karsten Dambekalns,Karsten Dambekalns,2010-10-20 05:44,Core,"",2009-11-06,"","",100,2009-11-06 09:25,"","",2598300,"","","","Currently relative URLs to resources must be created using the resource viewhelper. It would be a lot nicer if that was not needed, and this triggered the idea of post processing values.
For the task at hand it would be sufficient to add the needed code to @evaluate()@ in @TextNode@, but that would not be compatible with Fluid for v4 and it seems to be better to come up with a more generic solution.

Thus the following is proposed:
* classes implementing a certain interface can be registered with Fluid
* each class can be registered to act on only certain types of syntax tree nodes
* after a template is parsed those processors are asked to do their work on the matching nodes

That would allow to plug in a processor to adjust resource URLs as well as apply HTML escaping on all text nodes (see #5256)"
5301,TYPO3.Fluid,Bug,"",Closed,Must have,Select with option multiple throws Fatal Error,Jochen Rau,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2009-11-10,"","",0,2009-11-10 03:58,"","",2598250,"","","","The following code results in a fatal error:

<f:form.select id=""categories"" property=""categories"" options=""{categories}"" multiple=""multiple"">

The error message is:

The form field name ""[]"" is invalid. Reason: ""[]"" used not as last argument."
5485,TYPO3.Fluid,Feature,"",Rejected,Must have,"Missing operators ""==="", ""!=="" and ""!"" in fluid comparism mechanism",Steffen Ritter,"",2011-05-06 04:05,Core,"",2009-11-24,"","",0,2009-11-24 06:48,"","",2598200,"","","","implement them :)

Attached patch adds the operators and furthermore adds a unit test to for all operators in different datatypes..."
5512,TYPO3.Fluid,Bug,"",Resolved,Could have,form view helper produces invalid XHTML output,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2009-11-26,"","",100,2009-11-26 07:53,"","",2598150,"","","","By default the form view helper inserts hidden fields for referrer & hmac to the generated form at the very top.
I just found out, that this is not XHTML compliant as In XHTML 1.0 Strict mode all inputs have to be put in a block element.

I'd suggest to wrap the auto-generated hidden fields by
<pre>
<div style=""display: none""></div>
</pre>"
5583,TYPO3.Fluid,Story,"",Closed,Should have,DateFormat View Helper doesn't respect locale setting,Susanne Moog,"",2011-05-06 04:19,ViewHelpers,"",2009-11-30,"","",0,2009-11-30 08:39,"","",2598100,"","","","Hi [this is related to fluid, I don't know if this is the right bugtracker],

just found out that the format date viewhelper does not support local date settings (day or month names etc) because it uses the DateFormat object that does not care for the locale.

A short test case shows this:

dateTime->format('l, d. F Y'): Monday, 30. November 2009
strftime('%A, %d. %B %G'): Monday, 30. November 2009

setlocale(LC_ALL, 'de_DE.utf8');

dateTime->format('l, d. F Y'): Monday, 30. November 2009
strftime('%A, %d. %B %G'): Montag, 30. November 2009

(compare ""Monday"" and ""Montag"" in the last part)

Code:

$dateTime = new DateTime();
echo 'dateTime->format(\'l, d. F Y\'):';
echo $dateTime->format('l, d. F Y');
echo 'strftime(\'%A, %d. %B %G\'):';
echo strftime('%A, %d. %B %G');
echo ""\n"";
echo 'setlocale(LC_ALL, \'de_DE.utf8\')' . ""\n\n"";
setlocale(LC_ALL, 'de_DE.utf8');
echo 'dateTime->format(\'l, d. F Y\'):';
echo $dateTime->format('l, d. F Y');
echo 'strftime(\'%A, %d. %B %G\'):';
echo strftime('%A, %d. %B %G');


We could probably use strftime for locales other than en_US (or always?). If you think that reasonable I'll try making a patch at the weekend."
5636,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Under Review,Must have,Form_RadioViewHelper and CheckBoxViewHelper miss check for existing object before it is accessed.,Steffen Ritter,"",2013-11-22 11:14,"","",2009-12-05,"","",0,2009-12-05 12:13,"","",24700,"",No,"","If you have an form for creating an Object currently this will fail with an exception.
The other FormViewHelper use the getValue() function to determine an property-value of object assigned to the form.
Since Checkbox/Radiobox has to compare against a value to decide if selected, they have to fetch the property-value on their own.

in getValue a check on $this->viewHelperVariableContainer->exists('Tx_Fluid_ViewHelpers_FormViewHelper', 'formObject') and an call to $this->addAdditionalIdentityPropertiesIfNeeded(); are performed before acessing the property. If you do so in RadioBox and Checkbox too, no exception anymore.

regards

Steffen"
5783,TYPO3.Fluid,Bug,"",Resolved,Must have,The AbstractViewHelper floods the syslog,Jochen Rau,Sebastian Kurfuerst,2010-10-20 05:44,Core,"",2010-06-18,2010-06-18,"",100,2009-12-17 18:11,"","",2598050,"","","",See related issue #5605 in Extbase.
5879,TYPO3.Fluid,Bug,"",Resolved,Should have,It's not possible to make the multiple attribute optional,Kim Lang,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-01-04,2010-06-21,"",100,2010-01-03 19:34,"","",2598000,"","","","In my extension i have a flexform where i can configure the attributes of every formfield.
I use the IF inline syntax in the ""view"" to achieve this.

This works well for all attributes except for the multiple attribute.


Example:
<pre>
<f:form.Select 
	property=""{fieldHelper.name}"" 

 	options=""{fieldHelper.config.options}""

	id=""{form.name}_{fieldHelper.name}""

	disabled=""{f:if(condition: fieldHelper.config.disabled, then: 'disabled')}""
	multiple=""{f:if(condition: fieldHelper.config.multiple, then: 'multiple')}""
	
	accesskey=""{fieldHelper.config.accesskey}""
	tabindex=""{f:if(condition: fieldHelper.config.tabindex, then: fieldHelper.config.tabindex)}""
/>
</pre>

The problem is in the SelectViewHelper it checks only if the attribute is given not have a value.
Lines: 111, 125, 213
if ($this->arguments->hasArgument('multiple')) {


this syntax is unfortunately not working:
<pre>
<f:form.Select 
	{f:if(condition: fieldHelper.config.multiple, then: 'multiple=""multiple""')}
/>
</pre>
"
5933,TYPO3.Fluid,Feature,"",Accepted,Should have,Optional section rendering,Nathan L,Sebastian Kurfuerst,2012-05-21 10:18,ViewHelpers,"",2010-06-18,2010-06-25,2.00,20,2010-01-08 10:34,"","",2597950,"",No,"","It would be nice to be able to make a section optional.

If a template does not define the ""food"" section, then the default food will be shown if optional is set:
<f:render section=""food"" optional=""true"">
    <p>Default food: potato chips</p>
</f:render>

If a default value is not set, then it will render nothing:
<f:render section=""food"" optional=""true"" />


If optional=""true"" is not set, then an exception will be thrown. This is the normal behavior so nothing should change for anyone unless they add the optional parameter."
5963,TYPO3.Fluid,Bug,"",Closed,Won't have this time,Multiple Select Form helper fails when value is Tx_Extbase_Persistence_ObjectStorage,Nathan L,"",2010-10-20 05:44,ViewHelpers,"",2010-01-11,"","",0,2010-01-11 18:02,"","",2597900,"","","","<f:form.select multiple=""true"" size=""4"" property=""dishTypes"" options=""{allDishTypes}"" optionLabelField=""name""></f:form.select>

This failed to mark selected items as selected when recipe->getDishTypes() returns a Tx_Extbase_Persistence_ObjectStorage

See the patch for the change I made to make it functional.

Basically the getOptions method converts the values away from objects.

Actually, this change I made should probably be done in getSelectedValue() but I have no time and have to catch my carpool.



"
6003,TYPO3.Fluid,Bug,"",Resolved,Should have,ObjectAccessorNode::evaluate calls ObjectAccessor even if variable is not an object or array,Robert Lemke,Robert Lemke,2010-10-20 05:44,Core,1.0.0 alpha 7,2010-01-13,"","",100,2010-01-13 10:26,"","",2604100,"","","","ObjectAccessorNode::evaluate calls ObjectAccessor even if variable is not an object or array.
"
6004,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Closed,Should have,"Checkbox viewHelper throws exception in ""newAction"" method.",Nathan L,Bastian Waidelich,2012-01-18 15:30,ViewHelpers,"",2010-01-13,"","",0,2010-01-13 10:45,"","",26200,"",No,"","I'm not sure if this is a bug or just the way it is supposed to work.  Maybe this should be filed under Fluid or not, I'm not sure. I made changes to my extBase model in order to make it work.

Here is an example scenario:

<pre>
class Myobj {
/**
 * iampretty
 * @param boolean
 */
 protected $iampretty;
    
 // standard getter/setter
}

/**
 * Show a form to create a new object
 *
 * @param Tx_Myext_Domain_Model_Myobj $myobj A new object that is yet to be created
 * @return string A form for providing the objects properties.
 */
function newAction($myobj = NULL) {
    $this->view->assign('myobj',$myobj);
}

<f:form method=""post"" controller=""Example"" action=""create""  name=""myobj"" object=""{myobj}"">

    <f:form.checkbox property=""iampretty"" value=""1"" /> Am I pretty?

<f:/form>
</pre>

This throws an exception: *#1243325768: No value found for key ""Tx_Fluid_ViewHelpers_FormViewHelper->formObject""*

However, if I modify my newAction to look like this, then the error isn't thrown:

<pre>
function newAction($myobj = NULL) {
    if ($myobj == NULL) {
        $myobj = t3lib_div::makeInstance('Tx_Myext_Domain_Model_Myobj');
    }
    $this->view->assign('myobj',$myobj);
}
</pre>


But there is a different issue!  Here is how the checkbox renders:

*Checkbox viewhelpers can only be bound to properties of type boolean or array. Property ""iampretty"" is of type ""NULL"".*

I can make this go away by adding this constructor to my domain object:

<pre>
public function __construct() {	
    $this->iampretty = false;
}
</pre>

Now everything works!  I'm just not sure if it this is how it is supposed to work.  

"
6087,TYPO3.Fluid,Bug,"",Closed,Won't have this time,"#1251730702: The value must be of type ""Tx_Sffluid_Domain_Model_Customer"", but was of type ""array"". ",Stefan Froemken,"",2010-10-20 05:44,Core,"",2010-01-18,"","",100,2010-01-18 15:14,"","",2597850,"","","","Hello...I just try to learn Fluid, but when I want to save some values following error appears:

#1251730702: The value must be of type ""Tx_Sffluid_Domain_Model_Customer"", but was of type ""array"". 

edit.html:
<p class=""bodytext"">Editieren Sie den Kunden:</p>
<f:form method=""post"" action=""update"" name=""customer"" object=""{customer}"">
	<label for=""firstname"">Vorname</label><br />
	<f:form.textbox property=""firstname"" /><br />
	<label for=""lastname"">Nachname</label><br />
	<f:form.textbox property=""lastname"" /><br />
	<f:form.submit class=""submit"" value=""Submit""/>
</f:form>

CustomerController.php:
 <?php
 class Tx_Sffluid_Controller_CustomerController extends Tx_Extbase_MVC_Controller_ActionController {
  protected $customerRepository;

  public function initializeAction() {
   $this->customerRepository= t3lib_div::makeInstance('Tx_Sffluid_Domain_Repository_CustomerRepository');
  }
  public function indexAction() {
   $this->view->assign('zahl', 12);
   $this->view->assign('customers', $this->customerRepository->findAll());
  }
  public function editAction(Tx_Sffluid_Domain_Model_Customer $customer) {
   $this->view->assign('customer', $customer);
  }
  public function updateAction(Tx_Sffluid_Domain_Model_Customer $customer) {
   $this->customerRepository->update($customer);
   $this->flashMessages->add('Der Kunde wurde aktualisiert.');
   $this->redirect('index');
  }
 }

I can't find an error. The code is nearly the same as in blog_example. What's wrong here?!

Stefan Frömken

Fluid: 1.0.2
TYPO3: 4.3.1"
6149,TYPO3.Fluid,Feature,"",Resolved,Should have,for: add iteration informations,Stefan Froemken,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-01-21,"","",100,2010-01-21 09:04,"","",2597800,"","","","This is a feature request. I first saw this functionality in smarty and I think you should insert this in fluid, too. You're right, when you told me to program this viewHelper on my own. But I think this should be in Core.

Here is my first try changing forViewHelper.php:

	/**
	 * Iterates through elements of $each and renders child nodes
	 *
	 * @param array $each The array or SplObjectStorage to iterated over
	 * @param string $as The name of the iteration variable
	 * @param string $key The name of the variable to store the current array key
	 * @param boolean $reverse If enabled, the iterator will start with the last element and proceed reversely
	 * @param integer $iterate If >= 0, you got a new element {iterate} which counts through the Arrays
	 * @param integer $step If iterate is set, then you can set your prefered stepping 2 = 1,3,5,7,9
	 * @return string Rendered string
	 * @author Sebastian Kurfürst <sebastian@typo3.org>
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @author Robert Lemke <robert@typo3.org>
	 * @api
	 */
	public function render($each, $as, $key = '', $reverse = FALSE, $iterate = FALSE, $step = 1) {
		$output = '';
		if ($each === NULL) {
			return '';
		}
		if (is_object($each)) {
			if (!$each instanceof Traversable) {
				throw new Tx_Fluid_Core_ViewHelper_Exception('ForViewHelper only supports arrays and objects implementing Traversable interface' , 1248728393);
			}
			$each = $this->convertToArray($each);
		}

		if ($reverse === TRUE) {
			$each = array_reverse($each);
		}

		$output = '';
		foreach ($each as $keyValue => $singleElement) {
			$this->templateVariableContainer->add($as, $singleElement);
			if ($key !== '') {
				$this->templateVariableContainer->add($key, $keyValue);
			}
			if ($iterate !== FALSE) {
				$this->templateVariableContainer->add('iterate', $iterate);
				($step != 1)? $iterate = $iterate + $step: $iterate++;
			}
			$output .= $this->renderChildren();
			$this->templateVariableContainer->remove($as);
			if ($key !== '') {
				$this->templateVariableContainer->remove($key);
			}
			if ($iterate !== FALSE) {
				$this->templateVariableContainer->remove('iterate');
			}
		}
		return $output;
	}

Now you can do something like this:
<f:for each=""{customer.car}"" as=""car"" iterate=""2"" step=""2"">
<tr>
<td>Auto {iterate}</td>
<td>{car.type}</td>
</tr>
</f:for>

and get:
Auto 1: BMW
Auto 3: Audi
Auto 5: VW

or remove step to get:
Auto 1: BMW
Auto 2: Audi
Auto 3: VW
"
6202,TYPO3.Fluid,Bug,"",Rejected,Should have,ActionViewHelper breaks html on empty content,Georg Ortner,"",2010-10-20 05:44,ViewHelpers,"",2010-01-25,"",0.50,0,2010-01-25 08:11,"","",2597750,"","","","It's not really a bug, but to me it's not very well designed.

If we do something like:

<pre>
<f:link.action action=""index"">{blog.title}</f:link.action>
</pre>

And blog.title is empty we would get:

<pre>
<a href=""someUri"" otherAttributes="""" />
</pre>

Because right now if there is no content given to a ActionViewHelper it assumes that we don't need a closing tag. This ends up in a broken html.

Of course a link-tag without content doesn't make much sense but I think this can happen easily.

This decision is taken in Fluid/Core/ViewHelper/TagBuilder at line 222

<pre>
if ($this->hasContent() || $this->forceClosingTag) {
    $output .= '>' . $this->content . '</' . $this->tagName . '>';
} else {
    $output .= ' />';
}

</pre>
So far I think there are two possible solutions:

1) We add the following to ActionViewHelper, EmailViewHelper and ExternalViewHelper (and all featured TagBasedViewHelpers which do need the closing tag):

<pre>
$this->tag->forceClosingTag(true);
</pre>

2) We make forceClosingTag default true in TagBasedViewHelper and take care that every child of this class which doesn't need a closing tag sets it on false.


Personally I prefer second because I think the number of TagBasedViewHelpers which do need the closing tag is greater than the others.


Regards "
6287,TYPO3.Fluid,Bug,"",Closed,Should have,Fluid User Manual outdated / missing information,Michael Sauter,"",2011-05-06 04:22,"","",2010-01-30,"","",0,2010-01-30 09:23,"","",2597700,"","","","I wrote my first ViewHelper and noticed that the manual has some bugs (I guess it's just outdated).

It's mentioned several times that a ViewHelper must extend F3\Fluid\Core\AbstractViewHelper, but this resides in F3\Fluid\Core\ViewHelper\AbstractViewHelper now.

Also, example 2.6 (for loop) doesn't note that the ViewHelper must be of scope prototype, maybe that should be included in the source code? And of course this class should also extend F3\Fluid\Core\ViewHelper\AbstractViewHelper."
6289,TYPO3.Fluid,Feature,"",Resolved,Should have,{settings} not automatically available in partials,Franz Koch,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2010-01-30,"","",100,2010-01-30 15:12,"","",2597650,"","","","Hi, I just noticed that the {settings} array is not automatically available in partials, which it should in my eyes.
This is the v4 branch, not sure if it's also the case in v5."
6297,TYPO3.Fluid,Bug,"",Resolved,Must have,Not possible to create link to Typo3-Pages with additional piVars,Mathias Gisch,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-02-01,"","",100,2010-02-01 05:22,"","",2597600,"","","","If I want to create a link to a Typo3-Page and add addtional attributes for old-style pibase-Plugins the Viewhelper throws an exception:

#1237900520: The argument additionalAttributes was registered with type array, but is of type string in viewhelper Tx_Fluid_ViewHelpers_Link_PageViewHelper

Try the following:

<f:link.page pageUid=""{detailsPage}"" additionalAttributes=""{tx_ltpdb_test[argument]: 234}"">Test</f:link.page>"
6298,TYPO3.Fluid,Bug,"",Resolved,Should have,action gets converted to lowercase,Falk Kühnel,"",2010-10-20 05:44,"","",2010-02-01,"","",0,2010-02-01 08:18,"","",2597550,"","","","If i recall correctly, this was done to somehow get teh dispatcher to ignore cases for actions.

I am trying to use Fluid with an explicitly called action like this in 4.3:
$view->render('someName'); 
This makes Fluid look for a file called 'somename', which in my oppinion should not be.

TemplateView.php:
<pre>
protected function resolveTemplatePathAndFilename($actionName = NULL) {
...
   $actionName = ($actionName !== NULL ? $actionName : $this->controllerContext->getRequest()->getControllerActionName());
   $actionName = strtolower($actionName);
...
}
</pre>
This is not the right place to do this. this should be done somewhere, in getControllerActionName.
Partials dont get converted to lowercase names btw."
6338,TYPO3.Fluid,Bug,"",Closed,Could have,JSON is being parsed as string Array,Rens Admiraal,"",2013-07-17 06:07,"","",2010-02-04,"",10.00,0,2010-02-04 04:32,"","",2597500,"","","","We have a fluid template with some inline javascript. The JSON objects in it are being parsed as the literal string 'Array'.

It looks like fluid is parsing all array notations in the content instead of just parsing the arrays used in the viewhelper parameters. There is a workaround for this bug, just add a property to the json containing a viewhelper.

Not working:
 flashes.push({
 	id: 'sponsorMeter',
 	flashvars: {
 		amount:5000,
 		maxAmount:700,
 		link: ""<f:uri.action pageUid='{pages.sponsor}' absolute='true' />"",
 		type:'zip'
 	},
 	parameters: {
 		wmode:'transparent'
 	},
 	width: 150,
 	height: 260,
 	src:'/<f:uri.resource path=""Flash/sponsormeter.swf"" />'
 });

Working (parameters objects has changed):
 flashes.push({
 	id: 'sponsorMeter',
 	flashvars: {
 		amount:5000,
 		maxAmount:700,
 		link: ""<f:uri.action pageUid='{pages.sponsor}' absolute='true' />"",
 		type:'zip'
 	},
 	parameters: {
 		link: ""<f:uri.action pageUid='{pages.sponsor}' absolute='true' />"",
 		wmode:'transparent'
 	},
 	width: 150,
 	height: 260,
 	src:'/<f:uri.resource path=""Flash/sponsormeter.swf"" />'
 });"
6389,TYPO3.Fluid,Feature,"",Resolved,Should have,Option/Possibility to Disable Object Escaping,Marc Neuhaus,Robert Lemke,2010-10-20 05:44,Core,1.0.0 alpha 8,2010-02-07,"","",100,2010-02-06 19:51,"","",2604250,"","","","Currently the ObjectAccessor will always be escaped.
In my Opinion there should be a way to Disable this behavior for certain Objects/Properties

"
6392,TYPO3.Fluid,Bug,"",Closed,Should have,#1225136013 - This Exception should never be thrown,Falk Kühnel,"",2011-05-06 04:22,"","",2010-02-07,"","",0,2010-02-07 12:52,"","",2597450,"","","","#1225136013: This exception should never be thrown, as the array value has to be of some type (Value given: ""array ( 0 => '0:\'\'', 'ArrayPart' => '0:\'\'', 1 => '0:\'\'', 'Key' => '0', 2 => '0', 'DoubleQuotedString' => '', 3 => '', 'SingleQuotedString' => '', 4 => '', )""). Please post your template to the bugtracker at forge.typo3.org.

The bad boy causing this:
<f:format.printf arguments=""{0:''}"">This is what i want you to see: %s.</f:format.printf>
"
6514,TYPO3.Fluid,Bug,"",Resolved,Must have,HMAC error when rendering links inside forms,Christine Gerpheide,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-02-18,"","",100,2010-02-18 07:47,"","",2597400,"","","","When adding a link viewhelper inside of a form, an invalid HMAC exception is thrown on submit:
---
#1255082824: Request hash (HMAC) checking failed. The parameter __hmac was invalid or not set, and objects were modified.  
---

For example, this form throws the error:

<f:form method=""post""  action=""update"" name=""updateList"" object=""{updateList}"" arguments=""{mode : 'rename'}"">                   
<f:link.action action=""index"" >Subscriber Lists</f:link.action>
<f:form.textbox property=""title"" id=""listname"" class=""required"" />
<f:form.submit class=""submit"" value=""Save Changes""/>
</f:form>

If you remove the link.action element, the form will submit successfully, but you should be allowed to add such links inside a form."
6521,TYPO3.Fluid,Task,"",Resolved,Should have,"form ViewHelper: add ""objectName"" argument that overrules name attribute",Mam Violeng,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-02-19,"","",100,2010-02-18 21:27,"","",28550,"","","","The problem is related to XHTML Strict 1.0 validation which does not allow the attribute ""name"" for form tags, and when use id attribute instead of name then the function $this->request->getArgument('member') does not work anymore (""member"" is the name of the form)."
6560,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Closed,Must have,A reset button for formViewHelper [Made and attached],Soren Malling,Sebastian Kurfuerst,2011-09-30 06:27,ViewHelpers,"",2010-02-22,"","",90,2010-02-22 08:42,"","",28850,"",No,"","Hi,

I was lacking the function of creating a reset button in my fluid template so I made a viewHelper for this purpose and attached it here. Please give me feedback whether it's useful or not :)

Regards,

Søren"
6570,TYPO3.Fluid,Bug,"",Closed,-- undefined --,RuntimeException thrown in file ViewHelperVariableContainer.php,Arno Dudek,"",2011-05-06 04:23,"","",2010-02-23,"","",0,2010-02-23 11:21,"","",2597350,"","","","<pre>
No value found for key ""F3\Fluid\ViewHelpers\FormViewHelper->formObject""
44 F3\Fluid\Core\ViewHelper\ViewHelperVariableContainer::get(""F3\Fluid\ViewHelpers\FormViewHelper"", ""formObject"")
43 F3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper::getPropertyValue()
42 F3\Fluid\ViewHelpers\Form\CheckboxViewHelper::render(NULL)
41 call_user_func_array(array, array)
40 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
39 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
38 F3\Fluid\Core\ViewHelper\AbstractViewHelper::renderChildren()
37 F3\Fluid\ViewHelpers\FormViewHelper::render(""createAddressType"", array, NULL, NULL, NULL, NULL, """", NULL, NULL)
36 call_user_func_array(array, array)
35 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
34 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
33 F3\Fluid\Core\ViewHelper\AbstractViewHelper::renderChildren()
32 F3\Fluid\ViewHelpers\SectionViewHelper::render()
31 call_user_func_array(array, array)
30 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
29 F3\Fluid\View\TemplateView::renderSection(""mainbox"")
28 F3\Fluid\ViewHelpers\RenderViewHelper::render(""mainbox"", """", array)
27 call_user_func_array(array, array)
26 F3\Fluid\Core\Parser\SyntaxTree\ViewHelperNode::evaluate()
25 F3\Fluid\Core\Parser\SyntaxTree\AbstractNode::evaluateChildNodes()
24 F3\Fluid\Core\Parser\SyntaxTree\RootNode::evaluate()
23 F3\Fluid\Core\Parser\ParsingState::render(F3\Fluid\Core\Rendering\RenderingContext)
22 F3\Fluid\View\TemplateView::renderWithLayout(""master"")
21 F3\Fluid\View\TemplateView::render()
20 F3\FLOW3\MVC\Controller\ActionController::callActionMethod()
19 F3\FLOW3\MVC\Controller\ActionController::processRequest(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
18 F3\FLOW3\MVC\Dispatcher::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
17 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
16 call_user_func_array(array, array)
15 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::FLOW3_AOP_Proxy_invokeJoinPoint(F3\FLOW3\AOP\JoinPoint)
14 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
13 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::checkRequestHash(F3\FLOW3\AOP\JoinPoint)
12 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
11 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
10 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::blockIllegalRequests(F3\FLOW3\AOP\JoinPoint)
9 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
8 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
7 F3\FLOW3\Security\Aspect\RequestDispatchingAspect::initializeSecurity(F3\FLOW3\AOP\JoinPoint)
6 F3\FLOW3\AOP\Advice\AroundAdvice::invoke(F3\FLOW3\AOP\JoinPoint)
5 F3\FLOW3\AOP\Advice\AdviceChain::proceed(F3\FLOW3\AOP\JoinPoint)
4 F3\FLOW3\MVC\Dispatcher_AOPProxy_Development::dispatch(F3\FLOW3\MVC\Web\Request, F3\FLOW3\MVC\Web\Response)
3 F3\FLOW3\MVC\Web\RequestHandler::handleRequest()
2 F3\FLOW3\Core\Bootstrap::run()
1 require(""/Library/WebServer/htdocs/FLOW3-1.0.0-alpha7/Packages/Framework/FLOW3/Scripts/FLOW3.php"")
</pre>

Hi!

I have nearly the same problem like http://forge.typo3.org/issues/show/4277 and http://forge.typo3.org/issues/show/6004

Error at rendering of forms only at checkboxes:
The upper Exception thrown if the new-action in the controller is like this:

<pre>
    /**
     * Index action
     *
     * @param \F3\AddressBook\Domain\Model\AddressType $newAddressType
     * @return string
     * @dontvalidate $newAddressType
     */
    public function newAddressTypeAction(\F3\AddressBook\Domain\Model\AddressType $newAddressType = NULL) {
        $this->view->assign('newAddressType', $newAddressType);
    }
</pre>

Workaround for this (like http://forge.typo3.org/issues/show/6004):

<pre>
    /**
     * Index action
     *
     * @param \F3\AddressBook\Domain\Model\AddressType $newAddressType
     * @return string
     * @dontvalidate $newAddressType
     */
    public function newAddressTypeAction(\F3\AddressBook\Domain\Model\AddressType $newAddressType = NULL) {
        if ($newAddressType === NULL) {
            $newAddressType = $this->objectFactory->create('F3\AddressBook\Domain\Model\AddressType');
        }
        $this->view->assign('newAddressType', $newAddressType);
    }
</pre>

If this is done, an form error will shown: ""Checkbox viewhelpers can only be bound to properties of type boolean or array. Property ""default"" is of type ""NULL"".""

The expecting model definitions are:
<pre>
    /**
     * @var boolean
     */
    protected $default;

    /**
     * Sets default
     *
     * @param integer
     * @return void
     */
    public function setDefault($default) {
        $this->default = $default;
    }

    /**
     * Returns default
     *
     * @return integer
     */
    public function getDefault() {
        return $this->default;
    }
</pre>

workaround
<pre>
    /**
     * Sets default
     *
     * @param integer
     * @return void
     */
    public function setDefault($default) {
        $this->default = (boolean) $default;
    }

    /**
     * Returns default
     *
     * @return integer
     */
    public function getDefault() {
        return (boolean) $this->default;
    }
</pre>

In this case, I'm not sure if this should be this way.

And at least if all is done, the checkbox is checked by default, even than when $this->default is set to false."
6691,TYPO3.Fluid,Bug,"",Resolved,Could have,Backslash in Textfield ViewHelper,Michael Sauter,"",2010-10-20 05:44,"","",2010-03-04,"","",0,2010-03-04 04:33,"","",2597300,"","","","This:
@<f:form.textfield name=""somename"" value=""F3\"" size=""60"" />@

results in the following HTML code:

@<input type=""text"" name=""somename"" value=""F3&quot; size="" />@

I would expect the following (as is the case if you write plain HTML):

@<input type=""text"" name=""somename"" value=""F3\"" size=""60"" />@"
6742,TYPO3.Fluid,Bug,"",Closed,Should have,If / For ViewHelper nesting issue,Frank Mey,"",2010-10-20 05:44,ViewHelpers,"",2010-03-09,"","",100,2010-03-09 06:03,"","",2597250,"","","","Hi,

I tried to implement this control structure in a Fluid section:

<pre>
...

<f:if condition=""{datasheet.strUserLang} == ESPE"">
	 
	  <p>Overall Project Data:</p>
	  <a href=""{datasheet.dateipfad}.xlsx"">Excel 2007</a><br />
	  <a href=""{datasheet.dateipfad}_2003.xlsx"">Excel 2003</a><br /><br />
	  <p>country-specific project data:</p>
	  
	  <f:for each""{datasheet.arrProjLang}"" as=""foo""><p>Download your Excelsheets (2007/2003) for country {foo}:</p><a href=""{datasheet.dateipfad}_{foo}.xlsx"">Excel 2007</a><br /><a href=""{datasheet.dateipfad}_{foo}_2003.xlsx"">Excel 2003</a><br />
	  </f:for>
	
 </f:if> 

...
</pre>

Fluid throws an error : 
<pre>
Tx_Fluid_Core_Parser_Exception

Templating tags not properly nested. Expected: Tx_Fluid_ViewHelpers_IfViewHelper; Actual: Tx_Fluid_ViewHelpers_ForViewHelper
</pre>

Isn't it possible to nest if-constructs with for each - loops by now ?
"
6757,TYPO3.Fluid,Task,Feature #26665: Fluid: Implement String comparison,Resolved,Should have,support literal strings in boolean arguments,Peter Niederlag,"",2012-08-11 11:35,Core,"",2010-03-10,"","",100,2010-03-10 04:31,"","",29850,"",No,"","the 'if' viewhelper should support comparison on strings.

This can easily be fixed by adding [a-zA-Z] on $booleanExpressionTextNodeCheckerRegularExpression in Core/Parser/SyntaxTree/ViewHelperNode.php, see attached patch. if works like a charm with this patch.

However I fear, something else probably breaks badly?

"
6779,TYPO3.Fluid,Bug,"",Closed,Could have,{} parsed inconsistently?,Michael Sauter,"",2011-05-06 04:25,"","",2010-03-10,"","",0,2010-03-10 17:17,"","",2597200,"","","","If the variable inside {} in Fluid is not found, Fluid displays nothing, so e.g.
@{foo}@
outputs nothing if foo does not exist.
If you have the following in your template (space inbetween brackets):
@{ }@
the output is nothing as well, but
@{}@
results in two brackets.
And this:
@{ foo }@
will output:
@{ foo }@

For example, this causes a problem in the kickstarter package: The syntax of the generated repository file is invalid, because the repository class does not contain anything between the opening and closing brackets ... which means these are not written at all."
6808,TYPO3.Fluid,Bug,"",Resolved,Should have,using f:link.action inside f:form breaks hmac verification,Peter Niederlag,"",2010-10-20 05:44,"","",2010-03-12,"","",100,2010-03-12 06:58,"","",2597150,"","","","It seems impossible to link to another Page/Controller/Action/Plugin with f:link.action inside a f:form.

Test-Template:

<pre>
<f:form controller=""Mycontroller"" action=""myaction"" name=""newObject"" object=""{newObject}"">
    <!-- if we don't use a property of newObject the error is not triggered -->
    <f:form.textbox property=""foo"" />

    <f:form.submit name=""mySubmit"" value=""Submit"" />

    <!-- adding a link.action inside form with an Object triggers an ""hmac could not be verified"" error -->
    <!-- for some reason 'action' is dropped in RequestHashService->generateRequestHash() -->
    <!-- this happens only when we use a property of newObject -->
    <f:if condition=""true"">
            <f:link.action action=""baz"" pluginName=""pi3"" controller=""foobar"" pageUid=""14"">Jetzt anschliessen</f:link.action>
    </f:if>
</f:form>
</pre>

Probably that's due to the fact that the Plugin (pix) seems not to be taken into account, when generating the hmac/Requesthash?"
6809,TYPO3.Fluid,Bug,"",Resolved,Must have,using f:link.action inside f:form breaks hmac verification,Peter Niederlag,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-03-12,"","",100,2010-03-12 06:59,"","",2597100,"","","","It seems impossible to link to another Page/Controller/Action/Plugin with f:link.action inside a f:form.

Test-Template:

<pre>
<f:form controller=""Mycontroller"" action=""myaction"" name=""newObject"" object=""{newObject}"">
    <!-- if we don't use a property of newObject the error is not triggered -->
    <f:form.textbox property=""foo"" />

    <f:form.submit name=""mySubmit"" value=""Submit"" />

    <!-- adding a link.action inside form with an Object triggers an ""hmac could not be verified"" error -->
    <!-- for some reason 'action' is dropped in RequestHashService->generateRequestHash() -->
    <!-- this happens only when we use a property of newObject -->
    <f:if condition=""true"">
            <f:link.action action=""baz"" pluginName=""pi3"" controller=""foobar"" pageUid=""14"">Link to somewhere else</f:link.action>
    </f:if>
</f:form>
</pre>

Probably that's due to the fact that the Plugin (pix) seems not to be taken into account, when generating the hmac/Requesthash?"
6822,TYPO3.Fluid,Bug,"",Closed,Should have,unhelpful error message if template cannot be read,Florian Staudacher,"",2011-05-06 04:25,Core,"",2010-03-14,"","",0,2010-03-14 09:28,"","",2597050,"","","","I reported this bug there: http://bugs.typo3.org/view.php?id=13810 earlier and was told to put it here, so here it comes:

in typo3/sysext/fluid/Classes/View/TemplateView.php on line 358 the method parseTemplate() should return a helpful error message in case the file cannot be read.
I had forgotten to give the server read access to my template file and the only thing i got over and over was

Tx_Fluid_Core_Parser_Exception
Parse requires a template string as argument, boolean given.

from the typo3/sysext/fluid/Classes/Core/Parser/TemplateParser.php on line 271.
I mean if you know that file_get_contents returns false if there is an error, it's simple to look for the error, but even that involves looking at the code to see how the file gets read.

Please replace with/add a more suiting error message "
6844,TYPO3.Fluid,Feature,"",Resolved,Should have,"Remove ""shut-up"" operator @",Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,Core,1.0.0 alpha 8,2010-03-15,"",2.00,100,2010-03-15 09:55,"","",2604200,"","","","Remove the ""shut-up"" operator @ and instead create a new ViewHelper ""raw""."
6897,TYPO3.Fluid,Bug,"",Resolved,Should have,Fluid: form.select no (pre)selected values in multiple-mode,Jan Roth,Bastian Waidelich,2010-10-20 05:44,"","",2010-03-17,"","",100,2010-03-17 11:47,"","",2597000,"","","","If a select-field in my form is multiple=""multiple"" and size > 1 then is no value selected in editActions with correctly assigned property ..."
7039,TYPO3.Fluid,Bug,"",Rejected,-- undefined --,if ViewHelper: conditions always true,Nikolas Berger,"",2010-10-20 05:44,ViewHelpers,"",2010-03-28,"","",0,2010-03-28 12:31,"","",2596950,"","","","My code:

<pre>{foo.bar} 

<f:if condition=""{foo.bar} == test1""><f:then> test1 </f:then></f:if>
<f:if condition=""{foo.bar} == test2""><f:then> test2 </f:then></f:if>
<f:if condition=""{foo.bar} == test3""><f:then> test3</f:then></f:if>
</pre>

The output is:

<pre>test2

test1 
test2 
test3
</pre>

But I expected this result:

<pre>test2

test2 
</pre>

Is my syntax wrong?"
7068,TYPO3.Fluid,Bug,"",Resolved,Should have,SelectViewHelper does not support SplObjectStorage as option,Robert Lemke,Robert Lemke,2010-10-20 05:44,ViewHelpers,1.0.0 alpha 8,2010-03-30,"",1.00,100,2010-03-30 05:47,"","",2604150,"","","","The SelectViewHelper checks if the specified option source is an instance of ""Iterator"". However, SplObjectStorage is not and therefore cannot be used.

The check should test for Traversable instead."
7138,TYPO3.Fluid,Bug,"",Rejected,Must have,Changes to ObjectAccessor break usage with fluid conditions,Falk Kühnel,"",2011-08-04 02:23,Core,"",2010-04-06,"","",0,2010-04-06 06:56,"","",2596900,"",No,"","Since the Tx_Extbase_Reflection_ObjectAccess::getProperty has changed, conditions on Arrays dont work like they used to:

<pre>
<f:if condition=""{user.otheraddresses.0}"">
</pre>
will cause an Exception
<pre>
#1263391473: The property ""classes"" on the subject was not accessible. 
</pre>
if the array is empty.

I do not know, if this is intended behaviour. Should Fluid take care of this, or the Reflection class?
Also, any unset variables in an array, cause this error, instead of not being shown.



"
7203,TYPO3.Fluid,Feature,"",Resolved,Should have,Object accessor could work for associative arrays,Michael Sauter,"",2011-05-06 04:26,Core,"",2010-04-10,"","",50,2010-04-10 03:39,"","",2596850,"","","","I'm not exactly sure if this is a bug or a missing feature:

The manual (http://flow3.typo3.org/documentation/manuals/fluid/fluid.usermanual/#d0e161) states that it is possible to traverse associative arrays with the object accessor syntax. 

I thought it should be used like this (correct my if I'm mistaken):
@$foo = array('bar' => array('baz' => 'value'));@
@$this->view->assign('foo', $foo);@
And in Fluid:
@{foo.bar.baz}@
Which would result in:
@value@

This does not work though (r4040). The problem seems to be in Parser/SyntaxTree/ObjectAccessorNode.php. There, either the property of an object is resolved or the variable is directly returned.

Applied patch adds the functionality to traverse associative arrays. It's probably not the cleanest solution though ..."
7243,TYPO3.Fluid,Task,"",Resolved,Must have,let's use UpperCamelCase filenames for templates as well,Felix Oertel,Bastian Waidelich,2010-10-20 05:44,Core,1.0.0 alpha 9,2010-04-13,2010-06-18,"",100,2010-04-13 17:00,"","",33600,"","","","hey guys,

please let us stick to lowerCamelCase filenames for templats as we do for all the other files as well.

at the moment you have to use lowercasefilenames which look kind of ugly. on some systems (like my osx) you will never experience this ""problem"", because filesystem is case-intensitive ... things look different if your on BSD e. g.

regards, foertel"
7292,TYPO3.Fluid,Bug,"",Resolved,Must have,escapeViewHelper does not take encoding of resulting web page into account,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2010-04-16,"","",100,2010-04-16 04:38,"","",2596800,"","","","Uf I use {user.name} and username as a special char, nothing is displayed.
if I use <f:escape value=""{user.name}"" encoding=""iso-8859-1""></f:escape>, it 
works.

Solution: use the same encoding TYPO3 uses for displaying the page, as we assume that data rendered has the same encoding as well."
7389,TYPO3.Fluid,Feature,"",Resolved,Should have,GroupedForViewHelper group by object,Lienhart Woitok,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-04-20,"","",100,2010-04-20 10:02,"","",2596750,"","","","Currently it is not possible to group by an object. 

Example :

<pre>
class Foo {
	/** @return array<Bar> */
	public function getBars();
}

class Bar {
	/** @return Baz */
	public function getBaz();
}

class Baz {
}
</pre>

Now, lets loop over them using the Baz objects as key.

<pre>
<f:groupedFor each=""{foo.bars}"" as=""bars"" groupBy=""baz"" groupKey=""baz"">
	{baz.title}:
	<ul>
		<f:for each=""{bars}"" as=""bar"">
			<li>{bar.name}</li>
		</f:for>
	</ul>
</f:groupedFor>
</pre>

I expected output from this loop, something like
<pre>
	A crazy baz title:
	<ul>
			<li>A named bar</li>
			<li>Another named bar</li>
	</ul>
	Second crazy baz title:
	<ul>
			<li>A further named bar</li>
			<li>And yet another named bar</li>
			<li>The last named bar</li>
	</ul>
</pre>

I got nothing. So I dug into this and created the attached patch, enabling the expected behavior."
7417,TYPO3.Fluid,Bug,"",Resolved,Must have,Missleading exception on wrong data type,Felix Oertel,"",2010-10-20 05:44,Core,"",2010-04-22,"","",100,2010-04-22 05:37,"","",2596700,"","","","hi,

in a viewhelper I annotated an argument ""array"" but throw in an object. The missleading exception
@@
was thrown.

In Core/ViewHelper/AbstractViewHelper.php:295 validateArguments() tries to throw an ""wrong type""-exception but generates a new exception itself by calling @strval($this->arguments[$argumentName])@.

We should only output the argument's value if it's a human readable type though skipping objects and arrays."
7518,TYPO3.Fluid,Bug,"",Closed,Won't have this time,FLuid breaks on HTML data-* attributes,Morton Jonuschat,"",2010-10-20 05:44,"","",2010-04-28,"","",0,2010-04-28 09:36,"","",2596600,"","","","Trying to use HTML5 data-* attributes in Fluid ViewHelpers breaks rendering in different ways, depending on the ViewHelper called.

For example f:link.action doesn't parse the tag completly, rendering breaks with ""You closed a templating tag which you never opened!""

Adding a data-* attribute to f:form.textbox results in the unparsed tag being put into the resulting html.

Regarding the use of data-* tags see the official W3 documentation:

http://dev.w3.org/html5/spec/Overview.html#attr-data

Bug experienced on Extbase/Fluid included with TYPO3 4.4.0beta1"
7608,TYPO3.Fluid,Feature,"",New,Could have,Configurable shorthand/object accessor delimiters,Lienhart Woitok,"",2013-11-07 08:08,Core,"",2010-05-03,"","",0,2010-05-03 09:31,"","",2596550,"",Yes,"","See Mailinglist Thread ""About limitations in Fluid""

For some output formats (like LaTeX) it is not comfortable to use { and } for shorthand syntax as these symbols are used by the target language. Therefore, the possibility to configure the open and close symbols for short hand syntax is necessary. 

Attached patch provides this."
7618,TYPO3.Fluid,Feature,"",Rejected,Could have,Add support for nested evaluation.,Nikolas Hagelstein,"",2013-03-19 03:50,Core,"",2010-05-04,"","",0,2010-05-04 10:59,"","",2596500,"","","","Currently it's not possible to do something like:

{myArray.{varContainingArrayKey}}

"
7882,TYPO3.Fluid,Bug,"",Closed,Should have,wrong section rendering with <f.form.textbox />,Mario Näther,"",2010-10-20 05:44,ViewHelpers,"",2010-05-24,"","",0,2010-05-24 11:35,"","",2596450,"","","","I have a Section :
<pre><f:section name=""defaultSearch"">
<f:form.textbox name=""text"" class=""date"" value="""" />
</f:section>
</pre>

my html output is right...
<pre>
<input type=""text"" name=""tx_myext_pi1[text]"" value="""" />
</pre>

and i use the renderViewHelper to show the section
<pre><f:render section=""defaultSearch"" /></pre>

my html output is *wrong* (without the *""tx_myext_pi1""* prefix) ...
<pre><input type=""text"" name=""text"" value="""" /></pre>

any ideas who i find the bug?"
8179,TYPO3.Fluid,Feature,"",Resolved,Should have,Create Selenium Tests for Fluid Viewhelpertest Package / Extension,Sebastian Kurfuerst,Bastian Waidelich,2010-10-20 05:44,"","",2010-06-11,"","",100,2010-06-11 15:42,"","",2596400,"","","",see above ;)
8180,TYPO3.Fluid,Feature,"",Resolved,Should have,Create a ViewhelpertestBackporter,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-06-11,"","",100,2010-06-11 15:43,"","",2596350,"","","","As a preparation for the selenium tests, create a backporter for the Viewhelpertest."
8233,TYPO3.Fluid,Feature,"",Resolved,Should have,Uri_ImageViewHelper // Link to a resized image,Christian Baer,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-06-15,2010-06-18,"",100,2010-06-15 04:35,"","",2596300,"","","","Request: 
I think this is not possible for the moment. Either you display a (resized) image or you link to the original image (fullsize). So I think it would be nice to have a viewhelper for linking to an image, providing width/height settings.

Solution:
Here's the implementation of a ViewHelper that works like ImageViewHelper, but just renders the URI, not the whole <img>-Tag. It is based on the original ImageViewHelper and simply returns the $imageResource. Useful for the creation of XML-files where the URI of a resized image is needed.

"
8247,TYPO3.Fluid,Feature,"",Resolved,Should have,add more uri options to form viewhelper,Susanne Moog,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-06-15,"","",100,2010-06-15 08:01,"","",2596250,"","","","The form view helper is missing an addQueryString param (like the link.action view helper) to easily keep the current query params when sending the form (for example you could have other extensions depending on certain params on your form page and would like to keep the current state when sending the form). 

Attached a small patch which enables this feature (though I don't know if it's the correct ""fluid"" way)."
8319,TYPO3.Fluid,Task,"",Resolved,Should have,Add ViewInterface to ViewHelperVariableContainer again,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,Core,"",2010-06-17,"","",100,2010-06-17 10:00,"","",40650,"","","","With r4273 all view typehints have been replaced by an ""object"" annotation.
Robert can't remember the exact reason.
I'd suggest to revert this change and see, whether the unit tests still run.
I think, it's really important to work with an interface rather than @object@"
8468,TYPO3.Fluid,Feature,"",Resolved,Should have,Add debug viewhelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-06-23,"","",100,2010-06-23 11:24,"","",2596200,"","","","In v4 we have a <f:debug /> viewhelper to dump objects.
We need to forward port this to v5."
8484,TYPO3.Fluid,Bug,"",Closed,Should have,Revise EscapeViewHelper,Bastian Waidelich,Bastian Waidelich,2011-07-11 08:38,ViewHelpers,1.0 beta 1,2010-06-24,"","",0,2010-06-24 08:53,"","",2596150,"",No,"","The current implementation of the EscapeViewHelper is a bit odd IMO.
1. I find it weird to use one ViewHelper to escape html, entities & urls
2. If anything goes wrong, the EscapeViewHelper currently returns the *unchanged* input string.. That is, if you'd write @<f:escape value=""dangerous html"" type=""HTML"" />@ the value would not be htmlspecialchar'ed"
8491,TYPO3.Fluid,Task,"",Needs Feedback,Should have,link.action and uri.action differ in absolute argument,Bastian Waidelich,Karsten Dambekalns,2012-03-07 11:05,ViewHelpers,"",2010-06-24,"","",0,2010-06-24 13:41,"","",41600,"",No,"","In r3548 the ""absolute"" argument of the link.action ViewHelper has been removed with following comment:
""[~TASK][~API] Fluid (ViewHelper): The ActionViewhelper now produces only absolute URIs. The argument ""absolute"" is now obsolete.""

I don't understand why this would make sense.. And if it does, shouldn't the uri.action ViewHelper be changed accordingly?"
8535,TYPO3.Fluid,Bug,"",Resolved,Must have,CheckBoxViewHelper hidden value creates extra data when using multi-valued field names,Balisky Christophe,Bastian Waidelich,2010-10-20 05:44,"","",2010-06-28,"","",100,2010-06-28 13:40,"","",2596100,"","","","In fluid 1.2.0

When creating multiple edit grids (in tables for examples)  I use the following syntax to retrieve an array of values to update in my form :

<ul>
  <f:for each=""{articles}"" as=""article"">
    <li>  
     <f:form.checkbox name=""articles[]"" value=""{article.uid}"" />
    </li>
  </f:for>
</ul>

But the new hidden field created to manage empty values actually adds a new entry in the articles array I receive.

This is a regression form previous versions of fluid.

The actual hidden field solution is only valid if uses with mono-valued fields.



"
8540,TYPO3.Fluid,Bug,"",Closed,Should have,Call to undefined method F3\\Fluid\\View\\TemplateView::parseTemplate(),Michael Schams,"",2010-10-20 05:44,"","",2010-06-29,"","",0,2010-06-28 20:52,"","",2596050,"","","","PHP Fatal error after changes in *r4654* but also in *r4656*:

<pre>
[Tue Jun 29 00:45:30 2010] [error] [client xx.xx.xx.xx] PHP Fatal error:
Call to undefined method F3\\Fluid\\View\\TemplateView::parseTemplate()
in /home/flow3/www/FLOW3-subversion/trunk/Packages/Framework/Fluid/Classes/View/AbstractTemplateView.php on line 236
</pre>"
8648,TYPO3.Fluid,Bug,"",New,Should have,format.crop ViewHelper should support all features of the crop stdWrap function,Bastian Waidelich,"",2011-10-21 07:37,ViewHelpers,"",2010-07-04,"","",0,2010-07-04 07:16,"","",2596000,"",No,FLOW3 1.0.0,"Right now the format.crop ViewHelper only works partly in BE mode (v4) and is missing some features in v5. Also it can't handle HTML content correctly yet.
All implementations should support the same feature set."
8724,TYPO3.Fluid,Task,"",Resolved,Should have,remove not needed argument from renderPartial,Felix Oertel,"",2010-10-20 05:44,Core,"",2010-07-07,"","",0,2010-07-07 06:46,"","",44300,"","","","hey,

in Classes/View/TemplateView.php renderPartial() the second argument @$sectionToRender@ is required (no default value) but it is not used in the method ... 

it clearly will be a breaking change if we remove that, but propably it's not too late right now ;)

or is this variable intended to be used later?

regards, foertel

ps: while checkin v5 i see that the TemaplateView looks different there. Is this intended or just un-backported refactoring?"
8732,TYPO3.Fluid,Task,"",Resolved,Should have,Small improvement of ForViewHelper,Michael Feinbier,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-07-08,"","",100,2010-07-08 03:10,"","",44400,"","","","In the @Tx_Fluid_ViewHelpers_ForViewHelper@ there's a method @convertToArray()@ which extracts an array from the traversable object via foreach.
This should be replaced by the function @iterator_to_array()@ which does basically the same but more performant on huge objects than foreach'ing manually.

Patches for v4 and v5 branch are attached."
8749,TYPO3.Fluid,Bug,"",Resolved,Should have,SelectViewHelper throws fatal error on PHP 5.2,Jochen Rau,Bastian Waidelich,2010-12-14 13:21,ViewHelpers,"",2010-07-08,"","",100,2010-07-08 15:37,"","",2595900,"","","","Calling the SelectViewHelper leads to the following

Fatal Error: Objects used as arrays in post/pre increment must return value by reference in ... SelectViewHelper on Line 171."
8773,TYPO3.Fluid,Major Feature,"",Resolved,Should have,Implement support for Widgets,Bastian Waidelich,Sebastian Kurfuerst,2010-10-20 05:44,"",1.0 alpha 12,2010-07-09,"","",100,2010-07-09 08:46,"","",2604300,"","","","h2. Considerations:

Widgets...
* ...are a special implementation of a Fluid ViewHelper
* ...behave like ""Plugins in Plugins""
* ...(can) implement their own Controller & Template
* ...should be integratable without the need to modify the orignial Package/Plugin (e.g. add pagination to Blog posts by adding the widget to your custom template)

h2. Possible widgets:

* *Pagination Widget*: If put in the template like _<f:widget.pagination items=""{posts}"" as=""postsOfThisPage"" />_ (syntax is not clear yet) will fetch a subset of posts and make it available as ""postsOfThisPage"". To prevent, that all posts are loaded, we'll need some special lazy loading proxy (see related issue)
* *Autocompletion*
* *Sortable grid*
* *(Google) maps*
* ..."
8824,TYPO3.Fluid,Task,"",Resolved,Must have,Create an abstract base class for Condition ViewHelpers to remove Code Duplication,Sebastian Kurfuerst,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-07-12,"","",100,2010-07-12 14:09,"","",45600,"","","","In FLOW3, we already have quite some condition ViewHelpers (f:if, f:security.if*). It turns out they all use a private API inside the framework, as they directly implement the ChildNodeAccessInterface, which is no public API.

h3. Proposed solution
Create a new base class \F3\Fluid\Core\ViewHelper\ConditionViewHelper which should be used as a basis of condition-based ViewHelpers.

h3. Breaking change

*This is a breaking change for people who copied the ""if""-ViewHelper and did their own condition evaluation, as the internal workings of the ""if""-ViewHelper changed.*

h3. How to upgrade

Have a look at the new IfViewHelper, and see that it is now far easier to get up and running."
8834,TYPO3.Fluid,Task,"",Resolved,Should have,Add fallback for use of TagBasedViewHelper,Karsten Dambekalns,Bastian Waidelich,2010-10-20 05:44,Core,"",2010-07-13,"","",100,2010-07-13 04:00,"","",45750,"","","","As discussed there should be a TagBasedViewHelper that is marked deprecated, logs that fact and extends from AbstractTagBasedViewHelper."
8852,TYPO3.Fluid,Feature,"",Resolved,Should have,Add method overrideArgument() to AbstractViewHelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,Core,"",2010-07-14,"","",100,2010-07-14 03:53,"","",2595850,"","","","When registering an argument twice, you'll get an exception
<pre>
#1253036401: Argument ""xyz"" has already been defined, thus it should not be defined again.
</pre>
That's intended, but we need the possibility to override argument registrations (e.g. for the form.checkbox vh that sets the ""value"" argument required)"
8854,TYPO3.Fluid,Bug,Task #26658: Make Form ViewHelpers consistent,Resolved,Must have,form.checkbox ViewHelper throws Exception in newAction,Bastian Waidelich,Bastian Waidelich,2012-01-20 06:22,ViewHelpers,1.1,2010-07-14,"","",100,2010-07-14 03:57,"","",2595800,"",No,Git master,"When using the form.checkbox ViewHelper in ObjectAccessorMode (bound to a property of the form object) this leads to an error when the form object is NULL (e.g. in the newAction) because the type of the property (array / boolean) can't be determined.
To avoid this issue, we need a new argument ""multiple"" that will make sure, that ""[]"" are appended to the checkbox field name."
8879,TYPO3.Fluid,Bug,"",Closed,Should have,{ } when using as JavaScript,Adrian Föder,"",2013-12-04 07:01,"","",2010-07-15,"","",0,2010-07-15 07:43,"","",2595750,"",No,(any),"assuming the following FLUID code:

<pre>
<f:if condition=""foo"">
  <script type=""text/javascript"">
    var myDemoJSObject = {
      key1: 'foo',
      key2: 'bar
    }
  </script>
</f:if>
</pre>


this is outputted as

<script type=""text/javascript"">
var myDemoJSObject = Array
</script>


I think the brackets are regarded as inline view helpers and tried to be parsed. Wouldn't it be senseful to require inline view helpers may NOT have a whitespace after the opening bracket, so it should be (regex) /{\w/ and NOT /{./ or something like that."
8880,TYPO3.Fluid,Bug,"",Resolved,Should have,Be.ContainerViewHelper renders page header too early,Andreas Wolf,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-07-15,"","",100,2010-07-15 07:57,"","",2595700,"","","","It is currently impossible to add something to the pageRenderer object in a child view helper of a Be.ContainerViewHelper. This is due to the children being rendered after the header has been rendered.

This bug makes it impossible to e.g. add new JS files inside child view helpers, for example inside a backported includeJavaScript view helper.

Solution: Just reverse the order in which the header and the children are rendered."
8893,TYPO3.Fluid,Bug,"",Resolved,Must have,Negative numeric values are not correctly converted to FALSE,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,Core,"",2010-07-15,"","",100,2010-07-15 13:08,"","",2595650,"","","","<pre>
<f:if condition=""-1"">this should not be rendered</f:if>
</pre>
actually renders the content, cause ViewHelperNode::convertToBoolean() does not correclty determine the type as /numeric/.

Solution: move the is_numeric() check *above* the is_string() check."
8939,TYPO3.Fluid,Bug,"",Rejected,Should have,format.date does not handle TYPO3/UNIX timestamps,Xavier Perseguers,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-07-19,"","",0,2010-07-19 09:34,"","",2595600,"","","","Hi,

I just upgraded an Extbase extensions I developed for TYPO3 4.3 and came across a bug in the format.date ViewHelper. My dates are not displayed anymore as the conversion from unix timestamp to DateTime object is invalid (constructor expects a string representation, not a timestamp).

Enclosed is a patch that solves this issue."
8989,TYPO3.Fluid,Feature,"",Needs Feedback,Could have,Search path for fluid template files,Christian Winther,"",2012-03-12 13:10,View,"",2010-07-22,"","",0,2010-07-22 04:26,"","",2595550,"",No,"","I'm currently working on a project where multiple extensions need to share some generic views, as well as be able to overwrite them locally.

I have made a patch for fluid that should not break in BC, but add the option for the TemplateView class to scan multiple extensions for view files.

Simply put I have added an ""addExtensionSearchPath"" method to TemplateView that appends extensions to a flat array (if it haven't already been added)

I have also changed so the following methods has a new optional argument called ""extension"" to overwrite the normal behavior of just calling ""getControllerExtensionKey""

* getTemplateRootPath()
* getPartialRootPath()
* getLayoutRootPath()

The protected function expandGenericPathPattern has been updated to iterate the new extensionSearchPaths class property and build search paths like before for each extension.

With the path applied you simple have to do the following in your controller to add a new search path

 $this->view->addExtensionSearchPath($_YOUR_EXT_KEY);

The search paths is processed First In First Out (FIFO) style, so your current extension always takes precedence over any additional searchable extensions added later in the request cycle.

This patch greatly improves the flexibility of the fluid rendering system, and helps keeping things DRY in your apps.

I have attached my patch to this ticket"
8992,TYPO3.Fluid,Feature,"",Resolved,Should have,Forwardport count ViewHelper,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-07-22,"","",100,2010-07-22 09:58,"","",2595500,"","","",v5 is currently missing the count ViewHelper that we have in v4.
9005,TYPO3.Fluid,Feature,"",Accepted,Could have,Fluid Template Analyzer (FTA),Bastian Waidelich,Sebastian Kurfuerst,2011-05-06 05:03,"","",2010-07-23,"","",20,2010-07-23 04:55,"","",2595450,"","","","We want to implement a wizard like tool, that allows developers to analyze and test their Fluid templates. Following features should be incorporated:

# Display the (highlighted) source code of a Fluid template
## All nodes should be wrapped with <span> tags and meaningful CSS classes
## Partials & Layouts could be linked, so that you only have to click the partial name in order to load the respective partial into FTA
## ViewHelper nodes could be linked with the source code of the corresponding ViewHelper
## Meta information of the node could be added to the span's title attribute (e.g. PHP doc comments of the ViewHelper's render method)
# Display the (highlighted) rendered Fluid template
## All rendered nodes should be wrapped with <span> tags and meaningful CSS classes
## Meta information of the node could be added to the span's title attribute (e.g. source code of this node, parameters of the respective ViewHelper)"
9037,TYPO3.Fluid,Feature,"",Rejected,Won't have this time,new comparator for CheckboxViewhelper,Thomas Mammitzsch,"",2010-10-20 05:44,ViewHelpers,"",2010-07-26,"","",0,2010-07-26 10:54,"","",2595400,"","","","i have a suggestion for a new ""in_array"" comparator in ViewHelperNode. Reason is that i'm creating forms in the frontend, where form definition happens in the backend. Everything works fine, even if i get validation errors, the form shows up prefilled.

The only exception is the CheckboxViewHelper. Because this is an array of values (at least if you have multiple checkboxes with the same name and different values) you can not compare it against a single value currently.
It would be nice if one can check if a value is in that array, to check the checkbox in case of validation errors, a return from a last-check-before-submit page (or generally when the form of the newAction has to be displayed again). I added one case to the evaluateComparator method in ViewHelperNode to do that and it works:

case 'in_array':
    return in_array($leftSide, $rightSide);

of course i also added 'in_array' also to the comparators static array in ViewHelperNode.
Could we add this permanently, what do you mean? "
9090,TYPO3.Fluid,Bug,"",Resolved,Must have,Chaining of ->assign() does not work anymore,Michael Feinbier,Bastian Waidelich,2010-10-20 05:44,View,"",2010-07-30,"","",100,2010-07-30 06:07,"","",2595350,"","","","Since the latest release of Fluid the chaining of the ->assign() method does not work anymore
<pre>
$this->view
  ->assign('request', $request)
  ->assign('languages', $this->languageRepository->findActive());
</pre>

Throws error @Fatal error: Call to a member function assign() on a non-object@"
9114,TYPO3.Fluid,Bug,"",Resolved,Must have,"TemplateView - still using $viewData instead of $variables - error ""Context has to be initialized with an array, NULL given.""",Stefan Neufeind,"",2010-10-20 05:44,View,"",2010-08-02,"","",0,2010-08-02 04:55,"","",2595300,"","","","Error-message is: Context has to be initialized with an array, NULL given.

This is a follow-up to the resolved bug #7053 (filed against extbase). They share in common that initialisation was not done, but the root-cause is different!

With TYPO3 v4.3.3 in sysext/extbase/Classes/MVC/View/AbstractView.php there was an initialisation of viewData to array(). With TYPO3 v4.3.4 this was renamed from viewData to variables (inside AbstractView).

However TemplateView distributed with TYPO3 v4.3.4 still relies on viewData.

Fix: Renaming this to variables makes it work again.


        protected function buildRenderingContext($variableContainer = NULL) {
                if ($variableContainer === NULL) {
                        $variableContainer = $this->objectFactory->create('Tx_Fluid_Core_ViewHelper_TemplateVariableContainer', $this->variables);"
9135,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Rejected,Won't have this time,FormViewHelper cannot get the value of DateTime,Michael Feinbier,Bastian Waidelich,2011-06-28 06:23,ViewHelpers,1.0.0,2010-08-04,"","",0,2010-08-04 11:14,"","",47600,"",No,"","Hey,

not quite shure if i did something wrong but I think I found a misbehaviour in the @AbstractFormViewHelper@. It seems that @DateTime@-Fields are not read correctly.

My model has a property:
<pre>/**
 * Produktdatum
 * @var DateTime
 * @validate NotEmpty
 */
protected $product_date;</pre>

Now if I try to read the value of the field in a form like this:
<pre><f:form.hidden property=""warranty_date"" id=""hidden_warranty_date"" /></pre>
the *value* of the hidden form is *empty*.
The property itself is stored correctly because:
<pre>{f:format.date(date: '{newArticle.warranty_date}', format: 'd-m-Y')}</pre> written just next to the hidden form gives me the correct date.

So I think the @$this->getValue()@ in the @AbstractFormViewHelper@ is not able to determine the value of the DateTime object? Maybe it should echo the Unix-Timestamp? (@12353534)"
9143,TYPO3.Fluid,Feature,"",Resolved,Should have,Backport f:security.ifAuthenticated and f:security.ifHasRole ViewHelpers,Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-08-05,"","",0,2010-08-05 04:42,"","",2595250,"","","","f:security.ifAuthenticated and f:security.ifHasRole ViewHelpers should be available in v4 too.

Note: The $role attribute of the ifHasRole ViewHelper could be the fe_group:
<pre>
<f:security.ifHasRole role=""{settings.editorUserGroup}"">
  <f:link action=""edit"" />
</f:security.ifHasRole>
</pre>"
9210,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,imageViewHelper should not throw exception,Felix Oertel,"",2011-12-14 02:52,ViewHelpers,"",2011-10-15,2011-10-15,"",0,2010-08-09 06:37,"","",2595150,"","","","Hey guys,

i don't like the imageViewHelper to throw exceptions if an image is not found. it should behave like the underlying cObj::getImgResource() and just don't do anything.

regards, foertel"
9211,TYPO3.Fluid,Feature,"",Rejected,Should have,Improve ViewHelper exception handling,Bastian Waidelich,"",2011-05-06 04:32,Core,"",2010-08-09,"","",0,2010-08-09 07:17,"","",2595100,"","","","Currently, if a ViewHelper throws an exception, we catch that in the corresponding ViewHelperNode and simply output the exception message.
Instead, we should handle the exception depending on the current ""context"".

E.g. if in production mode, the exception should be silently ignored (and maybe logged instead). In development context, the message should be outputtet but probably with some more informations about the current template etc.

Question: in FLOW3/TYPO3 v5 we already have the notion of contexts. In v4 we don't have that yet AFAIK. Instead we could use the ""devIPmask"" setting to switch to development context.. Any ideas?"
9214,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Closed,Must have,"Improve handling of bound properties in checkbox, radio and select ViewHelpers",Bastian Waidelich,Bastian Waidelich,2012-05-08 12:09,ViewHelpers,"",2010-08-09,"","",0,2010-08-09 08:43,"","",48050,"",No,"","Currently the behavior for form.checkbox, form.radio & form.select ViewHelpers is not clear and leads to errors when bound to objects. See #8854 for example.

We'll have to define, what output is expected in which case to be able to properly refactor these ViewHelpers."
9244,TYPO3.Fluid,Feature,"",Resolved,Should have,Add support for subproperty and __toString() in GroupedForViewHelper,Xavier Perseguers,Jochen Rau,2012-01-29 12:06,ViewHelpers,"",2010-08-11,"","",100,2010-08-11 03:05,"","",2595050,"",Yes,"","Problem 1:

I have an array of objects and I want to group them by a property being a ValueObject. The VH should ensure __toString() is called on $currentGroupKey if it's an object.


Problem 2:

I have an array of objects and I want to group them by a property of a property. Let's say we have persons that are linked to a company, I want to group them by company.name:

<pre>
<f:groupedFor each=""{persons}"" as=""personsOfCompany"" groupBy=""company.name"" groupKey=""company"">

   ...

</f:groupedFor>
</pre>"
9429,TYPO3.Fluid,Feature,"",Closed,Should have,f:render section with arguments,Dieter Müller,Sebastian Kurfuerst,2011-05-06 04:32,View,"",2010-08-24,"","",0,2010-08-24 08:03,"","",2595000,"","","","Why only partials can use arguments ?

I want to transfer some arguments to a sections, but i dont want to make every small peace of code a partial file. I think thats a little to much for smaller projects / templates.

Use within section makes it possible to write small ""functions"" in one templatefile."
9434,TYPO3.Fluid,Bug,"",Resolved,Should have,f:if condition does not treat integers right,Thomas Hempel,Sebastian Kurfuerst,2010-10-20 05:44,ViewHelpers,"",2010-08-24,"","",100,2010-08-24 11:10,"","",2594950,"","","","if you compare a discrete value with a negativ number it will always return true.

Example:

In the controller:
<pre>
$this->view->assign('value', -1);
</pre>

In the Fluid template:
<pre>
{value}
<f:if condition=""{value} > -1"">
    <f:then>
        is greater than -1
    </f:then>
    <f:else>
        is smaller or even -1
    </f:else>
</f:if>
</pre>

The result is:
<pre>
-1 is greater than -1 
</pre>

Expected result:
<pre>
-1 is smaller or even -1
</pre>"
9444,TYPO3.Fluid,Bug,"",Closed,Should have,All Link_ActionViewHelper and Link_PageViewHelper should return no a-tag when linking to a hidden or non-existant page,Christian Zenker,Sebastian Kurfuerst,2010-10-20 05:44,"","",2010-08-25,"","",0,2010-08-25 03:42,"","",2594900,"","","","Right now, if the linked-to page is hidden, deleted or has never even existed an <a>-tag with empty href is returned (effectively linking to the current page or the homescreen if baseUrl is used). This behaviour is unexpected and not compliant with the typolink object - so I would consider this a bug.

Patch is appended."
9454,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,If condition in viewhelper attribute,Daniel Lienert,Adrian Föder,2012-11-14 02:51,ViewHelpers,"",2010-08-25,"","",0,2010-08-25 08:18,"","",2594850,"",No,FLOW3 1.0.0,"It should be possible to set an attribute in a viewhelper by an if condition.

For example i want to set the attribute onchange conditional by an object property: 
<f:form.checkBox name=""name"" value=""value"" additionalAttributes=""{f:if (condition: '{object.submitOnChange}', then: '{onchange : \'submit()\'}')}"" /> 

Fluid throws the exception: #1237900529: The argument ""additionalAttributes"" was registered with type ""array"", but is of type ""string""."
9514,TYPO3.Fluid,Feature,"",New,Should have,Support explicit Array Arguments for ViewHelpers,Sebastian Kurfuerst,"",2011-05-06 05:03,"","",2010-08-30,"","",0,2010-08-30 13:01,"","",2594800,"","","","We have been brainstorming over some additions to fluid syntax.

* Imagine you have a ViewHelper with the following Render Method signature:
<code>function render(array $bla)</code>
* then it would be very nice if one could write the following:
<code><f:xy arr.someArrayKey=""foo"" /> // ""foo"" is not validated, as we do not have any more type information.</code>
* Additionally, one could override specific key/value pairs of array arguments:
<code><f:xy arr=""{myArray}"" arr.someArrayKey=""foo"" /> // ""foo"" is merged into {myArray}</code>

Additionally, one could register specific array keys, and validate them. Imagine the following argument registration:
<code>$this->registerArgument('foo.bar', 'boolean', REQUIRED=TRUE);</code>

* Now, it is validated that foo.bar is a boolean value, which exists; so you would know that $this->arguments['foo']['bar'] is really a boolean and it is set.

h2. What needs to be changed internally:

h3. On compile time: 

* TemplateParser->abortIfUnregisteredArgumentsExist($expectedViewHelperArguments, $argumentsObjectTree);
** if Argument name is ""bla.blubb"", check that either the argument ""bla.blubb"" or the argument ""bla"" has been explicitely registered (and ""bla"" is an array)
* TemplateParser->abortIfRequiredArgumentsAreMissing($expectedViewHelperArguments, $argumentsObjectTree);
** do not abort if ""bla.blubb"" is not registered, but ""bla"" is.

h3. On run-time: Type checking

* change validateArguments in AbstractVH
*# MERGING von ""arr.abcde"" und ""arr"" (Punkt-Syntax überschreibt)
*# VALIDIERUNG (von _allen_ regeln) -> d.h. wenn es eine Regel ""arr.abcde"" gibt, dann wird geschaut ob es diesen Array Key gibt

h2. Examples of possible usage

<f:widget.paginate objects=""{posts}"" configuration.position=""top"" configuration.itemsPerPage=""3"" configuration.linkCurrent=""false"" /> <==>
<f:widget.paginate  objects=""{posts}"" configuration=""{position: 'top', itemsPerPage: 3, linkCurrent: 'false'}"" />

h2. Shorthand Sxntax

Will work like the explicit syntax:
<code>{f:widget.paginate(objects: posts, configuration.position: 'top')}</code>

However, for Arrays, this is NOT ALLOWED:
{foo: {bar: '123'}} == {foo.bar: '123', foo: {bar: '123'}} <== this should be forbidden!

"
9515,TYPO3.Fluid,Bug,"",Resolved,Must have,"form ViewHelper does not render hidden identity field when using ""objectName"" argument",Bastian Waidelich,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-08-30,"","",100,2010-08-30 14:31,"","",2594750,"","","","With resolving #6521 you can use the ""objectName"" argument to specify the name of a bound object rather then using the ""name"" attribute.
But if you do so, the rendered hidden identity field is not correct anymore"
9627,TYPO3.Fluid,Bug,"",Resolved,Should have,Two test failures in Tx_Fluid_ViewHelpers_Persistence_IdentityViewHelperTest,Oliver Klee,"",2011-05-06 04:33,ViewHelpers,"",2010-09-07,"","",0,2010-09-07 06:41,"","",2594700,"","","","Tx_Fluid_ViewHelpers_Persistence_IdentityViewHelperTest

renderGetsIdentityForObjectFromPersistenceManager
! Error in test case renderGetsIdentityForObjectFromPersistenceManager
in file /home/klee/eclipse/typo3_src/typo3/sysext/extbase/Tests/BaseTestCase.php
on line 96:
Message:
Class Tx_Fluid_ViewHelpers_Persistence_IdentityViewHelper does not exist

renderOutputsEmptyStringForNullIdentity
! Error in test case renderOutputsEmptyStringForNullIdentity
in file /home/klee/eclipse/typo3_src/typo3/sysext/extbase/Tests/BaseTestCase.php
on line 96:
Message:
Class Tx_Fluid_ViewHelpers_Persistence_IdentityViewHelper does not exist

I'm using the Fluid version from the TYPO3 V4 Core trunk."
9768,TYPO3.Fluid,Feature,"",Closed,Should have,Idea: Connector to use fluid templates for ###MARKER### based extensions,Jonas Felix,"",2011-05-06 04:33,"","",2010-09-16,"","",0,2010-09-16 09:43,"","",2594650,"","","","Imagine:
1.) You install an oldschool extension as comments
2.) You insert the plugin and use the extension as you did it always
3.) You create your own template for the extension with fluid and not with the oldschool .html ###MARKER_BASED###
4.) The TYPO3 built in ###TEMPLATE-CLASS### recognizes the fluid template and instead of replacing markers it collects the marker and suppart data to assign it to the template:
- You get all supparts as an array containing the markers of that supparts as an array
- You get the markers as an array
- You can use them and list them within your fluid extensions
5.) You don't have to change a single line within the comments pi1 php code

How:
- makeitfluid extension xclasses the TYPO3 Template classes, checks if it is fluid or HTML and just uses the regular templating if it's HTML
- it just tries to collect the data and parse the template as fluid if it is fluid :-)
- the extension would need some very special index to remember which subparts and markers belong to which fluid template, and it will be quite difficult to asure that the extension gets the correct HTML code in every constellation
- the makeitfluid extension does everything in the background so no extension has to be changed at all, also fluid or the core don't need any changes :-P

Why:
- Fluid puts the need to change PHP aside in moste cases!
- If you have a fluid template you can perfectly customize and exten existing extensions without any modfication to it selfe.
- You could easily load the commerce module to show a product within an mm_forum post wihtout change the PHP code of one of those extensions!!!
- A lot of oldschool extensions are great, but their templating sucks....

This is of course not something to be put directly into the FLUID extension, but it's a connector extension and maybe you are interessted in such a solution..."
9805,TYPO3.Fluid,Bug,"",Rejected,Must have,"Code mismatch in ""FormViewHelper.php""?!",Gabriel Kaufmann,"",2011-05-06 03:59,ViewHelpers,"",2010-09-17,"","",0,2010-09-17 12:18,"","",2594600,"","","","Hello,

I just found this code, after trying to figure out the PHP-Error
<pre>
Fatal error: Call to a member function reset() on a non-object in /[..]/typo3_src-4.4.2/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php on line 167
</pre> 

<pre>
Looking into that file there is the following code:
00165                            $uriBuilder = $this->controllerContext->getUriBuilder();
00166                            $formActionUri = $uriBuilder
00167                                     ->reset()
00168                                     ->setTargetPageUid($this->arguments['pageUid'])
00169                                     ->setTargetPageType($this->arguments['pageType'])
</pre>


Please note the missing variables in front of the class-functions ""->"" and the missing semicolon. I don't think this can be right - or I missed a change in the PHP-core allowing such things.

The problem appears after trying to use the ""<f:form>[..]<f:/form>"" tag in a fluid-template. Without using this tags, the template works just fine. So i think this is a bug.
"
9950,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,New,Should have,Binding to nested arrays impossible for form-elements,Christian Opitz,"",2011-10-19 19:48,ViewHelpers,"",2010-09-27,"","",0,2010-09-27 17:57,"","",51800,"","","","I want to bind my form to an array with variable nested arrays. I already extended form and set the formName to ---ignore--- to trigger the objectAccessor-Mode - works so far. Now all names are generated perfectly but there is a useless check in getPropertyValue() that makes it impossible to get a value of sth. like
<pre>
<fh:form object=""{gp}"" fieldNamePrefix=""gp"">
    <f:textfield property=""bla.blubb""/>
</form>
<!-- Which renders to: -->
<form...>
    <input type=""text"" name=""gp[bla][blub]""/>
</form>
</pre>

The value can not be detected because there is a check for array in ""AbstractFormFieldViewHelper"":http://forge.typo3.org/projects/package-fluid/repository/revisions/master/entry/Classes/ViewHelpers/Form/AbstractFormFieldViewHelper.php#L152 on line 152.

As far as i can see this check is useless as the Tx_Extbase_Reflection_ObjectAccess::getPropertyPath($formObject, $propertyName); can handle arrays too. So i would be very happy, if you could remove it :)
"
9956,TYPO3.Fluid,Feature,"",Rejected,Could have,Allow updating of view-variables,Robert Vock,"",2011-05-06 04:00,ViewHelpers,"",2010-09-28,"","",0,2010-09-28 03:16,"","",2594500,"","","","It would be nice, if it is possible to update variables within views.

Working with the AliasViewHelper, I got an error ""Duplicate variable declarations"", because I was using the same name.

But when I want to output a tree and render a section recursively, it would be nice to update variables.

For example code like this could work:
<pre>
<f:section name=""tree"">
  <ul>
    <f:for each=""{entries}"" as=""entry"">
    <li>
      {entry.name}
      <f:if condition=""{entry.hasChildren}"">
        <f:then>
          <f:alias map=""{entries: entry.getChildren}"">
            <f:render section=""tree"" />
          </f:alias>
        </f:then>
      </f:if>
    </li>
    </f:for>
  </ul>
</f:section>
</pre>"
10251,TYPO3.Fluid,Bug,"",Resolved,Should have,Image ViewHelper does not call parent::__construct,Michael Knoll,Bastian Waidelich,2010-10-20 05:44,ViewHelpers,"",2010-10-14,"","",100,2010-10-14 06:29,"","",2594400,"","","","Image Viewhelper does not call parent::__construct() and hence no additionalAttributes can be assigned to viewhelper.

Version is 1.3.0alpha2"
10401,TYPO3.Fluid,Bug,"",Resolved,Should have,f:link.external viewHelper should prepend http:// when needed,Christine Gerpheide,Bastian Waidelich,2011-08-04 02:12,ViewHelpers,1.0 beta 1,2010-10-22,"","",100,2010-10-22 12:09,"","",2594350,"",No,"","The link.external viewhelper should add http:// if there is no other protocol present in the URI provided.

Currently, if you add a link like:
<f:link.external uri=""www.google.com"">...</f:link.external>

It will render as:
<a href=""http://mytypo3site.com/www.google.com"">...</a>

Which is obviously not correct as this is an external link.  For such links, http:// should be prepended to the URL when using this viewHelper."
10472,TYPO3.Fluid,Feature,"",New,Could have,Fluid Standalone distribution,Bastian Waidelich,"",2012-10-16 09:17,Core,"",2010-10-26,"","",0,2010-10-26 10:14,"","",2594300,"",No,"","Create a script that extracts a Fluid version from the current trunk that is usable without TYPO3.
This means, that all dependencies to TYPO3 or Extbase functions have to be worked-around or moved to the distribution."
10821,TYPO3.Fluid,Feature,"",Resolved,Should have,add possibility to output FlashMessageQueue,Tolleiv Nietsch,Bastian Waidelich,2010-11-30 11:13,ViewHelpers,"",2010-11-15,"","",0,2010-11-15 16:55,"","",2594200,"","","","It seems that there's no way to output the FlashMessageQueue in a extbase driven be-module.

The attached patch adds a simple ViewHelper which outputs the queue.

It would be good if this could be included into 4.5 beta1 because I'd like to make use of it within the new workspace module.
"
10882,TYPO3.Fluid,Bug,"",Closed,Should have,PaginateViewHelper got wrong example,Georg Ringer,Bastian Waidelich,2010-11-18 07:00,ViewHelpers,"",2010-11-17,"","",70,2010-11-17 01:37,"","",2594150,"","","","The example of the PaginateViewHelper is outdated. 
Would be nice to have a working example"
10902,TYPO3.Fluid,Bug,"",Resolved,Must have,Paginate widget produces exception with too high offset,Georg Ringer,Bastian Waidelich,2010-11-18 08:11,ViewHelpers,"",2010-11-17,"","",100,2010-11-17 09:02,"","",2594100,"","","","If the offset is too high, an exception is thrown. This neeeds to be avoided as this can happen if there are old links (from search engines, shared links, ...).

example: 
itemsPerPage:3 and 7 records and [__widget_0][currentPage]=4

solution would be to show either the results as if no offset is set or the last pages, including a redirect or at least the correct headers

"
10908,TYPO3.Fluid,Bug,"",Resolved,Should have,Fix and cleanup inline documentation of ViewHelpers,Georg Ringer,Bastian Waidelich,2010-12-30 12:19,ViewHelpers,"",2010-11-17,"","",100,2010-11-17 11:47,"","",2594050,"","","","some more cleanups to viewhelpers where the examples in the comments doesn't fit the actual code.

as using fluid should be as easy as possible, copy&past must work out of the box"
10911,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,New,Should have,Tx_Fluid_ViewHelpers_Form_AbstractFormViewHelper->renderHiddenIdentityField should be more reliable,Patrick Schriner,"",2011-09-30 06:29,ViewHelpers,"",2010-11-17,"","",0,2010-11-17 13:25,"","",62950,"",No,"","(Poor title)

<pre><code class=""php"">
$name = $this->prefixFieldName($name) . '[__identity]';
</code></pre>

The problem with this line is that if this lookup resorts to an empty string, fluid will fail during a security check:

<pre><code class=""php"">
#1255072832: The form field name ""[__identity]"" is invalid. Reason: ""[]"" used not as last argument. 

Tx_Extbase_Security_Exception_InvalidArgumentForRequestHashGeneration thrown in file W:\TYPO3Winstaller\htdocs\Dummy\typo3\sysext\extbase\Classes\Security\Channel\RequestHashService.php in line 94.
</code></pre>

I'm pretty sure that a mistake of mine led to renderHiddenIdentityField behaving this way, yet I don't see the point in creating misleading & invalid output."
10975,TYPO3.Fluid,Bug,"",Resolved,Should have,Deprecation message about lowercase template files names suggest lowercase file name,Oliver Klee,Bastian Waidelich,2011-01-11 15:58,View,"",2010-11-19,"","",0,2010-11-19 11:46,"","",2594000,"","","","This is what the error messages looks like in Fluid 1.3.0a3:


09-11-10 12:57: the template filename ""<extension-path>/Resources/Private/Templates/CareerGadget/build.html"" is lowercase. This is deprecated since TYPO3 4.4. Please rename the template to ""build.html""

The attached patch changes two things in both places that are relevant:

# make the suggested new name upper-first
# change the wording to make it clear this is about two variants of camelCase, not about all-lowercase."
11007,TYPO3.Fluid,Bug,"",Closed,Must have,PaginateController uses wrong offset,Georg Ringer,"",2011-05-06 04:35,Widgets,"",2010-11-22,"","",80,2010-11-22 07:32,"","",2593950,"","","","The PaginateController doesn't work with an offset set in the original query.

Example:
7 news records should be displayed with an offset of 2 (explanation could be that the 1st 2 records are rendered with a different plugin). itemsPerPage = 3

1st page should show:
item 4
item 5
item 6
2nd page should show
item 7
-------------------------

currently output is:
1st page:
item 4
item 5
item 6
2nd page:
item 4
item 5
item 6
3rd page:
item 7

------------------------

the possible offset of the query is not checked."
11028,TYPO3.Fluid,Bug,"",Closed,Should have,Output of domain and property validator error messages performs always an default error,Armin Ruediger Vieweg,"",2011-05-06 04:35,"","",2010-11-23,"","",0,2010-11-23 12:28,"","",2593900,"","","","Hello guys,

I've seen a strange error with validators and its error messages.

When a domain validator and a property validator has been triggered at the same time, the output shows a third error which is basicly located in _Tx_Extbase_Validation_PropertyError_:
<pre>1242859509: Validation errors for property ""title""</pre>

The solution to hide this needless error was an if-condition in fluid-template, but this seems to be very dirty:

<pre>
<f:form.errors for=""myFormname"">
	<f:for each=""{error.errors}"" as=""errorDetail"">
			<f:translate key=""...{errorDetail.code}"" default=""...{errorDetail.message}"" /><br />
	</f:for>
</f:form.errors>

<f:form.errors>
	<f:for each=""{error.errors}"" as=""errorDetail"">
		<f:if condition=""{errorDetail.code} != 1242859509"">
			<f:translate key=""...{errorDetail.code}"" default=""...{errorDetail.message}"" /><br />
		</f:if>
	</f:for>
</f:form.errors>
</pre>

If you ask why there are two @<f:form:errors />@: This is because property error messages and domain error messages must have an seperatly output.

Maybe I'm wrong and there exists a very much more elegant solution, but if not, then it seems to be an error that the default error 1242859509 gets displayed.

Kind Regards"
11101,TYPO3.Fluid,Bug,"",Resolved,Should have,Pagination widget creates incorrect absolute URLs,Martin Helmich,Bastian Waidelich,2010-12-02 13:29,Widgets,"",2010-11-26,"","",100,2010-11-26 10:52,"","",2593850,"","","","Currently, the paginate widget creates absolute URLs. However, if your TYPO3 is installed in a subdirectory of the document root, this is apparently not respected when generating the URLs.

So, the widget creates URLS like

http://localhost/index.php... instead of
http://localhost/xyz/index.php

Is there actually any reason to use absolute URLs instead of relative ones?

Problem occurs with version 1.3.0beta1a.

Best regards,
Martin Helmich"
11122,TYPO3.Fluid,Bug,"",Closed,Should have,Doc comments for render method not work with tabs,Tomas Majer,Karsten Dambekalns,2012-03-07 15:57,Core,"",2010-11-29,"","",0,2010-11-29 03:27,"","",2593800,"",No,FLOW3 1.0.0,"There are problem with tabs in doc comments in render method. Fluid crash with exception:

@#1242292003: could not determine type of argument ""text"" of the render-method in ViewHelper ""Tx_My_ViewHelpers_MyViewHelper"". Either the methods docComment is invalid or some PHP optimizer strips off comments.@

Example:
<pre>/**
 * @param	string	$text
 * @return	string
 * @api
 */
public function render($text) {}</pre>"
11286,TYPO3.Fluid,Feature,"",Closed,Could have,Alternative syntax for fluid objects inside JavaScript,Fernando Arconada,Bastian Waidelich,2012-11-26 09:53,Core,"",2010-12-05,"","",0,2010-12-05 05:05,"","",2593750,"",No,"",Fluid objects in the way of tags and braces are uncomfortable inside javascript code cause fluid syntax conflicts with JS syntax. So will be great to have a syntax like ##object.property## or what you like that doesnt conflicts
11636,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,Form viewhelper not functional with method GET,Daniel Lienert,Christopher Hlubek,2013-10-21 14:15,ViewHelpers,"",2010-12-22,"","",100,2010-12-22 01:18,"","",67800,"",No,"","If the GET-method is used, only the url from action is passed to the server, but not the paramaters given there like pageId, controller, action.

These fields should be added as hidden fields in the form."
11660,TYPO3.Fluid,Feature,"",Closed,Should have,Universal tag attributes do not allow other javascript events than onclick,Nico de Haen,"",2011-05-06 04:37,"","",2010-12-23,"","",0,2010-12-23 02:13,"","",2593700,"","","","It should be possible to add events like onblur, onfocus etc. without the need to write an new TagViewHelper. 
Or allow something like
<pre>
 eventHandler=""{onclick:'doThis()',onfocus:'doThat()'}""
</pre>

whish is more generic but has the disadvantage that it's not a valid HTML tag attribute.
"
11740,TYPO3.Fluid,Feature,"",Closed,Should have,Paginate viewhelper should be possible to handle non-query-result objects,Armin Ruediger Vieweg,"",2012-05-03 09:34,Widgets,"",2010-12-27,"","",0,2010-12-27 05:08,"","",2593650,"",No,"","Hello,

sometimes it is necessary to use an object storage or an array instead of an query result. If this is the case, it is not possible to use the default paginate viewhelper anymore, cause it is requiering a _Tx_Extbase_Persistence_QueryResultInterface_.

I've copied the widget and changed it to work with array. This is my *indexAction* of *PaginateController*:
<pre>
	public function indexAction($currentPage = 1) {
		// set current page
		$this->currentPage = (integer)$currentPage;
		if ($this->currentPage < 1) {
			$this->currentPage = 1;
		} elseif ($this->currentPage > $this->numberOfPages) {
			$this->currentPage = $this->numberOfPages;
		}

		$i = 0;
		$itemsPerPage = (integer)$this->configuration['itemsPerPage'];
		$modifiedObjects = array();
		$indexMin = $itemsPerPage * ($this->currentPage - 1);
		$indexMax = $itemsPerPage * $this->currentPage - 1;

		foreach ($this->objects as $object) {
			if ($i >= $indexMin && $i <= $indexMax ) {
				$modifiedObjects[] = $object;
			}
			$i++;
		}

		$this->view->assign('contentArguments', array(
			$this->widgetConfiguration['as'] => $modifiedObjects
		));
		$this->view->assign('configuration', $this->configuration);
		$this->view->assign('pagination', $this->buildPagination());
	}
</pre>

Of cause you would have to remove the requirement of _Tx_Extbase_Persistence_QueryResultInterface_ in *PaginateViewHelper* (Line 76 and 71) and *PaginateController* (Line 34) too.

This example is for arrays only, but if you make a check of the objecttype you can consolidate the support of queryResults (current) and arrays (this code example).

And it is relatively less work."
11969,TYPO3.Fluid,Task,"",Closed,Must have,Make widgets' template configurable,Sebastian Kurfuerst,Adrian Föder,2012-12-10 07:08,Widgets,2.0 beta 1,2011-04-01,"",0.00,100,2011-01-06 08:31,"","",71000,0.00,No,"",""
12210,TYPO3.Fluid,Bug,"",Closed,Must have,Widget Bootstrapper Call to undefined method Tx_Extbase_Object_Container_Container::getContainer(),Kevin Ulrich Moschallski,"",2011-01-21 08:34,Widgets,"",2011-01-14,"","",0,2011-01-14 06:10,"","",2593600,"","","","When calling a ajax widget i recieve this error:

Call to undefined method Tx_Extbase_Object_Container_Container::getContainer()

I looked into the class and couldn't find such a method.

I replaced it with this:

$objectContainer = t3lib_div::makeInstance('Tx_Extbase_Object_Container_Container');
$objectContainer->registerImplementation($originalClassName, $classConfiguration['className']);

and everything works fine.

Patch attached."
12442,TYPO3.Fluid,Feature,"",Resolved,Could have,Provide format.json ViewHelper,Kevin Ulrich Moschallski,"",2012-05-22 20:38,ViewHelpers,1.1,2011-01-21,"","",100,2011-01-21 09:48,"","",2593500,"",Yes,"","Hi,

i suggest to add type json to the escape viewhelper.

Sometime you want to render json output with fluid and not with an own json view. The problem is that fluid also uses json like syntax, so if you want to add an object to a json string you run into a problem.

Imagine adding a link with the link viewhelper. It returns a sting with double quotes which need to be escaped for json.

I simply added type json to the escape viewhelper which returns the $value json_encode()'ed.

Tell me what you think.

Regards,
Kevin"
12502,TYPO3.Fluid,Feature,"",Resolved,Should have,translate viewhelper should have optional parameter extensionName,Georg Ringer,"",2012-05-07 05:01,ViewHelpers,"",2011-01-24,"","",100,2011-01-24 09:18,"","",2593450,"",Yes,"","The translate view helper works great bug would be even better if it would be possible to add the extensionName as argument.

examples:
1) Using a standalone view with Tx_Fluid_View_StandaloneView makes it impossible to work with translationViewHelper without duplicating translations

2) using example #1 can sometimes lead to have no extensionName available, therefore no translation can ever happen

3) having many extension in one project but very often the same translations leads to the problem having duplicate keys.

[pending in v4mvc list]"
12777,TYPO3.Fluid,Bug,"",Resolved,Must have,Empty a tag ends with /> instead of </a>,Xavier Perseguers,Sebastian Kurfuerst,2011-05-06 09:35,ViewHelpers,1.0 beta 1,2011-02-04,"","",100,2011-02-04 08:50,"","",2593400,"",Yes,"","When creating a link with no content, the result tag is

<a href=""http:///""/>

instead of

<a href=""http:///""></a>

or even better (if no url is provided):

<a href=""""></a>"
12863,TYPO3.Fluid,Bug,"",New,Should have,Attributes of a viewhelper can't contain a '-',Georg Ringer,Sebastian Kurfuerst,2011-10-21 07:37,Core,"",2011-02-08,"","",0,2011-02-08 03:25,"","",2593350,"",No,FLOW3 1.0.0,"It seems that a '-' in the key of an attribute destroys everything

example of viewhelper
<pre>
<f:for each=""{wallpapers}"" as=""wallpaper"">
<w:download allow-Upscaling=""1"" src=""uploads/tx_wallpaper/{wallpaper.image}"">1920 x 1200</w:download><br />
</f:for>
</pre>

gives the error
<pre>
Templating tags not properly nested. Expected: Tx_Fluid_ViewHelpers_ForViewHelper; Actual: Tx_Wallpaper_ViewHelpers_DownloadViewHelper
</pre>

2 possible solutions (IMHO):
- Allow the '-'
- Define allowed chars (a-z,0-9) and throw a correct exception"
12991,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,form.errors ViewHelper should merge property errors,Alexander Stehlik,"",2012-03-12 13:52,ViewHelpers,"",2011-02-11,"","",0,2011-02-11 12:00,"","",78850,"",No,"","At the moment, the form.errors view helper returns, when the first PropertyError with the correct property name was found.

This is not sufficient because someone might add more errors to the errors array for the same property. So if I add a new property error in my validator, it won't get rendered, if the validators defined by @ annotations also added errors for the same property before.

This is what I do in the validator of my domain model:

<pre>
$error = t3lib_div::makeInstance('Tx_Extbase_Validation_PropertyError', 'mypropertyname');
$error->addErrors(array(new Tx_Extbase_Validation_Error('My error message.', 1233456789)));
$this->errors[] = $error;    
</pre>

At first, I reported this as an exbase bug (#9215) but I think this is more a issue of the form.errors view helper.

I'll attached a patch that should fix this issue.

"
13045,TYPO3.Fluid,Bug,"",New,Should have,Entity decode of strings are different between if-conditions and output of variable,Armin Ruediger Vieweg,"",2011-10-21 07:37,"","",2011-02-15,"","",0,2011-02-14 19:08,"","",2593300,"","",FLOW3 1.0.0,"If I assign the following to a variable:
<pre>&lt;ul class=&quot;csc-menu csc-menu-3&quot;&gt;&lt;li class=&quot;csc-section&quot;&gt
</pre>

And want to work with this string in an own viewhelper, I have to html_entity_decode it. If I not do this, the submitted string depends where I call the viewhelper.

-----

*Fluid-Template Example 1:*
<pre>
Cool String: {own:viewhelper subject='{variables}'}
</pre>
My viewhelper gets the subject:<pre>&lt;ul class=&quot; ...""</pre> as expected.

-----

*Fluid-Template Example 2:*
<pre>
<f:if condition=""{own:viewhelper subject='{variables}'}"">
<f:then>
...
</pre>^_Note: My viewhelper counts some html tags in the string and returns an integer._^

The given subject is now: <pre><ul class="" ...</pre>

-----

This is generally no big problem, but it is a little bit inconsistent and not documented.

Kind Regards"
13342,TYPO3.Fluid,Task,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,f:form.checkbox does only render hidden input for first item of same name,martin no-lastname-given,Bastian Waidelich,2012-06-18 11:38,ViewHelpers,"",2011-02-24,"","",100,2011-02-24 12:46,"","",81500,"",No,"",If you attempt to have multiple forms on the same page with inputs that have the same name-attr (i.e. multiple forms for items of the same type) the viewhelper will only render a hidden input for the first item. This means that only the first form will work as expected whereas all subsequent forms will have limited functionality.
13643,TYPO3.Fluid,Feature,"",Resolved,Should have,Create Command for XSD Schema generation,Jascha Dachtera,Bastian Waidelich,2012-05-08 08:38,Command,1.1,2011-03-05,"","",100,2011-03-05 11:00,"","",2593250,"",Yes,"","Hello,

the Xsd Generation for Fluid ViewHelper Tags doesn't work (since quite some time I think). I created a patch to fix it. However I still don't know how to use it for autocompletion in Eclipse.

This is my first patch so I hope it's created correctly. :)

Greetings, Jascha"
13906,TYPO3.Fluid,Bug,"",Closed,Should have,"No way to set ""ATagParams""",Daniel Poetzinger,Bastian Waidelich,2011-03-18 11:22,ViewHelpers,"",2011-03-18,"","",0,2011-03-18 10:33,"","",2593200,"","","","All linkViewHelpers need a way to set a classname

http://git.typo3.org/TYPO3v4/CoreProjects/MVC/fluid.git?a=blob;f=Classes/ViewHelpers/Link/PageViewHelper.php;h=fe2c9a4762c95dfa802caf6fadb7cce06c14c8a6;hb=HEAD


"
14017,TYPO3.Fluid,Bug,"",Resolved,Must have,Widgets are not compatible with Doctrine persistance,Peter Beernink,Karsten Dambekalns,2011-03-25 01:30,Widgets,1.0 beta 1,2011-03-24,"","",100,2011-03-24 04:07,"","",2604350,"","","","Both the pagination and autocomplete are currently not compatible with the Doctrine persistance layer.

For example, when assigning a result from a repository to the objects attribute of the pagination widget, the following exception is thrown:
<pre>
PaginateViewHelper_Original::render() must be an instance of F3\FLOW3\Persistence\QueryResult, instance of F3\FLOW3\Persistence\Doctrine\QueryResult given
</pre>

I've only tested this with the pagination widget, but as both have the same annotation for $objects, I suspect that also the autocomplete is suffering from this issue.

"
25490,TYPO3.Fluid,Feature,"",Resolved,Should have,pagination is fairly simple and not usable in bigger projects,Georg Ringer,Bastian Waidelich,2011-04-02 05:00,Widgets,"",2011-03-31,"","",100,2011-03-31 07:13,"","",2593100,"","","","The pagination widget is fairly simple and not usable in bigger projects with more than 50 records. The reason is that it just renders all links which are needed. So if there are 1000 records and 10 per page, this results in 100 links on the page.

Therefore it is needed to be able to skip the rendering of links at some point and implement something like:
< | 1 | 2 | 3 | [...] | 190 | 191 | 192.

Additionally the pagination uses some hardcoded labels which could be fixed with the same patch."
25695,TYPO3.Fluid,Bug,"",Closed,Must have,Template of widgets can't be changed,Georg Ringer,Christian Müller,2012-09-20 04:58,Widgets,"",2011-04-01,"","",20,2011-04-01 05:19,"","",2593050,"",No,FLOW3 1.0.0,"Currently the widgets use the default template path only and it is impossible to override those which is kind of a nogo.

Attached patch fixes this. The path can be set via TS. e.g. 

<pre>
plugin.tx_fo.view.widgetRootPath = fileadmin/fo/
</pre>
If using the pagination widget, the index.html needs to be at fileadmin/fo/ViewHelpers/Widget/Paginate/Index.html

One open question: Is this the correct way to go with the part ""ViewHelpers"" inside this path? or should it be fileadmin/fo/Paginate/Index.html?"
26394,TYPO3.Fluid,Bug,"",Rejected,Must have,Form Viewhelper does not work with html5 custom data attributes,martin no-lastname-given,"",2011-10-03 04:26,ViewHelpers,"",2011-04-28,"","",0,2011-04-28 04:58,"","",97950,"",No,"","@<f:form.textbox property=""name"" data-anything=""some info"" />@

Will produce no output at all. 

It would be great if fluid's tag-processing was more liberal and transparent in general. Maybe switch to DOM instead of the custom implementation?"
26481,TYPO3.Fluid,Bug,Task #26658: Make Form ViewHelpers consistent,Resolved,Should have,hidden fields should be rendered in extra section,Sven-S. Porst,Bastian Waidelich,2012-06-18 11:38,ViewHelpers,1.1 RC1,2011-04-29,"","",100,2011-04-29 03:33,"","",101550,"",No,Git master,"The form.checkbox view helper works in an unexpected way because it creates two, rather than one <input> elements.

This is a problem when using markup like

<pre>
<label>
  <f:form.checkbox ...>
  Checkbox name
</label>
</pre>

as one ends up having two <input>s inside the <label> which is invalid HTML. One has to make the effort to create id and for attributes for both tags to get things working correctly. This could be simpler.

In the long term it may be worth considering to add explicit support for <label> tags to the form field view helpers, to encourage label usage by offering straightforward support for it from the templating engine.

*UPDATE:* The solution would be to render the ""automatically generated"" hidden fields for checkboxes and select dropdowns in the hidden fields section at the beginning of a form"
26658,TYPO3.Fluid,Task,Task #26664: Clean up Form ViewHelpers,New,Won't have this time,Make Form ViewHelpers consistent,Sebastian Kurfuerst,"",2012-06-20 05:37,ViewHelpers,"",2009-12-05,"","",75,2011-05-06 04:03,"","",109950,0.00,No,"",... should be done on T3DD
26664,TYPO3.Fluid,Task,"",New,Won't have this time,Clean up Form ViewHelpers,Sebastian Kurfuerst,"",2012-06-20 05:37,ViewHelpers,"",2009-12-05,"","",75,2011-05-06 05:04,"","",110200,0.00,No,"",""
26665,TYPO3.Fluid,Feature,"",Resolved,Should have,Fluid: Implement String comparison,Sebastian Kurfuerst,"",2013-05-15 10:41,"","",2010-03-10,"","",100,2011-05-06 05:13,"","",1765700,0.00,No,"",""
26692,TYPO3.Fluid,Feature,"",Rejected,Must have,String comparison support for f:if,Martin Brüggemann,Bastian Waidelich,2011-05-24 05:42,ViewHelpers,"",2011-05-07,"","",0,2011-05-07 16:14,"","",111550,"",No,"","I think it's really necessary that <f:if> fully supports simple string comparisons like this:

<pre>
<f:if condition=""{object.type} == 'cat'"">
  <p>I am a cat.</p>
</f:if>
</pre>

Today every string comparison has to be workarounded by setting additional boolean view-variables at the controller.

<pre>
<f:if condition=""{isCat}"">
  <p>I am a cat.</p>
</f:if>
</pre>
"
26843,TYPO3.Fluid,Feature,"",Resolved,Should have,Padding Type in ViewHelper,Lars Malach,Bastian Waidelich,2011-09-13 03:45,ViewHelpers,"",2011-05-17,"","",100,2011-05-16 18:05,"","",118850,"",No,"","Add the padding type as possible parameters to the PaddingViewHelper.

Of Example:
<pre><code class=""php"">
class Tx_Fluid_ViewHelpers_Format_PaddingViewHelper extends Tx_Fluid_Core_ViewHelper_AbstractViewHelper {
	/**
	 * Pad a string to a certain length with another string
	 *
	 * @param integer $padLength Length of the resulting string. If the value of pad_length is negative or less than the length of the input string, no padding takes place.
	 * @param string $padString The padding string
	 * @param string $padType Append the padding at this site (Possible values: right,left,both. Default: right)
	 * @return string The formatted value
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @api
	 */
	public function render($padLength, $padString = ' ', $padType = 'right') {
		$string = $this->renderChildren();

		$padTypes = array(
			'left' => STR_PAD_LEFT,
			'right' => STR_PAD_RIGHT,
			'both' => STR_PAD_BOTH,
		);
		if (!isset($padTypes[$padType])) {
			$padType = 'right';
		}

		return str_pad($string, $padLength, $padString, $padTypes[$padType]);
	}
}
</code></pre>"
26844,TYPO3.Fluid,Bug,"",Resolved,Should have,Wrong PaddingViewHelper description,Lars Malach,Bastian Waidelich,2011-09-13 03:45,ViewHelpers,"",2011-05-17,"","",100,2011-05-16 18:08,"","",118900,"",No,"","File: PaddingViewHelper.php, Line: 49
(Just a copy of the PrintfViewHelper description)
<pre>
Format the arguments with the given printf format string.
</pre>

Could be:
<pre>
Pad a string to a certain length with another string
</pre>"
27091,TYPO3.Fluid,Feature,"",Closed,Should have,Viewhelpers for strtolower/strtoupper,Georg Ringer,"",2013-06-04 09:58,ViewHelpers,"",2011-05-27,"","",0,2011-05-27 10:08,"","",130050,"",Yes,"","I would like to see 2 viewhelpers for strtolower() and strtoupper().

At the first this maybe sounds silly because this can be solved with CSS but this is not entirly true. There are languages (e.g. greek) where doing a simple ""text-transform:uppercase"" will be stupid because this can change the meaning of the text. The reason is because CSS is stupid and doesn't take the locale into account but PHP does.

"
27119,TYPO3.Fluid,Feature,"",Resolved,Should have,Declare namespaces in XML tag,Fernando Arconada,Bastian Waidelich,2013-01-10 10:27,Core,1.1 beta 1,2011-05-29,"","",100,2011-05-29 05:18,"","",131450,"",No,"",One of the great things of FLUID is that is XML but namespace declaration isnt. There should be a way/tag to declare namespaces in a tag. If you could have your template as pure XML you could validate it with XML validation tools
27120,TYPO3.Fluid,Feature,"",Rejected,Should have,filters for ViewHelpers and templates,Fernando Arconada,"",2012-03-12 14:04,"","",2011-05-29,"","",0,2011-05-29 05:26,"","",131500,"",No,"","You dont always want you HTML escaped. ViewHelpers could have filter attribute to avoid HTML escaping or for using you filter

<f:myviewhelper argument=""{blas}"" filter=""raw"" />
<f:myviewhelper argument=""{blas}"" filter=""removeBadWords"" />


<f:section filter=""raw> </f:section>

<f:filter type=""raw"">
   portion of code inside my template
<f:filter>

Filters could be pluggables at Package level or framework"
27277,TYPO3.Fluid,Bug,"",Resolved,Must have,Make widgets work again after recent changes in the UriBuilder and Request Handling,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-06-30 09:11,Widgets,1.0 beta 1,2011-06-07,"","",100,2011-06-07 10:11,"","",138900,"",No,"",""
27286,TYPO3.Fluid,Bug,"",Closed,Should have,FLUID: #1: Warning: htmlspecialchars(): Invalid multibyte sequence in argument,Fernando Arconada,"",2012-03-13 05:05,ViewHelpers,"",2011-06-07,"","",0,2011-06-07 17:12,"","",139350,"",No,FLOW3 1.0.0,"I have an exception just trying to retrieve objects from DB and displaying in a view
$apuntes = $this->apunteRepository->findAll();
$this->view->assign('apuntes',$apuntes);

Attached an export from my DB and MySQL variables

Note: this tables and data were not created by Doctrine. I have imported them from a mysqldump export from other DB.

------------------------------

Uncaught Exception in FLOW3
#1: Warning: htmlspecialchars(): Invalid multibyte sequence in argument in /var/www/html/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php line 79 (More information)

F3\FLOW3\Error\Exception thrown in file
Packages/Framework/FLOW3/Classes/Error/ErrorHandler.php in line 82.

Go to the FORGE issue tracker and report the issue - if you think it is a bug!

51 F3\FLOW3\Error\ErrorHandler::handleError(2, ""htmlspecialchars(): Invalid multibyte sequence in argument"", ""/var/www/html/FLOW3/Data/Temporary/Development/Cac?F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php"", 79, array)

50 htmlspecialchars(""Santo?a/Laredo 18/8/06"", 2, ""UTF-8"")


/var/www/html/FLOW3/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/F3_Fluid_ViewHelpers_EscapeViewHelper_Original.php:

00077:   switch ($type) {
00078:    case 'html':

00079:     return htmlspecialchars($value, ENT_COMPAT, $encoding);

00080:    break;
00081:    case 'entities':
"
27516,TYPO3.Fluid,Bug,"",Resolved,Should have,Translate labels in paginate widget,Alexander Stehlik,Karsten Dambekalns,2015-03-19 08:12,Widgets,"",2011-06-17,"","",100,2011-06-17 08:38,"","",150700,"",No,Git master,"At the moment, the labels for ""next"" and ""previous"" the paginate widget are hardcoded in the template.

The translate view helper should be used so that the labels can be localized."
27583,TYPO3.Fluid,Task,"",Resolved,Should have,Move raw ViewHelper to format.raw,Bastian Waidelich,Bastian Waidelich,2011-06-23 02:35,ViewHelpers,"",2011-06-20,"","",100,2011-06-20 15:05,"","",153900,"",No,"","And adjust affected templates.
For compatibility reasons the old ViewHelper should be marked *deprecated* and kept for a while."
27607,TYPO3.Fluid,Bug,"",New,Must have,"Make Fluid comparisons work when first element is STRING, second is NULL.",Sebastian Kurfuerst,"",2012-03-12 14:18,Core,"",2011-06-21,"","",0,2011-06-21 00:45,"","",155100,"",No,FLOW3 1.0.0,"Taken from https://review.typo3.org/#patch,unified,2824,2,Classes/Core/Parser/SyntaxTree/ViewHelperNode.php :

> I know it is not in the table on php.net, but the case '' == NULL ($operand1 being string and $operand2 being NULL) should probably be comparable, too (and the PHP interpreter can of course compare them). What do you think?

I definitely agree, so we should implement this in Fluid v5 and provide tests for it, and then backport it."
27628,TYPO3.Fluid,Task,"",Resolved,Should have,Split escape ViewHelper into dedicated format ViewHelpers,Bastian Waidelich,Bastian Waidelich,2011-07-27 04:05,ViewHelpers,1.0 beta 1,2011-06-21,"","",100,2011-06-21 11:51,"","",156150,"",No,"","Currently the *f:escape* ViewHelper is targeted at a lot of different use cases (html escaping, url encoding, strip tags, ...).
That makes it harder to test and to extend.
Additionally the current implementation has the severe side-effect that the input value is not escaped at all, if the specified format is not supported."
27668,TYPO3.Fluid,Task,"",Resolved,Should have,Change Escape Interceptor to use new format.htmlspecialchars ViewHelper,Bastian Waidelich,Bastian Waidelich,2011-08-04 02:11,Core,1.0 beta 1,2011-06-23,"","",100,2011-06-23 12:54,"","",158100,"",No,"",and mark the existing escape ViewHelper deprecated.
27678,TYPO3.Fluid,Bug,"",Resolved,Should have,Deactivate EscapeInterceptor for certain ViewHelpers,Bastian Waidelich,Bastian Waidelich,2011-07-27 03:35,ViewHelpers,"",2011-06-24,"","",100,2011-06-24 06:56,"","",158600,"",No,"","For some of the provided ViewHelpers one can exchangeably use either the *value* attribute or *childnodes* as input.

So all of the below variants should behave the same:
<pre>
<code class=""html"">
<f:format.plaintext>{foo}</f:format.plaintext>
{foo -> f:format.plaintext()}
<f:format.plaintext value=""{foo}"" />
{f:format.plaintext(value: foo)}
</code>
</pre>

But in fact the first two examples will get an escaped {foo} because by default the EscapeInterceptor is activated.

A solution would be to deactivate the interceptor for those ViewHelper by inserting the line
<pre>
<code class=""php"">
protected $escapingInterceptorEnabled = FALSE;
</code>
</pre>

*NOTE:* This *disables* htmlspecialchars() from beeing applied to childnodes so this must not be done for ViewHelpers that directly output the childnodes again!
"
27793,TYPO3.Fluid,Bug,"",Resolved,Should have,"Replace ""f3"" namespace by ""f"" in fixtures & manual",Bastian Waidelich,Karsten Dambekalns,2011-07-04 08:35,"",1.0 beta 1,2011-07-01,"","",100,2011-07-01 06:58,"","",164350,"",No,"","Currently Fluid still uses the ""old"" ViewHelper namespace ""f3"" in some Unit test fixtures and in the user manual. That should be replaced."
27822,TYPO3.Fluid,Bug,"",Resolved,Should have,f:form.select performace,Carsten Bleicker,Bastian Waidelich,2012-01-10 09:43,ViewHelpers,"",2011-07-03,"","",100,2011-07-03 16:07,"","",165700,"",No,FLOW3 1.0.0,"hi there,
i have actualy a page with 20 select fields.
and it takes up do 20 sek. to render them out.
without select fields page is generated in 0,7 sek.
can somebody can reproduce this with 20 selects like this:
f:form.select options=""{0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10}""


maybe the problem is somewhere near the Tx_Fluid_Core_ViewHelper_ArgumentDefinition for registering ?


"
27826,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,"Missing ""size"" Attribute in the Form.Upload ViewHelper",Tim Lochmüller,Adrian Föder,2012-11-14 05:45,ViewHelpers,"",2011-07-04,"","",0,2011-07-04 05:57,"","",165900,"",No,FLOW3 1.0.0,"All inputs have the same attribute base. The ""size"" Attribute is missing in the Form.Upload ViewHelper..."
27938,TYPO3.Fluid,Bug,"",Resolved,Should have,Textfield view helper can not handle zero (not empty) values,Alexander Stehlik,"",2011-08-18 04:07,ViewHelpers,"",2011-07-07,"","",100,2011-07-07 07:03,"","",169850,"",No,"","
When using the form.textfield view helper strings or integers that are 0 (zero) are treated as empty values. So if a user now enters 0 in the form field and then edits the object the form field will not show the ""0"" he entered but an empty field.

This is because in TextfieldViewHelper the empty() function of PHP is used:

<pre>
87 if (!empty($value)) {
88   $this->tag->addAttribute('value', $value);
89 }
</pre>

Since AbstractFormFieldViewHelper::getValue() will return NULL if no value was set, it would be better to use isset() in my opinion.


"
27968,TYPO3.Fluid,Bug,"",Resolved,Must have,DebugViewHelper doesn't use correct Vendor-Namespace,Johannes K,"",2011-07-08 06:35,ViewHelpers,"",2011-07-07,"","",100,2011-07-07 17:18,"","",171350,"",Yes,"","should be:
<pre>
diff --git a/Classes/ViewHelpers/DebugViewHelper.php b/Classes/ViewHelpers/DebugViewHelper.php
index 456051d..f24ce4b 100644
--- a/Classes/ViewHelpers/DebugViewHelper.php
+++ b/Classes/ViewHelpers/DebugViewHelper.php
@@ -39,7 +39,7 @@ class DebugViewHelper extends \TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper {
 	 */
 	public function render($title = NULL) {
 		ob_start();
-		\TYPO3\var_dump($this->renderChildren(), $title);
+		\TYPO3\FLOW3\var_dump($this->renderChildren(), $title);
 		$output = ob_get_contents();
 		ob_end_clean();
 		return $output;
</pre>
"
28245,TYPO3.Fluid,Bug,"",Resolved,Should have,Autocomplete Widget modifies query with every request,Bastian Waidelich,Bastian Waidelich,2011-07-19 05:05,Widgets,"",2011-07-15,"","",100,2011-07-15 13:25,"","",185050,"",No,"","The autocomplete widget changes the query by adding constraints in the autocompleteAction of the widget controller.
But as the query is passed by reference this adds new constraints with every request instead of replacing the other ones.
Besides the amount of returned objects should be configurable (limit)."
28283,TYPO3.Fluid,Bug,"",Resolved,Should have,Paginate Widget does not highlight current page,Bastian Waidelich,Bastian Waidelich,2014-12-16 05:24,Widgets,"",2011-07-18,"","",100,2011-07-18 04:12,"","",186950,"",No,(any),"The line
<pre>
$pages[] = array('number' => $i, 'isCurrent' => ($i === $this->currentPage));
</pre>
PaginateController::buildPagination() fails to set 'isCurrent' correctly for certain pages because $i is of type float and thus not (type safe) equal to $this->currentPage."
28444,TYPO3.Fluid,Feature,"",Closed,Could have,Implement comment ViewHelper or language feature,Christopher Hlubek,Bastian Waidelich,2012-02-04 09:50,ViewHelpers,1.0.3,2011-07-25,"","",100,2011-07-25 04:51,"","",194600,"",Yes,"","It would be great to have the possibility of commenting out Fluid code / markup without rendering it to the client. A CommentViewHelper that always returns an empty string would be trivial to write, but maybe a language feature for comments would make sense."
28544,TYPO3.Fluid,Feature,"",Resolved,Should have,Compilation of Fluid Templates into PHP files,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-09-13 03:44,Core,"",2011-07-28,"","",57,2011-07-28 10:56,"","",199400,0.00,No,"",""
28545,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) fix encoding in HTML special chars VH,Sebastian Kurfuerst,Bastian Waidelich,2011-09-13 03:44,ViewHelpers,"",2011-07-28,"","",100,2011-07-28 10:57,"","",199450,"",No,"",""
28546,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) add backporter tokens again to TemplateView,Sebastian Kurfuerst,Bastian Waidelich,2011-08-01 14:03,"","",2011-07-28,"","",100,2011-07-28 10:57,"","",199500,"",No,"",""
28547,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,adjust backporter to show unused search/replace pairs,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-02 02:22,"","",2011-07-28,"","",100,2011-07-28 10:58,"","",199550,"",No,"",""
28548,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,(v4) fix unit tests,Sebastian Kurfuerst,Bastian Waidelich,2011-08-01 15:34,"","",2011-07-28,"","",100,2011-07-28 10:58,"","",199600,"",No,"",""
28549,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,"make widgets cacheable, i.e. not implement childnodeaccess interface",Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 10:58,"","",199650,"",No,FLOW3 1.0.0,""
28550,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,"(v4) make widgets cacheable, i.e. not implement childnodeaccess interface",Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 10:58,"","",199700,"",No,FLOW3 1.0.0,""
28551,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Accepted,Should have,(v4) backport VHTest,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-10-21 07:37,"","",2011-07-28,"","",80,2011-07-28 10:59,"","",199750,"",No,FLOW3 1.0.0,""
28552,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,(v5) write ViewHelper test for compiled run; adjust functional test to do two passes (uncached & cached),Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:00,"","",199800,"",No,FLOW3 1.0.0,""
28553,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,improve XHProf test setup,Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:01,"","",199850,"",No,FLOW3 1.0.0,""
28554,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,New,Should have,(v4) implement feature flag to disable caching,Sebastian Kurfuerst,"",2011-10-21 07:37,"","",2011-07-28,"","",0,2011-07-28 11:01,"","",199900,"",No,FLOW3 1.0.0,""
28556,TYPO3.Fluid,Task,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,Collect profiling data,Bastian Waidelich,Sebastian Kurfuerst,2011-08-02 02:22,"","",2011-07-28,"","",100,2011-07-28 11:07,"","",200000,"",No,"","Collect XHProf data of various scenarios:
* Not optimized
* Optimized, creating Compiled templates
* Optimized, compiled"
28557,TYPO3.Fluid,Bug,Feature #28544: Compilation of Fluid Templates into PHP files,Resolved,Should have,Fix parameter type checking in Fluid,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-08-01 07:45,"","",2011-07-28,"","",100,2011-07-28 12:11,"","",200050,"",No,"","#1: Warning: get_object_vars() expects parameter 1 to be object, string given in /opt/local/apache2/htdocs/Quickstart/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Reflection_ObjectAccess_Original.php line 133 (http://typo3.org/go/exception/1)

-> happens when one has <f:form object=""somethingWhichIsAStringButNoObject"" />"
28972,TYPO3.Fluid,Bug,"",Resolved,Must have,(v5) Bug in new caching mechanism,Peter Beernink,Sebastian Kurfuerst,2011-08-16 03:23,Core,1.0 beta 1,2011-08-14,"","",100,2011-08-14 11:30,"","",220550,"",No,"","After creating a fresh clone of the FLOW3 base distribution, I encountered the following behaviour.
When you run the FLOW3 Welcome package for the first time, everything works as expected however, when you refresh the page, all styling is gone.

It turned out that the HTML output is missing all code between the <f:base> and the first variable, {version} in this case.
Doing some further checking, that whole block is missing from the cached PHP code in the Cache/Code/Fluid_TemplateCache/...html file

Although I've tested this in v5, it might as well be also an issue in v4."
29004,TYPO3.Fluid,Bug,"",Closed,Must have,if viewhelper does not evaluate conditions correctly,Manuel Stofer,Bastian Waidelich,2011-08-16 07:20,Core,"",2011-08-16,"","",0,2011-08-16 05:22,"","",222100,"",No,"","Actually the if viewhelper just typecasts the parameter 'condition' to boolean
which is not what you expect when you read the comments in the header.

In the header of IfViewhelper.php you can find examples like:
<f:if condition=""{rank} % 2"">
    Will be shown if rank % 2 != 0.
</f:if>


But when you do something like this:

<f:if condition=""4 % 2"">
	4 % 2 != 0
</f:if>

<f:if condition=""4 == 5"">
	4 == 5
</f:if>


Fluid outputs: 

4 % 2 != 0
4 == 5


"
29065,TYPO3.Fluid,Feature,"",Closed,Could have,HTML5 Custom Data Attributes,Thomas Allmer,Sebastian Kurfuerst,2011-09-22 09:09,Core,"",2011-08-17,"","",0,2011-08-17 17:51,"","",225150,"",No,"","Fluid should support the use of HTML5 Custom Data Attributes as described in the W3C Specification[1].

The Patterns need to be changed so that attributes with ""-"" are actually identified as such. Currently fluid breaks with such attributes.
Furthermore ""data-*"" won't fit into the current way of registering attributes with a full name and type. Fluid will probably need a solution which allows a registration of patterns for attributes. (always with string as type?)

[1]: http://dev.w3.org/html5/spec/elements.html#embedding-custom-non-visible-data-with-the-data-attributes"
29290,TYPO3.Fluid,Bug,"",Resolved,Must have,Additional Identity Properties not set on mapping error,Torsten no-lastname-given,Bastian Waidelich,2013-09-26 10:36,ViewHelpers,"",2011-08-26,"","",100,2011-08-26 16:24,"","",236050,"",Yes,FLOW3 1.0.0,"After a mapping error occurred, no additional identity properties are set and FLOW3 tries to create a new object.

Could be easily fixed in TYPO3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper

currently:
<pre>
	protected function getValue() {
		$value = NULL;

		if ($this->arguments->hasArgument('value')) {
			$value = $this->arguments['value'];
		} elseif ($this->hasMappingErrorOccured()) {
			$value = $this->getLastSubmittedFormData();
		} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getPropertyValue();
		}
		if (is_object($value)) {
			$identifier = $this->persistenceManager->getIdentifierByObject($value);
			if ($identifier !== NULL) {
				$value = $identifier;
			}
		}
		return $value;
	}
</pre>


Better:
<pre>
	protected function getValue() {
		$value = NULL;

		if ($this->arguments->hasArgument('value')) {
			$value = $this->arguments['value'];
		} elseif ($this->hasMappingErrorOccured()) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getLastSubmittedFormData();
		} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
			$this->addAdditionalIdentityPropertiesIfNeeded();
			$value = $this->getPropertyValue();
		}
		if (is_object($value)) {
			$identifier = $this->persistenceManager->getIdentifierByObject($value);
			if ($identifier !== NULL) {
				$value = $identifier;
			}
		}
		return $value;
	}
</pre>"
29303,TYPO3.Fluid,Bug,"",Resolved,Should have,TYPO3\Fluid\View\TemplateView getTemplateRootPath should be public,Fernando Arconada,"",2013-03-19 10:37,View,"",2011-08-28,"","",100,2011-08-28 05:30,"","",236700,"",No,FLOW3 1.0.0,"if TYPO3\Fluid\View\TemplateView setTemplateRootPath is public then the getTemplateRootPath should be also

The opposite have sense: set as protected and get as public. But if you could write you should be able to read what you have write"
29395,TYPO3.Fluid,Bug,"",Resolved,Should have,SelectViewHelper with multiple=true cannot work with Collections,Ferdinand Kuhl,"",2011-11-08 00:37,"",1.0.1,2011-08-31,"","",0,2011-08-31 13:36,"","",241200,"",No,FLOW3 1.0.0,"When using collections as preselected values for SelectView-Helper with option multiple=""1"" the preselection is only possible when you have a ""public"" identity field.

The preselection for lists does only work if ""optionValueField""-Argument is set, which you cannot use with the internal flow3-identity.

First part of the solution is:
<pre><code class=""php"">
/**
 * Retrieves the selected value(s)
 *
 * @return mixed value string or an array of strings
 * @author Bastian Waidelich <bastian@typo3.org>
 */
protected function getSelectedValue() {
	$value = $this->getValue();
	if (!$this->hasArgument('optionValueField') && ! is_array($value)) {
		return $value;
	}
</code></pre>

(Important is the & ! is_array())

But than further the code runs in the next problem selecting by using $this->arguments['optionValueField'] to retrieve the value.
"
29457,TYPO3.Fluid,Bug,"",Resolved,Must have,Template Compiler creates invalid Class names,Bastian Waidelich,"",2011-09-07 05:36,Core,1.0 beta 2,2011-09-02,"","",100,2011-09-02 13:56,"","",243750,"",No,"","The ""identifier"" of a compiled template is based on the last modification timestamp and on the name of the original template/partial/layout.
In Core/Compiler/TemplateCompiler::store() this identifier is used as part of the class name for the compiled template without sanitizing the string first. This leads to invalid class names (= fatal error) if the identifier contains (for example) a dash.

*Note:* This also affects v4 and needs to be backported!"
29603,TYPO3.Fluid,Bug,"",Closed,Must have,__toString() usage for rendering the compiled Fluid template breaks the concept of security exceptions,Andreas Förthner,"",2012-06-01 04:54,Core,1.0.5,2011-09-09,"","",0,2011-09-09 09:26,"","",250950,"",No,FLOW3 1.0.0,"PHP does not allow to throw exceptions within a __toString() method. Therefore security exception don't work while rendering the Fluid template. We somehow have to call a method to render a node and not just concatenate the objects as string and use the interal __toString() functionality. This is a really stupid PHP behaviour, that is documented here: http://php.net/manual/en/migration52.incompatible.php"
30138,TYPO3.Fluid,Bug,"",Closed,Should have,"Bad error message ""TYPO3\FLOW3\Persistence\Doctrine\QueryResult could not be converted to string"" if necessary namespace hasn't been loaded ",Martin Brüggemann,Bastian Waidelich,2013-10-23 05:31,Core,"",2011-09-20,"","",0,2011-09-20 17:54,"","",277450,"",No,FLOW3 1.0.0,"If you write your own paginator widget, try to load it in your fluid template but forget to define the necessary namespace, there's the following error displayed:

<pre>
#1: Catchable Fatal Error: Object of class TYPO3\FLOW3\Persistence\Doctrine\QueryResult could not be converted to string in /Volumes/Data/Users/herr/Sites/_ZFWSPACE/guruhelp/Data/Temporary/Development/Cache/Code/Fluid_TemplateCache
[...]
</pre>

If the correct namespace is defined at the beginning of the viewhelper (f.e. {namespace g=Company\Testproject\ViewHelpers}) the user defined widget loads correctly and everything is fine. "
30555,TYPO3.Fluid,Feature,"",New,Could have,Make TagBuilder more extensible,Thomas Allmer,"",2012-06-29 06:41,Core,"",2011-10-04,"","",0,2011-10-04 15:18,"","",298000,"",No,"","As a developer for Viewhelpers I would like to Extend available Viewhelper and probably modify some tag attributes based on various options without totally forking the viewhelper.

For that I need the possibility to get and set the value of tag attributes.

These Functions could look like this:

<pre>
	/**
	 * Sets the value of an attribute in the $attributes-collection
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function setAttribute($attributeName, $attributeValue, $escapeSpecialCharacters = TRUE) {
		return $this->addAttribute($attributeName, $attributeValue, $escapeSpecialCharacters);
	}

	/**
	 * Gets the value of an attribute in the $attributes-collection
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function getAttribute($attributeName) {
		return $this->attributes[$attributeName] ? $this->attributes[$attributeName] : '';
	}
	
	/**
	 * Checks if the tag has a certain attribute
	 *
	 * @param string $attributeName name of the attribute to be added to the tag
	 * @return string
	 * @author Thomas Allmer <at@delusionworld.com>
	 * @api
	 */
	public function hasAttribute($attributeName) {
		return $this->attributes[$attributeName] ? TRUE : FALSE;
	}
</pre>
"
30777,TYPO3.Fluid,Feature,"",Resolved,Should have,Catch Routing Exceptions in uri and link ViewHelpers,Bastian Waidelich,Bastian Waidelich,2012-06-05 09:16,ViewHelpers,1.0.0,2011-10-11,"","",100,2011-10-11 05:14,"","",308750,"",No,"","Developers having a hard time figuring out what went wrong, if FLOW3 dies with a Routing Exception. Especially when you have a template that contains an invalid link.* or uri.* view helper, the exception ""Could not resolve a route...."" is very misleading.

I'd suggest to catch Routing Exceptions in the respective ViewHelpers and turn them into ViewHelper Exceptions. That way we can output a more meaningful error message (when we have a proper Fluid debug mode, the faulty template line will be outputted in dev context).

BTW: We might also do this for @ActionController::redirect()@"
30935,TYPO3.Fluid,Bug,"",Resolved,Should have,Catch ViewHelper exceptions and log them in production context,Bastian Waidelich,Christian Müller,2015-06-15 03:45,Core,"",2011-10-14,"","",100,2011-10-14 09:14,"","",316500,"",No,FLOW3 1.0.0,"from line 241 of the AbstractViewHelper:
<pre>
<code class=""php"">
try {
	return call_user_func_array(array($this, 'render'), $renderMethodParameters);
} catch (\TYPO3\Fluid\Core\ViewHelper\Exception $exception) {
	// @todo [BW] rethrow exception, log, ignore.. depending on the current context
	return $exception->getMessage();
}
</code>
</pre>

As the todo comment states, this should be caught in production context and logged to prevent information disclosure.
Code could look something like:
<pre>
<code class=""php"">
try {
	return call_user_func_array(array($this, 'render'), $renderMethodParameters);
} catch (\TYPO3\Fluid\Core\ViewHelper\Exception $exception) {
	if ($this->objectManager->getContext() === 'Development') {
		return $exception->getMessage();
	} else {
		$this->systemLogger->log([...]);
		return '';
	}
}
</code>
</pre>"
30937,TYPO3.Fluid,Bug,"",New,Should have,CropViewHelper stringToTruncate can't be supplied so it can't be easily extended,Thomas Allmer,"",2011-10-21 07:37,ViewHelpers,"",2011-10-14,"","",100,2011-10-14 10:32,"","",316600,"",Yes,FLOW3 1.0.0,"the CropViewHelper always gets its content via $this->renderChildren(); so you can't provide the text when using the Inline notation. It also makes it pretty hard to extend this viewhelper.

It should be like it is with most of the other viewhelper:
- add optional $stringToTruncate parameter
- set it to $this->renderChildren() if NULL
- see change below

<pre>
	/**
	 * Render the cropped text
	 *
	 * @param integer $maxCharacters Place where to truncate the string
	 * @param string $stringToTruncate What do you want to crop
	 * @param string $append What to append, if truncation happened
	 * @param boolean $respectBoundaries If TRUE and division is in the middle of a word, the remains of that word is removed.
	 * @param boolean $respectHtml If TRUE the cropped string will respect HTML tags and entities. Technically that means, that cropHTML() is called rather than crop()
	 * @return string cropped text
	 * @author Andreas Pattynama <andreas.pattynama@innocube.ch>
	 * @author Sebastian Kurfürst <sebastian@typo3.org>
	 * @author Bastian Waidelich <bastian@typo3.org>
	 * @author Felix Oertel <oertel@networkteam.com>
	 */
	public function render($maxCharacters, $stringToTruncate = NULL, $append = '...', $respectWordBoundaries = TRUE, $respectHtml = TRUE) {
		if ($stringToTruncate === NULL) {
			$stringToTruncate = $this->renderChildren();
		}
</pre>"
31019,TYPO3.Fluid,Feature,"",Resolved,Should have,FlashMessages ViewHelper should render message title and severity,Bastian Waidelich,Bastian Waidelich,2011-11-10 09:36,ViewHelpers,"",2011-10-17,"","",100,2011-10-17 15:27,"","",320600,"",No,"","Currently <f:flashmessages /> renders the FlashMessages only by converting them into a string implicitly. That only returns the message Body of the respective FlashMessage. In order to render FlashMessages according to their type, the *severity* should be rendered into the flash message as CSS class. Besides the title of a message should be rendered, if specified."
31119,TYPO3.Fluid,Bug,"",Resolved,Must have,AjaxWidgetContext is not stored in session,Bastian Waidelich,Bastian Waidelich,2011-10-19 19:39,Widgets,1.0.0,2011-10-19,"","",100,2011-10-19 12:30,"","",325300,"",No,"",The AjaxWidgetContextHolder is missing an *@FLOW3\Session(autoStart=true)* annotation that initiates the session.
31167,TYPO3.Fluid,Feature,"",Resolved,Could have,Stateless AJAX Widgets,Bastian Waidelich,Bastian Waidelich,2011-11-10 11:36,Widgets,"",2011-10-21,"","",100,2011-10-21 05:25,"","",327700,"",No,"","Currently an AJAX Widget stores the *WidgetContext* in the *WidgetContextHolder* which again puts it in the current user session.
This should be configurable so that the context can be passed to the target widget action via GET/POST.
*Note:* This requires that the request handler verifies the HMAC of the widget request!"
31189,TYPO3.Fluid,Bug,"",Resolved,Should have,Make TextareaViewHelper HTML5 aware,rottenrice no-lastname-given,Bastian Waidelich,2012-07-30 03:00,ViewHelpers,1.1,2011-10-22,"","",100,2011-10-22 10:05,"","",328800,"",No,Git 1.0,"1. the code example seems to be deprecated. ""rows"" and ""cols"" are required attributes but are not used in the example.

2. i suggest to use ""rows"" and ""cols"" as optional attributes. in html5 they are no longer tagged as required. furthermore you want to set the width and height of a textarea in css instead of using an html attribute ...

links:
http://api.typo3.org/fluid/master/class-Tx_Fluid_ViewHelpers_Form_TextareaViewHelper.html
http://www.w3.org/TR/html5/the-button-element.html#the-textarea-element"
31380,TYPO3.Fluid,Bug,"",Resolved,Should have,DocComment of Form.ValidationResultsViewHelper is incorrect,Adrian Föder,Karsten Dambekalns,2012-05-30 15:56,ViewHelpers,1.0.5,2011-10-28,"","",100,2011-10-28 10:36,"","",338250,"",No,Git 1.0,"The current DocBlock says:
<pre>
 * <f:form.validationResults>
 *   <f:if condition=""{validationResults.flattenedErrors}"">
 *     <ul class=""errors"">
 *       <f:for each=""{errors}"" as=""error"">
 *         <li>{error.code}: {error}</li>
 *       </f:for>
 *     </ul>
 *   </f:if>
 * </f:form.validationResults>
</pre>
(see the comment at the getFlattenedErrors() function:
@ Get a list of all Error objects recursively. The result is an array,
	  where the key is the property path where the error occured, and the
	  value is a list of all errors (stored as array)@)



so due to that error result nesting, it should read:

<pre>
<f:form.validationResults>
	<f:if condition=""{validationResults.flattenedErrors}"">
		<dl class=""errors"">
			<f:for each=""{validationResults.flattenedErrors}"" as=""errors"" key=""propertyPath"">
				<dt>{propertyPath}</dt>
				<dd><dl>
					<f:for each=""{errors}"" as=""error"">
						<dt>{error.code}</dt>
						<dd>{error}</dd>
					</f:for>
				</dl></dd>
			</f:for>
		</dl>
	</f:if>
</f:form.validationResults>
</pre>

(disregard the fact that I use dl's here, although I like them more when it comes to nestings)"
31451,TYPO3.Fluid,Bug,"",Closed,Should have,Fluid XSD Generator uses removed method,Julian Wachholz,Bastian Waidelich,2012-02-23 14:54,"","",2011-10-31,"","",0,2011-10-31 06:40,"","",341750,"",No,Git master,"When trying to generate an XSD to use with my Editor the following Exception gets thrown:

    Fatal error: Call to undefined method TYPO3\FLOW3\Object\ObjectManager::getRegisteredObjects() in TYPO3\Fluid\Service\AbstractGenerator.php:70

This method has either been removed or renamed, but unfortunately couldn't find out where it went.

(This could also be seen as task to update the Fluid controllers to the new Syntax, e.g. use @FLOW3\Inject instead of injectFoo methods)"
31658,TYPO3.Fluid,Bug,"",Resolved,Should have,Inconsistency: Change argument handling of widget ViewHelpers,Sebastian Kurfuerst,"",2011-11-08 00:06,ViewHelpers,1.1 beta 1,2011-11-08,"","",100,2011-11-08 00:01,"","",351850,"",Yes,FLOW3 1.0.0,"* Change action parameter from ""action"" to ""@action""
* Add ""@format"" parameter
"
31667,TYPO3.Fluid,Bug,"",Resolved,Should have,AJAX widgets broken when called inside a loop,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-11-12 14:56,Widgets,1.0.1,2011-11-08,"","",100,2011-11-08 05:35,"","",352300,"",No,FLOW3 1.0.0,"As ViewHelpers are supposed to be stateless they were create once per
RenderingContext and reused whenever the RenderingContext fits.
Some ViewHelpers are not stateless, e.g. AJAX widgets.

AJAX widgets push their WidgetContext into an AjaxWidgetContextHolder
before they get rendered.

As soon as AJAX-WidgetViewHelpers were used multiple times within the
same RenderingContext (widgets in ForViewHelpers for example) differet
widgets share the same ViewHelper containing the same WidgetContext.
Because the WidgetContext contains all statefull information about a
widget, only the last rendered widget gets stored in the ContextHolder.
That makes equal AJAX widgets within a for-loop impossible because
each GUI representation interacts with only the last rendered PHP object.
"
31765,TYPO3.Fluid,Feature,"",Resolved,Should have,Forward to Action of widgetController,Carsten Bleicker,Bastian Waidelich,2014-07-11 14:39,Widgets,"",2011-11-11,"","",100,2011-11-11 12:40,"","",357150,"",No,"","widget controller has 2 actions:
1. indexAction
2. createAction

after createAction i want to forwad to the indexAction again.
but doesnt work. getting a white page withoud any result by using $this->forward('index).
any ideas to do something like a forward inside of the widget controller?

thanks
carsten"
31939,TYPO3.Fluid,Bug,"",Resolved,Must have,preselection with a multiple form.select with a M:N relation,Matthias Habegger,"",2013-01-21 11:22,ViewHelpers,"",2011-11-19,"","",100,2011-11-19 05:37,"","",365800,"",No,FLOW3 1.0.0,"I have a M:N relation between my two model ""book"" and ""category"".


Now I try to create a multiple select with the SelectViewHelper like that:
<pre>
<f:form.select property=""categories"" options=""{categories}"" optionLabelField=""name"" multiple=""multiple"" size=""7"" />
</pre> 

{categories} is a variable assigned in the controller.
that works fine, all, categories are shown in the select.


The problem is, that none of my preselected categories are selected.

The html output looks like that:
<pre>
<input type=""hidden"" name=""book[categories]"" value="""" />
<select id=""categories"" multiple=""multiple"" size=""7"" name=""book[categories][]"">
<option value=""0bc305ec-8aff-4fa8-bdeb-476d7c21c841"">Novels</option>
<option value=""8c2221e3-a3fd-4ce2-8f7e-66aac9eed5f5"">Second Category</option>
<option value=""c1ca0c2d-08c4-4b22-b9c7-69bbd42de840"">Third category</option>
</select>
</pre>

I analized the problem and it seems, that the method ""getSelectedValue"" in the ""SelectViewHelper"" can't handle multiple preselects.

I think the problem is also in the blog-tutorial when you try to edit post which already has related posts, they are not selected."
31955,TYPO3.Fluid,Feature,"",New,Should have,f:uri.widget,Carsten Bleicker,"",2011-11-22 06:27,Widgets,"",2011-11-21,"","",0,2011-11-21 04:52,"","",366600,"",No,"","f:link.widget should have the possibility to make the links absolute
and should be able to set controller etc of parentRequest to stay on the current page
if <f:base> is in use. at the moment there are only relative links, right?
there should also be a <f:from.widget> wich should clean the current widget config out of the
subrequest. otherwise all widget get params will be added again and after 10 klicks on the form
the uri will be more then allowed characters."
32016,TYPO3.Fluid,Bug,Bug #32014: Some unit tests break when run with PHPUnit 3.6,Resolved,Must have,Unit tests fail with PHPUnit 3.6,Karsten Dambekalns,Karsten Dambekalns,2011-12-09 09:06,"",1.0.2,2011-11-23,"","",100,2011-11-23 04:24,"","",369650,"",No,FLOW3 1.0.1,.
32035,TYPO3.Fluid,Task,"",New,Should have,Improve fluid error messages,Georg Ringer,"",2012-01-27 09:59,Core,"",2011-11-23,"","",0,2011-11-23 09:01,"","",370550,"",Yes,"","The error messages of fluid could be a bit more helpful

Instead of 'Argument ""fo"" was not registered' use 'Argument ""fo"" was not registered for ""f:image""'

Instead of 'Required argument ""src"" was not supplied for ""f:image""'

so it is far easier to search for the error.

I don't know how a filename could be handled as this would be even more helpful"
32339,TYPO3.Fluid,Feature,"",Resolved,Should have,ResourceViewHelper should support I18n,Karsten Dambekalns,Karsten Dambekalns,2012-12-10 07:16,ViewHelpers,2.0 beta 1,2011-12-06,"","",100,2011-12-06 11:02,"","",385650,"",No,"","The default behavior for the ResourceViewHelper should be to use a localized version if a resource, if available."
32451,TYPO3.Fluid,Bug,"",Resolved,Should have,Adjust Ajax Widgets to new Bootstrap,Sebastian Kurfuerst,Sebastian Kurfuerst,2011-12-19 09:36,Widgets,1.1 beta 1,2011-12-12,"","",100,2011-12-12 01:51,"","",391200,"",No,Git master,"The new FLOW3 Bootstrap (#32333) implements new request handlers.
Now, Fluid needs to be adjusted to the new request handlers. however, there is one problem:
The Fluid request handler determines if it can be used depending on whether a certain GET variable is set. For that, it uses the @TYPO3\FLOW3\Utility\Environment@; which is however not yet initialized when canHandleRequest is called.

A workaround would be to use $_GET directly; but can we find a clean solution to this?"
32930,TYPO3.Fluid,Feature,"",Resolved,Must have,Create a Standalone View,Fernando Arconada,Sebastian Kurfuerst,2012-01-29 13:34,View,1.1,2012-01-02,"","",100,2012-01-02 08:48,"","",413750,"",No,"","Fluid need a Standalone Template to be able to render emails for example. Consider that template rendering could be done inside aspects and services where there is no ControllerContext, Request, Response..."
33043,TYPO3.Fluid,Bug,"",Resolved,Should have,f:identity.json wrong namespace,Pascal Walter,Karsten Dambekalns,2012-03-07 15:23,ViewHelpers,1.1,2012-01-08,"","",100,2012-01-08 08:00,"","",419050,"",No,FLOW3 1.0.2,"<pre>
/**
* @var \F3\FLOW3\Persistence\PersistenceManagerInterface
*/
protected $persistenceManager;

</pre>

It works because the property is injected via method-injection but its still wrong :)
Maybe there are some more miss spellings like this. Did someone search for them after namespace changed from \F3\?
"
33117,TYPO3.Fluid,Feature,"",Rejected,Could have,returning plain \DateTime object in Format\DateViewHelper,Adrian Föder,Adrian Föder,2012-05-08 10:13,ViewHelpers,1.1,2012-01-11,"","",0,2012-01-11 07:01,"","",422700,"",Yes,"","The DateTime ViewHelper allows passing by a string that is converted to a DateTime object, which again is formatted against the requested pattern.

The current signature is

<pre>
/**
	 * Render the supplied DateTime object as a formatted date.
	 *
	 * @param mixed $date either a \DateTime object or a string that is accepted by \DateTime constructor
	 * @param string $format Format String which is taken to format the Date/Time
	 * @return string Formatted date
	 * @api
	 */
	public function render($date = NULL, $format = 'Y-m-d')
</pre>

Providing an additional option ""asObject"" or such, that returns the \DateTime object without formatting, would allow the user to compare Dates with the IfViewHelper, because Date object could be compared with < or > each other (http://de2.php.net/manual/en/datetime.diff.php, Example #2).

So this should allow something like
<pre>
<f:if condition=""{model.date} < {f:format.date(date: 'now', asObject: 'true')}"">
The date is due.
</f:if>

I know that this might not fit 100% into ""formatting"" and it additionally changes the return type via parameter (kind of ""FlagArgument"" http://martinfowler.com/bliki/FlagArgument.html), but maybe you're fine with it, because it's useful and the functionality is only almost one LOC away."
33143,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow Format.Currency ViewHelper regard Locale,Adrian Föder,Adrian Föder,2012-09-17 06:06,ViewHelpers,2.0 beta 1,2012-01-12,"","",0,2012-01-12 08:42,"","",424000,"",No,"","The Format.Currency ViewHelper currently only renders its formatting ""hard-coded"". Allow usage of the Locale and Cldr functionality."
33215,TYPO3.Fluid,Feature,"",New,Should have,RFC: Dynamic values in ObjectAccess paths,Christopher Hlubek,"",2014-02-19 11:33,"","",2012-01-16,"","",0,2012-01-16 05:48,"","",427550,"",No,"","Sometimes it's necessary to include a dynamic value from a Fluid variable inside an object access path. Some use cases would be:

* Get the value of an array or object depending on a key in a foreach loop
* ...

A possible syntax amendment could look like this:

<pre><code>
<p>{myobject[propertyName]}</p>
</code></pre>

Where @propertyName@ is a template variable itself:

<pre><code>
$this->view->assign('propertyName', 'foo');
$this->view->assign('myobject', $myObject);
</code></pre>

In this context it would evaluate to the value of @{myobject.foo}@. This is consistent to the way JavaScript defines its object access syntax with variables."
33274,TYPO3.Fluid,Bug,"",Closed,Should have,Viewhelpers extending AbstractFormFieldViewHelper should add additionalIdentityProperties even if there is an error on the field,Zach Davis,Zach Davis,2012-01-31 15:15,ViewHelpers,"",2012-01-18,"","",0,2012-01-18 00:46,"","",430450,"",No,FLOW3 1.0.2,"In a FLOW3 app, I have a form that has fields that reference an Account object and the Party property on the account object. This works fine because when Fluid renders form fields it calls the addAdditionalIdentityPropertiesIfNeeded in the AbstractFormFieldViewHelper class, which adds hidden identity fields for the properties.

However, when any part of the form is invalid a mapping error is triggered. The form field viewhelper sees the mapping error and no longer adds the property identities, which leads to a situation where the user corrects the error in the form, only to have FLOW3 try to create new property objects.

The fix is simple, and I think it's a no-brainer. We need to change the conditional logic in the getValue method on the AbstractFormFieldViewHelper from this:

@
if ($this->hasArgument('value')) {
    $value = $this->arguments['value'];
} elseif ($this->hasMappingErrorOccured()) {
    $value = $this->getLastSubmittedFormData();
} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getPropertyValue();
}
@

To this:

@
if ($this->hasArgument('value')) {
    $value = $this->arguments['value'];
} elseif ($this->hasMappingErrorOccured()) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getLastSubmittedFormData();
} elseif ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject')) {
    $this->addAdditionalIdentityPropertiesIfNeeded();
    $value = $this->getPropertyValue();
}
@

Notice that we've added the call to addAditionalIdentityPropertiesIfNeeded to the second section of the statement. Even if there's an error, we should still add identity properties, right?

If the change sound right, let me know and I'll submit a patch to gerrit.

Zach"
33284,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,AbstractViewHelper::renderChildren removes the {some_digit} placeholders needed for translation,Sebastian ,Karsten Dambekalns,2012-02-24 10:28,Core,1.1,2012-01-18,"","",0,2012-01-18 05:51,"","",430950,"",No,Git master,"Somewhere in renderChildren the {some_digit} placeholders are being removed.

I traced it so far and can't go further as I don't know how to debug the closure function.

To be clear... the example from the flow3 documentation guide:
<pre><f:translate source=""someLabelsCatalog"" arguments=""{0: 'foo', 1: '99.9'}>Untranslated {0} and {1,number}</f:translate></pre>

becomes:
<pre>Übersetzt  and 99,9</pre>


I don't know if maybe this was necessary at some step and is related to some important design decision or if it is a glitch.
If it's a glitch I hope someone can find it.

Otherwise I would suggest creating a StringFormatter like I did for myself, so one can then use:
<pre><f:translate source=""someLabelsCatalog"" arguments=""{0: 'foo', 1: '99.9'}>Untranslated {0,string} and {1,number}</f:translate></pre>

Here is the StringFormatter
<pre>
<?php
namespace TYPO3\FLOW3\I18n\Formatter;

/*                                                                        *
 * This script belongs to the FLOW3 framework.                            *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License, either version 3   *
 * of the License, or (at your option) any later version.                 *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

use TYPO3\FLOW3\Annotations as FLOW3;

/**
 * Formatter for numbers.
 *
 * @FLOW3\Scope(""singleton"")
 * @api
 */
class StringFormatter implements \TYPO3\FLOW3\I18n\Formatter\FormatterInterface {


	/**
	 * Formats provided value using optional style properties
	 *
	 * @param mixed $value Formatter-specific variable to format (can be integer, \DateTime, etc)
	 * @param \TYPO3\FLOW3\I18n\Locale $locale Locale to use
	 * @param string $styleProperties Integer-indexed array of formatter-specific style properties (can be empty)
	 * @return string String representation of $value provided, or (string)$value
	 * @api
	 */
	public function format($value, \TYPO3\FLOW3\I18n\Locale $locale, array $styleProperties = array()) {
		return (string)$value;
	}

}

?></pre>"
33302,TYPO3.Fluid,Feature,"",Resolved,Should have,form.button ViewHelper,Bastian Waidelich,Bastian Waidelich,2012-01-20 06:21,ViewHelpers,1.1,2012-01-18,"","",100,2012-01-18 15:10,"","",431850,"",No,"","<button /> elements are more flexible than <input type=""submit"" /> as they allow to render arbitrary child elements and can transmit own values which makes them really usable in multi-page forms for example.
In the meantime all major browser support buttons for submitting & resetting so we should add a respective ViewHelper."
33394,TYPO3.Fluid,Feature,"",Needs Feedback,Should have,Logical expression parser for BooleanNode,Tobias Liebig,Tobias Liebig,2014-08-14 08:10,Core,"",2012-01-23,"","",90,2012-01-23 13:01,"","",436300,"",No,"","In boolean ViewHelper attributes, like the f:if condition, one might want to use boolean expressions and boolean operators like && (and), || (or) or ! (not).

The @BooleanNode@ needs to parse this logical expressions."
33421,TYPO3.Fluid,Bug,"",Resolved,Should have,AbstractFormFieldViewHelper does not resolve property path,Bastian Waidelich,Bastian Waidelich,2012-01-26 08:46,ViewHelpers,"",2012-01-24,"","",100,2012-01-24 13:33,"","",437650,"",No,Git master,"When binding a form field to a property like
<pre>
<f:form.textfield property=""some.property"" />
</pre>

The resulting element name attribute should be:
<pre>
[...] name=""formPrefix[formObjectName][some]property""
</pre>

This works as long as a form object name is specified (<f:form objectName=""xyz"" />) but it fails to resolve the property path if not:

<pre>
[...] name=""formPrefix[some.property]""
</pre>"
33487,TYPO3.Fluid,Feature,"",Closed,Could have,Configure from what package to use Templates/Partial/Layouts,Soren Malling,Bastian Waidelich,2013-07-29 07:58,Core,"",2012-01-27,"","",0,2012-01-27 05:48,"","",440900,"",No,"","This could be considered as a discussion, and not a final feature request.

My feature wish, is to make is possible to configurate from which package to use templates/partials/layout file.

Purpose:

Create a application, and create a secondary application only containing the template files/different layout.


This is most likely possible through AOP, but wouldn't it make sense to have it as a actual configuration property? "
33493,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow DebugViewHelper output only the type of the input variable,Adrian Föder,Adrian Föder,2012-05-08 20:39,ViewHelpers,1.1,2012-01-27,"","",100,2012-01-27 08:43,"","",441200,"",No,"","Due to the var_dump drawback that sometimes the memory consumption is too large or the list just becomes too long, I suggest a flag that only outputs the type of the intended variable instead of its dump."
33494,TYPO3.Fluid,Feature,"",Resolved,Should have,Verify state and future intentions of a persistence identity VH,Adrian Föder,Adrian Föder,2012-06-18 04:37,ViewHelpers,1.1 RC1,2012-01-27,"","",100,2012-01-27 09:50,"","",441250,"",No,"","Currently, there is an Identity.JsonViewHelper that has two major drawbacks:

* the Code Example talks about a Persistence.Identity ViewHelper that only outputs raw @97e7e90a-413c-44ef-b2d0-ddfa4387b5ca@, for example
* the actual output of the Identity.JsonViewHelper is @json_encode(array('__identity' => $identifier))@

additionally, in the Conference package there's a @Identity.Uuid@ that basically also outputs raw @97e7e90a-413c-44ef-b2d0-ddfa4387b5ca@.


I do not agree with the following things in the current situation:

* I think there should be a better name than Persistence.Identity; the ""namespace"" Persistence doesn't feel good to me. Let's discuss this, maybe you agree.

* Outputting JSON would not make much sense; at least I'd expect the RAW value put out that could than be edited further (in this case I agree with the code sample's behaviour or the Conference's Identity.Uuid's(same).

Maybe the Format.Json VieHelper I just pushed could be involved, at least as post-processor using ViewHelper chaining or similar.

I really think we should clean up here some things.

--

While writing this, I think at least correcting the Code Example should be duty, and there should be a new flag called e.g. ""rawIdentifier"" that only returns the plain ID string with no JSON around.

But, well, the VH's name is already JSON, so...
what? :)

Just tell me some guidelines, I will gladly do it."
33551,TYPO3.Fluid,Bug,"",New,Must have,View helper values break out of a partial scope,Stephan Schuler,Sebastian Kurfuerst,2013-06-05 08:41,Core,"",2012-01-31,"","",0,2012-01-31 06:05,"","",444100,"",No,(any),"If a partial is called at least twice which has a certain view helper inside, the last occurence of the inside value breaks out of the partials scope and will be the result of all usages of this view helper from now on.

This only appears when the first call triggers the caching mechanism but executes the uncached template (AbstractTemplateView::render() $parsedTemplate is instance of ""TYPO3\Fluid\Core\Parser\ParsingState"").
As soon as the template is a compiled one (AbstractTemplateView::render() $parsedTemplate is instance of ""TYPO3\Fluid\Core\Compiler\AbstractCompiledTemplate""), the result is as expected.

Main template:
<pre>
<html>
	<head>
		<title>Little bug</title>
	</head>
	<body>
		<ol>
			<li><f:escape type=""xml"">I am pre partial</f:escape></li>
			<f:render partial=""Demo"" arguments=""{value: 'I am the first node within a partial'}"" />
			<f:render partial=""Demo"" arguments=""{value: 'I am not the first but the second node within a partial'}"" />
			<li><f:escape type=""xml"">I am post partial</f:escape></li>
		</ol>
	</body>
</html>
</pre>

Demo-Partial:
<pre>
<li><f:escape type=""xml"">{value}</f:escape></li>
</pre>

The expected result would be:
<pre>
1. I am pre partial
2. I am the first node within a partial
3. I am not the first but the second node within a partial
4. I am post partial
</pre>

But the given result is:
<pre>
1. I am pre partial
2. I am the first node within a partial
3. I am not the first but the second node within a partial
4. I am not the first but the second node within a partial
</pre>"
33569,TYPO3.Fluid,Bug,"",Resolved,Should have,AbstractFormFieldViewHelper always converts entities to identities,Bastian Waidelich,Bastian Waidelich,2012-02-01 08:52,ViewHelpers,"",2012-01-31,"","",100,2012-01-31 15:19,"","",444950,"",No,Git master,AbstractFormFieldViewHelper::getValue() currently always tries to convert objects by calling PersistenceManager::getIdentifierByObject(). This makes it impossible for custom ViewHelpers to access the unmodified value.
33570,TYPO3.Fluid,Bug,"",Resolved,Should have,UploadViewHelper must not convert resources if errors occurred,Bastian Waidelich,Bastian Waidelich,2012-02-01 08:52,ViewHelpers,"",2012-01-31,"","",100,2012-01-31 15:25,"","",445000,"",No,Git master,"If getMappingResultsForProperty() contains errors, uploaded resources should not been converted."
33628,TYPO3.Fluid,Bug,"",Needs Feedback,Must have,Multicheckboxes (multiselect) for Collections don?t work,Kira Backes,Christian Müller,2012-06-28 04:27,ViewHelpers,"",2012-02-02,"","",0,2012-02-02 09:48,"","",447850,"",No,FLOW3 1.0.0,"Let?s say I have a search and there are 20 categories which are selectable (I can select one, three or even all of them) then I would like all selected categories to be loaded into a collection, so I can search in those categories. For this use-case there is the following code:

Action
<pre>
	/**
	 * Submit search action
	 *
	 * @param \Doctrine\Common\Collections\ArrayCollection<\Package\Name\Domain\Model\Category> $categories
	 * @return void
	 */
	public function submitSearchAction(\Doctrine\Common\Collections\ArrayCollection $categories) {
</pre>

Template
<pre>
		<f:for each=""{categories}"" as=""category"" iteration=""it"">
			<div style=""width: 300px; float: left;"">
				<f:form.checkbox  id=""category{it.cycle}"" name=""categories[]"" value=""{category}"" />
				<label for=""category{it.cycle}""><f:translate>{category.name}</f:translate></label>
			</div>
		</f:for>
</pre>

Now the problem is that the CheckBoxViewHelper always renders an empty hidden field with an empty value for check boxes. Due to this hidden field with an empty value FLOW3 tries to load the Category with the persistence identifier of """", which throws an exception. When I remove the hidden field (in a hacky way) then everything works as expected.

<pre>
#1297759968: Exception while property mapping at property path ""0"": Object with identity """" not found.

Nested Exception
#1297933823: Object with identity """" not found.
TYPO3\FLOW3\Property\Exception\TargetNotFoundException
</pre>"
33812,TYPO3.Fluid,Task,"",Resolved,Must have,Rename key to id in TranslateViewHelper,Karsten Dambekalns,Karsten Dambekalns,2012-02-16 20:47,ViewHelpers,1.1,2012-02-09,"","",100,2012-02-09 07:53,"","",457000,"",No,"","Since the key attribute refers to the trans-unit id in XLIFF, it is more intuitive to rename the attribute to id."
33814,TYPO3.Fluid,Feature,"",Resolved,Should have,Hint how to allow string comparison in IfViewHelper,Adrian Föder,Adrian Föder,2012-02-22 08:48,ViewHelpers,1.1,2012-02-09,"","",100,2012-02-09 08:43,"","",457100,"",No,"","currently, string comparisons are not directly supported. With a trick, it can be achieved nevertheless (@{0: foo.bar} == {0: 'stringToCompare'}@).
The Code example should mention that trick at least until ""real"" comparisons are allowed."
33817,TYPO3.Fluid,Feature,"",Resolved,Could have,SwitchViewHelper,Adrian Föder,Bastian Waidelich,2013-05-29 08:36,ViewHelpers,"",2012-02-09,"","",100,2012-02-09 09:28,"","",457250,"",No,"","Fluid should provide a Switch VH that behaves like the well-known switch-case structure.

Syntax suggestion:
<pre>
<f:switch comparand=""{foo.bar}"">
  <f:switch.case comparand=""valuecase1"">
    <span>Output in this case.</span>
  </f:switch.case>

  <f:switch.case comparand=""nothervaluecase"">
    <a>Output in another case.</a>
  </f:switch.case>

  <f:switch.case comparand=""third"">
    <a>Output in another case.</a>
  </f:switch.case>

  <f:switch.default>
    Default value if nothing else matches.
  </f:switch.default>
</f:switch>
</pre>


There's an already present implementation here: http://fedext.net/fed-viewhelpers/loops-conditions/switch/ but tbh I at least don't agree with the ""default"" implementation because it could collide with the value being ""default"" as string:
<pre>
<fed:switch value=""{switchValue}"">
  <fed:case case=""1"">
      <p>Case was 1</p>
  </fed:case>
  <fed:case case=""default"">
    <p>Case was default</p>
  </fed:case>
</fed:switch>
</pre>"
33900,TYPO3.Fluid,Feature,"",Resolved,Should have,Change debug view helper for new extbase debugger,Alexander Schnitzler,Alexander Schnitzler,2012-07-10 02:27,ViewHelpers,"",2012-02-13,"","",100,2012-02-13 18:02,"","",461350,"",Yes,"","Since Jochen Rau merged the backport of the FLOW3 Debugger into the extbase master the Fluid view helper should be changed, too."
34186,TYPO3.Fluid,Bug,"",Closed,Should have,Setting a value always resets the field on mapping errors,Kira Backes,Bastian Waidelich,2015-02-25 04:29,ViewHelpers,"",2012-02-22,"","",0,2012-02-22 09:41,"","",475500,"",No,Git 1.0,"If I set a value on any field of the form it gets reset every time there
is a mapping error, so the user has to reenter the field every time.

Could easily be fixed by changing the order of the if-clause in
\TYPO3\Fluid\ViewHelpers\Form\AbstractFormFieldViewHelper::getValue"
34231,TYPO3.Fluid,Task,"",Resolved,Should have,Move link.widget & uri.widget ViewHelpers to Widget subfolder,Bastian Waidelich,Bastian Waidelich,2012-05-14 20:38,Widgets,1.1,2012-02-24,"","",100,2012-02-24 09:40,"","",477750,"",No,"","Widget related ViewHelpers should be in the Widget subfolder of Fluid (as in v4).
@link.widget@ should be @widget.link@, @uri.widget@ should be @widget.uri@.
Existing ViewHelper classes should extend the moved classes and marked deprecated."
34232,TYPO3.Fluid,Feature,"",Resolved,Should have,Translation support in SelectViewHelper,Karsten Dambekalns,Karsten Dambekalns,2012-03-19 21:38,ViewHelpers,1.1,2012-02-24,"","",100,2012-02-24 10:29,"","",477800,"",No,"",The SelectViewHelper should offer translation of option labels.
34309,TYPO3.Fluid,Task,"",New,Could have,Unknown ViewHelpers cause exception - should be handled more graceful,Lars Düsing,"",2012-03-07 12:40,ViewHelpers,"",2012-02-26,"","",0,2012-02-26 17:24,"","",481500,"",No,"","Current git. Backend -> Login -> Management -> User Settings

Object ""TYPO3\Fluid\ViewHelpers\Form\TextboxViewHelper"" is not registered.
46 TYPO3\FLOW3\Object\ObjectManager::get(""TYPO3\Fluid\ViewHelpers\Form\TextboxViewHelper"")

45 TYPO3\Fluid\Core\Parser\TemplateParser_Original::initializeViewHelperAndAddItToStack(TYPO3\Fluid\Core\Parser\ParsingState, ""f"", ""form.textbox"", array)

44 TYPO3\Fluid\Core\Parser\TemplateParser_Original::openingViewHelperTagHandler(TYPO3\Fluid\Core\Parser\ParsingState, ""f"", ""form.textbox"", "" property=&quot;accountIdentifier&quot; "", boolean)

43 TYPO3\Fluid\Core\Parser\TemplateParser_Original::buildObjectTree(array)

42 TYPO3\Fluid\Core\Parser\TemplateParser_Original::parse(""&lt;fieldset&gt;?	&lt;legend&gt;Account&lt;/legend&gt;??	&lt;div class=?			&lt;/f:for&gt;?			&lt;/ul&gt;?		&lt;/div&gt;?	&lt;/f:if&gt;?&lt;/fieldset&gt;"")

41 TYPO3\Fluid\View\AbstractTemplateView::renderPartial(""Module/Shared/EditUserSettingsForm"", NULL, array)

40 TYPO3\Fluid\ViewHelpers\RenderViewHelper_Original::render(NULL, ""Module/Shared/EditUserSettingsForm"", array, boolean)

39 call_user_func_array(array, array)

38 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

37 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

36 {closure}()

35 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::renderChildren()

34 TYPO3\Fluid\ViewHelpers\FormViewHelper_Original::render(""update"", array, NULL, NULL, NULL, TYPO3\FLOW3\Persistence\Doctrine\Proxies\__CG__\TYPO3\FLOW3\Security\Account, """", """", array, boolean, boolean, array, NULL, NULL, NULL)

33 call_user_func_array(array, array)

32 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

31 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

30 FluidCache_TYPO3_TYPO3__Module_Management_UserSettings_action_index_d27cd389edf3cbd52046311e12184a2cb263dec6::section_040f06fd774092478d450774f5ba30c5da78acc8(TYPO3\Fluid\Core\Rendering\RenderingContext)

29 TYPO3\Fluid\View\AbstractTemplateView::renderSection(""content"", array, boolean)

28 TYPO3\Fluid\ViewHelpers\RenderViewHelper_Original::render(""content"", NULL, array, boolean)

27 call_user_func_array(array, array)

26 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::callRenderMethod()

25 TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper::initializeArgumentsAndRender()

24 FluidCache_TYPO3_TYPO3__Module_Management_UserSettings_layout_BackendModule_f2946d21abf7b9b9c1a8b6de9e4127661f5436c8::render(TYPO3\Fluid\Core\Rendering\RenderingContext)

23 TYPO3\Fluid\View\AbstractTemplateView::render()

22 TYPO3\FLOW3\MVC\Controller\ActionController_Original::callActionMethod()

21 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

20 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

19 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\SubRequest, TYPO3\FLOW3\MVC\Web\SubResponse)

18 TYPO3\TYPO3\Controller\Backend\ModuleController_Original::indexAction(array)

17 call_user_func_array(array, array)

16 TYPO3\FLOW3\MVC\Controller\ActionController_Original::callActionMethod()

15 TYPO3\FLOW3\MVC\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

14 TYPO3\FLOW3\MVC\Dispatcher_Original::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

13 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

12 call_user_func_array(array, array)

11 TYPO3\FLOW3\MVC\Dispatcher::FLOW3_AOP_Proxy_invokeJoinPoint(TYPO3\FLOW3\AOP\JoinPoint)

10 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

9 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\AOP\JoinPoint)

8 TYPO3\FLOW3\AOP\Advice\AroundAdvice::invoke(TYPO3\FLOW3\AOP\JoinPoint)

7 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

6 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\AOP\JoinPoint)

5 TYPO3\FLOW3\AOP\Advice\AroundAdvice::invoke(TYPO3\FLOW3\AOP\JoinPoint)

4 TYPO3\FLOW3\AOP\Advice\AdviceChain::proceed(TYPO3\FLOW3\AOP\JoinPoint)

3 TYPO3\FLOW3\MVC\Dispatcher::dispatch(TYPO3\FLOW3\MVC\Web\Request, TYPO3\FLOW3\MVC\Web\Response)

2 TYPO3\FLOW3\MVC\Web\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!"
34324,TYPO3.Fluid,Bug,Task #11969: Make widgets' template configurable,Closed,Must have,Template of widgets can't be changed,Christian Müller,Karsten Dambekalns,2012-03-07 10:50,Widgets,"",2011-04-01,"","",20,2012-02-27 09:16,"","",482250,"",No,FLOW3 1.0.0,"Currently the widgets use the default template path only and it is impossible to override those which is kind of a nogo.

Attached patch fixes this. The path can be set via TS. e.g. 

<pre>
plugin.tx_fo.view.widgetRootPath = fileadmin/fo/
</pre>
If using the pagination widget, the index.html needs to be at fileadmin/fo/ViewHelpers/Widget/Paginate/Index.html

One open question: Is this the correct way to go with the part ""ViewHelpers"" inside this path? or should it be fileadmin/fo/Paginate/Index.html?"
34428,TYPO3.Fluid,Feature,"",Rejected,Should have,FLUID comments <!--- ... --->,Michael Knoll,Bastian Waidelich,2012-03-09 07:36,Core,"",2012-02-29,"","",0,2012-02-29 17:54,"","",487300,"",No,"","I opened up this issue as a reference for a branch committed to gerrit. Here are some thoughts about this feature:

http://mimi.kaktusteam.de/blog-posts/2012/02/fluid-comments/

There is also a discussion in the mailing list:

http://lists.typo3.org/pipermail/typo3-project-typo3v4mvc/2012-February/011837.html

A patch / diff for FLUID 1.3.0 is available here:

http://mimi.kaktusteam.de/uploads/media/fluid_comments.diff"
34643,TYPO3.Fluid,Task,"",Resolved,Should have,variable annotations missing prepending backslash,Bernhard Fischer,Bernhard Fischer,2012-03-08 08:38,"",1.1,2012-03-07,"","",100,2012-03-07 09:30,"","",497700,"",No,"",Automated scan found some incorrect annotations.
34682,TYPO3.Fluid,Bug,"",Under Review,Should have,Radio Button missing checked on validation error,Kira Backes,"",2013-11-20 14:58,ViewHelpers,"",2012-03-09,"","",0,2012-03-09 05:30,"","",499550,"",No,Git master,"The checked state of a radio button is not properly checked in the case of a validation error, this should be checked by comparing the value to the lastSubmittedFormData"
35041,TYPO3.Fluid,Bug,"",Resolved,Should have,TranslateViewHelper returns empty string if id is missing and view helper tag is empty,Andreas Wolf,Karsten Dambekalns,2012-05-26 09:35,ViewHelpers,1.1 beta 2,2012-03-20,"","",100,2012-03-20 10:23,"","",517350,"",No,Git master,"With an empty view helper tag (<f:translate id=""some.message.id"" />) and a missing id, the view helper just returns nothing instead of displaying the id. From what is specified for the i18n API, I would expect to get the ID."
35090,TYPO3.Fluid,Bug,"",Resolved,Should have,base64-encode of URI-transferred serialized objects,Adrian Föder,Adrian Föder,2013-07-30 09:37,"","",2012-03-21,"","",100,2012-03-21 09:49,"","",519800,"",Yes,Git master,"At least Fluid-Widgets add a serialized object to links in order to transfer them across requests.
Maybe it's considerable to base64-encode these serialized objects to avoid problems like the [[FLOW3:Installation_hints#Unexpected-behavior-with-serialized-objects-in-request-arguments|suhosin's null-byte-omission]].

Additional explanation: serialized objects contain NULL bytes if a property of the object is protected."
35295,TYPO3.Fluid,Bug,"",Resolved,Must have,Alphanumeric-Validator fails on umlauts,Georg Ringer,Karsten Dambekalns,2013-01-05 09:30,ViewHelpers,"",2012-12-25,"","",100,2012-03-28 01:45,"","",529700,0.00,Yes,FLOW3 1.0.0,"this is a copy of #35284, 
-------------
The alphanumeric validator fails to validate for umlauts or other non-ascii letters.
-------------

this needs also be changed in @Tx_Extbase_Validation_Validator_AlphanumericValidator@ and then backported

for patch see https://review.typo3.org/#/c/9923/"
35748,TYPO3.Fluid,Feature,"",Resolved,Could have,Add generic data-* attribute,Julian Wachholz,Bastian Waidelich,2013-12-18 10:40,ViewHelpers,"",2012-04-06,"","",100,2012-04-06 10:07,"","",552150,"",Yes,"","All elements in HTML5 can have any number of @data-*@ attributes.
This should be made easier to use than with the @additionalAttributes@ property.

Example:

<pre>
<f:link.action data=""{loading-text: 'loading...'}"" action=""create"">create a new foo</f:link.action>
</pre>
"
35766,TYPO3.Fluid,Feature,"",Rejected,Should have,add custom namespaces in settings.yaml,rottenrice no-lastname-given,"",2014-04-19 12:37,View,"",2012-04-07,"","",0,2012-04-07 08:09,"","",553050,"",No,"","the repeated declaration of your own namespaces in the template files is an unnecessary overhead. with this update you can define custom namespaces in your Settings.yaml.

enhanced/edited TYPO3\Fluid\Core\Parser\TemplateParser:
<pre>
/**
 * Namespace identifiers and their component name prefix (Associative array).
 * @var array
 */
protected $namespaces = array();

/**
 * The FLOW3 settings
 * @var array
 */
protected $settings;

/**
 * Injects the settings and resets the namespace array
 *
 * @param array $settings The settings
 * @return void
 */
public function injectSettings(array $settings) {
	$this->settings = $settings;
	$this->reset();
}

/**
 * Resets the parser to its default values.
 *
 * @return void
 */
protected function reset() {
	$this->namespaces = array();
	if (isset($this->settings['Core']['Parser']['TemplateParser']['namespaces'])) {
		$this->namespaces = $this->settings['Core']['Parser']['TemplateParser']['namespaces'];
	}
}
</pre>

added Settings.yaml in Packages/Framework/TYPO3.Fluid/Configuration (required):
<pre>
TYPO3:
  Fluid:
    Core:
      Parser:
        TemplateParser:
          namespaces:
            f: 'TYPO3\Fluid\ViewHelpers'
</pre>

now each package has the possibility to add custom namespaces in Packages/Application/*.*/Configuration/Settings.yaml (optional)
<pre>
TYPO3:
  Fluid:
    Core:
      Parser:
        TemplateParser:
          namespaces:
            foo: 'my\foo\namespace'
</pre>"
35790,TYPO3.Fluid,Feature,Work Package #45013: Flexible plugin integration (TODO: Reviews),Resolved,Should have, allow f:link.action to operate on parent request,Fernando Arconada,Karsten Dambekalns,2013-05-06 13:35,ViewHelpers,2.0,2012-04-09,"","",100,2012-04-09 06:54,"","",554250,"",No,"","Original bug description:
<pre>
if you use f:link.action inside a widget it generates links to the widget actions and not links to other controllers as expected
</pre>

See below for feature description"
35894,TYPO3.Fluid,Bug,"",Resolved,Must have,"CheckboxViewHelper and RadioViewHelper missing an existence check for formObject, and thus an exception is being thrown",Sebastian Wojtowicz,Sebastian Wojtowicz,2012-06-18 11:38,ViewHelpers,1.1 RC1,2012-04-12,"",0.10,100,2012-04-12 06:08,"","",559300,"",No,Git master,"Scenario:
<pre>
Controller:
    indexAction(FormObject $formObject = NULL){ ... }
Template:
    <f:form ... object=""{formObject}' >
        <f:form.checkbox property=""somePropertyOfFormObject"" value=""yes""/>
        ...
 </pre>

This scenario fails with
<pre>
#1243325768: No value found for key ""TYPO3\Fluid\ViewHelpers\FormViewHelper->formObject""
</pre>


The problem is that in the CheckboxViewHelper and the RadioViewHelper we call @ $this->getPropertyValue()@ which callls @$formObject = $this->viewHelperVariableContainer->get('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject');@ even though we did not check if the formObject exists, so that instead we get thrown an exception.

For example in CheckboxViewHelper.php, Line 80 before we call getPropertyValue() we only check
<pre>
if ($this->isObjectAccessorMode())
</pre>
while all other [InputType]ViewHelper always check (in the getValue() function):
<pre>
if ($this->isObjectAccessorMode() && $this->viewHelperVariableContainer->exists('TYPO3\Fluid\ViewHelpers\FormViewHelper', 'formObject'))
</pre>

So I think that in CheckboxViewHelper, Line 80 and in RadioViewHelper, Line 81 there should also be the same check for the existence of the formObject. Unless someone knows of a better place to inject that bugfix.
"
36014,TYPO3.Fluid,Feature,"",Resolved,Should have,Prepend currency sign,Kilian Hann,"",2012-09-17 06:06,ViewHelpers,"","","","",0,2012-04-13 18:10,"","",565100,"",No,"","Add an option to prepend the currency sign, e.g. @CHF 123.45@"
36207,TYPO3.Fluid,Task,"",Resolved,Should have,Speed up performance in format.currency,Ingo Pfennigstorf,"",2014-02-19 05:36,ViewHelpers,"",2012-04-17,"","",100,2012-04-17 05:37,"","",574750,"",No,"",Related to #34519 setting an empty default value for format.currency speeds this ViewHelper up
36249,TYPO3.Fluid,Feature,"",Rejected,Won't have this time,Add autocomplete property to form input field,Kilian Hann,"",2012-11-14 02:32,"","","","","",0,2012-04-17 16:43,"","",576850,"",Yes,"",Please add the autocomplete property to the input field
36297,TYPO3.Fluid,Bug,"",Resolved,Must have,ValidationResults ViewHelper must always render childnodes,Bastian Waidelich,Bastian Waidelich,2012-04-18 20:37,ViewHelpers,1.1,2012-04-18,"","",100,2012-04-18 09:13,"","",578600,"",No,Git master,The adjustments to the new HTTP implementation in FLOW3 introduced a regression that prevents the child nodes of the ValidationResults ViewHelper from being rendered if no validation errors occurred.
36410,TYPO3.Fluid,Feature,"",New,Should have,Allow templates to send arguments back to layout,Florian Carstens,"",2012-08-13 05:46,ViewHelpers,"",2012-04-21,"","",0,2012-04-21 10:30,"","",583950,"",No,"","Layouts can differ a little on a website from page to page without affecting the whole layout. For example: Some pages contain a sidebar, others not. Or: Each page has it's own background which is set by a body or div container css class. I would like to set these kind of settings by sending arguments to the layout. That could e.g. be realised by extending the layout viewHelper:

<pre>
  <f:layout name=""Master"" arguments=""{cssClass: blueBackground}"" />
</pre>

Of course, I can do this in the controller. But I think this wouldn't be the right place according to the MVC design pattern."
36500,TYPO3.Fluid,Bug,"",Resolved,Must have,Ajax widgets can't be executed,Nicole Cordes,"",2012-05-14 20:38,"","",2012-04-24,"","",100,2012-04-24 04:17,"","",588300,"",No,Git master,Any ajax widget can't be executed because of the missing function setRoutesConfiguration which is called by \TYPO3\FLOW3\Http\RequestHandler->handleRequest.
36559,TYPO3.Fluid,Feature,"",New,Could have,New widget progress bar,Nicole Cordes,"",2012-04-25 09:11,"","",2012-04-25,"","",0,2012-04-25 09:11,"","",591250,"",Yes,"","I developed a new widget which might be interesting to move it to the core. It's an universal progress bar calling a controller action by ajax to load progress.

You can easily use it in your own fluid templates by just adding 

<pre>
<f:widget.progressbar id=""progressbar"" action=""ajax"" message=""1"" messageText=""This text is shown below the progress bar"" arguments=""{itemsToLoad: 10}"" controller=""yourController"" package=""yourPackage"" subpackage=""yourSubpackage"" />
</pre>

For explanation:
* id means the id of the div container the progress bar is insert into
* action is the action to be called from the ajax request
* message indicates if a message under the progress bar should be displayed
* messageText is the default text to show (under the progress bar)
* arguments is an array of arguments passed to the action request
* controller defines the controller the action belongs to, if not set the current one is used
* package and subpackage define the package the controller belongs to, if not set the current ones are used

The actions has to return an json string having to keys:
* value has to be an integer representing the status in percent (with the percent sign)
* messageText is the string added to the message container below the progress bar (if enabled)

If you have any questions just ask me :-)
"
36655,TYPO3.Fluid,Bug,"",New,Should have,Pagination Links,Carsten Bleicker,"",2012-06-23 16:18,Widgets,"",2012-04-27,"","",0,2012-04-27 06:51,"","",596000,"",No,Git master,"TYPO3\Fluid\ViewHelpers\Link\WidgetViewHelper

CSRF Tokens arent generated if ACL matches."
36662,TYPO3.Fluid,Bug,"",Needs Feedback,Should have,Checked state isn't always correct when property is collection,Kevin Ulrich Moschallski,Kevin Ulrich Moschallski,2013-08-14 09:39,ViewHelpers,1.1.1,2012-04-27,"","",0,2012-04-27 09:16,"","",596350,"",No,Git 1.1,The checkboxViewHelper doesn't always set the correct checked state when the property is an collection. I took the mechanism of the selectViewHelper and put it in the checkboxViewHelper.
37095,TYPO3.Fluid,Feature,"",New,Should have,It should be possible to set a different template on a Fluid TemplateView inside an action,Christopher Hlubek,Christopher Hlubek,2012-05-11 07:54,"","",2012-05-11,"","",0,2012-05-11 07:54,"","",617750,"",No,"","Right now it's not possible to decide inside an action which view template should be rendered. Especially if the action itself doesn't have a template file the @canRender()@ method will always return @FALSE@. Inside the @initializeAction@ or @initializeView@ method it's too early / too late to set a different template file and path.

The idea is to always return @TRUE@ in the @canRender@ method and return the @NotFoundView@ in the call to @render@ when no template source could be found."
37387,TYPO3.Fluid,Bug,"",Resolved,Must have,Translate Helper: Arguments replacement is not working for default value,Krzysztof Daniel,Karsten Dambekalns,2012-07-18 06:35,ViewHelpers,1.1 RC2,2012-05-22,"","",100,2012-05-22 04:02,"","",632150,"",No,FLOW3 1.1.0 beta 1,"I have following tag and there is no translation in xliff file yet for key 'something'

<f:translate id=""something"" arguments=""{0: 'test'}"">You haven't created a {0}, yet</f:translate>

Expected behavior would be that it will output:
You haven't created a test, yet

But argument replacement is not working for default message and output is now:
You haven't created a , yet"
37459,TYPO3.Fluid,Bug,"",Closed,Should have,FormViewHelper with GET method and query parameters in action is not usable,Christopher Hlubek,Bastian Waidelich,2012-05-24 06:32,ViewHelpers,"",2012-05-24,"","",0,2012-05-24 06:07,"","",635700,"",No,Git master,"If the form viewhelper is used with method=""GET"" and the action attribute that is built (given with @actionUri@ or using the URI builder) contains query paramters, they will be lost on form submission (http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4).

The form viewhelper should parse query parameters in the action URI and prepend them as hidden fields in the form to pass them to the request that is submitted."
37460,TYPO3.Fluid,Feature,"",Resolved,Should have,TagBuilder should allow access to attribue collection,Christopher Hlubek,Christopher Hlubek,2012-05-26 09:35,Core,1.1 beta 2,2012-05-24,"","",100,2012-05-24 06:18,"","",635750,"",No,"","The TagBuilder should allow access to the attributes as it also allows access to the tag name, tag content, etc.

This is useful to extend and override existing viewhelpers and access the current data in the constructed tag."
37496,TYPO3.Fluid,Feature,"",Closed,Should have,placeholder attribute in textarea-viewhelper,Martin Hummer,"",2013-02-04 05:44,ViewHelpers,"",2012-05-25,"","",0,2012-05-25 16:30,"","",637550,"",No,"","hello,

i just discovered that the placeholder attribute in the textarea viewhelper is missing.
the following code adds the placeholder according to the textfield viewhelper:


<pre>
	/**
	 * Renders the textarea.
	 *
     * @param string $placeholder A string used as a placeholder for the value to enter
     *
	 * @return string
	 * @api
	 */
	public function render($placeholder = NULL) {
		$name = $this->getName();
		$this->registerFieldNameForFormTokenGeneration($name);

		$this->tag->forceClosingTag(TRUE);
		$this->tag->addAttribute('name', $name);
		$this->tag->setContent(htmlspecialchars($this->getValue()));

        if ($placeholder !== NULL) {
            $this->tag->addAttribute('placeholder', $placeholder);
        }

		$this->setErrorClassAttribute();

		return $this->tag->render();
	}
}
</pre>"
37506,TYPO3.Fluid,Feature,"",Closed,Won't have this time,Building up Nested Forms with this ViewHelper,Carsten Bleicker,Bastian Waidelich,2012-06-25 09:17,ViewHelpers,"",2012-05-26,"","",0,2012-05-26 09:58,"","",638050,"",No,"","Just want to know what you think about this viewhelper
f.e. you sould be able to pass one object to <f:form object=""{person} name=""person"">
and inside this form you can display subproperties f.e. personName by passing
and use general forms with single property namespace withoud . because of traversing.
it is possible to use it in unlimited depth by:

<f:form action='update' object=""{person}"" objectName=""person"" >
	<vh:nestedForm name=""personName"" object=""{person.name}"">
		<vh:nestedForm name=""subproperty"" object=""{person.name.supproperty}"">
			<vh:nestedForm name=""anothersubproperty"" object=""{person.name.supproperty.anothersubproperty}"">




Example usage:

#################################################
# Form                                          #
#################################################

<f:form action='update' object=""{person}"" objectName=""person"" >
	
	<vh:nestedForm name=""personName"" object=""{person.name}"">
		
		<fieldset>
			<legend><f:translate id=""person.name"" /></legend>
			<f:render partial=""Model/Fieldset/PersonName/Default"" />
		</fieldset>
		
	</vh:nestedForm>
	
</f:form>




#################################################
# Parial: Model/Fieldset/PersonName/Default     #
# If uses in nestedForm it it reusable anywhere #
#################################################

<label class=""control-label"" for=""firstName""><f:translate id=""personName.firstName"" />:</label>

<!--  No need for person.name.firstName because namespace will be set by nestedForm -->
<f:form.textfield id=""firstName"" property=""firstName"" />














"
37543,TYPO3.Fluid,Bug,"",Closed,Must have,Additional __identity field when using TYPO3.Media,Michel Albers,Bastian Waidelich,2013-08-14 09:38,ViewHelpers,1.1.1,2012-05-28,"",0.50,0,2012-05-28 08:30,"","",639900,"",No,FLOW3 1.1.0 beta 1,"When using a <f:form.upload /> field for uploading a TYPO3.Media Image, FLUID adds a hidden __identity field for the Image which results in an ""__identity mapping is not allowed"" exception when saving the record. Removing the hidden __identity field by deleting 

<pre>
$content .= $this->renderAdditionalIdentityFields();
</pre> 

from FormViewHelper.php on line 127 solves the particular problem. Some further if / else conditions are needed."
37558,TYPO3.Fluid,Task,"",Resolved,Should have,Form.Textfield ViewHelper's placeholder attribute should be (re)moved,Adrian Föder,Karsten Dambekalns,2013-01-25 02:37,ViewHelpers,2.1,2012-05-29,"","",100,2012-05-29 03:44,"","",640650,"",No,"","currently, the @placeholder@ attribute in the Textfield ViewHelper is explicitly enabled: 

<pre>code class=""php"">
	public function render($required = NULL, $type = 'text', $placeholder = NULL) {
		// [...]
		if ($placeholder !== NULL) {
			$this->tag->addAttribute('placeholder', $placeholder);
		}
</code></pre>

For consistency, this part should either be completely removed and settable via @additionalArguments@ or, alternatively, set as @registerTagAttribute()@ in @initializeArguments()@. Of course we need to handle _deprecation_ accordingly.

If you neither agree, than this should at least be reproduced in the textarea ViewHelper."
37619,TYPO3.Fluid,Bug,"",New,Should have,Fatal Error when using variable in name attribute of Section ViewHelper,Sebastian Michaelsen,"",2012-05-30 17:17,ViewHelpers,"",2012-05-30,"","",0,2012-05-30 17:17,"","",643700,"",No,Git master,"I'm experiencing this error with TYPO3 4.6, but from looking at the code I'm pretty sure this is reproducible with FLOW3 as well.

<pre>
<f:section name=""mySection_{type}"">
</pre>

This leads to a Fatal Error:
Call to undefined method Tx_Fluid_Core_Parser_SyntaxTree_RootNode::getText() in [...]/typo3/sysext/fluid/Classes/ViewHelpers/SectionViewHelper.php on line 90

I was playing around a bit but I did not find a way to fix this."
37671,TYPO3.Fluid,Bug,"",Resolved,Should have,ViewHelper exceptions should not be caught in testing context,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-06-12 10:37,Core,1.1 RC1,2012-06-01,"","",100,2012-06-01 04:57,"","",646300,"",No,Git master,""
38130,TYPO3.Fluid,Feature,"",New,Should have,Checkboxes and multiple select fields should have an assignable default value,Jost Baron,"",2012-06-17 03:54,"","",2012-06-17,"","",0,2012-06-17 03:54,"","",669100,"",No,"","Currently, when a checkbox is left unchecked, an empty string is submitted for its value. But sometimes I'd like to define that value myself, or don't want to get anything at all.

If this is accepted, I'd volunteer to implement it myself."
38147,TYPO3.Fluid,Feature,"",Closed,Should have,Suggested addition to SelectViewHelper - allowing prepend/append of child content to rendered option tag list ,Claus Due,Claus Due,2012-12-10 07:16,ViewHelpers,2.0 beta 1,2011-05-03,"","",0,2012-06-18 05:42,"","",669950,"",No,"","This is a simple but functional and useful addition to the SelectViewHelper. It adds two new boolean attributes: prependContent and appendContent. Setting one of these to TRUE (with preference for prependContent if both are TRUE) makes the ViewHelper either append of prepend the innerHTML.

It also removes the REQUIRED annotation from the $options tag - explanation of why this is good follows.

<pre>
<f:form.select prependContent=""TRUE"">
    <option value=""-1"">I am the first value</option>
</f:form.select>
// outputs...
<select ...>
    <option value=""-1"">I am the first value</option>
    <option...> // all further options
</select>
</pre>

Of course appendContent=TRUE places the first option below the others, not above.

Set to ""should have"" (but maybe should be ""must have"") because the select ViewHelper sorely lacks customization options (such as prefix to labels, special classes for special options etc) and this method allows 100% control over how options are rendered by simply leaving out the ""options"" argument and manually rendering the content of the select tag. Without this patch the only method of doing this is through Javascript which is complete overkill.

The logic should be solid enough to advocate the change of the options argument. It should make -complete- sense to the developer that, if options are left out, they either need to be supplied as an argument as per the Fluid standard - or defined as the content of the tag as per the HTML standard.

Patch performed on 4.5.2 sysext fluid source."
38369,TYPO3.Fluid,Bug,"",New,Must have,Resource ViewHelpers should not fall back to request package,Bastian Waidelich,"",2012-06-25 09:55,View,"",2012-06-25,"","",0,2012-06-25 09:47,"","",681050,"",No,Git 1.1,"Currently the @f:uri.resource@ ViewHelper uses the package key of the current request to determine the absolute resource path, if no package is specified.

The resource interceptor that replaces links to assets by the resource viewhelper, so:
<pre>
<code class=""xml"">
<link rel=""stylesheet"" href=""../../../Public/Stylesheets/SomeFile.css"" media=""all"" />
</code>
</pre>
is (internally) converted into
<pre>
<code class=""xml"">
<link rel=""stylesheet"" href=""{f:uri.resource(resource: 'Stylesheets/SomeFile.css')}"" media=""all"" />
</code>
</pre>

So the resource ViewHelper uses the *current* package key to resolve the path to: @Current/Package/Resources/Public/Stylesheets/SomeFile.css@.
While this mostly works for FLOW3, in Phoenix the current package is usually *TYPO3.TYPO3* and resources are located in some site package.

Therefore the TypoScript Fluid renderer sets the requests package key from the Fluid template path:
<pre>
<code class=""php"">
if (strpos($templatePath, 'resource://') === 0) {
	$tmp = substr($templatePath, 11);
	$tmp2 = explode('/', $tmp);

	$fluidTemplate->getRequest()->setControllerPackageKey(array_shift(($tmp2)));
}
</code>
</pre>

This has the side effect, that all links in the Fluid template now point to the site package instead of the FrontendNode controller of the TYPO3 package!


I didn't set the category to ViewHelpers because IMO this should be fixed in the view: We probably need something like @resourcesPackage@ or similar that should be used by the resource ViewHelper instead of the requests package key."
38592,TYPO3.Fluid,Bug,"",Resolved,Must have,attributes with dashes lead to wrong exception message,Adrian Föder,Karsten Dambekalns,2012-07-18 04:46,ViewHelpers,1.1 RC2,2012-07-03,"","",100,2012-07-03 11:47,"","",692050,"",No,(any),"consider the following Fluid tag

<pre><code class=""html"">
<f:if condition=""1"" data-bar=""foo"">something</f:if>
</code></pre>

leads to the exception <pre>#1224485838: You closed a templating tag which you never opened!</pre>

Removing the @data-bar@ attribute also makes the exception disappear."
38871,TYPO3.Fluid,Bug,"",Closed,Should have,Generating links within script tags gives invalid documents,Jost Baron,"",2013-02-01 10:11,ViewHelpers,"",2012-07-11,"","",0,2012-07-11 07:40,"","",705650,"",No,(any),"When generating a link in a fluid template, which is enclosed by script-Tags to a given format, the ampersands are not escaped.

So
<script type=""text/javascript"">
    var link = '{f:uri.action(action: 'someAction')}';
</script>
generates a link like this:

index.php?id=123&tx_ext_pi1[controller]=SomeController&tx_ext_pi1[action]=someAction&cHash=foobar

This is invalid XHTML (even inside a script, according to the W3C-Validator), as the ampersands are literals. The same thing works fine outside of script tags."
38873,TYPO3.Fluid,Bug,"",Resolved,Should have,Remove eval from StandaloneViewTest,Christian Müller,Christian Müller,2012-07-12 06:35,"","",2012-07-11,"","",100,2012-07-11 07:55,"","",705750,"",No,Git 1.2 (master),StandaloneViewTest uses eval to create a class that inherits from StandaloneView to override some things. This doesn't work properly with proxy classes and is evil anyway!
39214,TYPO3.Fluid,Feature,"",Closed,Should have,The textfield viewhelper should have an attribute 'step' to allow decimal numbers,Thomas Kirst,Bastian Waidelich,2012-07-25 08:40,ViewHelpers,2.0 beta 1,2012-07-24,"","",0,2012-07-24 07:05,"","",722550,"",Yes,"","When using the textfield viewhelper to render a number field it will only accept integer values and no decimals. It is preferable to use the input field of type number which then tells iOS browsers to pull up the number keypad instead of the normal letters keypad. Then it must be possible to enter decimal values, however the default setting of this field is that it just takes integers. The decimal steps can be configured by the 'step' attribute and if you set it on 'any' every decimal number can be entered by the user.

I created a patch file which adds the needed line to the source.

Could anybody please add this patch? Thanks a lot!

Sample screen:

!number_keypad_sample.png!

[[textfield_stepAny_patch.txt]]"
39255,TYPO3.Fluid,Task,"",Resolved,Should have,reflectionService property in AbstractViewHelper should be protected instead of private,Aske Ertmann,"",2012-08-07 11:35,Core,2.0 beta 1,2012-07-25,"","",100,2012-07-25 09:17,"","",724550,"",Yes,"","The property ""reflectionService"" in the AbstractViewHelper should be protected instead of private to allow usage of the reflection service in view helpers without having to inject again with another property name.

Needed here: https://review.typo3.org/#/c/9695 - see general comments and comments here https://review.typo3.org/#/c/9695/2/Classes/ViewHelpers/Widget/CommentsViewHelper.php"
39410,TYPO3.Fluid,Feature,"",Resolved,Should have,Implement reserved variables returning their intended representation,Adrian Föder,Adrian Föder,2012-08-09 10:35,Core,2.0 beta 1,2012-07-31,"","",100,2012-07-31 04:58,"","",732250,"",Yes,"","currently, in Fluid there are reserved variables anyway, like true, false, on, off etc.
Enable accessing these values with {true}, {false} etc. to retrieve their intended value they're representing."
39428,TYPO3.Fluid,Bug,"",Resolved,Must have,Layout and partial identifiers should be independent of current controller name,Alexander Berl,Alexander Berl,2014-08-27 06:32,Core,1.1.1,2012-07-31,"","",100,2012-07-31 13:12,"","",733150,"",No,FLOW3 1.1.0 rc 2,"Currently, all templates get an identifier made up of package/subpackage, controller, prefix and unique hash.
This leads to all layouts and partials being compiled and cached once for each controller they are used from, even though the contents is independant and hence just a duplicate.

I suggest adding the controller name as part of the prefix in getTemplateIdentifier() only and stripping it from createIdentifierForFile()."
39456,TYPO3.Fluid,Bug,"",Resolved,Must have,Action URI of the form ViewHelper is not reset,Bastian Waidelich,Bastian Waidelich,2012-08-07 11:35,ViewHelpers,1.1,2012-08-01,"","",100,2012-08-01 12:33,"","",734550,"",No,Git 1.1,"The Form ViewHelper stores the action URI attribute for performance reasons.
BUt because instances of ViewHelpers are reused, this value needs to be reset."
39604,TYPO3.Fluid,Bug,"",Resolved,Must have,TemplateParser unquoteString does not trim escaped quotes correctly,Alexander Berl,Alexander Berl,2012-08-10 03:35,Core,"",2012-08-08,"","",100,2012-08-07 19:50,"","",741950,"",No,FLOW3 1.1.0 rc 2,"Assume the following case:
<code>
<f:alias map=""{foo: '\'bar\''}"">
  {foo}
</f:alias>
</code>

*Epected:*
Output 'bar' (including the quotes)

*Actual:*
Output 'bar\

*Cause:*
unquoteString uses trim() to strip starting and ending quotes, however trim is not restricted to trimming only one char on both sides, hence removes both trailing single quotes from the input string, leaving ""\'bar\"" to be unescaped.

*Solution:*
preg_replace should be used instead with a non-repeating pattern, e.g. <code>preg_replace('/(^\'|\'$)/', '', $quotedValue)</code>"
39682,TYPO3.Fluid,Feature,"",Rejected,Could have,Disregegard { as Fluid variable when followed by a white space,Adrian Föder,"",2013-07-17 06:05,Core,"",2012-08-10,"","",0,2012-08-10 05:26,"","",745800,"",No,"","This is a reopen of an issue I had long time ago, so, long story short:

There's still the need for some CDATA wrapping when it comes to Javascript object notation, ie curly braces in JavaScript sections.

A great advantage, without much drawback, would be to disregard occurrences of braces that are followed by a white space, a tab or a newline. this means, 

<pre>
{f:this(is: 'a valid, regarded fluid variable'}
{so.is.thisVariant}
whereas
{ that: 'is an open brace followed by a whitespace, hence not a fluid variable'}
</pre>

this maybe could be extended with every character not being \w or so, resulting in
<pre>
{""alsoThis"": ""won't be fluid""}
</pre>

Forcing Fluid syntax do directly follow the opening paranthese is legit in my opinion, you can still do
<pre>
{f:if(
  condition: 'thisthat',
  then: 'foo',
  else: 'bar'
)};
</pre>

in MySQL, for example, it's also required to make an open bracket follow the function name immediately: @MAX(  5,  2)@ works, while @MAX (5,2)@ won't.
"
39870,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow configuration of template path fallbacks,Tymoteusz Motylewski,Bastian Waidelich,2013-08-07 09:35,View,"",2012-08-16,"","",100,2012-08-16 14:00,"","",755000,"",No,"","It would be great if you can configure alternative paths for templates. It would be quite handy when you have to extend existing package templates.

Right now it is only possible to set one templateRootPath for package. So even if you want to change only one template file, you have to copy all templates to new location. 

This is a placeholder ticket reflecting ticked placed in Extbase."
39886,TYPO3.Fluid,Feature,"",Resolved,Should have,"f:format.json: Make tag ""escaping"" default",Adrian Föder,Adrian Föder,2012-08-30 11:57,ViewHelpers,2.0 beta 1,2012-08-17,"","",100,2012-08-17 06:18,"","",755800,"",Yes,"","Currently, the JSON ViewHelper will put greater-and-lower-than-characters through as they are, which might be dangerous in ViewHelper, ie HTML context."
39936,TYPO3.Fluid,Feature,"",New,Should have,registerTagAttribute should handle default values,Stefan Neufeind,"",2013-01-21 17:29,ViewHelpers,"",2012-08-18,"","",0,2012-08-18 14:52,"","",758250,"",No,"","The function registerTagAttribute is used to register tags and can't handle default values.

This is a follow-up from a merged change in extbase-fluid.
Verified it applys to FLOW3-fluid as well: TYPO3.Fluid/Classes/Core/ViewHelper/AbstractTagBasedViewHelper.php"
39990,TYPO3.Fluid,Bug,"",New,Should have,Same form twice in one template: hidden fields for empty values are only rendered once,Marc Bastian Heinrichs,"",2012-08-20 05:21,Core,"",2012-08-20,"","",0,2012-08-20 05:21,"","",760950,"",No,(any),"Noticed this in fluid extension and think this is also relevant for the Fluid package.

If you use nearly the same form twice in one template, the hidden fields for empty values are only rendered for the upper form.

In Tx_Fluid_ViewHelpers_Form_AbstractFormFieldViewHelper::renderHiddenFieldForEmptyValue the Tx_Fluid_ViewHelpers_FormViewHelper is checked and this also contains the $hiddenFieldNames of the upper form.
"
40064,TYPO3.Fluid,Bug,"",New,Must have,Multiselect is not getting persisted,Christoph Gross,"",2014-03-27 17:12,ViewHelpers,"",2012-08-22,"","",0,2012-08-22 10:55,"","",764650,"",No,Git master,"I have a statement and want to assign multiple users to it using a multiselect box. The mulitselect box displays already selected users(selected by a workaround) correctly, but fails to change the selected users, they remain unchanged.

I attached a screenshot of the page.

The template code:
<pre>
<f:form controller=""Statement"" arguments=""{statement: statement}"" action=""updateUsers"" name=""Statement"" object=""{statement}"">
  <f:form.select property=""users"" options=""{users}"" optionLabelField=""displayName"" optionValueField=""uid"" multiple=""5"" />
  ...
</pre>

The statement controller:
<pre>
/**
	 * STEP 2: Select users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @return void
	 */
	public function selectUsersAction(Statement $statement) {
		$this -> view -> assign('statement', $statement);
		$this -> view -> assign('users', $this -> userRepository -> findAll());
	}

	/**
	 * STEP 2: Update selected users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @param array $selectedUsers
	 * @return void
	 */
	public function updateUsersAction(Statement $statement) {
		$this -> statementRepository -> update($statement);
		$this -> addFlashMessage('Updated users');
		$this -> redirect('selectUsers', 'Statement', NULL, array('statement' => $statement));
	}
</pre>

The statement model:
<pre>
/**
 * A Statement
 *
 * @FLOW3\Entity
 */
class Statement {

	/**
	 * The products
	 * @var \Doctrine\Common\Collections\Collection<\Drinkaccounting\Domain\Model\Product>
	 * @ORM\ManyToMany
	 */
	protected $products;
...
</pre>

*My workaround to select users without using the property attribute:*
This workaround fails with an Exception if you try to update with no item selected, because then flow3 thinks selectedUsers is a string instead of an array. I haven't figured out a way to read and change the content of an argument in the initializeUpdateUsersAction. Anyway this can't be a final solution.

The template:
<pre>
<f:form controller=""Statement"" arguments=""{statement: statement, selectedUsers: selectedUsers}"" action=""updateUsers"" name=""Statement"" object=""{statement}"">	
		
		
		<f:form.select name=""selectedUsers"" value=""{statement.users}"" options=""{users}"" optionLabelField=""displayName"" multiple=""20"" />
</pre>

The statement controller:
<pre>
/**
	 * STEP 2: Select users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @return void
	 */
	public function selectUsersAction(Statement $statement) {
		$this -> view -> assign('statement', $statement);
		$this -> view -> assign('users', $this -> userRepository -> findAll());
	}

	/**
	 * STEP 2: Update selected users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @param array $selectedUsers
	 * @return void
	 */
	public function updateUsersAction(Statement $statement, $selectedUsers) {
		// Clear users
		$statement -> clearUsers();
		// Get user objects by identifier
		foreach ($selectedUsers as $userID) {
			$user = $this -> persistenceManager -> getObjectByIdentifier($userID, '\Drinkaccounting\Domain\Model\User');
			$statement -> addUser($user);
		}
		$this -> statementRepository -> update($statement);
		$this -> addFlashMessage('Updated users');
		$this -> redirect('selectUsers', 'Statement', NULL, array('statement' => $statement));
	}
</pre>
"
40081,TYPO3.Fluid,Feature,"",New,Should have,Allow assigned variables as keys in arrays,Viktor Livakivskyi,"",2013-10-02 03:38,"","",2012-08-23,"","",0,2012-08-23 09:00,"","",765500,"",No,"","It was asked couple of times in mailing lists, e.g. here: http://lists.typo3.org/pipermail/typo3-project-typo3v4mvc/2012-January/011389.html
<pre>
is something like this possible with fluid?

Controller:

$this->view->assign('value', $value);
$this->view->assign('keyName', $keyName);


View:

arguments=""{{keyName} : value, foo: bar}""


IIRC This does not work. Any workarounds?
</pre>

This is especially needed, when creating links, like index.php?id=5?tx_myext[8][edit]=3, because I need to pass dynamically plugin instance id to GET via 'additionalParams' of 'f:link.page' Fluid viewHelper."
40338,TYPO3.Fluid,Feature,"",Closed,Could have,Make possible to combine conditions with f:if,Viktor Livakivskyi,Bastian Waidelich,2012-10-16 09:22,Core,"",2012-08-28,"","",0,2012-08-28 07:00,"","",776450,"",No,"","Hello.

It would be really nice to have a possibility to use OR/AND logic in f:if conditions. Right now it may be solved by nested f:if viewHelpers, which brings more structural complicance to the template's code.

Regards."
40828,TYPO3.Fluid,Task,"",Resolved,Should have,Enhance Exception: #1224479063: Duplicate variable declarations! (More information) ,Kay Strobach,Karsten Dambekalns,2012-09-13 15:35,Core,1.1.1,2012-09-11,"","",100,2012-09-11 12:14,"","",799900,"",No,"",The Exception '#1224479063: Duplicate variable declarations! (More information)' Information misses the variablename which is double defined :D - would be nice to get this information instantly
40998,TYPO3.Fluid,Bug,"",Under Review,Should have,Missing parent request namespaces in form field name prefix,Karsten Dambekalns,Sebastian Kurfuerst,2013-08-14 09:39,ViewHelpers,1.1.1,2012-09-17,"","",0,2012-09-17 06:11,"","",808000,"",No,Git 1.1,[add nice description here]
41008,TYPO3.Fluid,Bug,"",Rejected,Should have,f:format.currency should use trim ,Cedric Ziel,"",2013-11-13 22:04,ViewHelpers,"",2012-09-17,"","",0,2012-09-17 11:22,"","",808450,"",No,(any),"Hello; if you use an IDE and use their reformat feature, you have the problem that viewhelpers get splitted up into several lines just like in the example:

<pre>
<f:format.currency currencySign=""?"" decimalSeparator="","" thousandsSeparator=""."">
   {object.amount}
</f:format.currency>
</pre>

This results in non-supported chars for format_number.

The Viewhelper therefore should trim before calling number_format:

<pre>
number_format(trim($stringToFormat), 2, $decimalSeparator, $thousandsSeparator);
</pre>"
41439,TYPO3.Fluid,Feature,"",Rejected,Should have,"Argument to add an active-state class to ""f:link.action""",Michael Gerdemann,Bastian Waidelich,2012-12-12 08:36,ViewHelpers,"",2012-09-28,"","",0,2012-09-28 03:21,"","",829250,"",No,"","If the rendered template exactly matches the action, it would be great if you would have the ability to automatically add a ""active"" class."
42397,TYPO3.Fluid,Feature,"",New,Should have,Missing viewhelper for general links,Arek van Schaijk,"",2012-10-25 13:20,"","",2012-10-25,"","",0,2012-10-25 13:20,"","",874600,"",No,"",By using the TCA link wizard the editor can set a internal/external and mailto link. I have to detect in fluid wich type of link is set before I can choose the right viewhelper now. I understand that I can create my own viewhelper for rendering a multi type link but isnt that basic functionality? So I suggest to include some viewhelper wich can render general links..
42474,TYPO3.Fluid,Bug,"",Closed,Should have,Possible bug with short form conditions in viewhelper tags,Thomas Hempel,Bastian Waidelich,2012-10-30 09:50,ViewHelpers,"",2012-10-29,"","",0,2012-10-29 06:58,"","",878350,"",No,FLOW3 1.1.0,"Hi,

I'm not entirely sure, if this is a bug or if do something wrong. Some more people looked at it and considered it as a bug. There fore I'm filing this here right now.

The following statement can be found in my template:

<pre>
<f:form.textfield name=""{foo}"" property=""{bar}"" {f:if(condition:'{disabled}', then:'disabled=""disabled""')} />
</pre>

I would expect a textfield with attribute name and a value. It might also have the attribute set. But what I actually get is this:

<pre>
<f:form.textfield name=""firstname"" property=""firstname"" disabled=""disabled"" />
</pre>
(With or without the disabled=""disabled"")

Am I doing it wrong or is this a bug which should be investigated more?

"
42475,TYPO3.Fluid,Bug,"",Closed,Should have,NotEmpty Validator does not work with arrays and objects,Ingo Pfennigstorf,Ingo Pfennigstorf,2012-10-29 08:19,"","",2012-10-29,"","",0,2012-10-29 07:07,"","",878400,"",No,(any),See #40683
42743,TYPO3.Fluid,Task,"",New,Should have,Remove inline style for hidden form fields,Nicole Cordes,"",2012-11-06 17:09,"","",2012-11-06,"","",0,2012-11-06 17:09,"","",891400,"",No,"","In Classes / TYPO3 / Fluid / ViewHelpers / FormViewHelper.php the hidden fieldsare wraped in an own div container which is hidden by inline style ""display: none"". There was a discussion if we should remove this wrapper in the TYPO3 Extbase team as someone mentioned inline styles are against some barrier free rules."
42746,TYPO3.Fluid,Bug,"",Resolved,Should have,Functional WidgetTest is broken since URI bugfix,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:27,"",2.0 beta 1,2012-11-07,"","",100,2012-11-07 03:57,"","",891550,"",No,Git 1.2 (master),"The fix for #42511 broke the functional WidgetTest in Fluid, because that relied on ""broken"" uris being accepted."
42947,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,TextareaViewHelper is missing required attribute for html5,Dominic Garms,Adrian Föder,2015-04-01 04:38,ViewHelpers,"",2012-11-14,"","",0,2012-11-14 02:13,"","",901400,"",No,FLOW3 1.1.0,"Hi,

the required attribute is missing in the TextareaViewHelper, which is important for client-side validation for modern browsers / and polyfill fallbacks if using webshim libs.

Would be great to have,

Regards,
Dominic"
43071,TYPO3.Fluid,Task,"",New,Should have,Remove TOKENS for adding fallback teplates in B,Marc Bastian Heinrichs,"",2012-11-18 08:22,"","",2012-11-18,"","",0,2012-11-18 08:19,"","",907600,"",No,"",""
43072,TYPO3.Fluid,Task,"",New,Should have,Remove TOKENS for adding templates fallback in Backporter,Marc Bastian Heinrichs,"",2012-11-18 08:20,View,"",2012-11-18,"","",0,2012-11-18 08:20,"","",907650,"",No,"",""
43121,TYPO3.Fluid,Bug,"",Resolved,Should have,f:link.email wrong example in documentation,Tomas Norre Mikkelsen,Bastian Waidelich,2012-12-12 02:30,"",2.0 beta 1,2012-11-19,"","",100,2012-11-19 16:18,"","",910100,"",No,(any),"Hi,

Found and error in the documentation [1], but i don't know this is the right place to report it. 

The documentation example on f:email.link says:
<f:link.email email=""foo@bar.tld"">some custom content</f:emaillink>

it should be:
<f:link.email email=""foo@bar.tld"">some custom content</f:link.email>


[1] http://flow.typo3.org/documentation/guide/partv/fluidviewhelperreference.html#f-link-action"
43200,TYPO3.Fluid,Feature,"",Resolved,Must have,Allow ResourceViewHelper to accept resource:// paths,Adrian Föder,Adrian Föder,2012-12-12 06:17,ViewHelpers,2.0 beta 1,2012-11-21,"","",100,2012-11-21 10:21,"","",914050,"",No,"","with I92dccba6b5acd623ff33eb538e62d0682f00b95e / https://review.typo3.org/#/c/13647/, the @uri@ argument of the resource ViewHelper was removed. However, it turned out that there is still the need of a way to use @resource://...@ uris for pointing to resources.

Talking on IRC with Karsten and Aske, we said the already present @path@ argument should be extended to accept also @resource://..@ uris."
43346,TYPO3.Fluid,Feature,"",Under Review,Should have,Allow property mapping configuration via template,Karsten Dambekalns,Karsten Dambekalns,2013-12-16 04:14,ViewHelpers,2.1,2012-11-27,"","",0,2012-11-27 07:45,"","",921300,"",No,"","The use case of allowing the mapping of dynamically generated fields in forms is quite common. Instead of having to use the full-scale PHP API for that, a simple configuration directly in the form would be nice."
43356,TYPO3.Fluid,Feature,"",Resolved,Should have,Allow Fluid arrays only in ViewHelper arguments,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-12-07 04:35,Core,"",2012-11-27,"","",100,2012-11-27 11:53,"","",921800,"",No,"","Allow Fluid arrays only in ViewHelper arguments

The following proposal would greatly enhance JavaScript compatibility:

Fluid Arrays are a subset of the JavaScript object syntax, making it
hard to work with them in mixed HTML/JavaScript documents. For example
before this change, the following JavaScript Object was parsed by Fluid:

	var uris = {
	  endPoint1: '{f:uri.action(?)}',
	  endPoint2: '{f:uri.action(?)}',
	};

Before this change, the above snippet resulted in the following template, as the generated array was casted to a string:

	var uris = Array

With this change, Fluid only parses arrays which are used inside
ViewHelper arguments, such that an array inside normal text is not
converted anymore.

h3. Breaking Change

This change is only breaking in very rare cases where one relied on
the inner contents of the ViewHelper being an array, f.e. if one used
the debug ViewHelper as follows:

	<f:debug>{key1: 'value1', key2: 'value2'}</f:debug>

? or if anybody wrote custom ViewHelpers which use this convention.

Relying on that would be very fragile anyways, as the insertion of a
single space character before the opening curly bracket or after the
closing one would cast the array back to a string.

ViewHelpers which were written like this should be re-written to take
the array as ViewHelper argument:

	<f:debug value=""{key1: 'value1', key2: 'value2'}"" />

"
43457,TYPO3.Fluid,Feature,"",Closed,Should have,Cacheable partials,Bastian Waidelich,Bastian Waidelich,2013-05-07 12:44,View,"",2012-11-29,"","",0,2012-11-29 10:59,"","",926850,"",No,"","Idea: add a new argument to the *render* ViewHelper that allows to cache a partial:
<pre>
<code class=""html"">
  <f:render partial=""SomePartial"" cache=""true"" />
</code>
</pre>

The cache identifier should be created based on a combination of the unique partial identifier & it's arguments.

*Note:* Sections could be cacheable, too"
43579,TYPO3.Fluid,Bug,"",Resolved,Should have,"Layout ViewHelper says name attribute is optional, but makes it required",Henjo Hoeksma,Rens Admiraal,2012-12-12 03:18,ViewHelpers,2.0 beta 1,2012-12-04,"","",100,2012-12-04 07:20,"","",932850,"",No,Git 1.2 (master),""
44140,TYPO3.Fluid,Bug,"",Resolved,Should have,Unlucky JavaScript syntax can break inline tags,Aske Ertmann,"",2014-04-03 07:29,ViewHelpers,"",2012-12-20,"","",0,2012-12-19 18:37,"","",960650,"",No,Git master,"After troubleshooting a problem with econic, we have found an issue that can break the parsing of inline tags. The problem originated from using JavaScript in a template, which broke all inline view helpers after the JavaScript. After boiling down to the core problem, it seems that it doesn't have anything to do with the JavaScript itself but instead using {} and indentation.

The original issue source: http://pastebin.com/pkCjwUHd

Snippets for reproducing the problem:
https://gist.github.com/4341615
https://gist.github.com/4341668

In my case I needed at least 16 tabs or 16 spaces for it to break, but econic only needed 13.

The result in both cases is:
{collection -> f:count()}
{f:count(subject: collection)}
0"
44234,TYPO3.Fluid,Bug,"",Under Review,Should have,selectViewHelper's sorting does not respect locale collation,Anja Leichsenring,"",2014-07-31 11:15,ViewHelpers,2.1,2012-12-27,"","",0,2012-12-27 08:47,"","",965300,"",No,Git master,"extbase fluid goes fixing this bug (find the issue at http://forge.typo3.org/issues/43445), this should be the same for Package Fluid."
44235,TYPO3.Fluid,Feature,"",Resolved,Should have,prependOption for SelectViewHelper,Anja Leichsenring,Bastian Waidelich,2013-03-07 05:36,ViewHelpers,2.1,2012-12-27,"","",100,2012-12-27 09:20,"","",965350,"",No,"","There is a continous demand for prepending the options list of a select box with a kind of 'empty' option.
Extbase fluid aims to provide this feature, find the ticket here: http://forge.typo3.org/issues/26595"
44250,TYPO3.Fluid,Bug,"",Resolved,Must have,Broken paginator widget - explicit definition of action-argument is required,Martin Brüggemann,Karsten Dambekalns,2013-01-28 05:28,Widgets,2.0,2012-12-29,"","",100,2012-12-29 09:23,"","",966100,"",No,Flow 2.0.0 beta 1,"Some changes in TYPO3.Flow and the UriBuilder require to explicitly define an action when building an Uri. The paginator widget hasn't been modified to this new requirement and fails to work like before. The error message looks like this:

<pre>
TYPO3_Fluid_ViewHelpers_Widget_LinkViewHelper_Original.php: The URI Builder could not build a URI linking to an action controller because no action name was specified. Please check the stack trace to see which code or template was requesting the link and check the arguments passed to the URI Builder.
</pre>"
