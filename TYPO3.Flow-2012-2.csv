#,Project,Tracker,Parent task,Status,Priority,Subject,Author,Assigned To,Updated,Category,Target version,Start date,Due date,Estimated time,% Done,Created,Story points,Velocity based estimate,Position,Remaining (hours),Affected Flow version,Description
39439,TYPO3.Flow,Bug,"",Resolved,Must have,PHP Session lifetime,Joachim Mathes,Robert Lemke,2012-12-12 02:40,Session,2.0 beta 1,2012-08-01,"","",100,2012-08-01 05:52,"","",733700,"",FLOW3 1.0.0,"Hello Robert,

as discussed on the phone, there is an issue with FLOW3's session lifetime. FLOW3 uses the PHP Session, by default. Thus, session behaviour is influenced by the @php.ini@ configuration. Therefore, the session garbage collector removes sessions every 24 minutes (based on some probability parameters). And it seems, that up to now @TYPO3.FLOW3.session.inactivityTimeout@ doesn't set the @session.gc_maxlifetime@ of PHP to make longer session lifetimes possible.

Best regards
Joachim"
39445,TYPO3.Flow,Bug,"",Resolved,Must have,PropertyMapper chokes on Objects that are already converted inside an collection,Marc Neuhaus,Marc Neuhaus,2013-04-02 16:30,Property,2.0 beta 1,2012-12-25,"","",100,2012-08-01 08:06,"","",734000,0.00,Git 1.2 (master),"The PropertyMapper still chokes on objects which are already converted if it's inside an collection/array.

The PropertyMapper should skip the mapping if the source is already an instance of the target."
39456,TYPO3.Fluid,Bug,"",Resolved,Must have,Action URI of the form ViewHelper is not reset,Bastian Waidelich,Bastian Waidelich,2012-08-07 11:35,ViewHelpers,1.1,2012-08-01,"","",100,2012-08-01 12:33,"","",734550,"",Git 1.1,"The Form ViewHelper stores the action URI attribute for performance reasons.
BUt because instances of ViewHelpers are reused, this value needs to be reset."
39564,TYPO3.Eel,Feature,"",Resolved,Should have,Eel Parser RegEx should support quoted strings containing curly brackets,Alexander Berl,Alexander Berl,2012-08-07 06:45,"","",2012-08-07,"","",0,2012-08-06 18:54,"","",739950,"","","Currently, the eel parser regex doesn't recognize expressions like the following as valid:
<code>""some {$context->unwrap()} string with 'quoted stuff'""</code>

This is because the regex /^\${([^}]*)}$/ stops on the first occurence of a closing curly bracket ""}""."
39596,TYPO3.Eel,Bug,"",Resolved,Must have,Context unwrap of nested array with Context does not work,Christopher Hlubek,Christopher Hlubek,2012-08-09 07:21,"","",2012-08-07,"","",100,2012-08-07 10:53,"","",741550,"","","If a Context object is nested inside an array, the unwrapping of the pure value does not work as expected."
39599,TYPO3.Flow,Task,"",Resolved,Should have,Handle errors in subprocesses properly,Karsten Dambekalns,Christian Jul Jensen,2012-09-11 09:35,Reflection,2.0 beta 1,2012-08-07,"","",100,2012-08-07 11:45,"","",741700,"","","To be able to properly handle missing class dependencies in ClassReflection a ClassLoader should be added to end of the ClassLoader chain that throws an exception if it's reached, meaning the class couldn't be loaded.

Make executeCommand throw an exception on errors, rather than just echo any command output collected."
39604,TYPO3.Fluid,Bug,"",Resolved,Must have,TemplateParser unquoteString does not trim escaped quotes correctly,Alexander Berl,Alexander Berl,2012-08-10 03:35,Core,"",2012-08-08,"","",100,2012-08-07 19:50,"","",741950,"",FLOW3 1.1.0 rc 2,"Assume the following case:
<code>
<f:alias map=""{foo: '\'bar\''}"">
  {foo}
</f:alias>
</code>

*Epected:*
Output 'bar' (including the quotes)

*Actual:*
Output 'bar\

*Cause:*
unquoteString uses trim() to strip starting and ending quotes, however trim is not restricted to trimming only one char on both sides, hence removes both trailing single quotes from the input string, leaving ""\'bar\"" to be unescaped.

*Solution:*
preg_replace should be used instead with a non-repeating pattern, e.g. <code>preg_replace('/(^\'|\'$)/', '', $quotedValue)</code>"
39609,TYPO3.Flow,Feature,"",Accepted,Should have,Migration Version,Peter Russ,Karsten Dambekalns,2013-05-21 07:28,- Migrations -,"",2012-08-08,"",1.00,50,2012-08-08 04:06,"","",742200,"","","For CD/CI it would be helpful if doctrine cli controller would report the current version of migration.

We've changed doctrine:migrationversion that way that if no version is provided the action will report current migration version.
By this it is possible to decide on script level if migration is required or not.

Find patch attached.

"
39647,TYPO3.Flow,Bug,"",Closed,-- undefined --,TYPO3\FLOW3\Error\Exception thrown in file ErrorHandler.php,Kay Strobach,"",2012-08-09 10:00,- Error Handler Report -,"",2012-08-09,"","",0,2012-08-09 09:05,"","",744050,"",FLOW3 1.1.0 rc 2,"Hello Guys,

using FLOW3 on Windows seems to be impossible :(

Regards
Kay


<pre>
Warning: symlink(): Cannot create symlink, error code(1314) in D:\devenv\mowesII\www\flow3\Data\Temporary\Development\Cache\Code\FLOW3_Object_Classes\TYPO3_FLOW3_Resource_Publishing_FileSystemPublishingTarget_Original.php line 116
21 TYPO3\FLOW3\Error\ErrorHandler::handleError(2, ""symlink(): Cannot create symlink, error code(1314)"", ""D:\devenv\mowesII\www\flow3\Data\Temporary\Develop?Publishing_FileSystemPublishingTarget_Original.php"", 116, array)

20 symlink(""D:/devenv/mowesII/www/flow3/Packages/Framework/TYPO3.FLOW3/Resources/Public"", ""D:/devenv/mowesII/www/flow3/Web/_Resources/Static/Packages/TYPO3.FLOW3"")

19 TYPO3\FLOW3\Resource\Publishing\FileSystemPublishingTarget_Original::publishStaticResources(""D:/devenv/mowesII/www/flow3/Packages/Framework/TYPO3.FLOW3/Resources/Public/"", ""Packages/TYPO3.FLOW3/"")

18 TYPO3\FLOW3\Resource\Publishing\ResourcePublisher_Original::publishStaticResources(""D:/devenv/mowesII/www/flow3/Packages/Framework/TYPO3.FLOW3/Resources/Public/"", ""Packages/TYPO3.FLOW3/"")

17 TYPO3\FLOW3\Resource\ResourceManager_Original::publishPublicPackageResources(array)

16 TYPO3\FLOW3\Core\Booting\Scripts::initializeResources(TYPO3\FLOW3\Core\Bootstrap)

15 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)

14 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)

13 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

12 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

11 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

10 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

9 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

8 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

4 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)

3 TYPO3\FLOW3\Http\RequestHandler::boot()

2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()


Please include more helpful information!

</pre>"
39648,TYPO3.Flow,Feature,"",Resolved,Should have,Configurable CLI Subrequest environment variables,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-08-17 04:35,"",1.1,2012-08-09,"","",100,2012-08-09 09:36,"","",744100,"","","When debugging with xdebug, a major difficulty is that in development and
functional tests, there are always two requests being executed: The main request
and a CLI request inside.

Now, most IDEs do not support the (optional) feature of multi-threaded PHP debugging,
effectively stopping the sub-request and also the main request in this case.

With this feature it's possible to change the XDEBUG remote port from 9000 to 9001, so that the subrequest can be debugged by listening on port 9001."
39661,TYPO3.Flow,Feature,"",Closed,Should have,It should be Possible to change Annotations through Objects.yaml,Marc Neuhaus,Marc Neuhaus,2012-08-10 05:53,"","",2012-08-09,"","",0,2012-08-09 12:20,"","",744750,"","",""
39674,TYPO3.Flow,Bug,"",New,Should have,\TYPO3\FLOW3\var_dump behaves weird in controller actions doing return,Adrian Föder,"",2012-08-10 04:09,MVC,"",2012-08-10,"","",0,2012-08-10 04:02,"","",745400,"",(any),"doing this:
<pre><code class=""php"">
	public function indexAction() {
		\TYPO3\FLOW3\var_dump('vardump.');

		return 'I am a return.';
	}
</code></pre>

results in a frontend (browser, response) output like this:

<pre><code class=""html"">
<link rel=""sty
</code></pre>

funnily, the amount of characters being actually outputted correlates with the output length of the return; so

<pre>
return 'f' . str_repeat('o', 30);
</pre>
results in 
<pre>
 <link rel=""stylesheet"" type=""te
(1234567890123456789012345678901) => 31 chars
</pre>
</pre>"
39681,TYPO3.Flow,Bug,"",Resolved,Should have,Warning about property injection not being autowired in functional test,Karsten Dambekalns,Karsten Dambekalns,2012-08-10 05:36,- Testing -,1.1,2012-08-10,"","",100,2012-08-10 05:22,"","",745750,"",FLOW3 1.1.0 rc 2,"The @DependencyInjectionTest@ testcase has a test called @injectionInParentClassIsDoneOnlyOnceOnCreationOfObject@, leading to FLOW3 trying to use the inject method for the property  ""ionInParentClassIsDoneOnlyOnceOnCreationOfObject""?"
39682,TYPO3.Fluid,Feature,"",Rejected,Could have,Disregegard { as Fluid variable when followed by a white space,Adrian Föder,"",2013-07-17 06:05,Core,"",2012-08-10,"","",0,2012-08-10 05:26,"","",745800,"","","This is a reopen of an issue I had long time ago, so, long story short:

There's still the need for some CDATA wrapping when it comes to Javascript object notation, ie curly braces in JavaScript sections.

A great advantage, without much drawback, would be to disregard occurrences of braces that are followed by a white space, a tab or a newline. this means, 

<pre>
{f:this(is: 'a valid, regarded fluid variable'}
{so.is.thisVariant}
whereas
{ that: 'is an open brace followed by a whitespace, hence not a fluid variable'}
</pre>

this maybe could be extended with every character not being \w or so, resulting in
<pre>
{""alsoThis"": ""won't be fluid""}
</pre>

Forcing Fluid syntax do directly follow the opening paranthese is legit in my opinion, you can still do
<pre>
{f:if(
  condition: 'thisthat',
  then: 'foo',
  else: 'bar'
)};
</pre>

in MySQL, for example, it's also required to make an open bracket follow the function name immediately: @MAX(  5,  2)@ works, while @MAX (5,2)@ won't.
"
39699,TYPO3.Flow,Bug,"",Accepted,Should have,SQL DDL for TYPO3\FLOW3\Cache\Backend\PdoBackend,Pablo Delgado,Karsten Dambekalns,2012-12-13 06:35,Cache,"",2012-08-11,"","",0,2012-08-10 20:49,"","",746650,"",Git master,"I could not find any example or script that helped create the tables needed to use TYPO3\FLOW3\Cache\Backend\PdoBackend.
It would be nice if the Backed could generate the tables needed during the execution of *flow3:cache:warmup* or at the vary least example DDL script that developers can use to generate the tables needed.

Here is the DDL for PostgreSQL (It may work for MYSQL with no changes)
<pre>
create table cache (
""identifier"" varchar primary key, ""context"" varchar, ""cache"" text, ""created"" int, ""lifetime"" int, ""content"" varchar);

create table tags (
""identifier""varchar primary key, ""context"" varchar, ""cache"" text, ""tag"" varchar);
</pre>"
39714,TYPO3.Flow,Task,"",Resolved,Should have,Validate emailaddresses by  filter_var(),Markus Günther,Markus Günther,2012-08-14 04:35,Validation,2.0 beta 1,2012-08-12,"","",100,2012-08-12 04:50,"","",747400,"","","We have had an issue in the extbase issue tracker (#6970) for simplify the email validator in extbase.

Actually the exbase and FLOW3 email validator is codewise the same. Because we wanna stay in sync with FLOW3, i suggest to use filter_var also in FLOW3 for validating the email addresses.

In extbase we could use an TYPO3 core function for that, so we have to port this codewise to FLOW3 or we renounce the idna converter and only use the filter_var function and the php workaround for version lower than 5.3.4."
39740,TYPO3.Flow,Feature,"",Closed,Should have,Allow setting fixed values for route parts,Andreas Wolf,Bastian Waidelich,2013-06-12 11:14,MVC - Routing,"",2012-08-12,"","",0,2012-08-12 16:41,"","",748700,"","","In some situations, it is desirable to have routes that are only applied to certain sets of parameters, e.g. to have some subpackage in a completely different URI namespace:

<code>
api/v1/<controller>/<action> -> package MyPackage, subpackage Api
<controller>/<action> -> package MyPackage
</code>

You could of course use the @{@subpackage}@ key in the route URI here:

<code>
{@subpackage}/v1/{@controller}/{@action}
</code>

But as soon as you add a second subpackage, this will fail, because both subpackages would be matched by this route.

Setting ""api"" as the default value of %@subpackage% would also fail here, as all requests with a controller and an action would be matched by this route then, leading to errors for controllers that do not exist in the Api subpackage.

A solution for this is to allow fixed values for route parts, which are both

# matched when building the URI (so the route does not match if the @$routeValues@ array passed to @resolves()@ does not contain these fixed values)
# reconstructed when the URI is matched against the pattern (so they are available when resolving the controller and action)

I propose to add these fixed values to the routeParts array in the configuration, either as a simple value for the route part name or as the value of the ""value"" subkey:

<pre>
<code class=""yaml"">
-
  name: ""option A: fixed value as value of the route part name""
  uriPattern: ""api/v1/{@controller}/{@action}""
  routeParts:
    '@package':    'MyPackage'
    '@subpackage': 'Api'

-

  name: ""option B: fixed value in the 'value' key""
  uriPattern: ""api/v1/{@controller}/{@action}""
  routeParts:
    '@package':    
      value:     'MyPackage'
    '@subpackage':
      value:     'Api'
</code>
</pre>

I have implemented option A locally and will provide a patch after ironing out some glitches."
39788,TYPO3.Flow,Feature,"",New,Could have,RFC: Repository based NotExistsValidator,Alexander Berl,"",2012-08-14 10:14,Validation,"",2012-08-14,"","",0,2012-08-13 19:16,"","",750900,"","","A very basic requirement for most registration formulars is to validate that a given registration information does not yet exist in the persistence backend (e.g. a user with an specific e-mail may only exist once).

For my current project I therefore already implemented a NotExistsValidator, which checks existence of an object with the given property value through the domain models repository.

The property and repository class can be given in the validator annotation, but since it is redundance to annotate for example an *$email* property on a *User model* with <code>{property=""email"",repository=""\Foo\Bar\Domain\Repository\UserRepository""}</code> I also added an automatism to resolve those.
Therefore the *$targetClassName* and *$classPropertyName* get injected into the validator options as ""__property"" and ""__className"" in the ValidatorResolver.
Hence, this makes all Validators generally aware of the current class/property they are invoked on, which might open up a few more possibilities for validators.


Well, I'll talk straight code here to show the basic idea of the validator itself:

<pre format=""php"">

/**
 * Validator to check if an object does not exist in a repository
 *
 * @api
 */
class NotExistsValidator extends \TYPO3\FLOW3\Validation\Validator\AbstractValidator {

	/**
	 * @var \TYPO3\FLOW3\Object\ObjectManager
	 * @FLOW3\Inject
	 */
	protected $objectManager;

	/**
	 * Checks if the given value does not exist in a specified repository.
	 *
	 * @param mixed $value The value that should be validated
	 * @param array $validationOptions Not used
	 * @return void
	 * @api
	 */
	protected function isValid($value) {
		if (!isset($this->options['repository'])) {
			$possibleRepositoryClassName = $this->options['__className'];
			if (strpos($possibleRepositoryClassName, '\\Model\\') !== FALSE) {
				$possibleRepositoryClassName = str_replace('\\Model\\', '\\Repository\\', $possibleRepositoryClassName) . 'Repository';
				$repository = $this->objectManager->get($possibleRepositoryClassName);
			} else {
				throw new \TYPO3\FLOW3\Validation\Exception\InvalidValidationOptionsException('The ""repository"" option must be set in NotExistsValidator when not used on a Domain Model.', 1281454154);
			}
		} elseif (is_string($this->options['repository'])) {
			$repository = $this->objectManager->get($this->options['repository']);
		} elseif ($this->options['repository'] instanceof \TYPO3\FLOW3\Persistence\Repository) {
			$repository = $this->options['repository'];
		} else {
			throw new \TYPO3\FLOW3\Validation\Exception\InvalidValidationOptionsException('The ""repository"" option can be only set to string, or Repository object.', 1281454155);
		}

		if (!$repository instanceof \TYPO3\FLOW3\Persistence\RepositoryInterface) {
			throw new \TYPO3\FLOW3\Validation\Exception\InvalidValidationOptionsException('The repository for class ""' . $this->options['__className'] . '"" could not be found in NotExistsValidator.', 1281454155);
		}

		$property = $this->options['__property'];
		$countBy = 'countBy' . $property;
		$count = $repository->$countBy($value);
		if ($count > 0) {
			$this->addError('The object exists in the repository.', 1281454156);
		}
	}
}
</pre>

What do you think? Would this make sense for an validator shipped with flow3?"
39790,TYPO3.Kickstart,Feature,"",New,Should have,Allow forward slashes where backslashes need to be specified,Robert Lemke,"",2012-08-14 03:28,"","",2012-08-14,"","",0,2012-08-14 03:28,"","",751000,"","","Typing backslashes on the command line is cumbersome because each of them needs to be escaped with an additional backslash. Therefore it would be convenient if the kickstarter would allow forward slashes as well and convert them to backslashes internally.

This should be implemented especially for the kickstart:model command (property types are often class names) but may apply to other commands as well."
39791,TYPO3.Flow,Bug,"",New,Must have,Reflection data of old aspect is not removed,Robert Lemke,"",2013-08-14 09:40,Reflection,1.1.1,2012-08-14,"","",0,2012-08-14 03:45,"","",751050,"",Git master,"The reflection data of a removed aspect is not removed by the file monitoring / reflection framework.

Steps to reproduce:

# create something which can be advised, for example a command controller with a command
# create a new aspect which advises that command, for example with an around advice
# check that this advice works
# rename the aspect class and the class file name
# run the advised command again

Expected result:
<pre>
Uncaught Exception
  Warning: Invalid argument supplied for foreach() in Packages/Framework/TYPO3.FLOW3/Classes/Aop/Builder/ProxyClassBuilder.php
  line 315
</pre>

The reason for the error message is that the *old* aspect class name is passed to buildAspectContainer() which tries to get the class methods but, as the class does not exist anymore, continues working with an invalid result.

It doesn't seem to be the fault of the file monitoring, because the file monitor does detect the change as you can see in the log file:
<pre>
12-08-14 09:39:12 4799       INFO      FLOW3                Aspect classes have been modified, flushing the whole proxy classes cache.
12-08-14 09:39:12 4799       INFO      FLOW3                File Monitor ""FLOW3_ClassFiles"" detected 1 changed files and 0 changed directories.
12-08-14 09:39:12 4799       DEBUG     FLOW3                Reflected class names did not match class names to reflect
12-08-14 09:39:12 4799       DEBUG     FLOW3                Reflecting class Acme\Demo\Test2Aspect
12-08-14 09:39:12 4799       INFO      FLOW3                Reflected 1 emerged classes.
</pre>
"
39792,TYPO3.Flow,Feature,"",Resolved,Should have,Implement support for localized resources,Robert Lemke,Karsten Dambekalns,2012-12-10 07:12,I18n,2.0 beta 1,2012-08-14,"","",100,2012-08-14 03:54,"","",751100,"","","The feature of localized is already documented in The Definitive Guide (sic!) but not yet implemented:

<pre>
The ``ResourceViewHelper`` will by default use locale-specific versions of any resources
you ask for. If you want to avoid that you can disable that:

  {f:uri.resource(path: 'header.png', localize: 0)}
</pre>

"
39836,TYPO3.Flow,Feature,"",Resolved,Must have,Finish implementation of cookie support,Robert Lemke,Robert Lemke,2012-08-17 02:35,Http,1.1,2012-08-15,"","",100,2012-08-15 10:31,"","",753300,"","",The cookie support in HTTP Request / Response is not working because the implementation is incomplete.
39837,TYPO3.Flow,Feature,"",Resolved,Should have,Make WebRedirect EntryPoint less Routing dependent,Bastian Waidelich,Bastian Waidelich,2012-08-29 12:35,Security,2.0 beta 1,2012-08-15,"","",100,2012-08-15 11:03,"","",753350,"","","The WebRedirect currently expects an option *uri* that points to a relative or absolute URI to redirect when trying to access a protected action.

Instead it should be possible to specify *route values* so that the Routing framework can determine the correct target URI depending on the Routes.yaml configuration."
39839,TYPO3.Flow,Feature,"",Resolved,Should have,Provide abstract authentication controller,Bastian Waidelich,Andreas Förthner,2012-09-19 03:18,Security,2.0 beta 1,2012-08-15,"","",100,2012-08-15 11:14,"","",753450,"","","FLOW3 already comes with an Authentication Controller that even supports redirection to the intercepted request after successful authentication (if a WebRedirect EntryPoint was configured).

We should provide an abstract base class that developers can extend from in their own packages.
The API could be s.th. like

<pre>
<code class=""php"">
abstract class AbstractAuthenticationController extends \TYPO3\FLOW3\Mvc\Controller\ActionController {

public function indexAction();

final public function authenticateAction();

public function logoutAction();

abstract protected function onSuccessfulAuthentication(\TYPO3\FLOW3\Mvc\ActionRequest $interceptedRequest);

abstract protected function onErroneousAuthentication();

}
</code>
</pre>"
39855,TYPO3.Flow,Bug,"",Closed,-- undefined --,[Windows / VM] FLOW3 symlink error during TYPO3 Phoenix FLOW3 compile,Frank Gerards,Frank Gerards,2013-08-14 10:08,"","",2012-08-16,"","",0,2012-08-16 07:22,"","",754250,"",(any),"Hi,

I use a Debian VM under Windows 7 to develop websites using ZendStudio under Windows. The sources are located in Windows and the document root of the vm apache webserver points to the shared windows path. This is done via VirtualBox Addons. As a result, this is a read-only file system and symlinks are not supported.

Badly, FLOW3/Phoenix report this error. I assume that quite an amount of professional, enterprise-oriented companies develop live-server-near with VMs and under Windows. So this error stops all tries of installing FLOW3 under this circumstances. To my opinion, there has to be a work-around because you cannot be sure, that symlinks work under each environment FLOW3 will be set up. How could this be solved ?

The complete warning is:
<pre>
Warning: symlink() [<a href='function.symlink'>function.symlink</a>]: Read-only file system in /media/sf_local_dev/phoenix/Data/Temporary/Development/Cache/Code/FLOW3_Object_Classes/TYPO3_FLOW3_Resource_Publishing_FileSystemPublishingTarget_Original.php line 116
21 TYPO3\FLOW3\Error\ErrorHandler::handleError(2, ""symlink() [&lt;a href='function.symlink'&gt;function.symlink&lt;/a&gt;]: Read-only file system"", ""/media/sf_local_dev/phoenix/Data/Temporary/Develop?Publishing_FileSystemPublishingTarget_Original.php"", 116, array)

20 symlink(""/media/sf_local_dev/phoenix/Packages/Application/Aloha/Resources/Public"", ""/media/sf_local_dev/phoenix/Web/_Resources/Static/Packages/Aloha"")

19 TYPO3\FLOW3\Resource\Publishing\FileSystemPublishingTarget_Original::publishStaticResources(""/media/sf_local_dev/phoenix/Packages/Application/Aloha/Resources/Public/"", ""Packages/Aloha/"")

18 TYPO3\FLOW3\Resource\Publishing\ResourcePublisher_Original::publishStaticResources(""/media/sf_local_dev/phoenix/Packages/Application/Aloha/Resources/Public/"", ""Packages/Aloha/"")

17 TYPO3\FLOW3\Resource\ResourceManager_Original::publishPublicPackageResources(array)

16 TYPO3\FLOW3\Core\Booting\Scripts::initializeResources(TYPO3\FLOW3\Core\Bootstrap)

15 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)

14 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)

13 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

12 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

11 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

10 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

9 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

8 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)

4 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)

3 TYPO3\FLOW3\Http\RequestHandler::boot()

2 TYPO3\Setup\Core\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()
</pre>

Please include more helpful information!"
39870,TYPO3.Fluid,Feature,"",Resolved,Could have,Allow configuration of template path fallbacks,Tymoteusz Motylewski,Bastian Waidelich,2013-08-07 09:35,View,"",2012-08-16,"","",100,2012-08-16 14:00,"","",755000,"","","It would be great if you can configure alternative paths for templates. It would be quite handy when you have to extend existing package templates.

Right now it is only possible to set one templateRootPath for package. So even if you want to change only one template file, you have to copy all templates to new location. 

This is a placeholder ticket reflecting ticked placed in Extbase."
39878,TYPO3.Flow,Feature,"",Closed,Should have,Utility function for determining if an array is considered numerically indexed,Adrian Föder,Adrian Föder,2013-04-11 02:17,Utility,2.1,2012-08-17,"","",0,2012-08-17 04:26,"","",755400,"","","Unfortunately PHP does not offer a reliable way to say whether an array is considered to be numerically indexed or if it's associative.

Not at last this has to come into account with the merge_recursive_overrule function that currently overwrites numerically-indexed arrays instead of merging them finely (but that'll go into another issue ;)"
39879,TYPO3.Flow,Feature,"",Resolved,Should have,Improve HTML backtrace for boolean and array arguments,Adrian Föder,Adrian Föder,2012-09-08 19:35,Error,"",2012-08-17,"","",100,2012-08-17 04:40,"","",755450,"","","currently, a function call in the backtrace makes some type hints about the passed arguments. For boolean and array types, it's still @boolean@ and @array@.
This should be replaced with @TRUE@/@FALSE@ and, as a suggestion, @array|13|@ giving an insight about the fact that the array has 13 elements containing; or @array|0|@ for example, which would be especially helpful."
39886,TYPO3.Fluid,Feature,"",Resolved,Should have,"f:format.json: Make tag ""escaping"" default",Adrian Föder,Adrian Föder,2012-08-30 11:57,ViewHelpers,2.0 beta 1,2012-08-17,"","",100,2012-08-17 06:18,"","",755800,"","","Currently, the JSON ViewHelper will put greater-and-lower-than-characters through as they are, which might be dangerous in ViewHelper, ie HTML context."
39910,TYPO3.Flow,Feature,"",Accepted,Should have,Ability to query user based on roles,Pablo Delgado,Rens Admiraal,2013-05-21 07:28,Security,"",2012-08-17,"","",0,2012-08-17 14:59,"","",756950,"","","For application that need to be able to manage users via a custom web interface the current implementation of TYPO3\FLOW3\Security\Policy\Roles being serialized and stored within the TYPO3\FLOW3\Security\Account tables when persisted to the database. The issue is that the roles are duplicated within the database since each user has their own copy (Which of course is not huge problem) but there is no way of querying a group of users that have a certain role. 

It would be nice to be able to use something like this to find users by role:
<pre>
$accounts = $this->accountRepository->findByRole('FINANCE_ROLE');
</pre>

And obtain either an array or QueryResult."
39936,TYPO3.Fluid,Feature,"",New,Should have,registerTagAttribute should handle default values,Stefan Neufeind,"",2013-01-21 17:29,ViewHelpers,"",2012-08-18,"","",0,2012-08-18 14:52,"","",758250,"","","The function registerTagAttribute is used to register tags and can't handle default values.

This is a follow-up from a merged change in extbase-fluid.
Verified it applys to FLOW3-fluid as well: TYPO3.Fluid/Classes/Core/ViewHelper/AbstractTagBasedViewHelper.php"
39969,TYPO3.Flow,Bug,"",Rejected,Must have,Call to undefined method on Cookie from Response,Pablo Delgado,Pablo Delgado,2012-08-20 11:32,Http,1.1.1,2012-08-19,"","",0,2012-08-19 10:43,"","",759900,"",Git 1.2 (master),"When the response headers are sent you get an 'call to undefined method getExpiresTime' error.  The problem is in the Response.php on line 508. Its a simple fix either we change the 3rd parameter to *$cookie->getExpires()* or we hard an alias method to Cookie called *Cookie::getExpiresTime()*.

I think for consistence we use the first option.


<pre>
FILE: TYPO3.FLOW/Classes/Http/Resposne.php

491     /**
492      * Sends the HTTP headers.
493      *
494      * If headers have been sent previously, this method fails silently.
495      *
496      * @return void
497      * @codeCoverageIgnore
498      * @api
499      */
500     public function sendHeaders() {
501         if (headers_sent() === TRUE) {
502             return;
503         }
504         foreach ($this->renderHeaders() as $header) {
505             header($header);
506         }
507         foreach ($this->headers->getCookies() as $cookie) {
508             setcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpiresTime(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), $cookie->isHttpOnly(    )); 
509         }
510     }

</pre>"
39990,TYPO3.Fluid,Bug,"",New,Should have,Same form twice in one template: hidden fields for empty values are only rendered once,Marc Bastian Heinrichs,"",2012-08-20 05:21,Core,"",2012-08-20,"","",0,2012-08-20 05:21,"","",760950,"",(any),"Noticed this in fluid extension and think this is also relevant for the Fluid package.

If you use nearly the same form twice in one template, the hidden fields for empty values are only rendered for the upper form.

In Tx_Fluid_ViewHelpers_Form_AbstractFormFieldViewHelper::renderHiddenFieldForEmptyValue the Tx_Fluid_ViewHelpers_FormViewHelper is checked and this also contains the $hiddenFieldNames of the upper form.
"
40003,TYPO3.Flow,Bug,"",Resolved,Must have,FLOW3 not working on PHP 5.3.16,Karsten Dambekalns,Karsten Dambekalns,2012-09-20 11:39,Reflection,1.1,2012-08-20,"","",100,2012-08-20 11:04,"","",761600,"",(any),"The fix for https://bugs.php.net/62715 landed in PHP 5.3.16, and because of https://bugs.php.net/62874 reflection fails (in Production context) with a pretty unhelpful exception:

@Fatal error: Uncaught exception ? with message 'Parameter is not optional' in ?@"
40011,TYPO3.Eel,Bug,"",Resolved,Must have,Numeric offset access is not supported,Christopher Hlubek,Christopher Hlubek,2012-08-28 09:35,"","",2012-08-21,"","",100,2012-08-21 03:30,"","",762000,"","",Passing an integer for array offset access (@${myarray[17].foo}@) causes problems with the Context evaluation which expects only string paths.
40064,TYPO3.Fluid,Bug,"",New,Must have,Multiselect is not getting persisted,Christoph Gross,"",2014-03-27 17:12,ViewHelpers,"",2012-08-22,"","",0,2012-08-22 10:55,"","",764650,"",Git master,"I have a statement and want to assign multiple users to it using a multiselect box. The mulitselect box displays already selected users(selected by a workaround) correctly, but fails to change the selected users, they remain unchanged.

I attached a screenshot of the page.

The template code:
<pre>
<f:form controller=""Statement"" arguments=""{statement: statement}"" action=""updateUsers"" name=""Statement"" object=""{statement}"">
  <f:form.select property=""users"" options=""{users}"" optionLabelField=""displayName"" optionValueField=""uid"" multiple=""5"" />
  ...
</pre>

The statement controller:
<pre>
/**
	 * STEP 2: Select users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @return void
	 */
	public function selectUsersAction(Statement $statement) {
		$this -> view -> assign('statement', $statement);
		$this -> view -> assign('users', $this -> userRepository -> findAll());
	}

	/**
	 * STEP 2: Update selected users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @param array $selectedUsers
	 * @return void
	 */
	public function updateUsersAction(Statement $statement) {
		$this -> statementRepository -> update($statement);
		$this -> addFlashMessage('Updated users');
		$this -> redirect('selectUsers', 'Statement', NULL, array('statement' => $statement));
	}
</pre>

The statement model:
<pre>
/**
 * A Statement
 *
 * @FLOW3\Entity
 */
class Statement {

	/**
	 * The products
	 * @var \Doctrine\Common\Collections\Collection<\Drinkaccounting\Domain\Model\Product>
	 * @ORM\ManyToMany
	 */
	protected $products;
...
</pre>

*My workaround to select users without using the property attribute:*
This workaround fails with an Exception if you try to update with no item selected, because then flow3 thinks selectedUsers is a string instead of an array. I haven't figured out a way to read and change the content of an argument in the initializeUpdateUsersAction. Anyway this can't be a final solution.

The template:
<pre>
<f:form controller=""Statement"" arguments=""{statement: statement, selectedUsers: selectedUsers}"" action=""updateUsers"" name=""Statement"" object=""{statement}"">	
		
		
		<f:form.select name=""selectedUsers"" value=""{statement.users}"" options=""{users}"" optionLabelField=""displayName"" multiple=""20"" />
</pre>

The statement controller:
<pre>
/**
	 * STEP 2: Select users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @return void
	 */
	public function selectUsersAction(Statement $statement) {
		$this -> view -> assign('statement', $statement);
		$this -> view -> assign('users', $this -> userRepository -> findAll());
	}

	/**
	 * STEP 2: Update selected users
	 *
	 * @param \Drinkaccounting\Domain\Model\Statement $statement The statement
	 * @param array $selectedUsers
	 * @return void
	 */
	public function updateUsersAction(Statement $statement, $selectedUsers) {
		// Clear users
		$statement -> clearUsers();
		// Get user objects by identifier
		foreach ($selectedUsers as $userID) {
			$user = $this -> persistenceManager -> getObjectByIdentifier($userID, '\Drinkaccounting\Domain\Model\User');
			$statement -> addUser($user);
		}
		$this -> statementRepository -> update($statement);
		$this -> addFlashMessage('Updated users');
		$this -> redirect('selectUsers', 'Statement', NULL, array('statement' => $statement));
	}
</pre>
"
40081,TYPO3.Fluid,Feature,"",New,Should have,Allow assigned variables as keys in arrays,Viktor Livakivskyi,"",2013-10-02 03:38,"","",2012-08-23,"","",0,2012-08-23 09:00,"","",765500,"","","It was asked couple of times in mailing lists, e.g. here: http://lists.typo3.org/pipermail/typo3-project-typo3v4mvc/2012-January/011389.html
<pre>
is something like this possible with fluid?

Controller:

$this->view->assign('value', $value);
$this->view->assign('keyName', $keyName);


View:

arguments=""{{keyName} : value, foo: bar}""


IIRC This does not work. Any workarounds?
</pre>

This is especially needed, when creating links, like index.php?id=5?tx_myext[8][edit]=3, because I need to pass dynamically plugin instance id to GET via 'additionalParams' of 'f:link.page' Fluid viewHelper."
40241,TYPO3.Flow,Bug,"",Rejected,Must have,Encryption key sometimes readable for anybody,Andreas Wolf,"",2012-11-01 14:05,Security,"",2012-08-26,"","",0,2012-08-26 16:18,"","",773500,"",(any),"The encryption key is (on *NIX) generated with the current umask. On most systems, this is something like 0022, making the file readable for anybody. If the key is supposed to be kept secret (which I assume), this might pose a security risk.

This issue could be easily fixed by using chmod() or touch() in Security\Cryptography\HashService."
40263,TYPO3.Flow,Bug,"",Resolved,Must have,Code migration script destroys method name in Resource\Resource,Cedric Ziel,Karsten Dambekalns,2012-09-12 04:10,- Migrations -,1.1.1,2012-08-27,"","",100,2012-08-27 08:12,"","",774600,"",FLOW3 1.1.0,"Okay, please be kind in case i missed something..
I am new to FLOW3 an just wanted to migrate my small Package to 1.1.

Everything went fine an changes took place after core:migrate.

The problem I see is, in the mentioned Class, there is a doublette for method getMediaType() which the parser (5.3.10) doesnt like very much :-)

The compatibility version of PHP is (according to the download page) 5.3.2-5.4.x so there should be no redeclarations in the code.

It should be safe to remove the first doublette. Afterwards, the project compiled fine.

Here's the old method:
<pre>
	/**
	 * Returns the mime type for this resource
	 *
	 * @return string The mime type
	 * @deprecated since 1.1.0
	 * @see getMediaType()
	 */
	public function getMediaType() {
		return $this->getMediaType();
	}
</pre>"
40273,TYPO3.Flow,Feature,"",Resolved,Should have,Enable FunctionalTestRequestHandler for non cli requests,Marc Neuhaus,"",2012-09-04 07:35,"","",2012-08-27,"","",100,2012-08-27 10:51,"","",775100,"","","Currently the FunctionTestRequestHandler can only be used through cli.

I'd like to use a TestRunner based on VisualPHPUnit for which i need to be able to execute those requests through web requests.

https://github.com/mneuhaus/TYPO3.Testing"
40283,TYPO3.Flow,Bug,"",New,Should have,New constructor in grandparent class not called,Andreas Wolf,"",2012-12-13 06:35,Object,"",2012-08-27,"","",0,2012-08-27 16:59,"","",775600,"",Git master,"I have a class hierarchy like this:

<pre>
SomeClass
 +-- SubclassA
 \-+ SubclassB
   \ SubclassBA
</pre>

I inserted a new @__construct()@ method in @SomeClass@. It was called without any problem from @SubclassA@, but not from @SubclassBA@, because the Proxies in @Cache/Code/FLOW3_Object_Classes@ were not regenerated for @SubclassB@.

The call chain for @SubclassBA::__construct()@ thus ended in @SubclassB@, because when the @SubclassB@ proxy was generated, there was no constructor in @SomeClass@, hence no call to @parent::__construct()@ was inserted into the @SubclassB@ proxy (because it would have ended in a fatal error)."
40338,TYPO3.Fluid,Feature,"",Closed,Could have,Make possible to combine conditions with f:if,Viktor Livakivskyi,Bastian Waidelich,2012-10-16 09:22,Core,"",2012-08-28,"","",0,2012-08-28 07:00,"","",776450,"","","Hello.

It would be really nice to have a possibility to use OR/AND logic in f:if conditions. Right now it may be solved by nested f:if viewHelpers, which brings more structural complicance to the template's code.

Regards."
40372,TYPO3.Flow,Bug,"",Resolved,Should have,Headers::has() always returns FALSE for Cache-Control,Robert Lemke,Robert Lemke,2012-12-14 04:58,Http,1.1.1,2012-08-29,"","",100,2012-08-29 06:40,"","",778150,"",Git 1.1,"Because the Cache-Control header is handled in a special way, has() returns FALSE even though cache control directives have been set."
40389,TYPO3.Flow,Bug,"",Resolved,Must have,Orphan Removal in ManyToMany Associations,Christian Müller,Christian Müller,2012-08-30 05:35,Persistence,2.0 beta 1,2012-08-29,"","",100,2012-08-29 14:27,"","",779000,"",(any),"The orphanRemoval option in a ManyToMany annotation defaults to FALSE.

In the Flow3AnnotationDriver a check is made for $manyToManyAnnotation->orphanRemoval which in turn will always be FALSE because it is the default (and not only when it was actually set to FALSE in the annotation, which seems to have been the intention of the check). Therefor unless you set it to TRUE anyway it will always go to the elseif which checks if the associated entity has a repository and then sets orphanRemoval to TRUE.

Which means that if you have a ManyToMany relation where one entity has no Repository that will end up with orphanRemoval TRUE regardless of what you really annotated. This is not really the expected behaviour and especially for ManyToMany often wrong too.

I suggest to remove the check for ManyToMany relations and use the actual value that is annotated (or the default FALSE), but that of course is a breaking change as it will leave orphans behind in cases people unknowingly accepted this (wrong) behaviour."
40410,TYPO3.Flow,Bug,"",Needs Feedback,Should have,"Exception when using Apc, Memcached of Redis cache backend for reflection status and object configuration",Kobbe van Daatselaar,Karsten Dambekalns,2012-10-25 09:56,Cache,"",2012-08-30,"","",0,2012-08-30 05:26,"","",780050,"",FLOW3 1.1.0,"When I configure to FLOW3 to use an other backend than the (Simple)FileBackend it throws an exception during compiletime:

<pre>
14 TYPO3\FLOW3\Error\ErrorHandler::handleError(4096, ""Argument 1 passed to TYPO3\FLOW3\Object\ObjectManager::setObjects() must be an array, boolean given, called in /Packages/Framework/TYPO3.FLOW3/Classes/Core/Booting/Scripts.php on line 292 and defined"", ""/Packages/Framework/TYPO3.FLOW3/Classes/Object/ObjectManager.php"", 92, array)
13 TYPO3\FLOW3\Object\ObjectManager::setObjects(boolean)
12 TYPO3\FLOW3\Core\Booting\Scripts::initializeObjectManager(TYPO3\FLOW3\Core\Bootstrap)
11 call_user_func(array, TYPO3\FLOW3\Core\Bootstrap)
10 TYPO3\FLOW3\Core\Booting\Step::__invoke(TYPO3\FLOW3\Core\Bootstrap)
9 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
8 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
7 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
6 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
5 TYPO3\FLOW3\Core\Booting\Sequence::invokeStep(TYPO3\FLOW3\Core\Booting\Step, TYPO3\FLOW3\Core\Bootstrap)
4 TYPO3\FLOW3\Core\Booting\Sequence::invoke(TYPO3\FLOW3\Core\Bootstrap)
3 TYPO3\FLOW3\Http\RequestHandler::boot()
2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()
1 TYPO3\FLOW3\Core\Bootstrap::run()

</pre>

This happens when I configure the Object_Configuration or Reflection_Status in Caches.yaml

<pre>
FLOW3_Object_Configuration:
  backend: TYPO3\FLOW3\Cache\Backend\ApcBackend
FLOW3_Reflection_Status:
  backend: TYPO3\FLOW3\Cache\Backend\ApcBackend
</pre>

or 

<pre>
FLOW3_Object_Configuration:
    backend: TYPO3\FLOW3\Cache\Backend\MemcachedBackend
    backendOptions:
      servers:
        - 127.0.0.1
FLOW3_Reflection_Status:
    backend: TYPO3\FLOW3\Cache\Backend\MemcachedBackend
    backendOptions:
      servers:
        - 127.0.0.1
</pre>

or

<pre>
FLOW3_Object_Configuration:
    backend: TYPO3\FLOW3\Cache\Backend\RedisBackend
    backendOptions:
      database: 3
      compressionLevel: 0
FLOW3_Reflection_Status:
    backend: TYPO3\FLOW3\Cache\Backend\RedisBackend
    backendOptions:
      database: 4
      compressionLevel: 0
<pre>"
40414,TYPO3.Flow,Feature,"",Resolved,Should have,cURL request engine for HTTP browser,Robert Lemke,Robert Lemke,2012-08-30 10:35,Http,2.0 beta 1,2012-08-30,"","",100,2012-08-30 06:39,"","",780250,"","","Provide a new request engine, based on cURL, which can be used with the virtual browser contained in FLOW3's HTTP foundation."
40418,TYPO3.Flow,Feature,"",Needs Feedback,Could have,Add an option to flow3:cache:flush thats keeps user sessions active,Martin Brüggemann,"",2014-10-03 14:17,Session,"",2012-08-30,"","",0,2012-08-30 07:35,"","",780450,"","","At the moment all sessions are being flushed with a

@./flow3 flow3:cache:flush@

There should be an option to flush all caches except the session storage/cache. Otherwise everytime you deploy a fix to your FLOW3 based SaaS project, all your customers loose their sessions and will have to relogin. 

Maybe a small option like 

@./flow3 flow3:cache:flush --keepSessions@

would do the trick."
40449,TYPO3.Flow,Bug,"",Resolved,Should have,DateTimeValidator doesn't work as expected,Cedric Ziel,Karsten Dambekalns,2013-08-14 09:39,Validation,1.1.1,2012-08-30,"","",100,2012-08-30 15:14,"","",781850,"",FLOW3 1.1.0,"I have a fairly simple Model which has a property $date:

<pre>
/**
* The actual date of the transaction
* @var \DateTime
* @FLOW3\Validate(type=""DateTime"")
*/
protected $date;
</pre>

My thoughts were to use the DateTime Validator bundled with TYPO3.FLOW3.
If I submit the form and (of what I understood, the validators do some serious business..) I get an error:

<pre>
 Invalid validate annotation in Cziel\F3finances\Domain\Model\Transaction::date: Could not resolve class name for validator ""DateTime""
</pre>

Stacktrace:
<pre>
TYPO3\FLOW3\Validation\ValidatorResolver_Original::buildBaseValidatorConjunction(""Cziel\F3finances\Domain\Model\Transaction##Default##Controller"", ""Cziel\F3finances\Domain\Model\Transaction"", array)

17 TYPO3\FLOW3\Validation\ValidatorResolver_Original::getBaseValidatorConjunction(""Cziel\F3finances\Domain\Model\Transaction"", array)

16 TYPO3\FLOW3\Mvc\Controller\ActionController_Original::initializeActionMethodValidators()

15 TYPO3\FLOW3\Mvc\Controller\ActionController_Original::processRequest(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

14 TYPO3\FLOW3\Mvc\Dispatcher_Original::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

13 TYPO3\FLOW3\Mvc\Dispatcher::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

12 call_user_func_array(array, array)

11 TYPO3\FLOW3\Mvc\Dispatcher::FLOW3_Aop_Proxy_invokeJoinPoint(TYPO3\FLOW3\Aop\JoinPoint)

10 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

9 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::setAccessDeniedResponseHeader(TYPO3\FLOW3\Aop\JoinPoint)

8 TYPO3\FLOW3\Aop\Advice\AroundAdvice::invoke(TYPO3\FLOW3\Aop\JoinPoint)

7 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

6 TYPO3\FLOW3\Security\Aspect\RequestDispatchingAspect_Original::blockIllegalRequestsAndForwardToAuthenticationEntryPoints(TYPO3\FLOW3\Aop\JoinPoint)

5 TYPO3\FLOW3\Aop\Advice\AroundAdvice::invoke(TYPO3\FLOW3\Aop\JoinPoint)

4 TYPO3\FLOW3\Aop\Advice\AdviceChain::proceed(TYPO3\FLOW3\Aop\JoinPoint)

3 TYPO3\FLOW3\Mvc\Dispatcher::dispatch(TYPO3\FLOW3\Mvc\ActionRequest, TYPO3\FLOW3\Http\Response)

2 TYPO3\FLOW3\Http\RequestHandler::handleRequest()

1 TYPO3\FLOW3\Core\Bootstrap::run()
</pre>"
40555,TYPO3.Flow,Feature,"",Accepted,Must have,Missing command arguments parameter in Core\Booting\Scripts::executeCommand(),Timo Kiefer,Karsten Dambekalns,2013-05-21 07:28,Core,"",2012-09-03,"","",0,2012-09-03 07:01,"","",786950,"","","Currently you can not execute a sub command (http://flow3.typo3.org/documentation/guide/partiii/commandline.html#executing-sub-commands) with command arguments.

I added my solution for this feature as a patch."
40563,TYPO3.Flow,Bug,"",Closed,Should have,"When session times out, Exception occurs instead of WebRedirect",Adrian Föder,"",2012-09-05 11:02,Security,"",2012-09-03,"","",0,2012-09-03 09:54,"","",787350,"",Git 1.2 (master),"Obvisously when the session times out and one hits /typo3 again, an exception occurs, saying ""The context contained no tokens which could be authenticated"", instead of silently displaying the WebRedirect target.
When hitting the same page subsequently, the behavior is as expected, and the login page appears / the WebRedirect target is displayed.

Maybe instead of the Exception some kind of ""Session expired!"" state should happen."
40580,TYPO3.Flow,Bug,"",Resolved,Should have,Exception when using SQL logger in Production Context,Adrian Föder,Adrian Föder,2012-09-10 06:35,Log,"",2012-09-04,"","",100,2012-09-04 04:17,"","",788200,"",Git 1.2 (master),"when having the SQL logger active in Prodution context, an exception occur, saying that 

> Uncaught Exception
  Catchable Fatal Error: Argument 4 passed to
  TYPO3\FLOW3\Log\LoggerFactory::create() must be of the type array, null
  given, called in...

which makes sense, since the mentioned argument 4 is a setting (http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=blob;f=Configuration/Objects.yaml;h=d6ed6e3040311d08a48062a7bc547147695ec102;hb=master#l188): 

<pre><code class=""yaml"">
'TYPO3\FLOW3\Persistence\Doctrine\Logging\SqlLogger':
  properties:
    logger:
      object:
        factoryObjectName: TYPO3\FLOW3\Log\LoggerFactory
        arguments:
          1:
            value: 'Sql_Queries'
          2:
            value: 'TYPO3\FLOW3\Log\Logger'
          3:
            value: 'TYPO3\FLOW3\Log\Backend\FileBackend'
          4:
            setting: TYPO3.FLOW3.log.sqlLogger.backendOptions
</code></pre>

but the mentioned section is only available in Developmnent/Settings.yaml (http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=blob;f=Configuration/Development/Settings.yaml;h=332c4daabc94c75523012d0b8e0ac88289a130d4;hb=master#l43):
<pre><code class=""yaml"">
TYPO3:
  FLOW3:
# [...]
      sqlLogger:
        backendOptions:
          logFileURL: %FLOW3_PATH_DATA%Logs/Query_Development.log
          createParentDirectories: TRUE
          severityThreshold: %LOG_DEBUG%


</code></pre>"
40625,TYPO3.Flow,Bug,"",Closed,-- undefined --,InvalidArgumentException thrown in file Headers.php,Ferdinand Kuhl,Robert Lemke,2012-09-05 05:20,Http,"",2012-09-04,"","",0,2012-09-04 16:24,"","",790100,"",Git 1.2 (master),"The ""Set-Cookie"" headers must be set via setCookie().
28 TYPO3\FLOW3\Http\Headers::set(""Set-Cookie"", ""JSESSIONID=0000bpxjzMKKBYiEQM5yG5xd5CG:15rk67n7r; Path=/"", boolean)

If the foreign webserver sends an header ""Set-Cookie"" FLOW3 throws an Exception, and breaks header - parsing. So no content from Servers sending cookies can be extracted."
40626,TYPO3.Flow,Bug,"",Resolved,Should have,Cookie - Setting throws exception in Http\Response ,Ferdinand Kuhl,Robert Lemke,2012-12-12 03:03,Http,2.0 beta 1,2012-09-04,"","",100,2012-09-04 16:26,"","",790150,"",Git 1.2 (master),"The ""Set-Cookie"" headers must be set via setCookie().
28 TYPO3\FLOW3\Http\Headers::set(""Set-Cookie"", ""JSESSIONID=0000bpxjzMKKBYiEQM5yG5xd5CG:15rk67n7r; Path=/"", boolean)

If the foreign webserver sends an header ""Set-Cookie"" FLOW3 throws an Exception, and breaks header - parsing. So no content from Servers sending cookies can be extracted."
40657,TYPO3.Flow,Bug,"",Resolved,Must have,Session Timeout default should be 3600 seconds,Christian Müller,Christian Müller,2012-09-05 13:35,"",2.0 beta 1,2012-09-05,"","",100,2012-09-05 12:48,"","",791650,"",Git 1.2 (master),""
40658,TYPO3.Flow,Bug,"",Resolved,Should have,InternalRequestEngine discards exception status codes,Karsten Dambekalns,Karsten Dambekalns,2012-09-06 05:35,- Testing -,1.1.1,2012-09-05,"","",100,2012-09-05 12:52,"","",791700,"",FLOW3 1.1.0,"The InternalRequestEngine set the status code in case of an exception to 500 in any case. With this change it will instead use the code defined in an exception, if available."
40661,TYPO3.Flow,Bug,Bug #36988: PropertyMapper chokes on Objects that are already converted,Resolved,Must have,The PropertyMapper can still choke on compositeTypes like collection<entity>,Marc Neuhaus,Marc Neuhaus,2013-04-02 16:30,Property,1.1.1,2012-12-25,"","",100,2012-09-05 14:05,"","",791850,0.00,FLOW3 1.1.0,The PropertyMapper can still choke on already converted objects if the targetType is a composite Type like Collection<Domain\Entity>
40738,TYPO3.Flow,Bug,"",Resolved,Should have,Move System logger className to Settings instead of Objects.yaml,Henrik Møller Rasmussen,Karsten Dambekalns,2013-08-14 09:39,Log,1.1.1,2012-09-07,"","",100,2012-09-07 12:05,"","",795450,"",(any),TYPO3\FLOW3\Log\Logger is hard coded in Scripts.php line 133. This class could be moved to Settings.yaml instead.
40760,TYPO3.Flow,Bug,"",Resolved,Must have,Unit Tests should not fail after AuthenticationController rewrite,Christian Müller,Christian Müller,2012-09-08 11:35,- Testing -,2.0 beta 1,2012-09-08,"","",100,2012-09-08 11:15,"","",796550,"",Git 1.2 (master),""
40802,TYPO3.Flow,Bug,"",Accepted,Should have,Documentation mistake (authentication),Kay Strobach,Karsten Dambekalns,2014-03-20 09:13,- Documentation -,1.1.1,2012-09-10,"","",0,2012-09-10 15:39,"","",798650,"",FLOW3 1.1.0,"Hello guys,

on http://flow3.typo3.org/documentation/guide/partiii/security.html#using-the-authentication-controller
There is a mistake in the documentation: 

 * flow3/authenticate should be flow3/authentication

Regards
Kay"
40824,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Modified action controller methods not detected properly,Francois Suter,Andreas Förthner,2012-10-01 14:33,"","",2012-09-11,"","",0,2012-09-11 08:16,"","",799700,"",FLOW3 1.1.0,"I had the issue when changing an action method's signature in a controller, the security framework threw an access forbidden exception. Flushing the cache solved the problem

According to Christian Müller, such a change should be detected automatically. Flushing the cache should not be necessary."
40828,TYPO3.Fluid,Task,"",Resolved,Should have,Enhance Exception: #1224479063: Duplicate variable declarations! (More information) ,Kay Strobach,Karsten Dambekalns,2012-09-13 15:35,Core,1.1.1,2012-09-11,"","",100,2012-09-11 12:14,"","",799900,"","",The Exception '#1224479063: Duplicate variable declarations! (More information)' Information misses the variablename which is double defined :D - would be nice to get this information instantly
40840,TYPO3.Flow,Bug,"",Resolved,Must have,Wrong escape character in Configuration/Settings.yaml,Christian Jul Jensen,Christian Jul Jensen,2012-09-11 17:35,Configuration,2.0 beta 1,2012-09-11,"","",100,2012-09-11 16:37,"","",800500,"",Git 1.2 (master),"In yaml backslash is not a valid escape character in single quoted strings, the only allowed escape-sequence is '' (two single quotes) resulting in one single quote in the string. In double-quotes it works as in PHP.

http://yaml.org/spec/current.html#id2534365

In newer versions of the Yaml component this will result in a fatal error, it was previously tolerated



"
40854,TYPO3.Flow,Task,"",New,Must have,Update security documentation (authentication in 1.2),Karsten Dambekalns,"",2013-08-14 09:35,- Documentation -,2.0.1,2012-09-12,"","",0,2012-09-12 03:53,"","",801150,"","",The new authentication controller needs to be documented.
40857,TYPO3.Flow,Feature,"",Resolved,Should have,"When template is automatically retrieved but not found, a hint about the tried location should be present",Adrian Föder,Adrian Föder,2012-12-12 10:02,MVC,2.0 beta 1,2012-09-12,"","",100,2012-09-12 04:53,"","",801300,"","","Currently, Fluid throws a nice exception when a template file couldn't be found at a tried location.
FLOW3, however, eats this exception and gives a generic ""No template was found. View could not be resolved for action ...""
This should be augmented with the tried path which can give a perfect hint *why* the file was not found (eg a simple typo or a controller name the developer wasn't aware of).

"
40863,TYPO3.Flow,Task,"",Resolved,Should have,Update to Doctrine ORM version 2.3.x,Karsten Dambekalns,Karsten Dambekalns,2012-11-07 03:35,Persistence,2.0 beta 1,2012-05-24,"","",100,2012-09-12 07:06,"","",801600,"","",Make sure we can use stock 2.3 packages to be able to rely on composer.
40888,TYPO3.Flow,Bug,"",Resolved,Should have,Add ViewNotFoundException,Karsten Dambekalns,Bastian Waidelich,2012-12-11 16:45,MVC,2.0 beta 1,2012-09-13,"","",100,2012-09-13 02:55,"","",802800,"",Git 1.2 (master),As noted in a comment on https://review.typo3.org/14439 we should not use @NotFoundView@ ourselves anymore. Thus it seems we should add a @ViewNotFoundException@ exception to handle that case.
40890,TYPO3.Flow,Bug,"",Resolved,Should have,Display error message if Data is not writeable,Robert Lemke,Robert Lemke,2012-12-11 04:27,Core,2.0 beta 1,2012-09-13,"","",100,2012-09-13 05:15,"","",802900,"",Git 1.2 (master),"Currently the mkdir() command in Bootstrap doesn't check for any warnings if the directory Data or Data/Persistent could not be created.

If these directories can't be created, a proper error message should be displayed."
40984,TYPO3.Flow,Bug,"",Resolved,Must have,CsrfProtectionAspect fails with paginate view helper and empty f:link action argument,Pankaj Lele,"",2012-09-18 14:35,Security,2.0 beta 1,2012-09-17,"","",100,2012-09-17 04:46,"","",807300,"",Git 1.2 (master),"When Paginate ViewHelper is used in any template FLOW3 fails while adding Csrf token to the pagination links. It fails even after adding @FLOW3\SkipCsrfProtection as a known workaround for pagination. 

Exact error seen is ""The parameter class is expected to be either a string or an object "". With topmost backtrace lines as:

- ReflectionMethod::__construct(FALSE, ""indexAction"")

- TYPO3\FLOW3\Reflection\ReflectionService::getMethodAnnotations(FALSE, ""indexAction"", ""TYPO3\FLOW3\Annotations\SkipCsrfProtection"")

- TYPO3\FLOW3\Reflection\ReflectionService::isMethodAnnotatedWith(FALSE, ""indexAction"", ""TYPO3\FLOW3\Annotations\SkipCsrfProtection"")

One of the functional test for ViewHelper is also failing because of empty action.  http://ci.typo3.robertlemke.net/job/Fluid-ViewHelperTest/lastCompletedBuild/testReport/"
40989,TYPO3.Flow,Task,Story #41031: Composer support for packaging,Resolved,Must have,Autoloader in ClassReflection is not unregistered if reached,Christian Jul Jensen,Christian Jul Jensen,2012-09-18 04:36,Reflection,2.0 beta 1,2012-09-17,"","",100,2012-09-17 05:53,"","",807550,"","","The autoloader in ClassReflection that throws an exception if reached - indicating that a file could not be properly loaded for reflection - and thereby avoiding a fatal error, does not get unregistered if the situation occurs. Leaving the autoloader hanging. This causes trouble if fx. a class_exists call is made for an non-existing class."
40998,TYPO3.Fluid,Bug,"",Under Review,Should have,Missing parent request namespaces in form field name prefix,Karsten Dambekalns,Sebastian Kurfuerst,2013-08-14 09:39,ViewHelpers,1.1.1,2012-09-17,"","",0,2012-09-17 06:11,"","",808000,"",Git 1.1,[add nice description here]
41008,TYPO3.Fluid,Bug,"",Rejected,Should have,f:format.currency should use trim ,Cedric Ziel,"",2013-11-13 22:04,ViewHelpers,"",2012-09-17,"","",0,2012-09-17 11:22,"","",808450,"",(any),"Hello; if you use an IDE and use their reformat feature, you have the problem that viewhelpers get splitted up into several lines just like in the example:

<pre>
<f:format.currency currencySign=""?"" decimalSeparator="","" thousandsSeparator=""."">
   {object.amount}
</f:format.currency>
</pre>

This results in non-supported chars for format_number.

The Viewhelper therefore should trim before calling number_format:

<pre>
number_format(trim($stringToFormat), 2, $decimalSeparator, $thousandsSeparator);
</pre>"
41029,TYPO3.Flow,Bug,"",Accepted,Should have,Method security is also evaluating abstract classes,Rens Admiraal,Karsten Dambekalns,2013-01-19 15:55,Security,"",2012-09-18,"","",0,2012-09-18 03:27,"","",809500,"",Git master,"I want to secure all controllers in my vendor namespace except controllers named LoginController, for that I use the following pointcut expression:

<pre>
ApplicationControllers: 'method(Beech\.*\Controller\.*(?<!Login)Controller->.*Action())'
</pre>

This did not work at all (webredirect forwards me to the LoginController, and as access is denied on the LoginController chrome stops with a TOO_MANY_REDIRECTS).

Some more debugging learned me that the security framework denied access to the abstract class AbstractController (from which the LoginController extends). Implementing all methods from the abstract class in the LoginController does not solve this. Only extending from a class not matching the pattern (\TYPO3\FLOW3\Mvc\Controller\ActionController) solves the issue and has the expected result.

Imagine the more general pattern: .*\Controller\.*(?<!Login)Controller->.*Action(), this would even match the \TYPO3\FLOW3\Mvc\Controller\ActionController and thus block all access.


Question is: Shouldn't the Security Framework only evaluate the actual classnames being used?"
41031,TYPO3 Flow Base Distribution,Story,"",Resolved,Must have,Composer support for packaging,Karsten Dambekalns,Christian Jul Jensen,2012-09-25 05:19,"",2.0 beta 1,2012-09-17,"","",100,2012-09-18 04:36,"","",2953900,0.00,"",""
41046,TYPO3.Flow,Bug,"",Resolved,Must have,Debugger crashes when coming upon Closure variable,Adrian Föder,Adrian Föder,2012-09-19 04:35,Error,2.0 beta 1,2012-09-18,"","",100,2012-09-18 11:52,"","",810300,"",Git 1.2 (master),"consider just

<pre><code class=""php"">
\TYPO3\FLOW3\var_dump(function(){});

// or 

TYPO3\FLOW3\Error\Debugger::renderDump(function(){}, 0);
</code></pre>

This gives the error

> Closure object cannot have properties

because of this line:

<pre><code class=""php"">
if ($object instanceof \TYPO3\FLOW3\Object\Proxy\ProxyInterface || (isset($object->__IS_PROXY__) && $object->__IS_PROXY__ === TRUE)) {
</code></pre>

in Debugger.php on line 220 (@$object@ is the closure in this case, and even trying to access the __IS_PROXY__ thing leads to the exception.

I'm already working on a patch."
41048,TYPO3.Flow,Bug,"",Rejected,Must have,AbstractAuthenticationController namespace does not match folder structure,Christian Jul Jensen,Christian Jul Jensen,2012-10-24 10:12,Security,2.0 beta 1,2012-09-18,"","",0,2012-09-18 13:51,"","",810400,"",Git 1.2 (master),The namespace in AbstractAuthenticationController does not the directory path and thus makes the autoloader fail.
41088,TYPO3.Flow,Bug,"",Resolved,Should have,PackageManagerTest::packageStatesConfigurationContainsRelativePaths fails in Composer branch,Christian Jul Jensen,Christian Jul Jensen,2012-09-24 06:35,Package,2.0 beta 1,2012-09-20,"","",100,2012-09-20 04:10,"","",812300,"",Git 1.2 (master),""
41091,TYPO3.Flow,Bug,"",Resolved,Should have,PackageManagerTest::createPackageThrowsExceptionForExistingPackageKey fails with composer changes,Christian Jul Jensen,Christian Jul Jensen,2012-09-25 05:20,Package,2.0 beta 1,2012-09-20,"","",100,2012-09-20 04:43,"","",812450,"",Git 1.2 (master),createPackage needs to be adapted to interface changes
41092,TYPO3.Flow,Bug,"",Resolved,Should have,PackageManagerTest::deactivatePackageThrowsAnExceptionIfPackageIsProtected fails in composer branch,Christian Jul Jensen,Christian Jul Jensen,2012-09-24 06:35,Package,2.0 beta 1,2012-09-20,"","",100,2012-09-20 04:47,"","",812500,"",Git 1.2 (master),Probably related to the failing CreatePackage tests
41093,TYPO3.Flow,Bug,"",Resolved,Should have,PackageManagerTest::deletePackageThrowsAnExceptionIfPackageIsProtected fails in composer branch,Christian Jul Jensen,Christian Jul Jensen,2012-09-24 06:35,Package,2.0 beta 1,2012-09-20,"","",100,2012-09-20 04:48,"","",812550,"",Git 1.2 (master),Probably related to failing CreatePackage tests
41136,TYPO3.Flow,Feature,"",Resolved,Should have,Convenience function for registering routes in functional tests,Robert Lemke,Robert Lemke,2012-09-21 11:35,- Testing -,2.0 beta 1,2012-09-20,"","",100,2012-09-20 16:19,"","",814400,"","",The functional testcase should provide a registerRoute() method.
41137,TYPO3.Flow,Feature,"",Resolved,Should have,Allow rendering of links without csrf protection token,Christian Müller,Robert Lemke,2012-09-21 11:35,"","",2012-09-20,"","",100,2012-09-20 16:44,"","",814450,"","",Currently there is no way to render a link without a token when authenticated even if the action you link to is available without authentication. This prevents to create useful links for emails or also TYPO3 Phoenix.
41146,TYPO3.Flow,Bug,"",Resolved,Must have,Query with setOffset returns count() = 0,Carsten Bleicker,Bastian Waidelich,2012-12-12 03:24,Persistence,2.0 beta 1,2012-09-21,"","",100,2012-09-21 04:03,"","",814850,"",Git 1.2 (master),"f.e. in the paginateController: Line# 72:

.....

$query = $this->objects->getQuery();
$query->setLimit($itemsPerPage);
if ($this->currentPage > 1) {
	$query->setOffset((integer)($itemsPerPage * ($this->currentPage-1)));
}
		
$modifiedObjects = $query->execute();

......


Result:
$modifiedObjects->count() will return 0 wich sould be the number of records per page f.e.
This 0 makes the iterator.isLast impossible in the child rendering f:for
"
41148,TYPO3.Flow,Bug,"",New,Must have,Converting of ValueObjects,Carsten Bleicker,"",2012-12-13 06:35,"","",2012-09-21,"","",0,2012-09-21 04:10,"","",814950,"",Git master,"having a Model ""Category"" as a valueObject and want to display Articles having this Category assigned the mapping fails with Creation not allowed exception.


Uri looks like this:
listarticlesbycategory?category[__identity]=1ffb48f0cda7a90ace1f460d7bcc387a7274a777

f.e.:
listArticlesByCategory(\Vendor\Package\Domain\Model\Category $category)


think this is a bug in PersistentObjectConverter. This unsets the __identifier so its recognized as a new one.



"
41157,TYPO3.Flow,Bug,"",Resolved,Should have,TYPO3.FLOW3.object.excludeClasses gives fatal error if a configuration exists for a non-installed package,Christian Jul Jensen,Christian Jul Jensen,2012-09-25 05:19,Object,2.0 beta 1,2012-09-21,"","",100,2012-09-21 05:52,"","",815350,"",Git 1.2 (master),""
41169,TYPO3.Flow,Bug,"",Closed,Should have,Routing Cache caches csrf protection tokens,Christian Müller,Bastian Waidelich,2013-05-31 12:47,MVC - Routing,"",2012-09-21,"","",0,2012-09-21 10:11,"","",815900,"",Git master,"If you look at the saved urls in routing cache files you will see that csrf protection tokens are cached in there, which is not very useful."
41180,TYPO3.Kickstart,Bug,"",Resolved,Should have,Kickstart generates classes in wrong path in 1.2 (PSR-0 issue),Christian Jul Jensen,Christian Jul Jensen,2012-09-25 07:35,"",2.0 beta 1,2012-09-21,"","",100,2012-09-21 10:42,"","",816450,"",Git 1.2 (master),FLOW3 1.2 is fully PSR-0 so classes path should be prefixed with namespace-path
41181,TYPO3.Flow,Bug,"",Resolved,Should have,Package->getClassesPath returns path without trailing slash,Christian Jul Jensen,Christian Jul Jensen,2012-09-25 05:19,Package,2.0 beta 1,2012-09-21,"","",100,2012-09-21 10:44,"","",816500,"",Git 1.2 (master),"This behaviour breaks the API. Also question is if it should append namespaced path.

"
41252,TYPO3.Flow,Bug,"",Closed,Should have,Object Route Part to Integer ID generates dash in URL,Mario Rimann,Bastian Waidelich,2013-07-09 03:37,MVC - Routing,"",2012-09-22,"","",0,2012-09-22 07:48,"","",820000,"",FLOW3 1.1.0,"I have a model that has an ID property that is configured like:

<pre>
	/**
	 * The ID of this task
	 *
	 * @var integer
	 * @FLOW3\Identity
	 * @ORM\Column(columnDefinition=""INT(11) NOT NULL AUTO_INCREMENT UNIQUE"")
	 */
	protected $id;
</pre>

And the following route definition:

<pre>
-
  name: 'Task Detail view'
  uriPattern: 'tasks/{task}'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Task'
    '@action':     'show'
  routeParts:
    task:
      objectType: 'My\Package\Domain\Model\Task'
</pre>

Using the following Fluid Snippet, my list view generates URLs that are working properly - but showing a ""-"" in the URL that I don't expect/want to be in the URL:

<pre>
<f:link.action action=""show"" controller=""Task"" arguments=""{task: task}"">
	{task.title}
</f:link.action>
</pre>

Expected URL:
<pre>
http://dev.foo.lo/tasks/15
</pre>

Current URL:
<pre>
http://dev.foo.lo/tasks/-15
</pre>"
41297,TYPO3.Flow,Feature,"",Rejected,Should have,Add a way to extends the Account security model,Dominique Feyer,Bastian Waidelich,2014-03-11 04:48,Security,"",2012-09-23,"","",0,2012-09-23 09:58,"","",822250,"","","Currently it's not possible to extend the \TYPO3\FLOW3\Security\Account. I try to use the same configuration as in the TYPO3.Party package.

1. I create a AbstractAccount abstract
2. I create Account that extension AbstractAccount

The AbstractAccount has the following annotations:

* @FLOW3\Entity
* @ORM\InheritanceType(""JOINED"")

When I start the doctrine:update (or migration), it fail with this message:

<pre>
Uncaught Exception
  There is no column with name 'accountidentifier' on table
  'typo3_flow3_security_account'.

More Information
  Exception code      #30
  File                /Users/dfeyer/Sites/dev/medialib.tv.ttree.dev/Packages/Framework/Doctrine.DBAL/Classes/Schema/SchemaException.php line 60
</pre>

In my project I have a mutli domain application, where I need to apply a security policy, based on the current domain. I need to add a ""owner"" field (and have this field as Identity, to allow the same username in different domain instance). We can sponsor, this feature if needed.

When i check the Party package, I found no other configuration and/or annotation. What's wrong in my proposition ?

Bests,"
41301,TYPO3.Flow,Feature,"",Rejected,Could have,Allow action-method-dependent errorAction,Adrian Föder,"",2013-10-21 10:33,MVC,"",2012-09-24,"","",0,2012-09-24 03:21,"","",822450,"","","currently, there's only one errorAction for all errors, no matter what action actually has been invoked.

This will follow the naming convention, means, if there is a @deleteAction@, for example, there could be a @deleteActionErrorAction@ which will be called rather than the ""fallback"" errorAction; if its present.
"
41310,TYPO3.Flow,Task,Story #41031: Composer support for packaging,Resolved,Must have,Web/index.php is not installed,Karsten Dambekalns,Christian Jul Jensen,2012-09-25 05:19,"",2.0 beta 1,2012-09-24,"","",100,2012-09-24 06:05,"","",822900,"","",With composer the @Web/index.php@ script is not installed.
41334,TYPO3.Flow,Bug,"",Resolved,Must have,Handle missing type in composer manifest gracefully ,Karsten Dambekalns,Karsten Dambekalns,2012-09-25 05:19,Package,2.0 beta 1,2012-09-24,"","",100,2012-09-24 16:58,"","",824000,"",Git 1.2 (master),""
41358,TYPO3.Flow,Feature,"",Resolved,Could have,Allow class/interface constants in configuration directives,Adrian Föder,Adrian Föder,2012-11-08 09:35,Configuration,2.0 beta 1,2012-09-25,"","",100,2012-09-25 09:17,"","",825200,"","","currently, only ""raw"" plain PHP constants can be used in YAML files, like @%FLOW3_PATH_FLOW3%@.
IMHO nothing speaks against allowing class constants to be used here, too."
41369,TYPO3.Flow,Bug,"",Resolved,Must have,Web/.htaccess is not installed,Karsten Dambekalns,Karsten Dambekalns,2012-09-25 17:35,"",2.0 beta 1,2012-09-24,"","",100,2012-09-25 16:35,"","",825750,"",Git 1.2 (master),With composer the @Web/.htaccess@ file is not installed.
41378,TYPO3.Flow,Feature,"",Resolved,Must have,Allow to keep existing files in copyDirectoryRecursively(),Karsten Dambekalns,Karsten Dambekalns,2012-09-26 06:36,Utility,2.0 beta 1,2012-09-26,"","",100,2012-09-26 04:01,"","",826200,"","",This is needed to the Composer post-install script?
41414,TYPO3.Flow,Task,"",Needs Feedback,Should have,Check packageKey naming / file structure below Packages/Vendor,Rens Admiraal,"",2012-11-07 05:39,Package,"",2012-09-27,"","",0,2012-09-27 05:20,"","",828000,"","","It leads to a confusing situation if you install a composer package with dashes in the name. The actual packageKey to use in FLOW3 (for example while configuring excludeClasses) is without dashes, while the folder structure used by composer does contain the dashes. This can be confusing.

This issue is created so this can be discussed.

Example package:
https://github.com/simplethings/EntityAudit/blob/master/composer.json

This leads to the following folder structure below Packages/Vendor:

<pre>
??? composer
??? simplethings
?   ??? entity-audit-bundle
??? symfony
    ??? dom-crawler
    ??? yaml
</pre>

The code from the PackageStates.php:
<pre>
    'simplethings.entityauditbundle' => 
    array (
      'state' => 'active',
      'packagePath' => 'Vendor/simplethings/entity-audit-bundle/',
      'classesPath' => 'src/',
    ),
</pre>"
41418,TYPO3.Flow,Bug,"",Resolved,Must have,"Manifestpath detection broken, exception in production context",Karsten Dambekalns,Karsten Dambekalns,2012-09-28 08:35,Package,2.0 beta 1,2012-09-27,"","",100,2012-09-27 07:37,"","",828200,"",Git 1.2 (master),In production context class loading fails because the classloader has a wrong map for namespaces. This is caused by getNamespace() doing the wrong thing - because it finds no composer manifest. See screenshot for why.
41420,TYPO3.Flow,Feature,"",New,Should have,Support entity versioning,Rens Admiraal,Rens Admiraal,2012-09-27 08:11,Persistence,"",2012-09-27,"","",0,2012-09-27 08:11,"","",828300,"","",Support versioning of entities with for example https://github.com/simplethings/EntityAudit
41421,TYPO3.Flow,Feature,"",Resolved,Must have,copyDirectoryRecursively() needs to copy dotfiles,Karsten Dambekalns,Karsten Dambekalns,2012-09-28 05:35,Utility,2.0 beta 1,2012-09-27,"","",100,2012-09-27 08:31,"","",828350,"","",""
41439,TYPO3.Fluid,Feature,"",Rejected,Should have,"Argument to add an active-state class to ""f:link.action""",Michael Gerdemann,Bastian Waidelich,2012-12-12 08:36,ViewHelpers,"",2012-09-28,"","",0,2012-09-28 03:21,"","",829250,"","","If the rendered template exactly matches the action, it would be great if you would have the ability to automatically add a ""active"" class."
41444,TYPO3.Flow,Bug,"",Closed,Must have,Resource->getUri does not return the same as getResourcePointer->getHash,Adrian Föder,Adrian Föder,2012-09-28 06:51,Resource,2.0 beta 1,2012-09-28,"","",0,2012-09-28 06:31,"","",829500,"",(any),so far just as a note to myself; will proof this with a Test.
41449,TYPO3.Flow,Bug,"",Resolved,Could have,Generated composer manifest should have 'Description' field,Christian Jul Jensen,Christian Jul Jensen,2012-11-12 03:46,Package,2.0 beta 1,2012-09-28,"","",100,2012-09-28 07:56,"","",829750,"",Git 1.2 (master),PackageManager::writeComposerManifest generates no Description field if no Metadata is passed. This results in an invalid composer-manifest. It doesn't seem to actually yield any problems or errors with composer per se though.
41451,TYPO3.Flow,Bug,"",Resolved,Must have,Part II: Getting started: Validation lacks NotEmptyValidator mentioning,Adrian Föder,Adrian Föder,2012-12-10 07:07,- Documentation -,2.0 beta 1,2012-09-28,"","",100,2012-09-28 08:07,"","",829850,"",(any),""
41459,TYPO3.Flow,Bug,"",Resolved,Should have,Version information missing,Pankaj Lele,Bastian Waidelich,2013-12-17 03:04,Command,"",2012-09-28,"","",100,2012-09-28 14:52,"","",830250,"",Git master,"FLOW3 version information is missing when running ./flow3 help command

<pre>
./flow3 help
FLOW3  (""Development"" context)
usage: ./flow3 <command identifier>
</pre>"
41466,TYPO3 Flow Base Distribution,Story,"",Resolved,Should have,Rename things,Karsten Dambekalns,Karsten Dambekalns,2012-12-10 07:26,"",2.0 beta 1,2012-09-29,"","",100,2012-09-29 15:09,"","",2953950,"","",""
41496,TYPO3.Flow,Bug,"",New,Must have,"Upload identical Resources, deleting fails",Martin Ebeling,"",2012-10-01 11:57,Resource,"",2012-10-01,"","",0,2012-10-01 11:57,"","",832000,"",FLOW3 1.1.0,"If you have models where you can attach/upload Resources the deletion will fail.
Due to a Foreign key constraint in typo3_flow3_resource_resource the resourcepointer is inserted multiple times.

When you try to delete the model the resourcepointer can not be deletet because its still available in the resource table due to the connection of the same hash to the typo3_flow3_resource_resource.

My Idea for fixing it adding the system time to the hash."
41497,TYPO3.Flow,Bug,"",Resolved,Must have,PackageStates are written on each request,Christopher Hlubek,Christopher Hlubek,2012-10-03 18:35,Package,"",2012-10-01,"","",100,2012-10-01 12:36,"","",832050,"",Git 1.2 (master),With the introduction of Composer in the PackageManager a bug was introduced that saves package states on each call to @loadPackageStates@ which triggers re-compilation of all proxy classes.
41499,TYPO3.Flow,Bug,"",Resolved,Must have,Class cache is not flushed from class changes,Christopher Hlubek,Christopher Hlubek,2012-10-03 18:35,"","",2012-10-01,"","",100,2012-10-01 13:25,"","",832150,"",Git 1.2 (master),"An updated class file is picked up correctly from the file monitoring but the according cache entries are not flushed, since the file name doesn't have the supposed layout after the PSR-0 refactoring."
41508,TYPO3 Flow Base Distribution,Task,"",Under Review,Should have,Replace Jasmine by Buster.js,Rens Admiraal,Rens Admiraal,2012-10-01 14:58,"","",2012-10-01,"","",0,2012-10-01 14:57,"","",832600,"","","Before the interface switch to Emberjs we used Jasmine testrunner for running tests. This runner needed generated HTML files before running tests, and did not have support for attaching multiple browsers. Buster.js does have this support and allows running tests using phantomjs which has full webkit javascript support."
41524,TYPO3.Flow,Bug,"",Closed,Should have,csrfToken not added to action links having action method name with more than 1 word,Pankaj Lele,Bastian Waidelich,2012-10-18 04:21,Security,"",2012-10-02,"","",0,2012-10-02 06:39,"","",833400,"",Git 1.2 (master),"In short: csrfToken is not added to links who's target action is ""someOtherAction"" but only works for action names like ""someAction""

After digging a little bit in code I found that UriBuilder->uriFor() makes the @action argument forcefully lowercase and hence $this->reflectionService->hasMethod($className, $actionName) in the CsrfProtectionAspect returns false."
41525,TYPO3 Flow Base Distribution,Bug,"",Closed,Should have,"Fields Validated in Controller not highlightet, just Error shown",Martin Ebeling,Christian Müller,2012-12-17 07:26,"","",2012-10-02,"","",100,2012-10-02 06:41,"","",833450,"",FLOW3 1.1.0,"Fields are not highlighted if Validation is at ControllerAction like

        /**
	 * @param string $name
	 * @FLOW3\Validate(argumentName=""name"", type=""NotEmpty"")
	 * 
	 * @param string $email
	 * @FLOW3\Validate(argumentName=""email"", type=""NotEmpty"")
	 * @FLOW3\Validate(argumentName=""email"", type=""EmailAddress"")
	 * @return void
	 */
	public function createAction($name, $email) {

Just these errors are shown

[ERROR]
name: 1221560718 : This property is required.
email: 1221560718 : This property is required.
Errors occurred

Please check the highlighted fields below!
[END]

For getting these errors shown in View, I mainly copied the partials from the ConferencePackage

Mainly I tried to have a form where I create an Person, extended to a student class. 
The Errors validated in the StudentModel are shown in the form.

Additional to that I need to have PersonName also Validatet, without putting all these fields in the extended personClass.


"
41533,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Ignored object-validation in editAction when redirecting back from updateAction,Simon Schick,"",2012-10-10 03:27,"","",2012-10-02,"","",0,2012-10-02 11:40,"","",833850,"",FLOW3 1.1.0,"I tried to create a blog following The Definitive Guide.

I ran into the ""problem"" that I did not got the exception described on http://flow3.typo3.org/documentation/guide/partii/validation.html#validating-updated-arguments.

As I Tried updating a post with an empty title and submitting the form I got back to the editAction, seeing the form having an empty title-field.
In addition I saw the error-info ""title: This property is required."".
So I did not have to add the annotation ""@FLOW3\IgnoreValidation(""$post"")"".

Before I added the annotations ""@FLOW3\Validate(type=""NotEmpty"")"" to the model, I saved a post having an empty title and I was not able to open this post in the edit-view.

Here's the source of the controller and the model: https://gist.github.com/3819948"
41571,TYPO3.Flow,Bug,"",Closed,Must have,UriBuilder doesn't properly handle arguments of SubRequests,Marc Neuhaus,Marc Neuhaus,2012-11-25 17:15,"",2.0 beta 1,2012-10-03,"","",0,2012-10-03 12:35,"","",834800,"",Git 1.2 (master),"If you're creating a link inside a SubRequest that link currently doesn't add/remember the Arguments, Controller, etc from the parentRequest if it's nested more than one level.

For example: I'm creating a kind of Application Frame/Scaffold to integrate other Packages/Controller, for that i've created an ScaffRuntime to encapsulate the other controllers inside a SubRequest and add that generated content to my layout. Now, if i use a controller which uses the ExposeRuntime to expose some Models the links generated inside that SubRequest don't carry on the arguments set in the ScaffRuntime, which results in completly useless links and redirects.

Links in SubRequest should carry all arguments of parentRequests with it, because normally a link inside a SubRequest doesn't change anything about there parents, because they probably don't even know about them."
41657,TYPO3.Flow,Bug,"",Resolved,Must have,ActionRequest does not resolve correctly cased package key,Jan-Erik Revsbech,Jan-Erik Revsbech,2012-11-12 03:50,Package,"",2012-10-07,"","",100,2012-10-07 13:31,"","",838850,"",Git 1.2 (master),"The methods createPackage in class TYPO3\Flow\Package\PackageManage no longers generates the Package.php. The kickstart:package command uses this methods when kickstarting new packages, and the missing Package.php lead to seemingly unrelated errors like not not being able to correctly translate lower-case packagename to correct packagename.

I'm not sure why the file is no longer generated, it seems to be in relation to the Composer changes of the PackageManager, and it might very well be by intention. 

If its by intention, we need to change the setControllerPackageKey of ActionRequest, since it calls the ObjectManger->getCaseSensitiveObjectName looking for the Package class, which when missing fails to find the correct PackageKey.

Anyone knows if its by intention it was omitted from the packagemanager?"
41706,TYPO3.Eel,Feature,"",Resolved,Should have,Provide standard library with configurable usage,Christopher Hlubek,Christopher Hlubek,2013-11-15 15:35,"","",2012-10-08,"","",100,2012-10-08 05:54,"","",840750,"","","Eel should include a *standard library* with the most basic functions for Date, String and Array.

Suggestion:

<pre><code>
Date.now().format(""d.m.Y"")
String.strftime(""%d.%m.%Y"", Date.now())
Array.join(Array.reverse(items), ' - ')
Array.count([1, 2, 3])
</code></pre>

Eel should still be usable with an empty Context for total flexibility."
41727,TYPO3.Flow,Bug,"",Accepted,Should have,"@Flow\Identity and @ORM\InheritanceType(""JOINED"") can't be used together",Irene Höppner,Karsten Dambekalns,2013-01-21 11:15,"","",2012-10-08,"","",0,2012-10-08 10:52,"","",841800,"",(any),"If you have a superclass

<pre>
/**
 * @Flow\Entity
 * @ORM\InheritanceType(""JOINED"")
 */
class Person {
	/**
	 * @var string
	 * @Flow\Identity
	 */
	protected $email;

[getters and setters...]

}
</pre>

and a corresponding subclass

<pre>
/**
 * @Flow\Entity
 */
class SpecialPerson extends \In2code\IdentityMigrationTest\Domain\Model\Person {

}
</pre>

the doctrine:migrationgenerate and doctrine:update commands fail with the following exception:

<pre>
Uncaught Exception
  There is no column with name 'email' on table
  'in2code_identitymigrationtest_domain_model_specialperson'.

More Information
  Exception code      #30
  File                /Users/ihoeppner/Sites/Base/Packages/Vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/SchemaException.php line 60
</pre>


Also some functional tests fail with ""Doctrine\DBAL\Schema\SchemaException : There is no column with name 'email' on table 'in2code_identitymigrationtest_domain_model_specialperson'."".

Removing either the @ORM\InheritanceType annotation or the @Flow\Identity annotation ""resolves"" the problem.

This regards to version 1.1.0 and 1.2.0-dev."
41807,TYPO3.Flow,Task,"",Under Review,Should have,Initialize the eventmanager in the EntityManagerInterface,Rens Admiraal,Rens Admiraal,2013-05-21 07:28,Persistence,"",2012-10-09,"","",0,2012-10-09 14:28,"","",845800,"","","Doctrine extensions often need to register themselves to the EventManager. This EventManager is now not passed to the EntityManager by Flow, thus the EntityManager initiates an instance itself."
41809,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,ConfigurationBuilder throws an error on classes without methods,Rens Admiraal,Rens Admiraal,2012-11-08 15:36,"",2.0 beta 1,2012-10-09,"","",100,2012-10-09 15:41,"","",845900,"",Git 1.2 (master),The ConfigurationBuilder does a foreach over the result of get_class_methods($class). This throws a fatal error if the class does not have methods.
41818,TYPO3.Flow,Bug,"",Resolved,Should have,Development Performance: Improve performance of Compile Run if no changes appeared,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-10-15 09:36,Core,2.0 beta 1,2012-10-10,"","",100,2012-10-10 03:40,"","",846350,"",(any),"I profiled performance of development context; and found the following:

* A lot of time is spent during *typo3.flow:objectmanagement:proxyclasses* - as expected. For my neos instance, roughly 1.8 seconds of 3.1 seconds of Neos Development Mode (See before.png -- the *white* bar is proxy class building.
* When drilling down into the compile-time run which is then executed, you see that lots of time is spent inside *typo3.flow:objectmanagement:compiletime:finalize*  -- 1.2 of a total of 1.5 seconds. (before-compiletime.png)
* If there were no changes to the source files, the CoreCommandController::compileCommand just returns early
** Actually, you see that we *only* need to fully initialize the object manager in the compile command *if* anything changed.

**Goal:** If no changes occured, do not run the *typo3.flow:objectmanagement:compiletime:finalize* command, such that the compile-time run only runs for 0.3 seconds in my case.

* After the optimization is applied, you see inside *comparison-before-after.png* that the runtime goes down from about 3.1 to 1.8 seconds if there were no changes to source files.

This is mostly work in progress and meant as a discussion base

See the attached changeset at https://review.typo3.org/#/c/15472/ for a WIP implementation"
41832,TYPO3.Flow,Task,Bug #41843: Composer and rename issues (umbrella issue),New,Should have,Improve error handling for incompatible packages,Bastian Waidelich,Christian Jul Jensen,2012-10-10 08:44,Package,"",2012-10-10,"","",0,2012-10-10 07:00,"","",847050,"","","Installing packages that are not PSR-0 compatible currently produces some very unexpected errors:

For example when installing *ruflin/Elastica* from packagist I get following fatal error:
<pre>
Execution of subprocess failed with exitcode ""255"" and output:

Fatal error: Cannot redeclare class Elastica_Client in
Packages/Vendor/ruflin/Elastica/lib/Elastica/Client.php
on line 11
</pre>

Following line in my distributions *Settings.yaml* solved it for me (but it took me a *while* ;)
<pre>
<code class=""yaml"">
TYPO3:
  Flow:
    object:
      excludeClasses:
       'ruflin.Elastica' : ['Elastica\\.*']
</code>
</pre>

When trying to install/use a Flow package that has not yet been converted to be PSR-0 compliant, I also get a fatal error that's very hard to comprehend:

<pre>
Uncaught Exception
  Execution of subprocess failed with exitcode ""1"" and output:

  Uncaught Exception
    Warning: Invalid argument supplied for foreach() in

  Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Object/Configuration/ConfigurationBuilder.php
    line 362

  More Information
    Exception code      #1

[...]

More Information
  Exception code      #0

[....]"
41843,TYPO3 Flow Base Distribution,Bug,"",New,Should have,Composer and rename issues (umbrella issue),Karsten Dambekalns,"",2013-01-15 11:19,"","",2012-10-10,"","",60,2012-10-10 08:44,"","",847600,0.00,Git master,""
41848,TYPO3.Flow,Bug,Bug #41843: Composer and rename issues (umbrella issue),Resolved,Must have,Core migration tool applies migrations twice,Adrian Föder,Christopher Hlubek,2012-12-10 07:08,Core,2.0 beta 1,2012-10-10,"","",100,2012-10-10 10:04,"","",847850,"",Git 1.2 (master),"With for example my MooTools.Packager repository located here: http://git.typo3.org/FLOW3/Packages/MooTools.Packager.git I get the following situation when running core:migrate then:

<pre>
Applying TYPO3.FLOW3-201209201112
  Migrating MooTools.Packager
fatal: Could not switch to 'C:/Users/afoeder/PhpstormProjects/acme/Distribution/Packages/Application/MooTools.Packager/Meta': No such file or directory
    [master c322f04] [TASK] Apply migration TYPO3.FLOW3-201209201112
     4 files changed, 2 insertions(+), 2 deletions(-)
     rename Classes/MooTools/Packager/{ => }/MooTools/Packager/Service/PackageBuildConfiguration.php (100%)
     rename Classes/MooTools/Packager/{ => }/MooTools/Packager/Service/PackageBuildService.php (100%)
     rename Classes/MooTools/Packager/{ => }/MooTools/Packager/ViewHelpers/JavaScriptFileViewHelper.php (100%)
  Skipping Twitter.Bootstrap, the migration is already applied.
  Skipping TYPO3.Aloha, the migration is already applied.
  Skipping TYPO3.Comments, the migration is already applied.
  Skipping TYPO3.Eel, the migration is already applied.
  Skipping TYPO3.ElasticSearch, the migration is already applied.
  Skipping TYPO3.ExtJS, the migration is already applied.
  Skipping TYPO3.Form, the migration is already applied.
  Skipping TYPO3.Imagine, the migration is already applied.
  Skipping TYPO3.Media, the migration is already applied.
  Skipping TYPO3.Phoenix.ContentTypes, the migration is already applied.
  Skipping TYPO3.Setup, the migration is already applied.
  Skipping TYPO3.SiteKickstarter, the migration is already applied.
  Skipping TYPO3.TYPO3, the migration is already applied.
  Skipping TYPO3.TYPO3CR, the migration is already applied.
  Skipping TYPO3.TypoScript, the migration is already applied.
</pre>

The git log *afterwards* then says

<pre>
commit c322f040a516bcb2ac105e829d25d91cafeb251c
Author: Adrian Föder <adrian@foeder.de>
Date:   Wed Oct 10 15:38:10 2012 +0200

    [TASK] Apply migration TYPO3.FLOW3-201209201112

    Change-Id: Ife57be5c01835f7bd97c7664cc55d3c55c7e8fa9

commit 857067ec5487b788bf9b86728952e20fb7d1093f
Author: Adrian Föder <adrian@foeder.de>
Date:   Wed Oct 10 13:45:30 2012 +0200

    [TASK] Last trivial FLOW3 to Flow renamings

    Change-Id: Ib5d96ca495c3c1bb39081a6098a394a3bf892e54

commit 01fc419cc1325ec951f4b74e49afbf64ee426188
Author: Adrian Föder <adrian@foeder.de>
Date:   Tue Oct 9 16:41:15 2012 +0200

    Deleted package.php file

    Change-Id: Iedc30438328f2f2f5d1b295ee2c3f64d3be1cc77

commit ec2705c3639820465331607c8fe47aaf29e1c734
Author: Adrian Föder <adrian@foeder.de>
Date:   Tue Oct 9 16:39:18 2012 +0200

    [TASK] Apply migration TYPO3.Flow-201209251426

    Change-Id: I31c8d8915d66507c8b8784d9292cf2c626816d17

commit 6dfad6702899c6f934558607ab50dce64dcde204
Author: Adrian Föder <adrian@foeder.de>
Date:   Tue Oct 9 16:39:18 2012 +0200

    [TASK] Apply migration TYPO3.FLOW3-201209201112

    Change-Id: Ie673fa7944b0d85916ece96c75ba4e3f7f14fe95
:
</pre>

it can clearly be seen that the -1112 migration is applied twice.
Afterwards, the actual class files lay here:

`Classes/MooTools/Packager/MooTools/Packager/[heretheyare]`."
41900,TYPO3.Flow,Feature,Bug #41843: Composer and rename issues (umbrella issue),Accepted,Should have,Check for duplicate PSR-0 autoload namespaces,Robert Lemke,Christian Jul Jensen,2013-05-21 07:28,Package,"",2012-10-12,"","",0,2012-10-12 02:53,"","",850200,"","","Currently, if two packages define the same PSR-0 autoload namespace in their composer.json, it goes unnoticed by the package management.

For example, if someone (let's say, me) just copies a composer manifest from a different package (TYPO3.Flow) and forgets to update the ""autoload"" part, the new package will end up in a directory ""TYPO3.Flow"" too. The symptom then is that no Flow classes can be found by the autoloader, because it looks into the other package directory.

While generating PackageStates.php (or somewhere in that area) we should check for duplicate PSR-0 namespaces and issue a warning."
41989,TYPO3 Flow Base Distribution,Feature,"",Resolved,Should have,Assume integer values to be timestamps in DateTime converter,Helmut Hummel,"",2012-11-08 11:35,"","",2012-10-14,"","",100,2012-10-14 10:21,"","",854500,"","","The DateTime TypeConverter cannot transform integer values to a DateTime object
because of a strict check for string.

Additionally accept integer values and also assume plain digits to be a timestamp
and use ""U"" as date format if no additional configuration is given."
42011,TYPO3.Flow,Feature,"",Resolved,Should have,Display package keys in migration status,Adrian Föder,Adrian Föder,2012-11-08 06:35,Command,2.0 beta 1,2012-10-15,"","",100,2012-10-15 06:22,"","",855600,"","","currently, only a bunch of versions are displayed in @doctrine:migrationstatus@. Display the package names, too.

The result could be

<pre>
    >> 2011-09-25 12:31:20 (20110925123120) TYPO3.Media                 migrated
    >> 2011-09-28 11:40:48 (20110928114048) TYPO3.TYPO3CR               migrated
    >> 2011-12-15 17:20:27 (20111215172027) TYPO3.TYPO3CR               migrated
    >> 2012-02-10 11:13:01 (20120210111301) TYPO3.Comments              migrated
    >> 2012-03-14 13:46:37 (20120314134637) TYPO3.Comments              migrated
    >> 2012-03-28 15:20:41 (20120328152041) TYPO3.Flow                  migrated
    >> 2012-03-29 22:03:40 (20120329220340) TYPO3.Flow                  migrated
</pre>"
42013,TYPO3 Flow Base Distribution,Task,"",Resolved,Should have,Rename 'Vendor' to 'Libraries',Christian Jul Jensen,Christian Jul Jensen,2012-10-18 10:29,"",2.0 beta 1,2012-10-15,"","",0,2012-10-15 07:16,"","",855700,"","","In accordance with our 'naming should make sense' principle, it has been discussed to call the standard composer directory 'Vendor' something else.

The reason is that even though 'Vendor' is kind of industry standard for the placement of 3rd party packages, The TYPO3-Flow (and related) packages are actually 3rd party in relation to the locally installed project, and the consistent thing would then be to put all those packages in the 'Vendor' dir as well.

Using the word 'Libraries' is thus more meaningful in the context, and since we are not following standard Composer directory-structure anyway, it is not really breaking any conventions."
42025,TYPO3.Flow,Feature,"",Resolved,Could have,Uri type converter,Adrian Föder,Adrian Föder,2012-12-11 16:43,Http,2.0 beta 1,2012-10-15,"","",100,2012-10-15 11:59,"","",856300,"","",provide a URI type converter that converts strings (representing a URL/URI) into real Http\Uri objects
42049,TYPO3.Flow,Feature,"",Resolved,Should have,HTTP Browser: follow Location redirects like a real browser does,Adrian Föder,Adrian Föder,2012-10-18 17:35,Http,"",2012-10-16,"","",100,2012-10-16 09:20,"","",857400,"","","currently, unlike the raw ""RequestEngine"" functionality, a browser is intended to act like a real browser.
This means it should follow ""Location"" redirects if it stumbles opon such."
42082,TYPO3.Flow,Bug,"",Resolved,Must have,uriFor in subrequest does override explicit empty subpackageKey,Christopher Hlubek,Christopher Hlubek,2012-10-19 08:35,"","",2012-10-17,"","",100,2012-10-17 10:34,"","",858950,"",Git 1.2 (master),"This is a bug that was probably introduced or noticed after change Iae8a2a8a39d47d7e99743d78188dccdd4238ccfb.

This causes a problem in ExtDirect subrequests that generate URLs to Controllers not inside a subpackage because the subpackageKey from the current request will always be used (e.g. @Service\ExtDirect\V1@)."
42083,TYPO3.Flow,Bug,"",Resolved,Must have,CSRF token is not appended for actions with mixed case characters,Bastian Waidelich,Bastian Waidelich,2012-10-18 04:35,Security,2.0 beta 1,2012-10-17,"","",100,2012-10-17 10:52,"","",859000,"",Git 1.2 (master),"Since the update (I don't know what exactly broke this), the @CrsfProtectionAspect@ no longer appends the CSRF token when the target action contains uppercase characters (e.g. @someSpecialAction@).

The reason is, that in the aspect the action method name is retrieved all lowercase thus @ReflectionService::hasMethod($className, $actionMethodName)@ returns FALSE if $actionMethodName is not correctly cased."
42101,TYPO3.Flow,Bug,"",New,Must have,Proxyclasses are not rebuild in Development context unless cache is empty,Christian Jul Jensen,"",2013-08-14 09:35,Object,2.0.1,2012-10-17,"","",0,2012-10-17 14:46,"","",859900,"",Git master,"Proxy classes that are missing in the cache are not rebuild, unless the cache is completely flush

Experienced with 81a506011016e2d5091022800c9a509e6c0ac79e

I think this has been introduced quite recently, probably with https://review.typo3.org/#/c/15580/"
42114,TYPO3.Flow,Bug,"",Resolved,Must have,PHPUnit functional tests cannot be run when only installed through composer,Sebastian Kurfuerst,Karsten Dambekalns,2012-12-10 07:34,- Testing -,2.0 beta 1,2012-10-18,"","",100,2012-10-18 03:23,"","",860550,"",Git 1.2 (master),"Steps to reproduce:

* clone base distribution
* adjust composer.json to include <pre>phpunit/phpunit: 3.7.*</pre> as dev-dependency
* run <pre>composer install --dev --prefer-source</pre>
* Then, run unit tests: <pre>bin/phpunit -c Build/buildessentials/PhpUnit/UnitTests.xml</pre>
  -> unit tests report one error. Not sure if this is related, though.
* Then, run functional tests *with empty Data/Temporary/Testing cache*: <pre>bin/phpunit -c Build/buildessentials/PhpUnit/FunctionalTests.xml</pre>
* The following error occurs:

<pre>
± % bin/phpunit -c Build/buildessentials/PhpUnit/FunctionalTests.xml                                                                                                                                     !10497

Uncaught Exception in Flow Execution of subprocess failed with exitcode ""255"" and output:


Warning: require_once(PHPUnit/Autoload.php): failed to open stream: No such file or directory in /Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Bootstrap.php on line 92

Fatal error: require_once(): Failed opening required 'PHPUnit/Autoload.php' (include_path='.') in /Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Bootstrap.php on line 92
thrown in file Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Core/Booting/Scripts.php
in line 529
Reference code: 201210180921175c4a48

#0 TYPO3\Flow\Error\DebugExceptionHandler::echoExceptionCli()
   /Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Error/AbstractExceptionHandler.php:72

#1 TYPO3\Flow\Error\AbstractExceptionHandler::handleException()
</pre>

*Include_path should be only set to ""."", not including any global PEAR include path!*


For reference, the unit test failure is as follows:

<pre>
1) TYPO3\Flow\Tests\Unit\Persistence\Generic\DataMapperTest::mapToObjectReconstitutesExpectedObjectAndRegistersItWithIdentitymapToObjects
Expectation failed for method name is equal to <string:registerObject> when invoked 1 time(s)
Parameter 0 for invocation TYPO3\Flow\Persistence\Generic\Session::registerObject(Entity69505463a5dd66f8694281e0fb1a575e Object (...), '1234') does not match expected value.
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 Entity69505463a5dd66f8694281e0fb1a575e Object (
-    '__phpunit_id' => 'Entity69505463a5dd66f8694281e...575e#0'
+    '__phpunit_id' => null
 )

/Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Persistence/Generic/DataMapper.php:107
/Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Tests/Unit/Persistence/Generic/DataMapperTest.php:84
/Volumes/data/htdocs/FLOW3Base/Packages/Framework/TYPO3.Flow/Tests/BaseTestCase.php:50
</pre>"
42135,TYPO3.Flow,Feature,"",Resolved,Should have,Include technical details to exceptions in dev context,Bastian Waidelich,Bastian Waidelich,2012-11-12 03:54,Error,2.0 beta 1,2012-10-18,"","",100,2012-10-18 10:09,"","",861500,"","","Since the implementation of custom error renderers (#39423) 404 errors don't show any technical details to the user, even in development context.
This should be changed, so we can include details about the resolved package key, controller name etc if no matching controller could be found."
42164,TYPO3.Flow,Task,"",Resolved,Should have,CGL-Documentation - Add a notice about byte order mark ,Andy Grunwald,Andy Grunwald,2012-12-12 16:11,- Documentation -,"",2012-10-19,"","",100,2012-10-19 03:56,"","",862950,"","","In the PHP and JS CGL there is mentioned that all files must be UTF-8 encoded:

<pre>
Files must be encoded in UTF-8
</pre>

Afaik UTF-8 can ship with byte order mark or without.
In PSR-1 there is a notice about the BOM in UTF-8 files (https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md). 

In some cases the BOM creates some wired problems in PHP.

I think we should add a small notice about the BOM :)"
42168,TYPO3 Flow Base Distribution,Task,"",Closed,Should have,Remove exception for throwing exceptions in oneliners,Rens Admiraal,Rens Admiraal,2012-10-19 05:30,- Documentation -,2.0 beta 1,2012-10-19,"","",0,2012-10-19 05:19,"","",863150,"","","We allowed using a throw statement in a oneline if statement like:

<pre>
if (TRUE) throw new \Exception();
</pre>

We don't allow this anymore, so the exception should be removed. Everything should now be wrapped in curly braces."
42169,TYPO3.Flow,Feature,"",Resolved,Should have,Use named indexes for placeholders in translation labels,Thomas Hempel,Karsten Dambekalns,2012-10-31 12:35,I18n,2.0 beta 1,2012-10-19,"","",100,2012-10-19 06:47,"","",863200,"","","Right now you can replace placedholders in translations like this:

<pre>
<f:translate key=""myKey"" arguments=""{0:'foo', 1:'bar'}"" />
</pre>

The key would look like this:

<pre>
This is my awesome {0}Key that displays some {1}Value 
</pre>

The result would be:

This is my awesome fooKey that displays some barValue.

So far so good. Now it would be better to actually give that placeholders a name because that makes it much easier to understand the translations.

Something like:

<pre>
Template:
<f:translate key=""myKey"" arguments=""{keyName:'foo', valueName:'bar'}"" />

Translation:
This is my awesome {keyName}Key that displays some {valueName}Value 
</pre>"
42176,TYPO3.Flow,Feature,Work Package #45013: Flexible plugin integration (TODO: Reviews),Resolved,Should have,Improve resolving of view,Bastian Waidelich,Marc Neuhaus,2013-08-08 05:06,MVC,"",2012-10-19,"",120.00,100,2012-10-19 09:24,"","",863550,"","","Currently the resolution of a view class and the respective (fluid) template happens really early in the MVC dispatching and is not extensible from the ""outside"".
The actual view & template shold only be resolved while *rendering* the action, so one can intervene *in the action*.
Besides view options (e.g. template/layout/widget root paths, view class name, ...) should be overridable via YAML.

Following steps are required:

* View::canRender() should not be called in ActionController::resolveView() (also remove it from API!)
* remove ?NotFoundView?, instead the View should throw an exception while *rendering* (see #40888)
* documentation! (also include a section on how to use the template of a *different* action)


@Views.yaml@ ( can be easily added through: https://review.typo3.org/#/c/11982/ ):
<pre>
<code class=""yaml"">

# Change the template root path for all packages!
-
  options:
    templateRootPaths: ['resource://My.App/Private/Templates']

# Add layout lookup path for all actions of the ""Foo"" controller in ""Some.Package""
-
  requestFilter: 'isPackage(""Some.Package"") && isController(""Foo"")'
  options:
    layoutRootPaths: ['resource://Other.Package/Private/Layouts', 'resource://Some.Package/Private/Layouts']

# Use a custom view for all actions of ""Some.Package"" if the requested format is ""json""
-
  requestFilter: 'isPackage(""Some.Package"") && isFormat(""json"")'
  viewObjectName: 'Other\Package\View\CustomView'
</code>
</pre>

Note: The previous configuration format we envisioned was something like:
<pre>
My:
  Package:
    viewClassName: TemplateView / TypoScriptView
    options:
      templateRootPath: resources://Other.Package/...
      layoutRootPath: ...
    controllers:
      'List':
        options:
           # ...
       widget:
         'TYPO3\TypoScript\ViewHelpers\Widget\Paginate':
           templateRootPath: ...

        actions:
          'some':
            #...
</pre>"
42240,TYPO3.Eel,Task,"",New,Should have,Make Eel usable outside of TYPO3 Flow,Christopher Hlubek,"",2012-10-21 06:32,"","",2012-10-21,"","",0,2012-10-21 06:32,"","",866750,"","","There is not much coupling to the Flow framework in Eel. To make it usable for any PHP project we have to remove TYPO3 Flow base classes and provide interfaces for tightly coupled implementations.

After a first analysis I figured out the following todos:

* Implement standalone ObjectAccess for @Context@ and @PropertyOperation@ (getPropertyInternal and getPropertyPath)
* Don't extend @TYPO3\Flow\Exception@ in exceptions
* Remove @Package@ class and move Regexp to other type (e.g. @EelEvaluatorInterface@)
* Provide an @OperationResolverInterface@ and provide a non-Flow implementation (e.g. simple array configuration of operations)
* Don't use @UnitTestCase@ for unit test cases, think about way of removing @getAccessibleMock@

This should be everything to make the whole package usable without Flow and remove the composer dependency."
42241,TYPO3.Flow,Bug,"",Resolved,Should have,HTTP Request adds colon to Host header with empty port,Christopher Hlubek,Adrian Föder,2012-12-12 02:33,Http,2.0 beta 1,2012-10-21,"","",100,2012-10-21 06:47,"","",866800,"",Git 1.2 (master),""
42269,TYPO3.Flow,Bug,"",Closed,Should have,Unittests fail with PHPunit 3.7(.8),Christian Jul Jensen,Christian Jul Jensen,2012-12-10 07:13,- Testing -,2.0 beta 1,2012-10-22,"","",0,2012-10-22 07:00,"","",868200,"",Git 1.2 (master),"Output:

There was 1 failure:

1) TYPO3\Flow\Tests\Unit\Persistence\Generic\DataMapperTest::mapToObjectReconstitutesExpectedObjectAndRegistersItWithIdentitymapToObjects
Expectation failed for method name is equal to <string:registerObject> when invoked 1 time(s)
Parameter 0 for invocation TYPO3\Flow\Persistence\Generic\Session::registerObject(Entity519192b8dbb06b57f5a377fec3fc274e Object (...), '1234') does not match expected value.
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 Entity519192b8dbb06b57f5a377fec3fc274e Object (
-    '__phpunit_id' => 'Entity519192b8dbb06b57f5a377f...274e#0'
+    '__phpunit_id' => null
 )

/opt/local/apache2/htdocs/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Persistence/Generic/DataMapper.php:107
/opt/local/apache2/htdocs/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Tests/Unit/Persistence/Generic/DataMapperTest.php:84
/opt/local/apache2/htdocs/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Tests/BaseTestCase.php:50"
42319,TYPO3.Flow,Task,"",Resolved,Should have,Make PATTERN_MATCH_PACKAGEKEY more strict (again),Karsten Dambekalns,Karsten Dambekalns,2012-10-25 09:36,Package,2.0 beta 1,2012-10-23,"","",100,2012-10-23 11:14,"","",870700,"","","The pattern used to check for a valid package key was made less strict during composer integration. Although composer itself imposes almost no restrictions, packagist requires a ""vendor/name"" format. Our pattern should thus at least ensure the key contains a dot (translated from the slash)."
42342,TYPO3.Flow,Bug,"",Resolved,Should have,Fatal error / no possibility to flush caches after package has been removed,Robert Lemke,Christian Jul Jensen,2012-12-11 16:46,Package,2.0 beta 1,2012-10-24,"","",100,2012-10-24 06:55,"","",871850,"",Git 1.2 (master),"Steps to reproduce (*production context!*):

- create Acme.Demo package
- warm up caches
- remove the package manually by just deleting the package directory
- run ./flow or anyhting else

Actual result:

Fatal error: Uncaught exception 'TYPO3\Flow\Package\Exception\InvalidPackagePathException' with message 'Package path does not exist or is no directory.' in /Volumes/HDD/opt/local/apache2/htdocs/Sites/robertlemke.com/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/Package.php on line 99

Expected result:

Handle this more gracefully ? either just ignore it and update PackageStates.php or at least output an error message.
But I'd rather see 1) implemented ?"
42355,TYPO3.Flow,Feature,"",Resolved,Should have,Use public key fingerprint for UUID in RsaWalletService,Christopher Hlubek,Christopher Hlubek,2012-10-29 15:35,"","",2012-10-24,"","",100,2012-10-24 11:11,"","",872500,"","",""
42366,TYPO3.Flow,Feature,"",Rejected,Must have,Make session handling compatible to any PHP session handler,Martin Brüggemann,"",2012-11-19 11:55,Session,"",2012-10-25,"","",0,2012-10-25 01:55,"","",873050,"","","Today there's no possibility to get Flow working with a custom php session save handler like redis or memcached. You can define one in your php.ini but Flow tries to create the session_save_path as a folder if it doesn't exist. This leads to something like this:

<pre>
Uncaught Exception              
  Could not create directory ""tcp://127.0.0.1:6379""!  
</pre>

Flow, Y U no Redis? ;)

My solution would be to add an option called ""TYPO3:Flow:session:PhpSession:saveHandler"" in the Settings.yaml and set this to ""file"" as default. Also there should be a small check, if the save_handler is still ""file"", before trying to create some sesssion storage folders in TYPO3\Flow\Session\PhpSession (in initializeObject and destroyAll). Then it's easy for Flow users to switch to a redis save handler f.e. and get it up running without an exception. "
42368,TYPO3.Flow,Bug,"",Resolved,Must have,Typo in setfilepermissions Script,Ingo Pfennigstorf,Ingo Pfennigstorf,2012-10-25 03:35,Cli,"",2012-10-25,"","",100,2012-10-25 02:17,"","",873150,"",Git 1.2 (master),"The output of the filepermissions script currently is:

""TYPo3 Flow File Permission Script""

Maybe the ""o"" should be uppercase."
42397,TYPO3.Fluid,Feature,"",New,Should have,Missing viewhelper for general links,Arek van Schaijk,"",2012-10-25 13:20,"","",2012-10-25,"","",0,2012-10-25 13:20,"","",874600,"","",By using the TCA link wizard the editor can set a internal/external and mailto link. I have to detect in fluid wich type of link is set before I can choose the right viewhelper now. I understand that I can create my own viewhelper for rendering a multi type link but isnt that basic functionality? So I suggest to include some viewhelper wich can render general links..
42403,TYPO3.Flow,Feature,"",Resolved,Should have,Session handler based on HTTP foundation with multi-backend support,Robert Lemke,Robert Lemke,2012-11-08 11:35,Session,2.0 beta 1,2012-10-25,"","",100,2012-10-25 15:14,"","",874900,"","","I'd like a new session implementation which

* simplifies testing by using the HTTP foundation
* allows for using various storage backends, such as Redis, Memcache, APC, PDO databases etc"
42407,TYPO3 Flow Base Distribution,Story,"",New,Should have,Asset Management,Robert Lemke,"",2012-10-26 03:02,"",2.1,2012-10-26,"","",0,2012-10-26 03:02,"","",2954350,"","","* CDN support
* centralized JS / CSS mgm
* minifiers
* SASS support
* re-use as much concepts and code from Assetic etc. as possible
* seamlessly integrate into existing Resource framework"
42408,TYPO3 Flow Base Distribution,Story,"",New,Could have,Locale Detection / Selection,Robert Lemke,"",2013-06-11 07:31,"",2.1,2013-06-11,"","",0,2012-10-26 03:03,"","",2954400,0.00,"","* support for automatic locale detection
* storing locale in a cookie
* mechanism for overriding locales by user"
42434,TYPO3.Flow,Bug,"",Resolved,Should have,Resource handler not available when session is initialized,Ferdinand Kuhl,Robert Lemke,2012-10-29 05:36,Session,2.0 beta 1,2012-10-26,"","",100,2012-10-26 16:20,"","",876350,"",Git 1.2 (master),"In current master (and all earlier releases) the bootstrap initializes the session before the resource wrappers. If you now try to attach an Image(Variant) from TYPO3.Image to a session, this Variant first checks (during initializeObject()) if the resource is available - which simply is not possible at the session __wakeup event, as there are no registered stream-wrappers yet.

I suggest: Change the order and let session and resource - Steps swap their places."
42452,TYPO3.Flow,Task,Task #51183: CLI improvements,Closed,Should have,Command handling should support global flags,Christopher Hlubek,Bastian Waidelich,2015-02-25 11:45,Cli,"",2012-10-28,"","",0,2012-10-28 04:57,"","",877250,"","","The current help handling in Flow is not intuitive. It would be much easier if every command would understand a ""--help"" switch that would trigger the help for that command. Also the main ""flow"" script should understand ""--help"" in addition to ""help"" like most known commands on the cli do."
42465,TYPO3.Flow,Task,"",New,Should have,Document i18n settings,Karsten Dambekalns,"",2013-08-14 09:35,- Documentation -,2.0.1,2012-10-29,"","",0,2012-10-29 04:42,"","",877900,"","",The documentation does not explain the available settings for i18n.
42467,TYPO3.Flow,Feature,"",Resolved,Should have,NotEmpty Validator does not work with arrays,Alexander Schnitzler,Alexander Schnitzler,2012-12-12 02:32,Validation,2.1,2012-10-29,"","",100,2012-10-29 04:59,"","",878000,"","",Forard-port this patch: https://review.typo3.org/#/c/14707/
42474,TYPO3.Fluid,Bug,"",Closed,Should have,Possible bug with short form conditions in viewhelper tags,Thomas Hempel,Bastian Waidelich,2012-10-30 09:50,ViewHelpers,"",2012-10-29,"","",0,2012-10-29 06:58,"","",878350,"",FLOW3 1.1.0,"Hi,

I'm not entirely sure, if this is a bug or if do something wrong. Some more people looked at it and considered it as a bug. There fore I'm filing this here right now.

The following statement can be found in my template:

<pre>
<f:form.textfield name=""{foo}"" property=""{bar}"" {f:if(condition:'{disabled}', then:'disabled=""disabled""')} />
</pre>

I would expect a textfield with attribute name and a value. It might also have the attribute set. But what I actually get is this:

<pre>
<f:form.textfield name=""firstname"" property=""firstname"" disabled=""disabled"" />
</pre>
(With or without the disabled=""disabled"")

Am I doing it wrong or is this a bug which should be investigated more?

"
42475,TYPO3.Fluid,Bug,"",Closed,Should have,NotEmpty Validator does not work with arrays and objects,Ingo Pfennigstorf,Ingo Pfennigstorf,2012-10-29 08:19,"","",2012-10-29,"","",0,2012-10-29 07:07,"","",878400,"",(any),See #40683
42479,TYPO3.Flow,Feature,"",Closed,Won't have this time,Context dependant Package states,Bastian Waidelich,Bastian Waidelich,2013-05-07 12:39,Package,"",2012-10-29,"","",0,2012-10-29 09:18,"","",878550,"","","It should be possible to (de)activate packages for certain contexts only.
Suggested PackageStates.php syntax:
<pre>
<code class=""php"">
return array (
  'packages' => 
  array (
    'Foo.Bar' => 
    array (
      'manifestPath' => '',
      'state' => 'inactive',
      'packagePath' => 'Application/Foo.Bar/',
      'classesPath' => 'Classes/',
    ),
    'Bar.Baz' => 
    array (
      'manifestPath' => '',
      'state' => 'active',
      'overriddenStateByContext' => array(
        'Production' => 'inactive',
      ),
      'packagePath' => 'Application/Bar.Baz/',
      'classesPath' => 'Classes/',
    ),
// ...
</code>
</pre>"
42511,TYPO3.Flow,Bug,"",Resolved,Must have,"""Uri"" constructor silently accepts unparsable Uri strings",Adrian Föder,Adrian Föder,2012-12-11 04:27,Http,2.0,2012-10-30,"","",100,2012-10-30 06:37,"","",880150,"",Git 1.2 (master),"The Uri::__construct() method basically relies on the parse_url() method. As of PHP documentation, http://de3.php.net/manual/en/function.parse-url.php, Changelog,

> 5.3.3 	Removed the E_WARNING that was emitted when URL parsing failed. 

So the constructor's code can, dependent of the PHP version in use, either throw a Warning exception or silently do nothing but let the Uri object be created since there is no other check:

<pre><code class=""php"">
	public function __construct($uriString) {
		if (!is_string($uriString)) throw new \InvalidArgumentException('The URI must be a valid string.', 1176550571);

		$uriParts = parse_url($uriString);
		if (is_array($uriParts)) {
			$this->scheme = isset($uriParts['scheme']) ? $uriParts['scheme'] : NULL;
			$this->username = isset($uriParts['user']) ? $uriParts['user'] : NULL;
			$this->password = isset($uriParts['pass']) ? $uriParts['pass'] : NULL;
			$this->host = isset($uriParts['host']) ? $uriParts['host'] : NULL;
			$this->port = isset($uriParts['port']) ? $uriParts['port'] : NULL;
			$this->path = isset($uriParts['path']) ? $uriParts['path'] : NULL;
			if (isset($uriParts['query'])) {
				$this->setQuery ($uriParts['query']);
			}
			$this->fragment = isset($uriParts['fragment']) ? $uriParts['fragment'] : NULL;
		}
	}
</code></pre>

I recommend to catch the Warning, if any, and throw an exception if parse_url returned FALSE (or is not an array, i.e. the else-block of the if().

"
42516,TYPO3 Flow Base Distribution,Task,Bug #41843: Composer and rename issues (umbrella issue),Resolved,Should have,Composer dependency with Guzzle leads to Package related exception,Rafael Kähm,"",2012-11-08 08:35,"","",2012-10-30,"","",100,2012-10-30 09:21,"","",880350,"","","Guzzle-Package, installed with composer, makes fatal errors:

<pre>
PHP Fatal error:  Uncaught exception 'TYPO3\Flow\Package\Exception\InvalidPackagePathException' with message 'Package path does not exist or is no directory.' in /var/www/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/Package.php:99
Stack trace:
#0 /var/www/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageFactory.php(48): TYPO3\Flow\Package\Package->__construct('Guzzle.Iterator', '/var/www/TYPO3-F...', 'Classes/', 'e/Iterator/')
#1 /var/www/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageManager.php(699): TYPO3\Flow\Package\PackageFactory::create('/var/www/TYPO3-F...', 'Libraries/guzzl...', 'Guzzle.Iterator', 'Classes/', 'e/Iterator/')
#2 /var/www/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageManager.php(600): TYPO3\Flow\Package\PackageManager->registerPackagesFromConfiguration()
#3 /var/www/TYPO3-Flow/Pa in /var/www/TYPO3-Flow/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/Package.php on line 99
</pre> 


Here is Repository for this issue. https://github.com/RafaelKa/TYPO3-Flow---Guzzle.git 
You must only run
<pre>composer install --dev</pre>and<pre>
./flow help
</pre>
to get this error."
42520,TYPO3.Flow,Bug,"",New,Must have,Cache must be flushed globally for package state changes,Bastian Waidelich,"",2015-02-25 11:45,Core,"",2012-10-30,"","",0,2012-10-30 10:14,"","",880550,"",(any),Currently after (de)activating a package the cache is only flushed for the *current context*. Instead it must be flushed for all (affected) contexts.
42539,TYPO3.Flow,Feature,"",Resolved,Should have,Allow Object.yaml property value to be also an array,Adrian Föder,Adrian Föder,2012-11-08 15:36,Object,2.0,2012-10-31,"","",100,2012-10-31 05:01,"","",881500,"","","It would be nice to be allowed setting also arrays as values for Object properties.

Use case: consider the following ""foreign"" repository:

<pre><code class=""php"">
/**
 * A repository for Comments
 *
 * @Flow\Scope(""singleton"")
 */
class CommentRepository extends \TYPO3\Flow\Persistence\Repository {

	/**
	 * @var array
	 */
	protected $defaultOrderings = array('creationDate' => \TYPO3\Flow\Persistence\QueryInterface::ORDER_DESCENDING); 
</code></pre>

I'd like to modify this from my application, using Objects.yaml:

<pre><code class=""yaml"">
TYPO3\Comments\Domain\Repository\CommentRepository:
  properties:
    defaultOrderings:
      value:
        creationDate: 'ASC'
</code></pre>

This currently doesn't work because the handling (in DependencyInjection\ProxyClassBuilder) does only expect plain values."
42550,TYPO3.Flow,Task,"",Under Review,Should have,Add top-level .htaccess to block everything but Web,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 16:43,"","",2012-10-31,"","",0,2012-10-31 06:54,"","",882050,"","","Although we ask to use @Web@ as document root, that is often not done and/or possible (think about the practice of default host setups like pXXX.server.tld being hardwired to the top level folder for many hosters). So people feel safe because they added a vhost pointing to @Web@, but don't think about that default host.

Should we add a @.htaccess@ file to the top level that allows access only to @Web@? Please vote and/or discuss!
"
42601,TYPO3.Flow,Bug,"",Under Review,Must have,Content Security: QOM rewriting is omitted if used in certain cases in an Action Controller,Robert Lemke,Robert Lemke,2013-08-14 09:35,Security,2.0.1,2012-11-01,"","",100,2012-11-01 14:10,"","",884450,"",Git master,"The QOM Query Rewriting Aspect checks if the security context is initialized. If it is not yet initialized, it will suspend query rewriting and just proceed to call the execute() or count() method.

This may be a problem because it is not defined when the security context is initialized. It can does happen that if no getRole() etc. methods have been called previously (no user is logged in), content is shown which must not be visible.

This issue is, however, quite predictable and becomes apparent during development already."
42606,TYPO3.Flow,Bug,"",New,Must have,Content Security with nested objects,Julian Kleinhans,"",2012-12-13 06:35,Security,"",2012-11-01,"","",0,2012-11-01 17:15,"","",884700,"",Git master,"I think there is a strange bug in the content security

Initial situation:

3 Models 
- Product
-- Category
--- Tutorial

The Product Model includes the categories and the categories the tutorials
With FLUID i can do something like that (3 nested for-loops)                                                                         
<pre>
<f:for each=""{products}"" as=""product"">
  <f:for each=""{product.categories}"" as=""category"">
    <f:for each=""{category.tutorials}"" as=""tutorial"">
      {tutorial.title} (Disabled: {tutorial.disabled})
    </f:for>
  </f:for>
</f:for>                                           
</pre> 
The Tutorial Model has a disabled class var which includes a boolean.
My Policy.yaml has the following content
<pre>
resources:
  entities:
    Kj187_Tutorials_Domain_Model_Tutorial:
      Kj187_Tutorials_Domain_Model_Tutorial_Disabled: 'this.disabled == TRUE'
</pre>

The problem is, it doesnt work with 3 (or more) nested loops. I get all tutorials, all with 'disabled equals 1' and all with 'disabled equals 0'.
If i get only the categories via repository and do something like that
<pre>
<f:for each=""{categories}"" as=""category"">
  <f:for each=""{category.tutorials}"" as=""tutorial"">
    {tutorial.title} (Disabled: {tutorial.disabled})
  </f:for>
</f:for>  
</pre>
it works!

Another problem is that i can call a tutorial with 'disabled = 1' directly (http://local.domain/PRODUCT/CATEGORY/TUTORIAL.html) without any problems ?!"
42715,TYPO3.Flow,Bug,"",Resolved,Should have,ObjectSerializer not capable of Collections,Steffen Ritter,Karsten Dambekalns,2012-12-11 15:08,Object,2.0 beta 1,2012-11-06,"","",100,2012-11-06 04:34,"","",890000,"",(any),"Using the serializer on Objects containing instances of \Doctrine\Common\Collections\Collection will fail with an exception: Object of type """" not registered.

Even if the Doctrine persistence knows how to deal with Collections, situations might need to serialize the Object for Sessions, Encryptions and so on.

Add support to the ObjectSerializer is quite easy."
42723,TYPO3.Flow,Bug,"",Resolved,Should have,Reflection\ObjectAccess consumes to much processing time,Steffen Ritter,"",2013-03-27 08:37,Reflection,"",2012-11-06,"","",100,2012-11-06 06:48,"","",890400,"",Git master,"JsonView, Validation, Serialisation and many other parts of Flow use ObjectAccess to retrieve information about how to access properties within the current object.


getAvailableGetters for example is called thousands of times, when putting an object hirarchy of 150 fuel stations with each one address and 3 opening entries (therefore 750 objects in a nested hirarchy) first into validation and than output it as JSON.

After compile (e.g. php is running) - the properties of an Object are immutable (despite stdClass). Therefore the ObjectAccess class should use a runtime cache.
"
42726,TYPO3.Flow,Task,"",Resolved,Should have,Document new package structure and management,Christian Jul Jensen,Karsten Dambekalns,2012-12-12 14:56,- Documentation -,2.0 beta 1,2012-11-06,"","",100,2012-11-06 07:59,"","",890550,"","","Topics

- Composer
- Package structure
- Upgrading
- Installing
- Maintaining

help me make the docs better, please share your experences and wtf's in the comments."
42743,TYPO3.Fluid,Task,"",New,Should have,Remove inline style for hidden form fields,Nicole Cordes,"",2012-11-06 17:09,"","",2012-11-06,"","",0,2012-11-06 17:09,"","",891400,"","","In Classes / TYPO3 / Fluid / ViewHelpers / FormViewHelper.php the hidden fieldsare wraped in an own div container which is hidden by inline style ""display: none"". There was a discussion if we should remove this wrapper in the TYPO3 Extbase team as someone mentioned inline styles are against some barrier free rules."
42746,TYPO3.Fluid,Bug,"",Resolved,Should have,Functional WidgetTest is broken since URI bugfix,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:27,"",2.0 beta 1,2012-11-07,"","",100,2012-11-07 03:57,"","",891550,"",Git 1.2 (master),"The fix for #42511 broke the functional WidgetTest in Fluid, because that relied on ""broken"" uris being accepted."
42756,TYPO3.Flow,Bug,"",Resolved,Should have,Functional BrowserTest fails in Neos setup,Karsten Dambekalns,Karsten Dambekalns,2012-11-07 08:35,- Testing -,2.0 beta 1,2012-11-07,"","",100,2012-11-07 07:36,"","",892050,"",Git 1.2 (master),The functional @BrowserTest@ in Flow (added as part of the solution to #42049) fails when run in a Neos context. This is caused by the different routes configuration.
42758,TYPO3.Flow,Bug,"",Resolved,Should have,Unit test for PersistenceQueryRewritingAspect broken,Karsten Dambekalns,Karsten Dambekalns,2012-11-07 09:35,- Testing -,2.0 beta 1,2012-11-07,"","",100,2012-11-07 08:40,"","",892150,"",Git 1.2 (master),The solution for #42601 broke one test in the PersistenceQueryRewritingAspectTest.
42761,TYPO3.Flow,Feature,"",Resolved,Should have,"Let getByTag() return the identifiers, not only the values",Robert Lemke,Robert Lemke,2012-11-07 10:00,Cache,2.0 beta 1,2012-11-07,"","",0,2012-11-07 09:00,"","",892300,"","",Currently getByTag() only returns a numeric array of values ? an array indexed by entry identifier would be more useful though.
42766,TYPO3.Welcome,Task,"",Resolved,Should have,Update logo to TYPO3 Flow,Wouter Wolters,"",2012-11-07 16:36,"","",2012-11-07,"","",100,2012-11-07 13:54,"","",892550,"","",Update logo to TYPO3 Flow
42770,TYPO3.Flow,Bug,"",Resolved,Should have,Routing includes parameters from the current request,Aske Ertmann,"",2012-11-28 09:35,MVC - Routing,2.0,2012-11-07,"","",100,2012-11-07 15:06,"","",892750,"",Git 1.2 (master),"I believe that after https://review.typo3.org/#/c/15261/ some routing arguments from the current request is passed along to all new links created with the uri builder. This should not happen and leads to some very weird side effects.

I need to look further into the problem, but so far I've found that it happens for requests to the node controller ext direct service in Neos and as well for modules. The modules has a very special route part handling, so that is probably not the best place to start.

An example is the page tree making a request for the nodes and that request uses the uri builder to create links to the nodes, but those links are appended with the ajax request's parameters which of course they shouldn't.

Example ""nodeData[contentType]=TYPO3.Neos.ContentTypes:Page&nodeData[properties][title]=test&position=into&@subpackage=&__csrfToken=4cc446feb743b38a5f47db7fc500251e"" is added to the links"
42781,TYPO3.Flow,Task,"",Rejected,Should have,Introduce global function flow_var_dump(),Robert Lemke,Robert Lemke,2012-11-08 02:41,Error,2.0 beta 1,2012-11-08,"","",0,2012-11-08 02:22,"","",893300,"","","Currently there's a namespaced function \TYPO3\Flow\var_dump() which helps debugging nested object structures.

It would be more convenient and still unlikely that there will be name clashes, if we introduced a global function flow_var_dump() instead."
42784,TYPO3.Flow,Feature,"",Resolved,Should have,Allow exposing the class name of an object in JsonView,Karsten Dambekalns,Adrian Föder,2013-04-11 02:17,MVC,2.1,2012-11-08,"","",0,2012-11-08 04:54,"","",893450,"","","Besides telling the identifier of a persisted object, it should additionally be possible to expose the class name of this object."
42785,TYPO3.Flow,Task,"",Resolved,Should have,Make Mvc\Controller\Exception extend Mvc\Exception,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:27,MVC,2.0 beta 1,2012-11-08,"","",100,2012-11-08 06:30,"","",893500,"","",The exception subclasses FLOW3\Exception directly.
42801,TYPO3.Flow,Bug,"",Resolved,Must have,New FlowSession session class is broken,Martin Brüggemann,Robert Lemke,2012-11-12 09:35,Session,2.0 beta 1,2012-11-08,"","",100,2012-11-08 14:56,"","",894200,"",Git 1.2 (master),"Unfortunately the new FlowSession patch has been merged today some minutes before I could save my comment at review.typo3.org. If I switch my Flow project to the new FlowSession save handler I get the following exception if I try to use the ./flow command: 

<pre>
PHP Fatal error:  Call to undefined method TYPO3\Flow\Cli\CommandRequestHandler::getHttpRequest() in /var/www/test/releases/20121108105617/Data/Temporary/Production/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Session_FlowSession_Original.php on line 162
</pre>

Something seems to be wrong with the FlowSession intialization (should be disabled in Cli-mode?). If I flush the cache and request my project with the browser I just get a blank white page and nothing is logged (Doctrine proxy generation seems to fail too). "
42807,TYPO3.Flow,Bug,"",Resolved,Must have,Libraries/doctrine/dbal/docs/examples/sharding/composer.json broken Flow,Dominique Feyer,Karsten Dambekalns,2012-11-09 13:35,Package,2.0 beta 1,2012-11-09,"","",100,2012-11-08 18:36,"","",894500,"",Git 1.2 (master),"With recent Flow version (master), after surf deploy, I was unable to use flow (web or cli), after som debug it look like the composer.json file located at Libraries/doctrine/dbal/docs/examples/sharding/ is parsed a broke every thing. 

Here'is my shell output

<pre>
?  next git:(deploy) ? ./flow 
PHP Notice:  Undefined property: stdClass::$name in /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageFactory.php on line 78
PHP Fatal error:  Uncaught exception 'TYPO3\Flow\Package\Exception\InvalidPackageKeyException' with message '"""" is not a valid package key.' in /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/Package.php:96
Stack trace:
#0 /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageFactory.php(49): TYPO3\Flow\Package\Package->__construct('', '/home/vhosts/ho...', 'Classes/', '')
#1 /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageManager.php(734): TYPO3\Flow\Package\PackageFactory::create('/home/vhosts/ho...', 'Libraries/doctr...', '', 'Classes/', '')
#2 /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/PackageManager.php(627): TYPO3\Flow\Package\PackageManager->registerPackagesFromConfiguration()
#3 /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framewor in /home/vhosts/hosted.medialib.tv/releases/20121109001526/Packages/Framework/TYPO3.Flow/Classes/TYPO3/Flow/Package/Package.php on line 96
?  next git:(deploy) ? find Packages/Libraries/doctrine/ -name composer.json 
Packages/Libraries/doctrine/common/composer.json
Packages/Libraries/doctrine/dbal/docs/examples/sharding/composer.json
Packages/Libraries/doctrine/dbal/composer.json
Packages/Libraries/doctrine/orm/composer.json
Packages/Libraries/doctrine/migrations/composer.json
Packages/Libraries/doctrine/data-fixtures/composer.json
?  next git:(deploy) ? mv Packages/Libraries/doctrine/dbal/docs/examples/sharding/composer.json Packages/Libraries/doctrine/dbal/docs/examples/sharding/_composer.json
?  next git:(deploy) ? ./flow 
TYPO3 Flow 1.2 (""Production"" context)
usage: ./flow <command identifier>

See ""./flow help"" for a list of all available commands.
</pre>

The test is done on Linux with PHP 5.3.18-1 (dotdeb)"
42833,TYPO3.Flow,Bug,"",Closed,Should have,Migration fails if InnoDB is not default engine,Jan Roth,"",2012-11-10 13:24,- Migrations -,"",2012-11-10,"","",0,2012-11-09 19:07,"","",895750,"",FLOW3 1.1.0,"MySQL Migration-Statements should have an Engine in Create Table Statements.
Migration fails if not."
42888,TYPO3.Flow,Bug,"",Needs Feedback,Should have,ResourceManager chokes on non existing files,Bastian Waidelich,"",2012-11-12 12:02,Resource,"",2012-11-12,"","",0,2012-11-12 11:03,"","",898500,"",(any),"When importing a non existing file via @ResourceManager::importResource()@ the ResourceManager -kills the PHP process by allocating memory- throws an exception
We should check the existence of the specified $uri.
My first draft looks like this:
<pre>
<code class=""php"">
	public function importResource($uri) {
		$pathInfo = pathinfo($uri);
		if (isset($pathInfo['extension']) && substr(strtolower($pathInfo['extension']), -3, 3) === 'php') {
			$this->systemLogger->log('Import of resources with a ""php"" extension is not allowed.', LOG_WARNING);
			return FALSE;
		}

		// NEW CODE:

		$responseHeaders = get_headers($uri);
		$responseCode = (integer)substr($responseHeaders[0], 9, 3);
		if ($responseCode === 404) {
			$this->systemLogger->log(sprintf('Could not copy resource from ""%s"", the file does not exist.', $uri), LOG_WARNING);
			return FALSE;
		} elseif ($responseCode < 200 || $responseCode > 300) {
			$this->systemLogger->log(sprintf('Could not copy resource from ""%s"", got response code %d.', $uri, $responseCode), LOG_WARNING);
			return FALSE;
		}

		// ...
</code>
</pre>

But this breaks the unit tests with a warning
<pre>
get_headers(): This function may only be used against URLs
</pre>
for the vfs:// URIs.

What do you think about the general approach?
Actually it might be cleaner to switch to a proper request (maybe using Flows RequestEngineInterface) altogether here as @copy()@ is pretty limited.

BTW: If we adjust this we could also think about changing the return value from object/FALSE to object/NULL as we do it in most places already"
42947,TYPO3.Fluid,Bug,"",Rejected,Won't have this time,TextareaViewHelper is missing required attribute for html5,Dominic Garms,Adrian Föder,2015-04-01 04:38,ViewHelpers,"",2012-11-14,"","",0,2012-11-14 02:13,"","",901400,"",FLOW3 1.1.0,"Hi,

the required attribute is missing in the TextareaViewHelper, which is important for client-side validation for modern browsers / and polyfill fallbacks if using webshim libs.

Would be great to have,

Regards,
Dominic"
42955,TYPO3.Flow,Bug,"",Resolved,Should have,QueryResult::count() returns 0 for queries with offset,René Pflamm,Bastian Waidelich,2012-12-11 04:27,Persistence,2.0 beta 1,2012-11-14,"","",100,2012-11-14 05:27,"","",901800,"",FLOW3 1.1.0,"*NOTE* See comments below

On my Project I notice if I have more then itemsPerPage and switched to another Page this one ist Empty.

*As example:*
On first page, the object to paginate has an count of 27. The paginatedObject hast a count of 27 but display only 10.

With an itemsPerPage limit of 10 I got 3 pages. On Page 2 and 3 I got an paginatedObject of zero and display nothing.

Currently I hotfixed this quick and dirty with an replace of @$modifiedObjects = $query->execute();@ to @$modifiedObjects = $query->getResult();@ (see attachment)."
42961,TYPO3.Flow,Feature,"",Resolved,Should have,Support non PSR-0 packages,Bastian Waidelich,"",2014-03-14 09:22,Package,2.x,2012-10-12,"","",100,2012-11-14 06:28,"","",902100,"","","Composers autoloader supports non PSR-0 packages if they follow the so called ""PEAR-style"" (see http://getcomposer.org/doc/04-schema.md#psr-0).
A lot of packages on packagist.org still don't follow the PSR-0 standard. The only way to get those working with Flow, is to include the composer autoloader manually. I did this by adding following line to the Package.php of my distributions main package:
<pre>
<code class=""php"">
require \TYPO3\Flow\Utility\Files::concatenatePaths(array(FLOW_PATH_PACKAGES, 'Libraries/autoload.php'));
</code>
</pre>

But obviously this is just a hacky work around with unpredictable side effects"
43071,TYPO3.Fluid,Task,"",New,Should have,Remove TOKENS for adding fallback teplates in B,Marc Bastian Heinrichs,"",2012-11-18 08:22,"","",2012-11-18,"","",0,2012-11-18 08:19,"","",907600,"","",""
43072,TYPO3.Fluid,Task,"",New,Should have,Remove TOKENS for adding templates fallback in Backporter,Marc Bastian Heinrichs,"",2012-11-18 08:20,View,"",2012-11-18,"","",0,2012-11-18 08:20,"","",907650,"","",""
43082,TYPO3.Flow,Feature,"",Needs Feedback,Should have,"Add CLI support for scaffolding models, views, controller",Ingo Pfennigstorf,"",2015-01-05 05:39,"","",2012-11-18,"","",0,2012-11-18 15:39,"","",908150,"","","Add a cli mechanism to quickly generate code scaffolds on the command line.

Some examples on how it could be used:

h2. Generate a model

@
php typo3/cli_dispatch.phpsh extbase:generate model car wheels:int seats:int manufacturer:string
@

This generates:

* A model class Car.php with the provided properties and types
* A TCA definition
* ?

h2. Generate a Controller

@
php typo3/cli_dispatch.phpsh extbase:generate controller car index list show
@

This generates:

* A controller named CarController.php with the actions indexAction, listAction, showAction
* (Maybe) an entry in ext_localconf.php as allowed controller / action combination
* Html files Index.html, List.html, Show.html in Resources/Private/Templates/Car/

h2. Todos and remarks

The cli actions may be named after TYPO3 Flow conventions and maybe have the same featureset.
The generated code is really very basic, just dumb files without getting too complex, so good defaults have to be found regarding the models and class inheritance of them (VO, AE, ...)"
43089,TYPO3.Flow,Feature,"",Resolved,Should have,Allow configuration processing in code migrations,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:28,Core,2.0 beta 1,2012-11-19,"","",100,2012-11-19 04:36,"","",908500,"","",Code migrations sometimes need to check or even modify YAML configuration.
43091,TYPO3.Flow,Feature,"",Resolved,Should have,Add logging of vote results on resources,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 16:43,Security,2.0 beta 1,2012-11-19,"","",100,2012-11-19 05:29,"","",908600,"","",For access decision voting on joinpoints the results are logged nicely. For votes on resources this is missing.
43104,TYPO3.Flow,Feature,"",Rejected,Could have,Add Confirm- Radio- CheckBoxDialog to CommandController(CLI),Rafael Kähm,Bastian Waidelich,2012-12-18 09:06,Cli,"",2012-11-19,"","",30,2012-11-19 10:25,"","",909250,"","","For interactive confirmation or multiple choice by Commands (CLI).

for example: the same code is on https://gist.github.com/4111197
*sorry for doccomments*

+*Settings as assoc-array is not comfortably for developers, please comment or speak your ideas about settings!*+

<pre>
<code class=""php""><?php
namespace ........... ;

/*                                                                        *
 * This script belongs to the TYPO3 Flow package '............'.        *
 *                                                                        *
 *                                                                        */

use TYPO3\Flow\Annotations as Flow;

/**
 * ConfirmationDialog command controller for the Train2Web.Core package
 * @todo ANSI FOREGROUNDS and BLINK & co.  
 * @Flow\Scope(""singleton"")
 */
class ConfirmationDialogCommandController extends \TYPO3\Flow\Cli\CommandController {

        /**
         * Constants for anwer pattern
         */ 
        const PATTERN_USER_INPUT_YES = '/^(y|yes|j|ja|si)$/i';
        const PATTERN_USER_INPUT_NO = '/^(n|no|nein)$/i';
        const PATTERN_USER_INPUT_CANCEL = '/^(c|cancel|abort|abbrechen|abortire|abortar)$/i';
        
        /**
	 * A simpliest example for confirm dialog
         * 
         * if (user puts yes) {do something} else { do something else } 
         * also if user puts n, no, c, cancel then is it else
         * 
	 * @return void
	 */
	public function exampleCommand() {
            if ($this->confirmDialog()) {
                echo ""I will continue."".PHP_EOL;
            } else {
                echo ""I will not continue."".PHP_EOL;
            }
	}
        
        /**
	 * A simple example confirm dialog with cancel
         * 
         * Please note that switch case provide == comparison and not === <br>
         * also if you use == instead of === you can't differentiate between no and cancel!!!
         * 
	 * @return void
	 */
	public function example2Command() {
            $usersChoice = $this->confirmDialog();
            if ($usersChoice) {
                echo 'You typed ""yes""!'.PHP_EOL;     
            } else if ($usersChoice === NULL) {
                echo 'You typed ""cancel""!'.PHP_EOL;
            } else if ($usersChoice === FALSE) {
                echo 'You typed ""no""!'.PHP_EOL;
            }
	}
        
        /**
	 * An example confirm dialog with $optionalSettings[], answer depends messages and callbacks  
         * 
         * Please note that $optionalSettings['*'] - array has priority 
         * 
	 * @return void
	 */
	public function demoCommand() {
            $settings = array(
                'confirmationMessage'       => 'Please put ""y"" or ""n"" or ""c"" or nothing to use ""%1$s"" and press enter: ',
                'standardAnswer'            => 'yes',
                'messageByYes'              => 'You typed ""%2$s"", i will run one callback for ""AGREEMENT"" but only if it is declared!',
                'messageByNo'               => 'You typed ""%2$s"", i will run one callback for ""REJECTION"" but only if it is declared!',
                'messageByCancel'           => 'You typed ""%2$s"", i will run one callback for ""RESET"" but only if it is declared!',
                'messageByWrongInput'       => 'Wrong input; ""%2$s""!!!'.PHP_EOL.'You will be asked for so long, until correct entry is detected.',
                'callBackByYes'             => array(array($this, 'callBackForYes'), array()),
                'callBackByNo'              => array(array($this, 'callBackForNo'), array()),
                'callBackByCancel'          => array(array($this, 'callBackForCancel'), array()),
                'callBackByWrongInput'      => array(array($this, 'callBackForWrongInput'), array())
            );
            $this->confirmDialog('This message will be overwritten if $optionalSettings[\'confirmationMessage\'] is set.', 'NO', $settings);
	}
        
        /**
	 * An example <b>DEMO for callbacks returnvalue</b> based on <b>confirmationdialog:demo</b> 
         * 
         * 
         * Please note that $optionalSettings['*'] - array has priority 
         * 
	 * @return void
	 */
	public function demo2Command() {
            $settings = array(
                'confirmationMessage'       => 'Please put ""y"" or ""n"" or ""c"" or nothing to use ""%1$s"" and press enter: ',
                'standardAnswer'            => 'yes',
                'messageByYes'              => 'You typed ""%2$s"", i will run one callback for ""AGREEMENT"" but only if it is declared!',
                'messageByNo'               => 'You typed ""%2$s"", i will run one callback for ""REJECTION"" but only if it is declared!',
                'messageByCancel'           => 'You typed ""%2$s"", i will run one callback for ""RESET"" but only if it is declared!',
                
                'callBackByYes'             => array(array($this, 'callBackForYes'), array()),
                'callBackByNo'              => array(array($this, 'callBackForNo'), array()),
                'callBackByCancel'          => array(array($this, 'callBackForCancel'), array()),
                'callBackByWrongInput'      => array(array($this, 'callBackForWrongInput2'), array())
            );
            $this->confirmDialog('This message will be overwritten if $optionalSettings[\'confirmationMessage\'] is set.', 'NO', $settings);
	}
        
        
    /**
     * Shows confirmation message and reads users answer from command line. 
     *  
     * <b>WARNING: don't set anything if you do not want to use it, it will cause one error. <br>
     * ALL PARAMETERS ARE OPTIONAL. <br>
     * ATTENTION: all settings in array $optionalSettings have priority.</b><br>
     * 
     * <b>$optionalSettings</b> = array (<br>
     * <b>'confirmationMessage'</b>     => 'You can use %1$s as placeholder for your ""standardAnswer"".',<br>
     * <b>'standardAnswer'</b>          => $standardAnswer,<br>
     * <b>'messageByYes'</b>            => 'You can use %2$s as placeholder for users input string.',<br>
     * <b>'messageByNo'</b>             => 'Please see ""messageByYes"".',<br>
     * <b>'messageByCancel'</b>         => 'Please see ""messageByYes"".',<br>
     * <b>'messageByWrongInput'</b>     => 'Please see ""messageByYes"".',<br>
     * <b>'callBackByYes'</b>           => array (array($object, 'functionName'), array($param1, $param2, 'otherParam')), // if your callback return one value then confirmDialog return this instead of standard return of confirmDialog<br>
     * <b>'callBackByNo'</b>            => '', // can also be emppty, confirmDialog will print messageBy{yes|no|cancel} and then returns standard value for this answer.<br>
     * <b>'callBackByCancel'</b>        => 'please see ""callBackByYes"" and ""callBackByNo""',<br>
     * <b>'callBackByWrongInput'</b>    => 'please see ""callBackByYes"" and ""callBackByNo""', // if return is void then : will ask for so long, until correct entry is detected.<br>
     * <b>'infiniteLoopByWrongInput'</b> => TRUE, // if FALSE and callBackByWrongInput is void then throws \InvalidArgumentException with code 1352747275<br>
     * <b>'vsprintfVars'</b>            => array($your, $own, $vars) <br>
     * );
     * 
     * @param string $confirmationMessage = <b>'Would you like to perform this command? [yes|no|cancel] [%1$s] : '</b>
     * @param string $standardAnswer = <b>'no'</b>
     * @param array $optionalSettings <b>have priority for $confirmationMessage and $standardAnswer</b>
     * @return boolean|NULL|yourOwnType this function will return your own type if your callback returns one value and if not then callbackBy{<br>Yes returns <b>TRUE</b><br>No returns <b>FALSE</b><br>Cancel returns <b>NULL</b><br>WrongInput throws <b>\InvalidArgumentException</b><br>}.
     * @throws \InvalidArgumentException (code: 1353073679) if this function will be called with wrong settings 
     */
    protected function confirmDialog($confirmationMessage = 'Would you like to perform this command? [yes|no|cancel] [%1$s] : ', $standardAnswer = 'no', array $optionalSettings = NULL){
        // search patterns

        //| prepare and set $optionalSettings
        //| 
        //|// set needed DEFAULTSETTINGS -> can be overwritten with array $optionalSettings
        $defaultSettings = array(
            'confirmationMessage'           => $confirmationMessage,
            'standardAnswer'                => $standardAnswer,
            // by infiniteLoopByWrongInput == TRUE prints messageByWrongInput
            'messageByWrongInput'           => 'Wrong input: %2$s',
            'callBackByWrongInput'          => '',
            // set to TRUE to prevent \InvalidArgumentException by wrong input -> will cause infinite loop to the same confirm dialog. Prints ""Wrong input: %3$s"" and confirmationMessage again
            'infiniteLoopByWrongInput'      => TRUE,
            'vsprintfVars'                  => array (
                                                $standardAnswer,
                                                '' // placeholder for current users input, can be used in 'wrongInputMessage'
                                               ) 
        );

        //|//| overwrite DEFAULTSETTINGS with users SETTINGS if nacessary ($optionalSettings) 
        if ($optionalSettings === NULL) {
            $settings = $defaultSettings;
        } else {
            $settings = array_merge($defaultSettings, $optionalSettings);
        //|//|//| set 'vsprintfVars' properly -> this will force priority for entire settings array
            if (!empty($optionalSettings['standardAnswer'])) {
                $settings['vsprintfVars'][0] = $optionalSettings['standardAnswer'];
            }
        }
        // analyse developers set of $optionalSettings['standardAnswer']
        $developersStandardAnswerIsYes = preg_match(self::PATTERN_USER_INPUT_YES, $settings['standardAnswer']);
        $developersStandardAnswerIsNo = preg_match(self::PATTERN_USER_INPUT_NO, $settings['standardAnswer']);
        $developersStandardAnswerIsCancel = preg_match(self::PATTERN_USER_INPUT_CANCEL, $settings['standardAnswer']);

        // throw an exception, if this function will be called with wrong parameter
        //
        // developers standardAnswer must be set correctly and can not be empty
        $developersStandardAnswerIsCorrect = $developersStandardAnswerIsYes || $developersStandardAnswerIsNo || $developersStandardAnswerIsCancel;
        if (!$developersStandardAnswerIsCorrect) {
            throw new \TYPO3\Flow\Exception('Developer has set $settings[\'standardAnswer\'] as '.$settings['standardAnswer']. ' please set this in your code properly', 1352736688);
        }
        $messages = array();
        foreach ($settings as $key => $value) {
            // Texts validation: will trying to render defined mesage by fail developer can see it immediately
            if (preg_match('/^message/', $key) && !empty($value)) { 
                $messages[$key] = \vsprintf($settings[$key], $settings['vsprintfVars']);
            }
            // CallBack: throw an Exceptions immediately if something is wrong with callBacks 
            if (preg_match('/^callBack/', $key) && !empty($value) 
                && !method_exists($value[0][0], $value[0][1])) {
                
                throw new \InvalidArgumentException(
                        'function ""'.$value[0][1].'"" for ""'.$key.'"" not exists or can not be called.'.PHP_EOL.
                        'See: call_user_func_array()'.PHP_EOL.
                        'http://php.net/manual/en/function.call-user-func-array.php', 
                        1353073679
                );
            }
        }

        // render output for question
        $output = vsprintf($settings['confirmationMessage'], $settings['vsprintfVars']);
        echo $output.' ';
        
        $usersInput = rtrim(fgets(STDIN));
        // set 'vsprintfVars' properly
        $settings['vsprintfVars'][1] = $usersInput;
        if (empty($usersInput)) {
            $settings['vsprintfVars'][1] = $settings['standardAnswer'];
        } 
        // prepare users answer
        $userAnsweredWithYes = preg_match(self::PATTERN_USER_INPUT_YES, $usersInput) 
                || empty($usersInput) && $developersStandardAnswerIsYes;
        $userAnsweredWithNo = preg_match(self::PATTERN_USER_INPUT_NO, $usersInput) 
                || empty($usersInput) && $developersStandardAnswerIsNo;
        $userAnsweredWithCancel = preg_match(self::PATTERN_USER_INPUT_CANCEL, $usersInput)
                || empty($usersInput) && $developersStandardAnswerIsCancel;
        
        $usersInputIsCorrect = $userAnsweredWithYes || $userAnsweredWithNo || $userAnsweredWithCancel || empty($usersInput);

        if (empty($usersInput)) {
            $usersInput = $settings['standardAnswer'];
        }
        // evaluate
        if ($usersInputIsCorrect) {
            // for YES
            if ($userAnsweredWithYes) {
                if (!empty($settings['messageByYes'])) { 
                    echo vsprintf($settings['messageByYes'], $settings['vsprintfVars']).PHP_EOL;
                }
                if (!empty($settings['callBackByYes'])) {
                    $returnValueByYes = call_user_func_array($settings['callBackByYes'][0], $settings['callBackByYes'][1]);
                }
                if (isset($returnValueByYes)) {
                    return $returnValueByYes;
                }
                return true;
            }
            // for NO
            if ($userAnsweredWithNo) {
                if (!empty($settings['messageByNo'])) { 
                    echo vsprintf($settings['messageByNo'], $settings['vsprintfVars']).PHP_EOL;
                }
                if (!empty($settings['callBackByNo'])) {
                    $returnValueByNo = call_user_func_array($settings['callBackByNo'][0], $settings['callBackByNo'][1]);
                }
                if (isset($returnValueByNo)) {
                    return $returnValueByNo;
                }
                return false;
            }
            // for CANCEL
            if ($userAnsweredWithCancel) {
                if (!empty($settings['messageByCancel'])) { 
                    echo vsprintf($settings['messageByCancel'], $settings['vsprintfVars']).PHP_EOL;
                } 
                if (!empty($settings['callBackByCancel'])) {
                    $returnValueByCancel = call_user_func_array($settings['callBackByCancel'][0], $settings['callBackByCancel'][1]);
                }
                if (isset($returnValueByCancel)) {
                    return $returnValueByCancel;
                }
                return NULL;
            }
        } else { 
            // for wrong input
            if (!empty($settings['messageByWrongInput'])) { 
                echo vsprintf($settings['messageByWrongInput'], $settings['vsprintfVars']).PHP_EOL;
            }
            if (!empty($settings['callBackByWrongInput'])) {
                $returnValueByWrongInput = call_user_func_array($settings['callBackByWrongInput'][0], $settings['callBackByCancel'][1]);
            }
            if (isset($returnValueByWrongInput)) {
                return $returnValueByWrongInput;
            } 
            // throws  Exception, if developer will no infinite loops
            if (!$settings['infiniteLoopByWrongInput']) {
                throw new \InvalidArgumentException('User has made incorrect input and you have not caught this exception in your confirmation dialog.  TIPP: You can set $optionalSettings[\'infiniteLoopByWrongInput\']', 1352747275);
            }
        }
        // will give rise to infinite looping by incorrect user's input if $optionalSettings['infiniteLoopByWrongInput'] == TRUE
        return $this->confirmDialog($confirmationMessage, $standardAnswer, $settings);
    }
    
    private function callBackForYes() {
        echo 'You called '.__FUNCTION__.'().'.PHP_EOL;
    }
    private function callBackForNo() {
        echo 'You called '.__FUNCTION__.'().'.PHP_EOL;
    }
    private function callBackForCancel() {
        echo 'You called '.__FUNCTION__.'().'.PHP_EOL;
    }
    private function callBackForWrongInput() {
        echo 'You called '.__FUNCTION__.'().'.PHP_EOL;
    }
    /**
     * as you can see this function has return value
     * 
     * confirmDialog() will return calbacks return value
     */
    private function callBackForWrongInput2() {
        echo 'You called '.__FUNCTION__.'().'.PHP_EOL;
        echo 'Wrong input is not allowed, I will cancel this command.'.PHP_EOL;
        return 'blockish';
    }       

}

?></code>
</pre>"
43110,TYPO3.Flow,Bug,"",Resolved,Must have,FlowSession: renewId() looses data of existing session,Robert Lemke,Robert Lemke,2012-11-20 10:35,Session,2.0 beta 1,2012-11-19,"","",100,2012-11-19 11:59,"","",909550,"",Git 1.2 (master),"Using FlowSession, on renewing the session identifier (for example after an authenticate() call), some session data seems to get lost, most importantly the security context.

This is due to the current implementation of renewId() which loads (ie. unserializes) all current session data in order to store it to cache entries with the new session id. This effectively overwrites any security context or other session-scoped object currently in memory with the state found in the old cache entry."
43121,TYPO3.Fluid,Bug,"",Resolved,Should have,f:link.email wrong example in documentation,Tomas Norre Mikkelsen,Bastian Waidelich,2012-12-12 02:30,"",2.0 beta 1,2012-11-19,"","",100,2012-11-19 16:18,"","",910100,"",(any),"Hi,

Found and error in the documentation [1], but i don't know this is the right place to report it. 

The documentation example on f:email.link says:
<f:link.email email=""foo@bar.tld"">some custom content</f:emaillink>

it should be:
<f:link.email email=""foo@bar.tld"">some custom content</f:link.email>


[1] http://flow.typo3.org/documentation/guide/partv/fluidviewhelperreference.html#f-link-action"
43144,TYPO3.Kickstart,Feature,"",Resolved,Should have,Fix case of class names to generate,Bastian Waidelich,Bastian Waidelich,2012-12-12 02:32,"",2.0 beta 1,2012-11-20,"","",100,2012-11-20 05:52,"","",911250,"","","When specifying a model name starting with a lower case character, the generated code throws an exception.
Example from the mailing list:
<pre>
./flow3 kickstart:actioncontroller --generate-actions --generate-related Fritdrop.Webpage golfEquipment
</pre>
leads to:
<pre>
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflected class names did not match class names to reflect
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Controller\GolfEquipmentController
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Domain\Model\GolfEquipment
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Domain\Repository\GolfEquipmentRepository
12-11-18 19:56:33 11136      INFO      FLOW3                Reflected 3 emerged classes.
12-11-18 19:56:36 11136      DEBUG     FLOW3                Built AOP proxy for class ""Fritdrop\Webpage\Domain\Model\GolfEquipment"".
12-11-18 19:56:36 11136      DEBUG     FLOW3                Building DI proxy for ""Fritdrop\Webpage\Controller\GolfEquipmentController"".
12-11-18 19:56:36 11136      CRITICAL  FLOW3                Uncaught exception #1265213849 in line 142 of Packages/Framework/TYPO3.FLOW3/Classes/Object/DependencyInjection/ProxyClassBuilder.php: The object ""Fritdrop\Webpage\Domain\Repository\golfEquipmentRepository"" which was specified as a property in the object configuration of object ""Fritdrop\Webpage\Controller\GolfEquipmentController"" (automatically registered class) does not exist. Check for spelling mistakes and if that dependency is correctly configured. - See also: 20121118195633ff72d8.txt 
</pre>

Instead the exception should be thrown while executing the command or the kickstarter should automatically convert class names to UpperCamelCase"
43143,TYPO3.Kickstart,Feature,"",Closed,Should have,Fix case of class names to generate,Bastian Waidelich,Bastian Waidelich,2012-11-21 06:16,"","",2012-11-20,"","",0,2012-11-20 05:52,"","",911200,"","","When specifying a model name starting with a lower case character, the generated code throws an exception.
Example from the mailing list:
<pre>
./flow3 kickstart:actioncontroller --generate-actions --generate-related Fritdrop.Webpage golfEquipment
</pre>
leads to:
<pre>
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflected class names did not match class names to reflect
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Controller\GolfEquipmentController
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Domain\Model\GolfEquipment
12-11-18 19:56:33 11136      DEBUG     FLOW3                Reflecting class Fritdrop\Webpage\Domain\Repository\GolfEquipmentRepository
12-11-18 19:56:33 11136      INFO      FLOW3                Reflected 3 emerged classes.
12-11-18 19:56:36 11136      DEBUG     FLOW3                Built AOP proxy for class ""Fritdrop\Webpage\Domain\Model\GolfEquipment"".
12-11-18 19:56:36 11136      DEBUG     FLOW3                Building DI proxy for ""Fritdrop\Webpage\Controller\GolfEquipmentController"".
12-11-18 19:56:36 11136      CRITICAL  FLOW3                Uncaught exception #1265213849 in line 142 of Packages/Framework/TYPO3.FLOW3/Classes/Object/DependencyInjection/ProxyClassBuilder.php: The object ""Fritdrop\Webpage\Domain\Repository\golfEquipmentRepository"" which was specified as a property in the object configuration of object ""Fritdrop\Webpage\Controller\GolfEquipmentController"" (automatically registered class) does not exist. Check for spelling mistakes and if that dependency is correctly configured. - See also: 20121118195633ff72d8.txt 
</pre>

Instead the exception should be thrown while executing the command or the kickstarter should automatically convert class names to UpperCamelCase"
43190,TYPO3.Flow,Bug,"",Accepted,Should have,Misleading exception message for incompatible database structure,Robert Lemke,Karsten Dambekalns,2013-08-14 09:35,Persistence,2.0.1,2012-11-21,"","",0,2012-11-21 04:38,"","",913550,"",Git master,"If the database structure doesn't match the current schema (for example, if a table has not been created yet), a user is confronted with the following exception message:

<pre>
Notice: A non well formed numeric value encountered in Data/Temporary/Development/Cache/Code/Flow_Object_Classes/TYPO3_Flow_Persistence_Doctrine_Query_Original.php line 159
</pre>

On investigating the stack trace, you'll eventually find the real cause:

<pre>
34 Exception::__construct(""SQLSTATE[42S02]: Base table or view not found: 114?_example_bookshop_domain_model_book' doesn't exist"", ""42S02"")

00157:    return 0;
00158:   } catch (\PDOException $pdoException) {
00159:    throw new DatabaseConnectionException($pdoException->getMessage(), $pdoException->getCode());
00160:   }
00161:  }
</pre>

The user should get a more meaningful error message in theses cases"
43192,TYPO3.Flow,Bug,"",Accepted,Should have,findByIdentifier() for non-persisted objects not working for custom identifier properties,Karsten Dambekalns,Karsten Dambekalns,2013-05-21 07:28,Persistence,"",2012-11-21,"","",0,2012-11-21 05:55,"","",913650,"",(any),"If an object does not get it's identifier via AOP, it will not be returned ""early"" from @findByIdentifier()@.

Idea: add aspect on @Id entities, tweak @registerNewObject()@ to use know id property name"
43193,TYPO3.Flow,Feature,"",Rejected,Should have,Optimize Classloader,Christopher Hlubek,Christopher Hlubek,2012-11-21 06:27,"","",2012-11-21,"","",0,2012-11-21 06:14,"","",913700,"","","The default FileBackend does an expiration check on any call to require, which costs quite some syscalls. For the classes cache we could generally disable expiration (maybe with a backend option). For frozen packages this is already the case, but in Production a package cannot be frozen."
43194,TYPO3.Kickstart,Bug,"",Resolved,Should have,Error message about invalid package key is misleading,Bastian Waidelich,Bastian Waidelich,2012-11-21 10:35,"",2.0 beta 1,2012-11-21,"","",100,2012-11-21 06:19,"","",913750,"",(any),"When specifying an invalid package key of ""Test"" in the kickstart commands, the error message is
<pre>
Package key ""Test"" is not valid. Only UpperCamelCase with alphanumeric characters, please!
</pre>

This is misleading, the actual issue is the missing Vendor namespace"
43195,TYPO3.Flow,Bug,"",Resolved,Should have,getLocalizedFilename() chokes on paths with dots.,Karsten Dambekalns,Karsten Dambekalns,2012-11-21 11:35,I18n,2.0 beta 1,2012-11-21,"","",100,2012-11-21 07:22,"","",913800,"",Git 1.2 (master),"When a path like @resource://TYPO3.Neos/Public/JavaScript/@ is handed to @getLocalizedFilename()@, it tries to check for the existence of @resource://TYPO3.en.Neos/Public/JavaScript/@ - which breaks, unless you happen to have a package @TYPO3.en.Neos@ activated."
43200,TYPO3.Fluid,Feature,"",Resolved,Must have,Allow ResourceViewHelper to accept resource:// paths,Adrian Föder,Adrian Föder,2012-12-12 06:17,ViewHelpers,2.0 beta 1,2012-11-21,"","",100,2012-11-21 10:21,"","",914050,"","","with I92dccba6b5acd623ff33eb538e62d0682f00b95e / https://review.typo3.org/#/c/13647/, the @uri@ argument of the resource ViewHelper was removed. However, it turned out that there is still the need of a way to use @resource://...@ uris for pointing to resources.

Talking on IRC with Karsten and Aske, we said the already present @path@ argument should be extended to accept also @resource://..@ uris."
43236,TYPO3 Flow Base Distribution,Bug,"",Resolved,Must have,"f:security.ifHasRole role =""..."" does not recognize the right role ",Jan Greth,"",2012-12-12 03:26,"","",2012-11-22,"","",100,2012-11-22 12:24,"","",915850,"",FLOW3 1.1.0,"Hey everyone!

I think there is a difference between the <f:security.ifHasRole role=""..."">-ViewHelper in TYPO3 Flow v 1.0.6 and 1.1.0 .
'Cause my problem is this: I tried to do the Registration and Login Guide on layh.com 
([[http://www.layh.com/work/typo3-flow-typo3-fluid/tutorials/flow-registration-and-login.html]])

Everything works fine - except one thing: Inside the Index Template, there should be a decision 
between two possibilities: On the one hand beeing logged in (role = ""Visitor""), then show logout link or you
are not logged in, then show log in form.
This should be done by using:

<pre>
...
<f:security.ifHasRole role=""Visitor"">
  <f:then>
    <!-- Logout Link -->
  </f:then>
  <f:else>
	<!-- Log in form -->
  </f:else>
</f:security.ifHasRole>
...
</pre>

But this does not work. The log in form is always showed.
OK, i cheked the Database. Everything fine. User was created and has the right role.
e.g.:

<pre>
#	flow3_persistence_identifier	party	accountidentifier	authenticationprovidername credentialssource	creationdate	expirationdate	roles
1	'202b0f71-d36c-4900-b0b9-59569aff273d'	NULL	'jan'	'DefaultProvider' 'bcrypt=>$2a$14$gzVFpOIPsClcLqM4ZrJA1.cn1umi8JONXVZ2v41xLwsiUvzYEQfQK'	'2012-11-21 11:03:26'	NULL	'a:1:{i:0;s:7:""Visitor"";}'
</pre>

Then i tried replacing the f:security.ifHasRole by f:security.ifAuthenticated -> that works fine.

So i added the following:
LoginController - indexAction:
<pre>
	$account = $this->securityContext->getAccount()->getRoles();
	if($this->securityContext->hasRole('Visitor')){
			$isset = 'Is set!';
	}else{
			$isset = 'Is not set!';
	}
	$this->view->assign('roles', $account);
	$this->view->assign('isset', $isset);
</pre>

Index.html:
<pre>
	<f:section name=""Title"">
		<ul>
			<f:for each=""{roles}"" as=""role"">
				<li>Role: {role}</li>
			</f:for>
		</ul>
		Is set? -> {isset}
	</f:section>
</pre>

I got the following output:
	Role: Visitor
	Is set? -> Is not set!
	
But I know it is set in the DB and as I see using the f:security.ifAuthenticated ViewHelper, 
Logging in works also. All this happens when running the code on Flow 1.1.0.
When I copy the exact somae code onto a Flow 1.0.6 - it works! Both!
The f:security.ifAuthenticated and the f:security.ifHasRole !

But I want to use 1.1.0 - so what can there be wrong? 

Here my complete code:	
Settings.yaml: [[http://pastebin.com/b1H073fX]]
LoginController.php: [[http://pastebin.com/2Avz9ib7]]
Index.html: [[http://pastebin.com/MXF65WF7]]

Greetings,
Jan"
43247,TYPO3.Flow,Feature,"",Closed,Could have,Request respects format,Carsten Bleicker,Bastian Waidelich,2013-09-05 05:17,Error,"",2012-11-23,"","",0,2012-11-23 07:53,"","",916400,"","","hi folks,
right at this point i am thinking about a REST Service.
And i asked myself: Shouldn't also exceptions/notfound/etc also returned
in the requested format (f.e. xml/json) by default? Maybe not all formats but
the most needed, json f.e.?

Found something where this happens by changing the notFoundController through yaml.
https://github.com/pankajlele/t3con12asia/blob/master/FLOW3Application/Packages/Application/Lelesys.EventsExample/Configuration/Settings.yaml
But is a systemwide change realy needed here or shouldnt it be possible to configure this
per package?

how would you deliver notFound in a REST Service and also Exceptions etc.
is it a good idea to deliver html exceptions/notfound to the rest client?


"
43346,TYPO3.Fluid,Feature,"",Under Review,Should have,Allow property mapping configuration via template,Karsten Dambekalns,Karsten Dambekalns,2013-12-16 04:14,ViewHelpers,2.1,2012-11-27,"","",0,2012-11-27 07:45,"","",921300,"","","The use case of allowing the mapping of dynamically generated fields in forms is quite common. Instead of having to use the full-scale PHP API for that, a simple configuration directly in the form would be nice."
43356,TYPO3.Fluid,Feature,"",Resolved,Should have,Allow Fluid arrays only in ViewHelper arguments,Sebastian Kurfuerst,Sebastian Kurfuerst,2012-12-07 04:35,Core,"",2012-11-27,"","",100,2012-11-27 11:53,"","",921800,"","","Allow Fluid arrays only in ViewHelper arguments

The following proposal would greatly enhance JavaScript compatibility:

Fluid Arrays are a subset of the JavaScript object syntax, making it
hard to work with them in mixed HTML/JavaScript documents. For example
before this change, the following JavaScript Object was parsed by Fluid:

	var uris = {
	  endPoint1: '{f:uri.action(?)}',
	  endPoint2: '{f:uri.action(?)}',
	};

Before this change, the above snippet resulted in the following template, as the generated array was casted to a string:

	var uris = Array

With this change, Fluid only parses arrays which are used inside
ViewHelper arguments, such that an array inside normal text is not
converted anymore.

h3. Breaking Change

This change is only breaking in very rare cases where one relied on
the inner contents of the ViewHelper being an array, f.e. if one used
the debug ViewHelper as follows:

	<f:debug>{key1: 'value1', key2: 'value2'}</f:debug>

? or if anybody wrote custom ViewHelpers which use this convention.

Relying on that would be very fragile anyways, as the insertion of a
single space character before the opening curly bracket or after the
closing one would cast the array back to a string.

ViewHelpers which were written like this should be re-written to take
the array as ViewHelper argument:

	<f:debug value=""{key1: 'value1', key2: 'value2'}"" />

"
43376,TYPO3.Flow,Feature,"",Resolved,Must have,Remote session management,Robert Lemke,Robert Lemke,2012-12-04 10:31,Session,2.0 beta 1,2012-12-01,"","",100,2012-11-28 03:51,"","",922800,0.00,"","The Flow session framework should support management of remote sessions ? that is, sessions which are located in the session storage but are not currently active and attached to the HTTP session running in the current browser.

A new SessionManager should support these operations:

- retrieve arbitrary sessions through their session identifier
- get and put data into remote sessions
- destroy remote sessions
- inspect and update the last activity timestamp of remote sessions
"
43377,TYPO3 Flow Base Distribution,Bug,"",Resolved,Should have,Running functional tests with PEAR install of phpunit fails,Rens Admiraal,Rens Admiraal,2012-11-28 10:35,- Testing -,"",2012-11-28,"","",100,2012-11-28 04:14,"","",922850,"",Git 1.2 (master),"https://review.typo3.org/#/c/16659/1 introduced a regression when phpunit is installed using PEAR. This is because the autoload.php is found in composer managed installations, but this does not ensure that phpunit is actually installed using composer too."
43387,TYPO3.Flow,Bug,"",Resolved,Should have,Aliases in property mapping configuration not observed by shouldMap(),Karsten Dambekalns,Karsten Dambekalns,2012-12-11 16:44,Property,2.0 beta 1,2012-11-28,"","",100,2012-11-28 06:36,"","",923350,"",Git 1.2 (master),This breaks the use of the wildcard because the field is not even considered for mapping.
43423,TYPO3.Kickstart,Bug,"",Resolved,Should have,Reverse use of strpos() parameters in actionControllerCommand(),Karsten Dambekalns,Karsten Dambekalns,2012-11-29 09:36,"",2.0 beta 1,2012-11-29,"","",100,2012-11-29 03:41,"","",925150,"",FLOW3 1.1.0,""
43424,TYPO3.Kickstart,Feature,"",Under Review,Should have,Support subpackage when kickstarting model & repository,Karsten Dambekalns,Karsten Dambekalns,2014-11-20 16:35,"",2.0.1,2012-11-29,"","",0,2012-11-29 04:06,"","",925200,"","","The kickstart for controllers allows the use of subpackages, this is missing for model and repository."
43457,TYPO3.Fluid,Feature,"",Closed,Should have,Cacheable partials,Bastian Waidelich,Bastian Waidelich,2013-05-07 12:44,View,"",2012-11-29,"","",0,2012-11-29 10:59,"","",926850,"","","Idea: add a new argument to the *render* ViewHelper that allows to cache a partial:
<pre>
<code class=""html"">
  <f:render partial=""SomePartial"" cache=""true"" />
</code>
</pre>

The cache identifier should be created based on a combination of the unique partial identifier & it's arguments.

*Note:* Sections could be cacheable, too"
43491,TYPO3.Flow,Feature,"",Resolved,Should have,API for touching remote sessions and tagging sessions with account,Robert Lemke,Robert Lemke,2012-12-03 09:35,Session,2.0 beta 1,2012-11-30,"","",100,2012-11-30 12:40,"","",928550,"","","* introduce touch() method for updating last activity timestamp of remote sessions
* put information about account(s) related to a session so that information can be retrieved without actually unserializing the object graph (resuming the session)"
43505,TYPO3.Flow,Bug,Feature #43376: Remote session management,Resolved,Must have,Authentication Broken,Marc Neuhaus,Robert Lemke,2012-12-04 10:31,"",2.0 beta 1,2012-12-01,"","",0,2012-12-01 11:33,"","",929200,"",Git 1.2 (master),"The '[!!!][FEATURE] Remote session management' commit seems to break Authentication/Sessions.
Tested with my Standalone Package using PersistedUsernamePasswordProvider and current Neos.
Both don't seem to persist a session to handle the logged in user."
43541,TYPO3.Flow,Bug,"",New,Should have,Incomplete classes path detection for PSR-0,Karsten Dambekalns,"",2013-08-14 09:35,Core,2.0.1,2012-12-03,"","",0,2012-12-03 04:39,"","",930950,"",Git master,"For the guzzle/guzzle package (as an example that uncovered this), our autoloading fails.

First symptom is the error @Cannot redeclare class Zend_Log in ?/Libraries/guzzle/guzzle/tests/Guzzle/Tests/Log/Zend_Log.php on line 30@ which cannot be resolved using @object.excludeClasses@ configuration. Indeed the @PackageStates.php@ contains:

<pre>    'guzzle.guzzle' => 
    array (
      'manifestPath' => '',
      'state' => 'active',
      'packagePath' => 'Libraries/guzzle/guzzle/',
      'classesPath' => 'tests/',
    ),</pre>

Note the @classesPath@ entry? this is probably caused by this part of Guzzle's composer manifest:

<pre>    ""autoload"": {
        ""psr-0"": {
            ""Guzzle\\Tests"": ""tests/"",
            ""Guzzle"": ""src/""
        }
    },</pre>"
43569,TYPO3.Flow,Feature,"",Closed,Should have,Exception Handler should respect format,Christopher Hlubek,Bastian Waidelich,2014-12-16 05:33,Error,"",2012-12-04,2013-04-13,"",0,2012-12-04 03:41,"","",932350,"","","The DebugExceptionHandler and ProductionExceptionHandler do not respect other formats than HTML in a meaningful way.

It should be possible to get syntactically correct exception / error messages in the most common formats (JSON, XML)."
43572,TYPO3.Flow,Feature,"",New,Should have,Uri should support manipulation of query arguments,Christopher Hlubek,"",2012-12-04 03:55,"","",2012-12-04,"","",0,2012-12-04 03:55,"","",932500,"","",@TYPO3\Flow\Http\Uri@ should support setting of individual query arguments or all arguments by array
43575,TYPO3.Flow,Feature,"",Resolved,Should have,AuthenticationManager logout should destroy session explicitly,Christopher Hlubek,Christopher Hlubek,2012-12-06 08:35,"","",2012-12-04,"","",100,2012-12-04 05:54,"","",932650,"","",The session is currently destroyed through a signal emitted on logout (@loggedOut@). The AuthenticationManager should check if the session is started at all and should allow signal receivers to inspect the session before destroying it.
43578,TYPO3.Flow,Feature,"",Resolved,Should have,Enable role creation through API,Karsten Dambekalns,Karsten Dambekalns,2013-04-12 08:39,Security,2.1,2012-12-04,"","",100,2012-12-04 06:31,"","",932800,"","",We need @createRole()@.
43579,TYPO3.Fluid,Bug,"",Resolved,Should have,"Layout ViewHelper says name attribute is optional, but makes it required",Henjo Hoeksma,Rens Admiraal,2012-12-12 03:18,ViewHelpers,2.0 beta 1,2012-12-04,"","",100,2012-12-04 07:20,"","",932850,"",Git 1.2 (master),""
43587,TYPO3.Flow,Bug,"",Closed,Should have,Arrays in Yaml configuration should be interleaved rather than merge/overruled,Adrian Föder,"",2015-02-10 10:43,"","",2012-12-04,"","",0,2012-12-04 10:11,"","",933250,"",Git master,"consider the following unit test for the Arrays utility class:
<pre><code class=""php"">
<?php
	/**
	 * @test
	 */
	public function arrayMergeRecursiveOverruleAugmentsNonAssociativeArrayWithoutOverwritingKeys() {
		$actual = \TYPO3\Flow\Utility\Arrays::arrayMergeRecursiveOverrule(array('foo', 'bar', 'baz'), array('one', 'more', 'time'));
		$this->assertCount(6, $actual);
	}
</code></pre>

Currently this *fails* with $actual having only three items: 'one', 'more', 'time'.

This is troublemaking especially for the @TYPO3.Flow.reflection.ignoredTags@ setting since this is a numeric array.

Having 

@ignoredTags: ['api', 'package', 'subpackage', 'license' ...@


active and adding, for example,
@ignoredTags: ['my', 'ignoredAnnotation'] ...@

will result into removing ""api"" and ""package"" from the list eventually.

"
43589,TYPO3.Flow,Bug,"",Resolved,Should have,Route defaults can be omitted when creating URIs,Bastian Waidelich,Bastian Waidelich,2012-12-11 16:44,MVC - Routing,2.0 beta 1,2012-12-04,"","",100,2012-12-04 10:12,"","",933350,"",(any),"The *intended* behavior is following:
When generating an URI using the UriBuilder, a route only matches the specified *routeValues* if they are all equal to the *defaults* of the route. So given the following route:

<pre>
<code class=""yaml"">
-
  uriPattern: 'foo'
  defaults:
    bar: 'baz'
</code>
</pre>

(@package, @controller etc left out intentionally to keep it simple)

following should be the case:

<pre>
Router::resolve(array('bar' => 'baz')); // resolves to ""foo""
Router::resolve(array('bar' => 'xyz')); // does NOT resolve
Router::resolve(array());               // does NOT resolve
</pre>

But currently *this* is the behavior:

<pre>
Router::resolve(array('bar' => 'baz')); // resolves to ""foo""
Router::resolve(array('bar' => 'xyz')); // does NOT resolve
Router::resolve(array());               // resolves to ""foo""
</pre>

Meaning: you can omit default values (if they are not part of the uriPattern).

This works fine in most cases, but it makes it quite hard to get everything right, because too many routes match and it's hard to comprehend.

I already work on a fix, but it has two drawbacks I'd like to get your feedback for:

1. It's a breaking change and you'll have to check all your routes after applying the fix..
I did that with a quite large project and most routes still worked out of the box. Except for the pagination routes:

<pre>
<code class=""yaml"">
-
  name: 'Articles with optional pagination'
  uriPattern: 'articles(/page/{--paginate.currentPage})'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'
    '--paginate':
      currentPage: '0'
      '@package': ''
      '@subpackage': ''
      '@controller': ''
      '@action': 'index'
</code>
</pre>

This route wouldn't resolve if $routeValues['--paginate']['@action?] is not set to ""index"" from now on, so I had to create an additional route:

<pre>
<code class=""yaml"">
-
  name: 'Articles with pagination'
  uriPattern: 'articles/page/{--paginate.currentPage}'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'
    '--paginate':
      '@package': ''
      '@subpackage': ''
      '@controller': ''
      '@action': 'index'

-
  name: 'Articles'
  uriPattern: 'articles'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'
</code>
</pre>

2. @action can't be omitted

The other drawback is the fallback behavior of the UriBuilder:
Currently, if you don't specify @package the package of the current request is used. The same for @subpackage and @controller (that's why <f:link.action action=""foo"" /> links to the fooAction of the current controller.
For @action it's different currently: If you don't specify it, the @action is not set in the $routeValues.
Because of the current behavior a route specifying the @action will still resolve. With the fix that wouldn't be the case anymore..
I see two solutions:

A) Make the actionName argument of UriBuilder::uriFor() required (as well as the action arguments of uri.action, link.action and form.

B) Fallback to ""index"" (or detect the first action of the controller class) I'm adding this for completeness, but this would be quite error prone IMO.."
43588,TYPO3.Flow,Bug,"",Closed,Should have,Route defaults can be omitted when creating URIs,Bastian Waidelich,Bastian Waidelich,2012-12-10 07:24,MVC - Routing,2.0 beta 1,2012-12-04,"","",0,2012-12-04 10:12,"","",933300,"",(any),"The *intended* behavior is following:
When generating an URI using the UriBuilder, a route only matches the specified *routeValues* if they are all equal to the *defaults* of the route. So given the following route:

-
  uriPattern: 'foo'
  defaults:
    bar: 'baz'

(@package, @controller etc left out intentionally to keep it simple)

following should be the case:

Router::resolve(array('bar' => 'baz')); // resolves to ""foo""
Router::resolve(array('bar' => 'xyz')); // does NOT resolve
Router::resolve(array());               // does NOT resolve

But currently *this* is the behavior:

Router::resolve(array('bar' => 'baz')); // resolves to ""foo""
Router::resolve(array('bar' => 'xyz')); // does NOT resolve
Router::resolve(array());               // resolves to ""foo""

Meaning: you can omit default values (if they are not part of the uriPattern).

This works fine in most cases, but it makes it quite hard to get everything right, because too many routes match and it's hard to comprehend.

I already work on a fix, but it has two drawbacks I'd like to get your feedback for:

1. It's a breaking change and you'll have to check all your routes after applying the fix..
I did that with a quite large project and most routes still worked out of the box. Except for the pagination routes:


-
  name: 'Articles with optional pagination'
  uriPattern: 'articles(/page/{--paginate.currentPage})'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'
    '--paginate':
      currentPage: '0'
      '@package': ''
      '@subpackage': ''
      '@controller': ''
      '@action': 'index'

This route wouldn't resolve if $routeValues['--paginate']['@action?] is not set to ""index"" from now on, so I had to create an additional route:

-
  name: 'Articles with pagination'
  uriPattern: 'articles/page/{--paginate.currentPage}'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'
    '--paginate':
      '@package': ''
      '@subpackage': ''
      '@controller': ''
      '@action': 'index'

-
  name: 'Articles'
  uriPattern: 'articles'
  defaults:
    '@package':    'My.Package'
    '@controller': 'Article'
    '@action':     'index'


2. @action can't be omitted

The other drawback is the fallback behavior of the UriBuilder:
Currently, if you don't specify @package the package of the current request is used. The same for @subpackage and @controller (that's why <f:link.action action=""foo"" /> links to the fooAction of the current controller.
For @action it's different currently: If you don't specify it, the @action is not set in the $routeValues.
Because of the current behavior a route specifying the @action will still resolve. With the fix that wouldn't be the case anymore..
I see two solutions:

A) Make the actionName argument of UriBuilder::uriFor() required (as well as the action arguments of uri.action, link.action and form.

B) Fallback to ""index"" (or detect the first action of the controller class) I'm adding this for completeness, but this would be quite error prone IMO.."
43590,TYPO3.Flow,Bug,"",Resolved,Must have,Session initialization fails in functional test cases,Robert Lemke,Robert Lemke,2012-12-05 10:37,Session,2.0 beta 1,2012-12-04,"","",100,2012-12-04 10:35,"","",933400,"",Git 1.2 (master),"A functional test case relying on the session framework fails with the following error:

Fatal error: Call to a member function setCookie() on a non-object in TYPO3_Flow_Session_Session_Original.php on line 236"
43609,TYPO3.Flow,Task,"",Resolved,Should have,Add predefined constants overview to documentation appendix,Adrian Föder,Adrian Föder,2012-12-12 02:25,- Documentation -,2.0 beta 1,2012-12-05,"","",100,2012-12-05 03:06,"","",934350,"","","In Documentation, Part V: Appendixes, there should be a new page that lists the predefined constants like FLOW_PATH_ROOT, FLOW_PATH_PACKAGES etc.
An inspiration can be found here: http://php.net/manual/en/reserved.constants.php"
43617,TYPO3.Flow,Task,"",Resolved,Should have,Make ObjectAccess::getPropertyInternal() protected,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:28,Reflection,2.0 beta 1,2012-12-05,"","",100,2012-12-05 05:23,"","",934750,"","",""
43621,TYPO3.Flow,Bug,"",Under Review,Must have,Composer installer overwrites Settings.yaml.example,Christopher Hlubek,Karsten Dambekalns,2013-11-26 13:12,"","",2012-12-05,"","",0,2012-12-05 06:07,"","",934950,"",Git master,The Flow composer installer seems to overwrite an existing file in @Configuration/Settings.yaml.example@ which should not happen for custom distributions.
43629,TYPO3.Flow,Task,"",Resolved,Should have,Use \ instead of _ for entity resources in Policies,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 16:44,Security,2.0 beta 1,2012-12-05,"","",100,2012-12-05 08:06,"","",935350,"","","When defining entity resources in a Policy.yaml file, the entity type has to be the class name with \ replaced by _. The ""reason"" officially are YAML restrictions, but that is not valid.
"
43659,TYPO3.Flow,Bug,"",Resolved,Must have,Proxy class building calls __construct and initializeObject before DI objects are present,Stephan Schuler,Robert Lemke,2014-07-11 14:19,Object,2.x,2012-12-06,"","",100,2012-12-06 07:21,"","",936850,"",Git master,"Hey there.

Given the following situation:
<pre>
class ObjectA;
class ObjectB extends ObjectA;
class ObjectC extends ObjectB;
</pre>

The code of pre 1.1 did this:
<pre>

new ObjectC ();

ObjectC_Proxy::__construct(); // triggered by my code
ObjectC_Original::__construct(); // triggered autoamtically by ObjectA_Proxy::__construct(), directly addressed as parent::__construct()

ObjectB_Proxy::__construct(); // triggered autoamtically by ObjectC_Proxy::__construct(), directly addressed as parent::__construct()
ObjectB_Original::__construct(); // triggered autoamtically by ObjectC_Proxy::__construct(), directly addressed as parent::__construct()

ObjectA_Proxy::__construct(); // triggered autoamtically by ObjectB_Proxy::__construct(), directly addressed as parent::__construct()
ObjectA_Original::__construct(); // triggered autoamtically by ObjectB_Proxy::__construct(), directly addressed as parent::__construct()

ObjectC_Proxy::DI(); // Should be ObjectA_Proxy, but it's ""$this->"", so the most outer method is used. But doesn't matter because it works.
ObjectC_Original::initializeObject(); // Should be ObjectA_Original, but it's ""$this->"", so the most outer method is used. But doesn't matter, it works.

ObjectC_Proxy::DI(); // Should be ObjectB_Proxy, but it's ""$this->"", so the most outer method is used. But doesn't matter because it has nothing to do.
ObjectC_Original::initializeObject(); // Should be ObjectB_Original, but it's ""$this->"" as well.

ObjectC_Proxy::DI(); // This should really be ObjectC_Proxy. But doesn't mater, it has been called three times before
ObjectC_Original::initializeObject(); // This should really be ObjectC_Original. But doesn't mater, it has been called three times before

</pre>

The current code acts like this:
<pre>

new ObjectC ();

ObjectC_Proxy::__construct(); // triggered by my code
ObjectC_Original::__construct(); // triggered autoamtically by ObjectA_Proxy::__construct(), directly addressed as parent::__construct()

ObjectB_Proxy::__construct(); // triggered autoamtically by ObjectC_Proxy::__construct(), directly addressed as parent::__construct()
ObjectB_Original::__construct(); // triggered autoamtically by ObjectC_Proxy::__construct(), directly addressed as parent::__construct()

ObjectA_Proxy::__construct(); // triggered autoamtically by ObjectB_Proxy::__construct(), directly addressed as parent::__construct()
ObjectA_Original::__construct(); // triggered autoamtically by ObjectB_Proxy::__construct(), directly addressed as parent::__construct()

ObjectC_Original::initializeObject(); // Should be ObjectA_Original, but it's ""$this->"", so the most outer method is used. This is way to early, no DI done until now.

ObjectC_Original::initializeObject(); // Should be ObjectB_Original, but it's ""$this->"" as well. To early, too.

ObjectC_Proxy::DI(); // Now we get the correct DI, but a little to late.
ObjectC_Original::initializeObject(); // This is the first call of ObjectC_Original::initializeObject() that really acts as expected since the other two calls had no DI properties available.

</pre>

In my oppinion, the DI sould be available in __construct. So I would move the DI stuff right before __construct and introduce a boolean helper flag to avoid multiple calls of DI. In general, I would call Flow_Proxy_injectProperties seeral times but make the injected method aware of multiple calls. This should clean up the genreated __construct a little.

Please see my DependencyHierarchy*.tar.gz demo files attached. Those show tue current and past situation and demonstrate the error."
43673,TYPO3.Flow,Bug,"",Resolved,Should have,Session shutdown might keep destroyed session alive,Robert Lemke,Robert Lemke,2012-12-07 09:35,Session,2.0 beta 1,2012-12-06,"","",100,2012-12-06 10:25,"","",937550,"",Git 1.2 (master),"There's a race condition in multi-server setups regarding the session shutdown: If a session has been destroyed by a second server between start() / resume() and shutdownObject(), the shutdown method will implicitly revive the session because it writes the session entry into the storage cache without checking if the session still exists."
43819,TYPO3.Flow,Feature,"",Resolved,Should have,Support lazy dependency injection of properties,Christopher Hlubek,Christopher Hlubek,2013-03-27 08:37,"","",2012-12-09,"","",100,2012-12-10 04:57,"","",944750,"","","<pre><code>
<?php
namespace Test;

class SomeDependency {

	public function __construct() {
		echo ""Construct SomeDependency\n"";
	}

	public function foo() {
		echo ""Foo called\n"";
	}


}

class LazyProxy_Original {

	//
	// /**
	//  * @Flow\Inject(lazy=true)
	//  * @var \Test\SomeDependency
	//  */
	// protected $someProperty;

	public function doSomething() {
		for ($i = 0; $i < 4; $i++) {
			$this->someDependency->foo();
		}
		// $this->fooBar->unknown();
	}

}

class LazyProxy extends LazyProxy_Original {

	public function __construct() {
		echo ""Construct LazyProxy\n"";
	}

	function __get($name) {
		echo ""LazyProxy get($name)\n"";
		switch ($name) {
			case 'someDependency':
				$object = new SomeDependency();
				break;
			default:
				trigger_error(
            		'Undefined property via __get(): ' . $name,
            		E_USER_NOTICE);
				return NULL;
		}
		$this->{$name} = $object;
		return $object;
	}

}


$lazy = new LazyProxy();
$lazy->doSomething();

?>
</code></pre>"
43822,TYPO3 Flow Base Distribution,Task,"",Resolved,Must have,Remove versions from composer manifests,Karsten Dambekalns,Karsten Dambekalns,2012-12-11 04:29,"",2.0 beta 1,2012-12-10,"","",100,2012-12-10 06:00,"","",944900,"","","To allow for versions to be read from git tags, the version fields in manifests must be removed."
43832,TYPO3.Flow,Feature,"",Resolved,Should have,Taggable Sessions,Robert Lemke,Robert Lemke,2012-12-11 16:42,Session,2.0 beta 1,2012-12-10,"","",100,2012-12-10 08:41,"","",945400,"","","It would be great if a session could be tagged with arbitrary labels and retrieved by tags afterwards. That way it would be possible to find a (remote) session of anyone with a specific account, customer number or similar data."
43839,TYPO3.Flow,Task,"",Resolved,Should have,"Replace references to ""Flow 1.2""",Bastian Waidelich,Bastian Waidelich,2012-12-10 15:15,"",2.0 beta 1,2012-12-10,"","",100,2012-12-10 10:15,"","",945750,"","","Some deprecation doc comments refer to ""Flow 1.2"", but the correct version is 2.0"
43841,TYPO3.Flow,Feature,"",New,Should have,Add package support to validation errors,Marco Falkenberg,"",2012-12-10 10:20,"","",2012-12-10,"","",0,2012-12-10 10:20,"","",945850,"","","Right now it's not possible to display translated validation errors thrown from validators out of more than one package, because you have to hard-code the package name in the translation viewhelper when displaying the errors. This would be very useful, so you do not have to merge translations from the core packages into you customized language file and keep track of changes. AFAIK there also is no support for inheritence in the XLIFF-specs.

A possible solution could be, to extend the validation with a package name when calling 'addError' on the validation provider. Then you do something like this:

<pre>
<f:form.validationResults for=""{property}"">
    <f:for each=""{validationResults.errors}"" as=""error"">
       {error -> f:translate(key: error.code, arguments: error.arguments, package: error.packageName, source: 'ValidationErrors')}
    </f:for>
</f:form.validationResults>
</pre>"
43903,TYPO3.Flow,Feature,"",Resolved,Should have,CurlEngine should support setting of options,Karsten Dambekalns,Karsten Dambekalns,2013-08-01 08:14,Http,2.1,2012-12-12,"","",100,2012-12-12 04:19,"","",948950,"","","To use a proxy with the CurlEngine, one currently has to hack the options directly into the code."
43908,TYPO3.Kickstart,Bug,"",Resolved,Must have,wrong class name of kickstarted Command controllers,Thomas Mammitzsch,Karsten Dambekalns,2013-03-19 11:37,"",2.0,2012-12-12,"","",100,2012-12-12 05:28,"","",949200,"",Git master,"./flow kickstart:commandcontroller Acme.Demo Dosomething

results in creating DosomethingController.php with class DosomethingController 
but it must be DosomethingCommandController.php with class DosomethingCommandController"
43930,TYPO3.Flow,Task,"",Needs Feedback,Should have,Remove canRender() completely?!,Karsten Dambekalns,Sebastian Kurfuerst,2012-12-18 09:09,"","",2012-12-12,"","",0,2012-12-12 15:10,"","",950300,"","","Since it is no longer used by Flow, can @canRender()@ be removed completely? Seems pretty useless as it is?"
43947,TYPO3.Flow,Bug,"",New,Should have,Redirect to login after Session timeout,Marc Neuhaus,"",2012-12-13 06:35,"","",2012-12-13,"","",0,2012-12-13 05:41,"","",951150,"",Git master,"Currently i'm getting an '#1216919280: You are not allowed to perform this action.' when my session times out.
http://dl.dropbox.com/u/314491/Screenshots/0i.png

I'd expect to be redirected to the Loginscreen, when my Session times out."
43948,TYPO3.Flow,Bug,"",Resolved,Must have,Core migration tool halts on packages having no Configuration directory,Adrian Föder,Karsten Dambekalns,2013-01-09 06:07,- Migrations -,2.0,2012-12-13,"","",100,2012-12-13 06:16,"","",951200,"",Flow 2.0.0 beta 1,"as it's the case in the TYPO3.Media package for example, packages having no ""Configuration"" directory, http://git.typo3.org/FLOW3/Packages/TYPO3.Media.git/tree/master, make the core migration tool halt with an exception message:

<pre>
PHP Fatal error:  Uncaught exception 'TYPO3\Flow\Utility\Exception' with message '""C:/Users/afoeder/PhpstormProjects/acme/Distribution/Packages\Application\TYPO3.Media/Configuration"" is no directory.' in C:\Users\afoeder\PhpstormProjects\acme\Distribution\Packages\Framework\TYPO3.Flow\Classes\TYPO3\Flow\Utility\Files.php:84
Stack trace:
#0 C:\Users\afoeder\PhpstormProjects\acme\Distribution\Packages\Framework\TYPO3.Flow\Scripts\Migrations\AbstractMigration.php(266): TYPO3\Flow\Utility\Files::readDirectoryRecursively('C:/Users/afoede...', 'yaml', true)
#1 C:\Users\afoeder\PhpstormProjects\acme\Distribution\Packages\Framework\TYPO3.Flow\Migrations\Code\Version201212051340.php(38): TYPO3\Flow\Core\Migrations\AbstractMigration->processConfiguration('Policy', Object(Closure), true)
#2 C:\Users\afoeder\PhpstormProjects\acme\Distribution\Packages\Framework\TYPO3.Flow\Scripts\Migrations\Manager.php(129): TYPO3\Flow\Core\Migrations\Version201212051340->up()
#3 C:\Users\afoeder\PhpstormProjects\acme\Distribution\ in C:\Users\afoeder\PhpstormProjects\acme\Distribution\Packages\Framework\TYPO3.Flow\Scripts\Migrations\Manager.php on line 133
</pre>"
43960,TYPO3.Flow,Bug,"",Resolved,Should have,Memcache and APC backend must expose prefixed cache identifier,Dominique Feyer,Dominique Feyer,2013-01-15 04:38,Cache,2.1,2012-12-13,"","",100,2012-12-13 09:54,"","",951800,"",Git master,"I case where we need to share cache between different application, it's need to access the prefixed identifier to allow the other application to access the cache entry."
43966,TYPO3.Flow,Feature,Work Package #45088: Improved REST support,Resolved,Should have,Allow all routes to include sub routes,Bastian Waidelich,Bastian Waidelich,2013-09-23 08:22,MVC - Routing,"",2012-12-13,"","",100,2012-12-13 10:44,"","",952100,"","","Sub routes are currently only resolved in the global *Configuration/Routes.yaml* file.
It would be nice if sub routes could include sub routes them selves.
This also requires us to be able to specify a path.

The syntax could be similar to:
<pre>
<code class=""yaml"">
-
  # loads sub routes from My.Package/Configuration/Routes.yaml
  uriPattern: '<SomeSubroutes>'
  subRoutes:
    SomeSubroutes:
      package: My.Package
-
  # loads sub routes from Other.Package/Configuration/RestRoutes.yaml
  uriPattern: '<SomeSubroutes>'
  subRoutes:
    SomeSubroutes:
      package: Other.Package
      filename: RestRoutes.yaml
</code>
</pre>
"
43967,TYPO3.Flow,Bug,"",New,Should have,Error in evaluating orphanRemoval in Flow Annotation driver,Tarcisio Fedrizzi,"",2013-01-03 05:00,Persistence,"",2012-12-13,"","",0,2012-12-13 10:45,"","",952150,"",(any),"There is what I consider an error in the code that evaluates the orphanRemoval flag.
The code is the following (I renumbered the rows for convenience):
<pre>
1. if ($oneToManyAnnotation->orphanRemoval) {
2.         $mapping['orphanRemoval'] = $oneToManyAnnotation->orphanRemoval;
3. } elseif ($this->isAggregateRoot($mapping['targetEntity'], $className) === FALSE) {
4.         $mapping['orphanRemoval'] = TRUE;
5. }
</pre>
In my opinion row 1 should be instead:
<pre>
1. if (isset($oneToManyAnnotation->orphanRemoval)) {
</pre>
Otherwise the fact of not being an aggregate root would make the orphanRemoval flag always
TRUE despite of the value of the annotation specified on the attribute.
This is especially true because the orphanremoval attribute is of type boolean.

Moreover, in my opinion, other similar lines like:
<pre>
if ($oneToOneAnnotation->cascade) {
</pre>
would be more clearly and safely written as:
<pre>
if (isset($oneToOneAnnotation->cascade)) {
</pre>"
43993,TYPO3.Flow,Task,"",New,Should have,Warn when no migrations are found at all during doctrine:migrate,Karsten Dambekalns,"",2012-12-14 03:30,Persistence,"",2012-12-14,"","",0,2012-12-14 03:30,"","",953450,"","","If (e.g. when using SQLite) no migrations exist, don't just say ""yep, done, success"" but warn that there are no migrations."
44000,TYPO3.Flow,Bug,"",Resolved,Must have,Flow CLI on Windows does not work anymore,Adrian Föder,Bastian Waidelich,2013-03-27 08:37,Cli,"",2012-12-14,"","",100,2012-12-14 05:10,"","",953800,"",Git master,"when calling @flow@ on Windows (on the native @cmd@ shell), the following occurs:
<pre>
Flow: Invalid root path. (Error #1248964375)
""/"" does not lead to
""C:/Users/afoeder/PhpstormProjects/acme/Distribution/Packages/Framework/TYPO3.Flow/""
</pre>

"
44022,TYPO3 Flow Base Distribution,Task,"",Resolved,Must have,Remove Jenkins as composer repository from 2.0 branch,Karsten Dambekalns,Karsten Dambekalns,2013-01-15 04:37,"",2.0,2012-12-14,"","",100,2012-12-14 11:17,"","",954850,"","","The use of the Jenkins' Satis leads to misleading ""number of installs"" on packagist.org"
44049,TYPO3.Flow,Bug,"",Resolved,Must have,runDql() method in Doctrine\Service handles constant incorrectly,Adrian Föder,Adrian Föder,2012-12-17 08:36,Persistence,2.0,2012-12-17,"","",100,2012-12-17 06:51,"","",956200,"",Git master,"The method looks like
<pre><code class=""php"">
	public function runDql($dql, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT, $firstResult = NULL, $maxResult = NULL) {
		...

		return $query->execute(array(), constant($hydrationMode));
	}
</code></pre>

Since $hydrationMode is obviously intended to be a constant, hence an integer, the invokation of constant($hydrationMode) results appopriately in @ Warning: constant(): Couldn't find constant 2 @

This never seems to happen in usual context because it's passed as a string in the Command."
44078,TYPO3 Flow Base Distribution,Task,"",New,Should have,Probably false behavior in symlinked environment,Thomas Hempel,"",2012-12-18 07:17,"","",2012-12-18,"","",0,2012-12-18 04:39,"","",957650,"","","Hi,

I just tried to setup TYPO3 Flow where the sources where symlinked somewhere else. I my setup looked like this:

<pre>
- Flow_Base_Distribution_Clone (installed with composer)

- DocumentRoot
-- Flow_src -> Flow_Base_Distribution_Clone
-- Build
-- Configuration
-- Data
-- Packages
--- Application
---- MyPackage -> SYMLINK to somewhere else
--- Framework -> Flow_src/Packages/Framework
--- Libraries -> Flow_src/Packages/Libraries
-- bin -> Flow_src/bin
-- Web -> Flow_src/Web
-- flow -> Flow_src/flow
</pre>

This basically works but it shows at least two weird behaviors

* The ""Data"" folder of Flow_Base_Distribution_Clone is used instead of the local one. (Clearing this didn't solve the routing problem btw)
* I removed the Welcome package (package:delete) but it still had some default route somewhere that catched any request

Maybe this setup is weird but I think there might be valid use-cases for this. Someone might wanna look into this so Flow can throw a warning if unsupported symlinks are used. Moving anything to the document root solved all problems.

If you have any questions, kust let me know.


Greets,
Thomas
"
44087,TYPO3.Flow,Bug,"",Resolved,Must have,Call to a member function setCookie(),Kien Phuoc Ma,Robert Lemke,2013-04-05 14:37,Session,"",2012-12-18,"","",100,2012-12-18 06:33,"","",958100,"",Git master,"i got a Fatal Error: Call to a member function setCookie()

use by

	try { $this->authenticationManager->authenticate();
			error_log('LOGGED_IN');

		} catch (\TYPO3\Flow\Security\Exception\AuthenticationRequiredException $exception) {
			error_log('LOGIN_FAILURE');

		}


"
44086,TYPO3.Flow,Bug,"",Closed,Must have,Call to a member function setCookie(),Kien Phuoc Ma,Bastian Waidelich,2012-12-24 07:05,Session,"",2012-12-18,"","",0,2012-12-18 06:33,"","",958050,"",Git master,"i got a Fatal Error: Call to a member function setCookie()

use by

	try { $this->authenticationManager->authenticate();
			error_log('LOGGED_IN');

		} catch (\TYPO3\Flow\Security\Exception\AuthenticationRequiredException $exception) {
			error_log('LOGIN_FAILURE');

		}


"
44088,TYPO3.Flow,Task,"",Closed,Should have,Update CLDR data to current version,Karsten Dambekalns,Karsten Dambekalns,2015-02-16 12:22,I18n,"",2012-12-18,"",1.00,0,2012-12-18 07:41,"","",958150,"","",The CLDR data in the Resources folder is currently from 2012. An upgrade to the current version will a) ensure current locale data and b) make sure we have adjusted (if needed) to any changes in CLDR data.
44123,TYPO3.Flow,Feature,"",New,Should have,"Make the ""Flow requires the PHP setting ""date.timezone"""" error more beautiful",Ernesto Baschny,"",2013-12-24 19:55,"","",2012-12-19,"","",0,2012-12-19 10:14,"","",959800,"","","My first impression with Flow/Neos a very unstylish ""echo"" error message with a die():

  Flow requires the PHP setting ""date.timezone"" to be set. (Error #1342087777)

This was introduced in #37438. The default ""date.timezone"" is empty in most distributions, so I guess there will be others facing the same first impression.

My suggestion would be to make this error message more ""stylish"" and give some more help about how to / where change it (you use to give paths for Debian-like people). It should look more like the exceptions found later on.

On a more broader question: Why is this date.timezone required by the ""Bootstrap"" already? I suppose Flow has many other ""PHP dependencies"" (required settings, required loaded modules, required permissions etc), which should all be checked in this first installation step anyway. There is a step in /setup which tells me ""Your environment seems suited for bla bla"" and then redirects to a further step. Wouldn't this be a better place to check for this dependency?
"
44139,TYPO3.Flow,Bug,"",Resolved,Must have,UriBuilder includes all arguments of namespaced sub request,Aske Ertmann,"",2013-08-24 09:49,MVC - Routing,2.0.1,2012-12-19,"","",100,2012-12-19 18:03,"","",960600,"",Git master,"When creating a link in a sub request using argument namespace the arguments of the current sub request is added to all links even though addQueryString is not set. This happens because the logic removing them were removed when fixing #42770. The problem is that fix removes the current arguments for sub requests correctly, but when the arguments of the parent request are added it adds those namespaced arguments which actually belong to the sub request again."
44140,TYPO3.Fluid,Bug,"",Resolved,Should have,Unlucky JavaScript syntax can break inline tags,Aske Ertmann,"",2014-04-03 07:29,ViewHelpers,"",2012-12-20,"","",0,2012-12-19 18:37,"","",960650,"",Git master,"After troubleshooting a problem with econic, we have found an issue that can break the parsing of inline tags. The problem originated from using JavaScript in a template, which broke all inline view helpers after the JavaScript. After boiling down to the core problem, it seems that it doesn't have anything to do with the JavaScript itself but instead using {} and indentation.

The original issue source: http://pastebin.com/pkCjwUHd

Snippets for reproducing the problem:
https://gist.github.com/4341615
https://gist.github.com/4341668

In my case I needed at least 16 tabs or 16 spaces for it to break, but econic only needed 13.

The result in both cases is:
{collection -> f:count()}
{f:count(subject: collection)}
0"
44148,TYPO3.Flow,Bug,"",New,Should have,Documentation for executeCommand() needs clarification,Karsten Dambekalns,"",2013-08-14 09:35,"",2.0.1,2012-12-20,"","",0,2012-12-20 05:00,"","",961050,"",FLOW3 1.1.0,The documentation at http://flow.typo3.org/documentation/guide/partiii/commandline.html#executing-sub-commands needs clarification: the passed settings must be the Flow settings.
44149,TYPO3.Flow,Feature,"",Closed,-- undefined --,getIdentifierByObject for POP-Objects,Benno Weinzierl,Bastian Waidelich,2013-08-14 10:08,Persistence,"",2012-12-20,"","",0,2012-12-20 06:16,"","",961100,"","","PersistenceManager::getIdentifierByObject() currently returns NULL if you pass it a ""non-entity"", thus PersistenceManager::convertObjectToIdentityArray() throws an exception if the array contains such object.
This feature request suggests to make it possible to retrieve a unique id for arbitrary Plain Old PHP objects.

h3. *NOTE*

I moved this issue from the Fluid tracker. It had the subject *Usage of Session Scope Objects as arguments in f:link.action should be possible* but is rather an ""issue"" of the persistence.
I'm not convinced that such feature would make sense yet, but I wanted to get some more input before rejecting it.

*Here the original description:*

When trying to use a session scope object as argument in f:link.action viewhelper i get the following Error:

#1302628242: The given object is unknown to the Persistence Manager.

It sould be possible to use Session Scope Obejcts (or objects stored inside them) as arguments because they are persisted in session scope. 

Here is a example:
I have a ShopingBasket with scope=session with BasketItems stroed inside. Now i want to create a delete link for a BasketItem. This is not possible without using a self implemented id at the moment."
44157,TYPO3.Flow,Feature,"",Resolved,Should have,Object configuration should imply annotated object name,Adrian Föder,Adrian Föder,2015-02-11 08:30,Object,"",2012-12-20,"","",100,2012-12-20 09:06,"","",961500,"","","consider the following use case:

<pre><code class=""php"">
/**
 * @Flow\Scope(""singleton"")
 */
class FooService {

    /**
     * @var \TYPO3\Flow\Monitor\FileMonitor
     */
    protected $fileMonitor;
}
</code>
<code class=""yaml"">
Acme\Acme\FooService:
  properties:
    fileMonitor:
      object:
#        name: TYPO3\Flow\Monitor\FileMonitor
        arguments:
          1:
            value: 'MyPackage_MonitorIdentifier'
</code>
</pre>

When running this way, Flow complains
<pre>
  Uncaught Exception
    Object configuration for property ""fileMonitor"" contains neither
    object name nor factory object name in configuration of package ...
</pre>

So, the commented line in the yaml above becomes necessary, however I think the default object name in this case should still be the annotated one.

Do you agree on this?"
44184,TYPO3.Flow,Bug,"",New,Should have,Request arguments are not merged correctly for single object actions,Bastian Waidelich,"",2013-08-14 09:35,MVC,2.0.1,2012-12-21,"","",0,2012-12-21 07:26,"","",962850,"",Git master,"Following szenario:

I try to update a single entity via PUT:
<pre>
curl -i -H ""Accept: application/xml"" -H ""Content-Type: application/xml"" -X POST -d ""<root><product><title>changed title</title></product></root>"" http://localhost/products/2a7a6fd9-fa6f-47e2-8976-7c8308a96e4c
</pre>

This won't merge the changed product title correctly, because in Router::route() the request & routing arguments are merged via Arrays::arrayMergeRecursiveOverrule(). the routing array with array('product' => array('title' => 'changed title')) is then overridden by array('product' => '<the product UUID>'));

This works, when using the ""object routes"" (IdentityRoutePart) because that returns an array in the form array('__identity' => '<UUID>') which can be merged."
44185,TYPO3.Flow,Bug,"",New,Should have,XML body always need a root node,Bastian Waidelich,"",2013-08-14 09:35,MVC,2.0.1,2012-12-21,"","",0,2012-12-21 07:26,"","",962900,"",Git master,"If the request contains xml and the Content-Type header is set to ""*/xml"" the client currently has to surround the XML with an additional root node (which is basically ignored):

<pre>
curl -i -H ""Accept: application/xml"" -H ""Content-Type: application/xml"" -X POST -d ""<anything><product><title>foo</title></product></anything>"" http://localhost/products
</pre>

Instead the root node should be omitted:
<pre>
curl -i -H ""Accept: application/xml"" -H ""Content-Type: application/xml"" -X POST -d ""<product><title>foo</title></product>"" http://localhost/products
</pre>


This could be achieved by replacing
<pre>
<code class=""php"">
$xmlElement = new \SimpleXMLElement(urldecode($body), LIBXML_NOERROR);
</code>
</pre>
with
<pre>
<code class=""php"">
$xmlElement = new \SimpleXMLElement('<root>' . urldecode($body) . '</root>', LIBXML_NOERROR);
</code>
</pre>

in Http\Request::decodeBodyArguments()."
44186,TYPO3.Flow,Bug,"",New,Should have,Request does not accept custom Content-Type,Bastian Waidelich,"",2013-08-14 09:35,MVC,2.0.1,2012-12-21,"","",0,2012-12-21 07:29,"","",962950,"",Git master,"Http\Request::decodeBodyArguments() currently only correctly detects content type headers in the form ""*/<format>"".
It should also support Content Types in the format *application/vnd.foo.bar.baz+<format>* IMO"
44202,TYPO3.Flow,Bug,"",Resolved,Must have,$session->start() initializes a new session and does not resume a current one,Helmut Hummel,Robert Lemke,2013-04-05 14:37,Session,2.0,2012-12-22,"","",100,2012-12-22 14:50,"","",963750,"",Flow 2.0.0 beta 1,"Disclaimer: I did not test anything, but only making assumptions by reading the code. Just close this ticket if I'm mistaken.

When introducing the new session handling in #43376 the ""start"" method of the session object changed it's notion.


Before ""start"" initialized a new session or resumed an existing one
<pre>
	public function start() {
		if ($this->started === FALSE) {
			$this->startOrResume();
		}
	}
</pre> 


Now the start method clearly initializes a completely new session:

<pre>
	public function start() {
		if ($this->request === NULL) {
			$this->initializeHttpAndCookie();
		}
		if ($this->started === FALSE) {
			$this->sessionIdentifier = Algorithms::generateRandomString(32);
			$this->storageIdentifier = Algorithms::generateUUID();
...
</pre>

This is a severe change in behaviour, which at least breaks the @Flow\Session(autoStart=true) annotation, because the LazyLoadingAspect explicitly calls $this->session->start();

<pre>
	public function initializeSession(\TYPO3\Flow\Aop\JoinPointInterface $joinPoint) {
		if ($this->session->isStarted() === TRUE) {
			return;
		}

		$objectName = $this->objectManager->getObjectNameByClassName(get_class($joinPoint->getProxy()));
		$methodName = $joinPoint->getMethodName();

		$this->systemLogger->log(sprintf('Session initialization triggered by %s->%s.', $objectName, $methodName), LOG_DEBUG);
		$this->session->start();
	}
</pre>

These methods will never get a resumed session, but always a fresh one.

P.S.: I cannot select the ""Session"" category, but only Documentation, Testing and Build Process. Maybe you should check the project permissions."
44203,TYPO3.Flow,Bug,"",Needs Feedback,Should have,Session implementation is still racy,Helmut Hummel,Robert Lemke,2013-08-14 09:35,Session,2.0.1,2012-12-22,"","",0,2012-12-22 15:22,"","",963800,"",Flow 2.0.0 beta 1,"Disclaimer: I did not test anything, but only making assumptions by reading the code. Just close this ticket if I'm mistaken.

Just want to make you aware that the session handling introduced in #43376 is racy.
The old session handling relied on the basic PHP session implementation. This is protected against concurrent requests.
Consider this simple script:

<pre>
<?php
<?php
session_start();
var_dump($_SESSION);

if (!empty($_GET['test'])) $_SESSION['test'] ++;

if (!empty($_GET['sleep'])) sleep(15);

var_dump($_SESSION);</pre>

When you call it first with <code>http://localhost/session.php?test=1&sleep=1</code> and in a second tab with <code>http://localhost/session.php?test=1</code> The second request waits on session_start() until the first request is completed. This ensures consistent session data over multiple concurrent requests, which are quite common especially when using asynchronous Ajax calls.

PHP obviously does locking for sessions, the new session implementation of Flow does not (or the locking code is somewhere well hidden ;)

Maybe that's not a big deal (the session implementation of TYPO3 CMS is also racy as hell and still does it's job most of the time), but I wanted to let you know that this could cause troubles especially in Neos..."
44234,TYPO3.Fluid,Bug,"",Under Review,Should have,selectViewHelper's sorting does not respect locale collation,Anja Leichsenring,"",2014-07-31 11:15,ViewHelpers,2.1,2012-12-27,"","",0,2012-12-27 08:47,"","",965300,"",Git master,"extbase fluid goes fixing this bug (find the issue at http://forge.typo3.org/issues/43445), this should be the same for Package Fluid."
44235,TYPO3.Fluid,Feature,"",Resolved,Should have,prependOption for SelectViewHelper,Anja Leichsenring,Bastian Waidelich,2013-03-07 05:36,ViewHelpers,2.1,2012-12-27,"","",100,2012-12-27 09:20,"","",965350,"","","There is a continous demand for prepending the options list of a select box with a kind of 'empty' option.
Extbase fluid aims to provide this feature, find the ticket here: http://forge.typo3.org/issues/26595"
44244,TYPO3.Flow,Bug,"",New,Should have,defaultOrderings aren't applied on related objects,Martin Brüggemann,"",2013-01-09 12:41,Persistence,"",2012-12-28,"","",0,2012-12-28 11:26,"","",965800,"",Flow 2.0.0 beta 1,"I tried to load objects and their related subobjects and put them out within a fluid template. Unfortunately the subobjects had the wrong sorting - even after having set the $defaultOrderings variable in the subobjects repository correctly. The only workaround that works is setting the following ORM-option in the subobjects model:

<pre>
* @ORM\OrderBy({""date"" = ""DESC""})
</pre>

"
44250,TYPO3.Fluid,Bug,"",Resolved,Must have,Broken paginator widget - explicit definition of action-argument is required,Martin Brüggemann,Karsten Dambekalns,2013-01-28 05:28,Widgets,2.0,2012-12-29,"","",100,2012-12-29 09:23,"","",966100,"",Flow 2.0.0 beta 1,"Some changes in TYPO3.Flow and the UriBuilder require to explicitly define an action when building an Uri. The paginator widget hasn't been modified to this new requirement and fails to work like before. The error message looks like this:

<pre>
TYPO3_Fluid_ViewHelpers_Widget_LinkViewHelper_Original.php: The URI Builder could not build a URI linking to an action controller because no action name was specified. Please check the stack trace to see which code or template was requesting the link and check the arguments passed to the URI Builder.
</pre>"
44258,TYPO3.Flow,Feature,"",Resolved,Should have,Set packageType when creating new package,Soren Malling,Soren Malling,2013-04-05 11:36,Package,"",2012-12-30,"","",100,2012-12-30 11:51,"","",966500,"","","When calling packageManager->createPackage you have no way to define what package type you are creating.

By adding a fourth argument ""packageType"" with a default value to ""typo3-flow-package"" one can use createPackage to create ""Sites"" and similar. The TYPO3.SiteKickstart package is lacking this feature, and sites are created in the Sites folder but in the composer manifest it's named ""typo3-flow-package"".

The package type information can either be put to the MetaData ( {get|set}PackageType() )object passed around or as a argument (mentioned above).

First patchset will be pushed later for discussion"
